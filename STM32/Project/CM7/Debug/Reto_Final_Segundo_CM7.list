
Reto_Final_Segundo_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b550  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e00  0800b7f0  0800b7f0  0001b7f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5f0  0800c5f0  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c5f0  0800c5f0  0001c5f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c5f8  0800c5f8  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5f8  0800c5f8  0001c5f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c5fc  0800c5fc  0001c5fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  24000000  0800c600  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001800  240001d8  0800c7d8  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240019d8  0800c7d8  000219d8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020206  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d5c5  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034e9  00000000  00000000  0003d80e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017c8  00000000  00000000  00040cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012a0  00000000  00000000  000424c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003c0b3  00000000  00000000  00043760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001edd8  00000000  00000000  0007f813  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00188c7d  00000000  00000000  0009e5eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000079d0  00000000  00000000  00227268  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0022ec38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b7d8 	.word	0x0800b7d8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	0800b7d8 	.word	0x0800b7d8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 baba 	b.w	800091c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f950 	bl	8000654 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__mulsc3>:
 80003c0:	ee60 6a01 	vmul.f32	s13, s0, s2
 80003c4:	ee20 6aa1 	vmul.f32	s12, s1, s3
 80003c8:	ee20 5a21 	vmul.f32	s10, s0, s3
 80003cc:	ee76 7ac6 	vsub.f32	s15, s13, s12
 80003d0:	ee61 5a20 	vmul.f32	s11, s2, s1
 80003d4:	eef4 7a67 	vcmp.f32	s15, s15
 80003d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003dc:	ee35 7a25 	vadd.f32	s14, s10, s11
 80003e0:	d604      	bvs.n	80003ec <__mulsc3+0x2c>
 80003e2:	eeb0 0a67 	vmov.f32	s0, s15
 80003e6:	eef0 0a47 	vmov.f32	s1, s14
 80003ea:	4770      	bx	lr
 80003ec:	eeb4 7a47 	vcmp.f32	s14, s14
 80003f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003f4:	d7f5      	bvc.n	80003e2 <__mulsc3+0x22>
 80003f6:	eddf 4a93 	vldr	s9, [pc, #588]	; 8000644 <__mulsc3+0x284>
 80003fa:	eeb0 4ac0 	vabs.f32	s8, s0
 80003fe:	eeb4 4a64 	vcmp.f32	s8, s9
 8000402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000406:	bfcc      	ite	gt
 8000408:	2301      	movgt	r3, #1
 800040a:	2300      	movle	r3, #0
 800040c:	eeb0 4ae0 	vabs.f32	s8, s1
 8000410:	f300 809d 	bgt.w	800054e <__mulsc3+0x18e>
 8000414:	eeb4 4a64 	vcmp.f32	s8, s9
 8000418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800041c:	f300 8097 	bgt.w	800054e <__mulsc3+0x18e>
 8000420:	2300      	movs	r3, #0
 8000422:	eddf 4a88 	vldr	s9, [pc, #544]	; 8000644 <__mulsc3+0x284>
 8000426:	eeb0 4ac1 	vabs.f32	s8, s2
 800042a:	eeb4 4a64 	vcmp.f32	s8, s9
 800042e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000432:	eef0 3ae1 	vabs.f32	s7, s3
 8000436:	dc48      	bgt.n	80004ca <__mulsc3+0x10a>
 8000438:	eef4 3a64 	vcmp.f32	s7, s9
 800043c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000440:	dc43      	bgt.n	80004ca <__mulsc3+0x10a>
 8000442:	bb9b      	cbnz	r3, 80004ac <__mulsc3+0xec>
 8000444:	eef0 6ae6 	vabs.f32	s13, s13
 8000448:	eef4 6a64 	vcmp.f32	s13, s9
 800044c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000450:	dc14      	bgt.n	800047c <__mulsc3+0xbc>
 8000452:	eeb0 6ac6 	vabs.f32	s12, s12
 8000456:	eeb4 6a64 	vcmp.f32	s12, s9
 800045a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800045e:	dc0d      	bgt.n	800047c <__mulsc3+0xbc>
 8000460:	eeb0 5ac5 	vabs.f32	s10, s10
 8000464:	eeb4 5a64 	vcmp.f32	s10, s9
 8000468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800046c:	dc06      	bgt.n	800047c <__mulsc3+0xbc>
 800046e:	eef0 5ae5 	vabs.f32	s11, s11
 8000472:	eef4 5a64 	vcmp.f32	s11, s9
 8000476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800047a:	ddb2      	ble.n	80003e2 <__mulsc3+0x22>
 800047c:	eeb4 0a40 	vcmp.f32	s0, s0
 8000480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000484:	f180 80d3 	bvs.w	800062e <__mulsc3+0x26e>
 8000488:	eef4 0a60 	vcmp.f32	s1, s1
 800048c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000490:	f180 80c3 	bvs.w	800061a <__mulsc3+0x25a>
 8000494:	eeb4 1a41 	vcmp.f32	s2, s2
 8000498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800049c:	f180 80b3 	bvs.w	8000606 <__mulsc3+0x246>
 80004a0:	eef4 1a61 	vcmp.f32	s3, s3
 80004a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004a8:	f180 80a3 	bvs.w	80005f2 <__mulsc3+0x232>
 80004ac:	ee61 7ae0 	vnmul.f32	s15, s3, s1
 80004b0:	ee60 0a81 	vmul.f32	s1, s1, s2
 80004b4:	eee0 7a01 	vfma.f32	s15, s0, s2
 80004b8:	eee0 0a21 	vfma.f32	s1, s0, s3
 80004bc:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8000648 <__mulsc3+0x288>
 80004c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80004c4:	ee20 7a87 	vmul.f32	s14, s1, s14
 80004c8:	e78b      	b.n	80003e2 <__mulsc3+0x22>
 80004ca:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8000644 <__mulsc3+0x284>
 80004ce:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8000644 <__mulsc3+0x284>
 80004d2:	eeb4 4a67 	vcmp.f32	s8, s15
 80004d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004da:	bfcc      	ite	gt
 80004dc:	2301      	movgt	r3, #1
 80004de:	2300      	movle	r3, #0
 80004e0:	ee07 3a90 	vmov	s15, r3
 80004e4:	ee11 3a10 	vmov	r3, s2
 80004e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	eef0 7ae7 	vabs.f32	s15, s15
 80004f2:	eef4 3a47 	vcmp.f32	s7, s14
 80004f6:	bfb8      	it	lt
 80004f8:	eef1 7a67 	vneglt.f32	s15, s15
 80004fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000500:	bfcc      	ite	gt
 8000502:	2301      	movgt	r3, #1
 8000504:	2300      	movle	r3, #0
 8000506:	eeb0 1a67 	vmov.f32	s2, s15
 800050a:	ee07 3a90 	vmov	s15, r3
 800050e:	ee11 3a90 	vmov	r3, s3
 8000512:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000516:	2b00      	cmp	r3, #0
 8000518:	eef0 7ae7 	vabs.f32	s15, s15
 800051c:	eeb4 0a40 	vcmp.f32	s0, s0
 8000520:	bfb8      	it	lt
 8000522:	eef1 7a67 	vneglt.f32	s15, s15
 8000526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800052a:	eef0 1a67 	vmov.f32	s3, s15
 800052e:	d64c      	bvs.n	80005ca <__mulsc3+0x20a>
 8000530:	eef4 0a60 	vcmp.f32	s1, s1
 8000534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000538:	d7b8      	bvc.n	80004ac <__mulsc3+0xec>
 800053a:	ee10 3a90 	vmov	r3, s1
 800053e:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800064c <__mulsc3+0x28c>
 8000542:	eddf 7a43 	vldr	s15, [pc, #268]	; 8000650 <__mulsc3+0x290>
 8000546:	2b00      	cmp	r3, #0
 8000548:	fe67 0a27 	vselge.f32	s1, s14, s15
 800054c:	e7ae      	b.n	80004ac <__mulsc3+0xec>
 800054e:	ee04 3a90 	vmov	s9, r3
 8000552:	eddf 3a3c 	vldr	s7, [pc, #240]	; 8000644 <__mulsc3+0x284>
 8000556:	ee10 3a10 	vmov	r3, s0
 800055a:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 800055e:	2b00      	cmp	r3, #0
 8000560:	eef0 4ae4 	vabs.f32	s9, s9
 8000564:	eeb4 4a63 	vcmp.f32	s8, s7
 8000568:	bfb8      	it	lt
 800056a:	eef1 4a64 	vneglt.f32	s9, s9
 800056e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000572:	bfcc      	ite	gt
 8000574:	2301      	movgt	r3, #1
 8000576:	2300      	movle	r3, #0
 8000578:	eeb0 0a64 	vmov.f32	s0, s9
 800057c:	ee04 3a90 	vmov	s9, r3
 8000580:	ee10 3a90 	vmov	r3, s1
 8000584:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8000588:	2b00      	cmp	r3, #0
 800058a:	eef0 4ae4 	vabs.f32	s9, s9
 800058e:	eeb4 1a41 	vcmp.f32	s2, s2
 8000592:	bfb8      	it	lt
 8000594:	eef1 4a64 	vneglt.f32	s9, s9
 8000598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800059c:	eef0 0a64 	vmov.f32	s1, s9
 80005a0:	d61d      	bvs.n	80005de <__mulsc3+0x21e>
 80005a2:	eef4 1a61 	vcmp.f32	s3, s3
 80005a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005aa:	bf78      	it	vc
 80005ac:	2301      	movvc	r3, #1
 80005ae:	f5ff af38 	bvc.w	8000422 <__mulsc3+0x62>
 80005b2:	ee11 3a90 	vmov	r3, s3
 80005b6:	ed9f 4a25 	vldr	s8, [pc, #148]	; 800064c <__mulsc3+0x28c>
 80005ba:	eddf 4a25 	vldr	s9, [pc, #148]	; 8000650 <__mulsc3+0x290>
 80005be:	2b00      	cmp	r3, #0
 80005c0:	f04f 0301 	mov.w	r3, #1
 80005c4:	fe64 1a24 	vselge.f32	s3, s8, s9
 80005c8:	e72b      	b.n	8000422 <__mulsc3+0x62>
 80005ca:	ee10 3a10 	vmov	r3, s0
 80005ce:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800064c <__mulsc3+0x28c>
 80005d2:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8000650 <__mulsc3+0x290>
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	fe27 0a27 	vselge.f32	s0, s14, s15
 80005dc:	e7a8      	b.n	8000530 <__mulsc3+0x170>
 80005de:	ee11 3a10 	vmov	r3, s2
 80005e2:	ed9f 4a1a 	vldr	s8, [pc, #104]	; 800064c <__mulsc3+0x28c>
 80005e6:	eddf 4a1a 	vldr	s9, [pc, #104]	; 8000650 <__mulsc3+0x290>
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	fe24 1a24 	vselge.f32	s2, s8, s9
 80005f0:	e7d7      	b.n	80005a2 <__mulsc3+0x1e2>
 80005f2:	ee11 3a90 	vmov	r3, s3
 80005f6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800064c <__mulsc3+0x28c>
 80005fa:	eddf 7a15 	vldr	s15, [pc, #84]	; 8000650 <__mulsc3+0x290>
 80005fe:	2b00      	cmp	r3, #0
 8000600:	fe67 1a27 	vselge.f32	s3, s14, s15
 8000604:	e752      	b.n	80004ac <__mulsc3+0xec>
 8000606:	ee11 3a10 	vmov	r3, s2
 800060a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800064c <__mulsc3+0x28c>
 800060e:	eddf 7a10 	vldr	s15, [pc, #64]	; 8000650 <__mulsc3+0x290>
 8000612:	2b00      	cmp	r3, #0
 8000614:	fe27 1a27 	vselge.f32	s2, s14, s15
 8000618:	e742      	b.n	80004a0 <__mulsc3+0xe0>
 800061a:	ee10 3a90 	vmov	r3, s1
 800061e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800064c <__mulsc3+0x28c>
 8000622:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8000650 <__mulsc3+0x290>
 8000626:	2b00      	cmp	r3, #0
 8000628:	fe67 0a27 	vselge.f32	s1, s14, s15
 800062c:	e732      	b.n	8000494 <__mulsc3+0xd4>
 800062e:	ee10 3a10 	vmov	r3, s0
 8000632:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800064c <__mulsc3+0x28c>
 8000636:	eddf 7a06 	vldr	s15, [pc, #24]	; 8000650 <__mulsc3+0x290>
 800063a:	2b00      	cmp	r3, #0
 800063c:	fe27 0a27 	vselge.f32	s0, s14, s15
 8000640:	e722      	b.n	8000488 <__mulsc3+0xc8>
 8000642:	bf00      	nop
 8000644:	7f7fffff 	.word	0x7f7fffff
 8000648:	7f800000 	.word	0x7f800000
 800064c:	00000000 	.word	0x00000000
 8000650:	80000000 	.word	0x80000000

08000654 <__udivmoddi4>:
 8000654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000658:	9e08      	ldr	r6, [sp, #32]
 800065a:	460d      	mov	r5, r1
 800065c:	4604      	mov	r4, r0
 800065e:	460f      	mov	r7, r1
 8000660:	2b00      	cmp	r3, #0
 8000662:	d14a      	bne.n	80006fa <__udivmoddi4+0xa6>
 8000664:	428a      	cmp	r2, r1
 8000666:	4694      	mov	ip, r2
 8000668:	d965      	bls.n	8000736 <__udivmoddi4+0xe2>
 800066a:	fab2 f382 	clz	r3, r2
 800066e:	b143      	cbz	r3, 8000682 <__udivmoddi4+0x2e>
 8000670:	fa02 fc03 	lsl.w	ip, r2, r3
 8000674:	f1c3 0220 	rsb	r2, r3, #32
 8000678:	409f      	lsls	r7, r3
 800067a:	fa20 f202 	lsr.w	r2, r0, r2
 800067e:	4317      	orrs	r7, r2
 8000680:	409c      	lsls	r4, r3
 8000682:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000686:	fa1f f58c 	uxth.w	r5, ip
 800068a:	fbb7 f1fe 	udiv	r1, r7, lr
 800068e:	0c22      	lsrs	r2, r4, #16
 8000690:	fb0e 7711 	mls	r7, lr, r1, r7
 8000694:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000698:	fb01 f005 	mul.w	r0, r1, r5
 800069c:	4290      	cmp	r0, r2
 800069e:	d90a      	bls.n	80006b6 <__udivmoddi4+0x62>
 80006a0:	eb1c 0202 	adds.w	r2, ip, r2
 80006a4:	f101 37ff 	add.w	r7, r1, #4294967295
 80006a8:	f080 811c 	bcs.w	80008e4 <__udivmoddi4+0x290>
 80006ac:	4290      	cmp	r0, r2
 80006ae:	f240 8119 	bls.w	80008e4 <__udivmoddi4+0x290>
 80006b2:	3902      	subs	r1, #2
 80006b4:	4462      	add	r2, ip
 80006b6:	1a12      	subs	r2, r2, r0
 80006b8:	b2a4      	uxth	r4, r4
 80006ba:	fbb2 f0fe 	udiv	r0, r2, lr
 80006be:	fb0e 2210 	mls	r2, lr, r0, r2
 80006c2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80006c6:	fb00 f505 	mul.w	r5, r0, r5
 80006ca:	42a5      	cmp	r5, r4
 80006cc:	d90a      	bls.n	80006e4 <__udivmoddi4+0x90>
 80006ce:	eb1c 0404 	adds.w	r4, ip, r4
 80006d2:	f100 32ff 	add.w	r2, r0, #4294967295
 80006d6:	f080 8107 	bcs.w	80008e8 <__udivmoddi4+0x294>
 80006da:	42a5      	cmp	r5, r4
 80006dc:	f240 8104 	bls.w	80008e8 <__udivmoddi4+0x294>
 80006e0:	4464      	add	r4, ip
 80006e2:	3802      	subs	r0, #2
 80006e4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80006e8:	1b64      	subs	r4, r4, r5
 80006ea:	2100      	movs	r1, #0
 80006ec:	b11e      	cbz	r6, 80006f6 <__udivmoddi4+0xa2>
 80006ee:	40dc      	lsrs	r4, r3
 80006f0:	2300      	movs	r3, #0
 80006f2:	e9c6 4300 	strd	r4, r3, [r6]
 80006f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006fa:	428b      	cmp	r3, r1
 80006fc:	d908      	bls.n	8000710 <__udivmoddi4+0xbc>
 80006fe:	2e00      	cmp	r6, #0
 8000700:	f000 80ed 	beq.w	80008de <__udivmoddi4+0x28a>
 8000704:	2100      	movs	r1, #0
 8000706:	e9c6 0500 	strd	r0, r5, [r6]
 800070a:	4608      	mov	r0, r1
 800070c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000710:	fab3 f183 	clz	r1, r3
 8000714:	2900      	cmp	r1, #0
 8000716:	d149      	bne.n	80007ac <__udivmoddi4+0x158>
 8000718:	42ab      	cmp	r3, r5
 800071a:	d302      	bcc.n	8000722 <__udivmoddi4+0xce>
 800071c:	4282      	cmp	r2, r0
 800071e:	f200 80f8 	bhi.w	8000912 <__udivmoddi4+0x2be>
 8000722:	1a84      	subs	r4, r0, r2
 8000724:	eb65 0203 	sbc.w	r2, r5, r3
 8000728:	2001      	movs	r0, #1
 800072a:	4617      	mov	r7, r2
 800072c:	2e00      	cmp	r6, #0
 800072e:	d0e2      	beq.n	80006f6 <__udivmoddi4+0xa2>
 8000730:	e9c6 4700 	strd	r4, r7, [r6]
 8000734:	e7df      	b.n	80006f6 <__udivmoddi4+0xa2>
 8000736:	b902      	cbnz	r2, 800073a <__udivmoddi4+0xe6>
 8000738:	deff      	udf	#255	; 0xff
 800073a:	fab2 f382 	clz	r3, r2
 800073e:	2b00      	cmp	r3, #0
 8000740:	f040 8090 	bne.w	8000864 <__udivmoddi4+0x210>
 8000744:	1a8a      	subs	r2, r1, r2
 8000746:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800074a:	fa1f fe8c 	uxth.w	lr, ip
 800074e:	2101      	movs	r1, #1
 8000750:	fbb2 f5f7 	udiv	r5, r2, r7
 8000754:	fb07 2015 	mls	r0, r7, r5, r2
 8000758:	0c22      	lsrs	r2, r4, #16
 800075a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800075e:	fb0e f005 	mul.w	r0, lr, r5
 8000762:	4290      	cmp	r0, r2
 8000764:	d908      	bls.n	8000778 <__udivmoddi4+0x124>
 8000766:	eb1c 0202 	adds.w	r2, ip, r2
 800076a:	f105 38ff 	add.w	r8, r5, #4294967295
 800076e:	d202      	bcs.n	8000776 <__udivmoddi4+0x122>
 8000770:	4290      	cmp	r0, r2
 8000772:	f200 80cb 	bhi.w	800090c <__udivmoddi4+0x2b8>
 8000776:	4645      	mov	r5, r8
 8000778:	1a12      	subs	r2, r2, r0
 800077a:	b2a4      	uxth	r4, r4
 800077c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000780:	fb07 2210 	mls	r2, r7, r0, r2
 8000784:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000788:	fb0e fe00 	mul.w	lr, lr, r0
 800078c:	45a6      	cmp	lr, r4
 800078e:	d908      	bls.n	80007a2 <__udivmoddi4+0x14e>
 8000790:	eb1c 0404 	adds.w	r4, ip, r4
 8000794:	f100 32ff 	add.w	r2, r0, #4294967295
 8000798:	d202      	bcs.n	80007a0 <__udivmoddi4+0x14c>
 800079a:	45a6      	cmp	lr, r4
 800079c:	f200 80bb 	bhi.w	8000916 <__udivmoddi4+0x2c2>
 80007a0:	4610      	mov	r0, r2
 80007a2:	eba4 040e 	sub.w	r4, r4, lr
 80007a6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80007aa:	e79f      	b.n	80006ec <__udivmoddi4+0x98>
 80007ac:	f1c1 0720 	rsb	r7, r1, #32
 80007b0:	408b      	lsls	r3, r1
 80007b2:	fa22 fc07 	lsr.w	ip, r2, r7
 80007b6:	ea4c 0c03 	orr.w	ip, ip, r3
 80007ba:	fa05 f401 	lsl.w	r4, r5, r1
 80007be:	fa20 f307 	lsr.w	r3, r0, r7
 80007c2:	40fd      	lsrs	r5, r7
 80007c4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007c8:	4323      	orrs	r3, r4
 80007ca:	fbb5 f8f9 	udiv	r8, r5, r9
 80007ce:	fa1f fe8c 	uxth.w	lr, ip
 80007d2:	fb09 5518 	mls	r5, r9, r8, r5
 80007d6:	0c1c      	lsrs	r4, r3, #16
 80007d8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80007dc:	fb08 f50e 	mul.w	r5, r8, lr
 80007e0:	42a5      	cmp	r5, r4
 80007e2:	fa02 f201 	lsl.w	r2, r2, r1
 80007e6:	fa00 f001 	lsl.w	r0, r0, r1
 80007ea:	d90b      	bls.n	8000804 <__udivmoddi4+0x1b0>
 80007ec:	eb1c 0404 	adds.w	r4, ip, r4
 80007f0:	f108 3aff 	add.w	sl, r8, #4294967295
 80007f4:	f080 8088 	bcs.w	8000908 <__udivmoddi4+0x2b4>
 80007f8:	42a5      	cmp	r5, r4
 80007fa:	f240 8085 	bls.w	8000908 <__udivmoddi4+0x2b4>
 80007fe:	f1a8 0802 	sub.w	r8, r8, #2
 8000802:	4464      	add	r4, ip
 8000804:	1b64      	subs	r4, r4, r5
 8000806:	b29d      	uxth	r5, r3
 8000808:	fbb4 f3f9 	udiv	r3, r4, r9
 800080c:	fb09 4413 	mls	r4, r9, r3, r4
 8000810:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000814:	fb03 fe0e 	mul.w	lr, r3, lr
 8000818:	45a6      	cmp	lr, r4
 800081a:	d908      	bls.n	800082e <__udivmoddi4+0x1da>
 800081c:	eb1c 0404 	adds.w	r4, ip, r4
 8000820:	f103 35ff 	add.w	r5, r3, #4294967295
 8000824:	d26c      	bcs.n	8000900 <__udivmoddi4+0x2ac>
 8000826:	45a6      	cmp	lr, r4
 8000828:	d96a      	bls.n	8000900 <__udivmoddi4+0x2ac>
 800082a:	3b02      	subs	r3, #2
 800082c:	4464      	add	r4, ip
 800082e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000832:	fba3 9502 	umull	r9, r5, r3, r2
 8000836:	eba4 040e 	sub.w	r4, r4, lr
 800083a:	42ac      	cmp	r4, r5
 800083c:	46c8      	mov	r8, r9
 800083e:	46ae      	mov	lr, r5
 8000840:	d356      	bcc.n	80008f0 <__udivmoddi4+0x29c>
 8000842:	d053      	beq.n	80008ec <__udivmoddi4+0x298>
 8000844:	b156      	cbz	r6, 800085c <__udivmoddi4+0x208>
 8000846:	ebb0 0208 	subs.w	r2, r0, r8
 800084a:	eb64 040e 	sbc.w	r4, r4, lr
 800084e:	fa04 f707 	lsl.w	r7, r4, r7
 8000852:	40ca      	lsrs	r2, r1
 8000854:	40cc      	lsrs	r4, r1
 8000856:	4317      	orrs	r7, r2
 8000858:	e9c6 7400 	strd	r7, r4, [r6]
 800085c:	4618      	mov	r0, r3
 800085e:	2100      	movs	r1, #0
 8000860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000864:	f1c3 0120 	rsb	r1, r3, #32
 8000868:	fa02 fc03 	lsl.w	ip, r2, r3
 800086c:	fa20 f201 	lsr.w	r2, r0, r1
 8000870:	fa25 f101 	lsr.w	r1, r5, r1
 8000874:	409d      	lsls	r5, r3
 8000876:	432a      	orrs	r2, r5
 8000878:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800087c:	fa1f fe8c 	uxth.w	lr, ip
 8000880:	fbb1 f0f7 	udiv	r0, r1, r7
 8000884:	fb07 1510 	mls	r5, r7, r0, r1
 8000888:	0c11      	lsrs	r1, r2, #16
 800088a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800088e:	fb00 f50e 	mul.w	r5, r0, lr
 8000892:	428d      	cmp	r5, r1
 8000894:	fa04 f403 	lsl.w	r4, r4, r3
 8000898:	d908      	bls.n	80008ac <__udivmoddi4+0x258>
 800089a:	eb1c 0101 	adds.w	r1, ip, r1
 800089e:	f100 38ff 	add.w	r8, r0, #4294967295
 80008a2:	d22f      	bcs.n	8000904 <__udivmoddi4+0x2b0>
 80008a4:	428d      	cmp	r5, r1
 80008a6:	d92d      	bls.n	8000904 <__udivmoddi4+0x2b0>
 80008a8:	3802      	subs	r0, #2
 80008aa:	4461      	add	r1, ip
 80008ac:	1b49      	subs	r1, r1, r5
 80008ae:	b292      	uxth	r2, r2
 80008b0:	fbb1 f5f7 	udiv	r5, r1, r7
 80008b4:	fb07 1115 	mls	r1, r7, r5, r1
 80008b8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008bc:	fb05 f10e 	mul.w	r1, r5, lr
 80008c0:	4291      	cmp	r1, r2
 80008c2:	d908      	bls.n	80008d6 <__udivmoddi4+0x282>
 80008c4:	eb1c 0202 	adds.w	r2, ip, r2
 80008c8:	f105 38ff 	add.w	r8, r5, #4294967295
 80008cc:	d216      	bcs.n	80008fc <__udivmoddi4+0x2a8>
 80008ce:	4291      	cmp	r1, r2
 80008d0:	d914      	bls.n	80008fc <__udivmoddi4+0x2a8>
 80008d2:	3d02      	subs	r5, #2
 80008d4:	4462      	add	r2, ip
 80008d6:	1a52      	subs	r2, r2, r1
 80008d8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80008dc:	e738      	b.n	8000750 <__udivmoddi4+0xfc>
 80008de:	4631      	mov	r1, r6
 80008e0:	4630      	mov	r0, r6
 80008e2:	e708      	b.n	80006f6 <__udivmoddi4+0xa2>
 80008e4:	4639      	mov	r1, r7
 80008e6:	e6e6      	b.n	80006b6 <__udivmoddi4+0x62>
 80008e8:	4610      	mov	r0, r2
 80008ea:	e6fb      	b.n	80006e4 <__udivmoddi4+0x90>
 80008ec:	4548      	cmp	r0, r9
 80008ee:	d2a9      	bcs.n	8000844 <__udivmoddi4+0x1f0>
 80008f0:	ebb9 0802 	subs.w	r8, r9, r2
 80008f4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80008f8:	3b01      	subs	r3, #1
 80008fa:	e7a3      	b.n	8000844 <__udivmoddi4+0x1f0>
 80008fc:	4645      	mov	r5, r8
 80008fe:	e7ea      	b.n	80008d6 <__udivmoddi4+0x282>
 8000900:	462b      	mov	r3, r5
 8000902:	e794      	b.n	800082e <__udivmoddi4+0x1da>
 8000904:	4640      	mov	r0, r8
 8000906:	e7d1      	b.n	80008ac <__udivmoddi4+0x258>
 8000908:	46d0      	mov	r8, sl
 800090a:	e77b      	b.n	8000804 <__udivmoddi4+0x1b0>
 800090c:	3d02      	subs	r5, #2
 800090e:	4462      	add	r2, ip
 8000910:	e732      	b.n	8000778 <__udivmoddi4+0x124>
 8000912:	4608      	mov	r0, r1
 8000914:	e70a      	b.n	800072c <__udivmoddi4+0xd8>
 8000916:	4464      	add	r4, ip
 8000918:	3802      	subs	r0, #2
 800091a:	e742      	b.n	80007a2 <__udivmoddi4+0x14e>

0800091c <__aeabi_idiv0>:
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop

08000920 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000924:	4b3d      	ldr	r3, [pc, #244]	; (8000a1c <SystemInit+0xfc>)
 8000926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800092a:	4a3c      	ldr	r2, [pc, #240]	; (8000a1c <SystemInit+0xfc>)
 800092c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000930:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000934:	4b39      	ldr	r3, [pc, #228]	; (8000a1c <SystemInit+0xfc>)
 8000936:	691b      	ldr	r3, [r3, #16]
 8000938:	4a38      	ldr	r2, [pc, #224]	; (8000a1c <SystemInit+0xfc>)
 800093a:	f043 0310 	orr.w	r3, r3, #16
 800093e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000940:	4b37      	ldr	r3, [pc, #220]	; (8000a20 <SystemInit+0x100>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f003 030f 	and.w	r3, r3, #15
 8000948:	2b06      	cmp	r3, #6
 800094a:	d807      	bhi.n	800095c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800094c:	4b34      	ldr	r3, [pc, #208]	; (8000a20 <SystemInit+0x100>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f023 030f 	bic.w	r3, r3, #15
 8000954:	4a32      	ldr	r2, [pc, #200]	; (8000a20 <SystemInit+0x100>)
 8000956:	f043 0307 	orr.w	r3, r3, #7
 800095a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800095c:	4b31      	ldr	r3, [pc, #196]	; (8000a24 <SystemInit+0x104>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a30      	ldr	r2, [pc, #192]	; (8000a24 <SystemInit+0x104>)
 8000962:	f043 0301 	orr.w	r3, r3, #1
 8000966:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000968:	4b2e      	ldr	r3, [pc, #184]	; (8000a24 <SystemInit+0x104>)
 800096a:	2200      	movs	r2, #0
 800096c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800096e:	4b2d      	ldr	r3, [pc, #180]	; (8000a24 <SystemInit+0x104>)
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	492c      	ldr	r1, [pc, #176]	; (8000a24 <SystemInit+0x104>)
 8000974:	4b2c      	ldr	r3, [pc, #176]	; (8000a28 <SystemInit+0x108>)
 8000976:	4013      	ands	r3, r2
 8000978:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800097a:	4b29      	ldr	r3, [pc, #164]	; (8000a20 <SystemInit+0x100>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f003 0308 	and.w	r3, r3, #8
 8000982:	2b00      	cmp	r3, #0
 8000984:	d007      	beq.n	8000996 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000986:	4b26      	ldr	r3, [pc, #152]	; (8000a20 <SystemInit+0x100>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f023 030f 	bic.w	r3, r3, #15
 800098e:	4a24      	ldr	r2, [pc, #144]	; (8000a20 <SystemInit+0x100>)
 8000990:	f043 0307 	orr.w	r3, r3, #7
 8000994:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000996:	4b23      	ldr	r3, [pc, #140]	; (8000a24 <SystemInit+0x104>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800099c:	4b21      	ldr	r3, [pc, #132]	; (8000a24 <SystemInit+0x104>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80009a2:	4b20      	ldr	r3, [pc, #128]	; (8000a24 <SystemInit+0x104>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80009a8:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <SystemInit+0x104>)
 80009aa:	4a20      	ldr	r2, [pc, #128]	; (8000a2c <SystemInit+0x10c>)
 80009ac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80009ae:	4b1d      	ldr	r3, [pc, #116]	; (8000a24 <SystemInit+0x104>)
 80009b0:	4a1f      	ldr	r2, [pc, #124]	; (8000a30 <SystemInit+0x110>)
 80009b2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80009b4:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <SystemInit+0x104>)
 80009b6:	4a1f      	ldr	r2, [pc, #124]	; (8000a34 <SystemInit+0x114>)
 80009b8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80009ba:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <SystemInit+0x104>)
 80009bc:	2200      	movs	r2, #0
 80009be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80009c0:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <SystemInit+0x104>)
 80009c2:	4a1c      	ldr	r2, [pc, #112]	; (8000a34 <SystemInit+0x114>)
 80009c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80009c6:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <SystemInit+0x104>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80009cc:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <SystemInit+0x104>)
 80009ce:	4a19      	ldr	r2, [pc, #100]	; (8000a34 <SystemInit+0x114>)
 80009d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80009d2:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <SystemInit+0x104>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <SystemInit+0x104>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a11      	ldr	r2, [pc, #68]	; (8000a24 <SystemInit+0x104>)
 80009de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009e2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <SystemInit+0x104>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80009ea:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <SystemInit+0x118>)
 80009ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ee:	4a12      	ldr	r2, [pc, #72]	; (8000a38 <SystemInit+0x118>)
 80009f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f4:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <SystemInit+0x11c>)
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <SystemInit+0x120>)
 80009fc:	4013      	ands	r3, r2
 80009fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a02:	d202      	bcs.n	8000a0a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <SystemInit+0x124>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <SystemInit+0x128>)
 8000a0c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000a10:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000a12:	bf00      	nop
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	e000ed00 	.word	0xe000ed00
 8000a20:	52002000 	.word	0x52002000
 8000a24:	58024400 	.word	0x58024400
 8000a28:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a2c:	02020200 	.word	0x02020200
 8000a30:	01ff0000 	.word	0x01ff0000
 8000a34:	01010280 	.word	0x01010280
 8000a38:	580000c0 	.word	0x580000c0
 8000a3c:	5c001000 	.word	0x5c001000
 8000a40:	ffff0000 	.word	0xffff0000
 8000a44:	51008108 	.word	0x51008108
 8000a48:	52004000 	.word	0x52004000

08000a4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000a52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a56:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000a58:	bf00      	nop
 8000a5a:	4b2a      	ldr	r3, [pc, #168]	; (8000b04 <main+0xb8>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d004      	beq.n	8000a70 <main+0x24>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	1e5a      	subs	r2, r3, #1
 8000a6a:	607a      	str	r2, [r7, #4]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	dcf4      	bgt.n	8000a5a <main+0xe>
  if ( timeout < 0 )
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	da01      	bge.n	8000a7a <main+0x2e>
  {
  Error_Handler();
 8000a76:	f000 fcff 	bl	8001478 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a7a:	f000 ffc9 	bl	8001a10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a7e:	f000 f847 	bl	8000b10 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000a82:	4b20      	ldr	r3, [pc, #128]	; (8000b04 <main+0xb8>)
 8000a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a88:	4a1e      	ldr	r2, [pc, #120]	; (8000b04 <main+0xb8>)
 8000a8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a92:	4b1c      	ldr	r3, [pc, #112]	; (8000b04 <main+0xb8>)
 8000a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a9c:	603b      	str	r3, [r7, #0]
 8000a9e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	f001 fb37 	bl	8002114 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f001 fb4d 	bl	8002148 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000aae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ab2:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000ab4:	bf00      	nop
 8000ab6:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <main+0xb8>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d104      	bne.n	8000acc <main+0x80>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	1e5a      	subs	r2, r3, #1
 8000ac6:	607a      	str	r2, [r7, #4]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	dcf4      	bgt.n	8000ab6 <main+0x6a>
if ( timeout < 0 )
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	da01      	bge.n	8000ad6 <main+0x8a>
{
Error_Handler();
 8000ad2:	f000 fcd1 	bl	8001478 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad6:	f000 f98b 	bl	8000df0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000ada:	f000 f90b 	bl	8000cf4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ade:	f000 f955 	bl	8000d8c <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 8000ae2:	f000 f891 	bl	8000c08 <MX_I2C2_Init>
  MX_TIM6_Init();
 8000ae6:	f000 f8cf 	bl	8000c88 <MX_TIM6_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  MPU6050_init();
 8000aea:	f000 f9d7 	bl	8000e9c <MPU6050_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(cont == 0){
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <main+0xbc>)
 8000af0:	881b      	ldrh	r3, [r3, #0]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d1fb      	bne.n	8000aee <main+0xa2>
		 HAL_HSEM_FastTake(HSEM_ID_0);
 8000af6:	2000      	movs	r0, #0
 8000af8:	f001 fb0c 	bl	8002114 <HAL_HSEM_FastTake>
		 HAL_TIM_Base_Start_IT(&htim6);
 8000afc:	4803      	ldr	r0, [pc, #12]	; (8000b0c <main+0xc0>)
 8000afe:	f005 f961 	bl	8005dc4 <HAL_TIM_Base_Start_IT>
	  if(cont == 0){
 8000b02:	e7f4      	b.n	8000aee <main+0xa2>
 8000b04:	58024400 	.word	0x58024400
 8000b08:	24000880 	.word	0x24000880
 8000b0c:	24000248 	.word	0x24000248

08000b10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b09c      	sub	sp, #112	; 0x70
 8000b14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1a:	224c      	movs	r2, #76	; 0x4c
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f007 fe51 	bl	80087c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	2220      	movs	r2, #32
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f007 fe4b 	bl	80087c6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000b30:	2004      	movs	r0, #4
 8000b32:	f002 fa73 	bl	800301c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b36:	2300      	movs	r3, #0
 8000b38:	603b      	str	r3, [r7, #0]
 8000b3a:	4b31      	ldr	r3, [pc, #196]	; (8000c00 <SystemClock_Config+0xf0>)
 8000b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b3e:	4a30      	ldr	r2, [pc, #192]	; (8000c00 <SystemClock_Config+0xf0>)
 8000b40:	f023 0301 	bic.w	r3, r3, #1
 8000b44:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b46:	4b2e      	ldr	r3, [pc, #184]	; (8000c00 <SystemClock_Config+0xf0>)
 8000b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	4b2c      	ldr	r3, [pc, #176]	; (8000c04 <SystemClock_Config+0xf4>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b58:	4a2a      	ldr	r2, [pc, #168]	; (8000c04 <SystemClock_Config+0xf4>)
 8000b5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b5e:	6193      	str	r3, [r2, #24]
 8000b60:	4b28      	ldr	r3, [pc, #160]	; (8000c04 <SystemClock_Config+0xf4>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b68:	603b      	str	r3, [r7, #0]
 8000b6a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b6c:	bf00      	nop
 8000b6e:	4b25      	ldr	r3, [pc, #148]	; (8000c04 <SystemClock_Config+0xf4>)
 8000b70:	699b      	ldr	r3, [r3, #24]
 8000b72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b7a:	d1f8      	bne.n	8000b6e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b80:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b84:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b86:	2302      	movs	r3, #2
 8000b88:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000b92:	2312      	movs	r3, #18
 8000b94:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b96:	2302      	movs	r3, #2
 8000b98:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ba2:	230c      	movs	r3, #12
 8000ba4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000baa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000bae:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f002 fa9b 	bl	80030f0 <HAL_RCC_OscConfig>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000bc0:	f000 fc5a 	bl	8001478 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc4:	233f      	movs	r3, #63	; 0x3f
 8000bc6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000bd8:	2340      	movs	r3, #64	; 0x40
 8000bda:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000be0:	2340      	movs	r3, #64	; 0x40
 8000be2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	2101      	movs	r1, #1
 8000be8:	4618      	mov	r0, r3
 8000bea:	f002 fedb 	bl	80039a4 <HAL_RCC_ClockConfig>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000bf4:	f000 fc40 	bl	8001478 <Error_Handler>
  }
}
 8000bf8:	bf00      	nop
 8000bfa:	3770      	adds	r7, #112	; 0x70
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	58000400 	.word	0x58000400
 8000c04:	58024800 	.word	0x58024800

08000c08 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c0c:	4b1b      	ldr	r3, [pc, #108]	; (8000c7c <MX_I2C2_Init+0x74>)
 8000c0e:	4a1c      	ldr	r2, [pc, #112]	; (8000c80 <MX_I2C2_Init+0x78>)
 8000c10:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00909FCE;
 8000c12:	4b1a      	ldr	r3, [pc, #104]	; (8000c7c <MX_I2C2_Init+0x74>)
 8000c14:	4a1b      	ldr	r2, [pc, #108]	; (8000c84 <MX_I2C2_Init+0x7c>)
 8000c16:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c18:	4b18      	ldr	r3, [pc, #96]	; (8000c7c <MX_I2C2_Init+0x74>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c1e:	4b17      	ldr	r3, [pc, #92]	; (8000c7c <MX_I2C2_Init+0x74>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c24:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <MX_I2C2_Init+0x74>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c2a:	4b14      	ldr	r3, [pc, #80]	; (8000c7c <MX_I2C2_Init+0x74>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <MX_I2C2_Init+0x74>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <MX_I2C2_Init+0x74>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <MX_I2C2_Init+0x74>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c42:	480e      	ldr	r0, [pc, #56]	; (8000c7c <MX_I2C2_Init+0x74>)
 8000c44:	f001 fa94 	bl	8002170 <HAL_I2C_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000c4e:	f000 fc13 	bl	8001478 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c52:	2100      	movs	r1, #0
 8000c54:	4809      	ldr	r0, [pc, #36]	; (8000c7c <MX_I2C2_Init+0x74>)
 8000c56:	f002 f801 	bl	8002c5c <HAL_I2CEx_ConfigAnalogFilter>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000c60:	f000 fc0a 	bl	8001478 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c64:	2100      	movs	r1, #0
 8000c66:	4805      	ldr	r0, [pc, #20]	; (8000c7c <MX_I2C2_Init+0x74>)
 8000c68:	f002 f843 	bl	8002cf2 <HAL_I2CEx_ConfigDigitalFilter>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000c72:	f000 fc01 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	240001f4 	.word	0x240001f4
 8000c80:	40005800 	.word	0x40005800
 8000c84:	00909fce 	.word	0x00909fce

08000c88 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c8e:	1d3b      	adds	r3, r7, #4
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000c98:	4b14      	ldr	r3, [pc, #80]	; (8000cec <MX_TIM6_Init+0x64>)
 8000c9a:	4a15      	ldr	r2, [pc, #84]	; (8000cf0 <MX_TIM6_Init+0x68>)
 8000c9c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 14999;
 8000c9e:	4b13      	ldr	r3, [pc, #76]	; (8000cec <MX_TIM6_Init+0x64>)
 8000ca0:	f643 2297 	movw	r2, #14999	; 0x3a97
 8000ca4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca6:	4b11      	ldr	r3, [pc, #68]	; (8000cec <MX_TIM6_Init+0x64>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <MX_TIM6_Init+0x64>)
 8000cae:	220a      	movs	r2, #10
 8000cb0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <MX_TIM6_Init+0x64>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000cb8:	480c      	ldr	r0, [pc, #48]	; (8000cec <MX_TIM6_Init+0x64>)
 8000cba:	f005 f82b 	bl	8005d14 <HAL_TIM_Base_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000cc4:	f000 fbd8 	bl	8001478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4805      	ldr	r0, [pc, #20]	; (8000cec <MX_TIM6_Init+0x64>)
 8000cd6:	f005 fafd 	bl	80062d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000ce0:	f000 fbca 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000ce4:	bf00      	nop
 8000ce6:	3710      	adds	r7, #16
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	24000248 	.word	0x24000248
 8000cf0:	40001000 	.word	0x40001000

08000cf4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cf8:	4b22      	ldr	r3, [pc, #136]	; (8000d84 <MX_USART3_UART_Init+0x90>)
 8000cfa:	4a23      	ldr	r2, [pc, #140]	; (8000d88 <MX_USART3_UART_Init+0x94>)
 8000cfc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cfe:	4b21      	ldr	r3, [pc, #132]	; (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d06:	4b1f      	ldr	r3, [pc, #124]	; (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d0c:	4b1d      	ldr	r3, [pc, #116]	; (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d12:	4b1c      	ldr	r3, [pc, #112]	; (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d18:	4b1a      	ldr	r3, [pc, #104]	; (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d1a:	220c      	movs	r2, #12
 8000d1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1e:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d24:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d2a:	4b16      	ldr	r3, [pc, #88]	; (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d30:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d36:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d3c:	4811      	ldr	r0, [pc, #68]	; (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d3e:	f005 fb75 	bl	800642c <HAL_UART_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d48:	f000 fb96 	bl	8001478 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	480d      	ldr	r0, [pc, #52]	; (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d50:	f006 fc05 	bl	800755e <HAL_UARTEx_SetTxFifoThreshold>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d5a:	f000 fb8d 	bl	8001478 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4808      	ldr	r0, [pc, #32]	; (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d62:	f006 fc3a 	bl	80075da <HAL_UARTEx_SetRxFifoThreshold>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d6c:	f000 fb84 	bl	8001478 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d70:	4804      	ldr	r0, [pc, #16]	; (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d72:	f006 fbbb 	bl	80074ec <HAL_UARTEx_DisableFifoMode>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d7c:	f000 fb7c 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	24000294 	.word	0x24000294
 8000d88:	40004800 	.word	0x40004800

08000d8c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d90:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d92:	4a16      	ldr	r2, [pc, #88]	; (8000dec <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000d94:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000d96:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d98:	2209      	movs	r2, #9
 8000d9a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d9e:	2202      	movs	r2, #2
 8000da0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000da2:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000da8:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000daa:	2202      	movs	r2, #2
 8000dac:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000dae:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000db4:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000dba:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000dc0:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000dc6:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000dcc:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000dd2:	4805      	ldr	r0, [pc, #20]	; (8000de8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dd4:	f001 ffd9 	bl	8002d8a <HAL_PCD_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000dde:	f000 fb4b 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	24000328 	.word	0x24000328
 8000dec:	40080000 	.word	0x40080000

08000df0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b087      	sub	sp, #28
 8000df4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df6:	4b28      	ldr	r3, [pc, #160]	; (8000e98 <MX_GPIO_Init+0xa8>)
 8000df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfc:	4a26      	ldr	r2, [pc, #152]	; (8000e98 <MX_GPIO_Init+0xa8>)
 8000dfe:	f043 0304 	orr.w	r3, r3, #4
 8000e02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e06:	4b24      	ldr	r3, [pc, #144]	; (8000e98 <MX_GPIO_Init+0xa8>)
 8000e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0c:	f003 0304 	and.w	r3, r3, #4
 8000e10:	617b      	str	r3, [r7, #20]
 8000e12:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e14:	4b20      	ldr	r3, [pc, #128]	; (8000e98 <MX_GPIO_Init+0xa8>)
 8000e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1a:	4a1f      	ldr	r2, [pc, #124]	; (8000e98 <MX_GPIO_Init+0xa8>)
 8000e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e24:	4b1c      	ldr	r3, [pc, #112]	; (8000e98 <MX_GPIO_Init+0xa8>)
 8000e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e32:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <MX_GPIO_Init+0xa8>)
 8000e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e38:	4a17      	ldr	r2, [pc, #92]	; (8000e98 <MX_GPIO_Init+0xa8>)
 8000e3a:	f043 0302 	orr.w	r3, r3, #2
 8000e3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e42:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <MX_GPIO_Init+0xa8>)
 8000e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e48:	f003 0302 	and.w	r3, r3, #2
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e50:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <MX_GPIO_Init+0xa8>)
 8000e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e56:	4a10      	ldr	r2, [pc, #64]	; (8000e98 <MX_GPIO_Init+0xa8>)
 8000e58:	f043 0308 	orr.w	r3, r3, #8
 8000e5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e60:	4b0d      	ldr	r3, [pc, #52]	; (8000e98 <MX_GPIO_Init+0xa8>)
 8000e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e66:	f003 0308 	and.w	r3, r3, #8
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <MX_GPIO_Init+0xa8>)
 8000e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e74:	4a08      	ldr	r2, [pc, #32]	; (8000e98 <MX_GPIO_Init+0xa8>)
 8000e76:	f043 0301 	orr.w	r3, r3, #1
 8000e7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e7e:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <MX_GPIO_Init+0xa8>)
 8000e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e8c:	bf00      	nop
 8000e8e:	371c      	adds	r7, #28
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	58024400 	.word	0x58024400

08000e9c <MPU6050_init>:

/* USER CODE BEGIN 4 */

void MPU6050_init(void){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t data;
	HAL_I2C_Mem_Read(&hi2c2, DIR_MPU, WHO_AM_I, 1,&check, 1, 100);
 8000ea2:	2364      	movs	r3, #100	; 0x64
 8000ea4:	9302      	str	r3, [sp, #8]
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	9301      	str	r3, [sp, #4]
 8000eaa:	1dfb      	adds	r3, r7, #7
 8000eac:	9300      	str	r3, [sp, #0]
 8000eae:	2301      	movs	r3, #1
 8000eb0:	2275      	movs	r2, #117	; 0x75
 8000eb2:	21d0      	movs	r1, #208	; 0xd0
 8000eb4:	4825      	ldr	r0, [pc, #148]	; (8000f4c <MPU6050_init+0xb0>)
 8000eb6:	f001 faff 	bl	80024b8 <HAL_I2C_Mem_Read>

	if(check == 0x68){
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	2b68      	cmp	r3, #104	; 0x68
 8000ebe:	d141      	bne.n	8000f44 <MPU6050_init+0xa8>
		//HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
		data = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, DIR_MPU, PWR_MGMT_1, 1, &data, 1, 100);//8MHz
 8000ec4:	2364      	movs	r3, #100	; 0x64
 8000ec6:	9302      	str	r3, [sp, #8]
 8000ec8:	2301      	movs	r3, #1
 8000eca:	9301      	str	r3, [sp, #4]
 8000ecc:	1dbb      	adds	r3, r7, #6
 8000ece:	9300      	str	r3, [sp, #0]
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	226b      	movs	r2, #107	; 0x6b
 8000ed4:	21d0      	movs	r1, #208	; 0xd0
 8000ed6:	481d      	ldr	r0, [pc, #116]	; (8000f4c <MPU6050_init+0xb0>)
 8000ed8:	f001 f9da 	bl	8002290 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(&hi2c2, DIR_MPU, 0x1A, 1,& data, 1, 100);
 8000edc:	2364      	movs	r3, #100	; 0x64
 8000ede:	9302      	str	r3, [sp, #8]
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	9301      	str	r3, [sp, #4]
 8000ee4:	1dbb      	adds	r3, r7, #6
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	2301      	movs	r3, #1
 8000eea:	221a      	movs	r2, #26
 8000eec:	21d0      	movs	r1, #208	; 0xd0
 8000eee:	4817      	ldr	r0, [pc, #92]	; (8000f4c <MPU6050_init+0xb0>)
 8000ef0:	f001 f9ce 	bl	8002290 <HAL_I2C_Mem_Write>
		data = 1;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, DIR_MPU, SMPLRT_DIV, 1, &data, 1, 100); //4KHz Sample
 8000ef8:	2364      	movs	r3, #100	; 0x64
 8000efa:	9302      	str	r3, [sp, #8]
 8000efc:	2301      	movs	r3, #1
 8000efe:	9301      	str	r3, [sp, #4]
 8000f00:	1dbb      	adds	r3, r7, #6
 8000f02:	9300      	str	r3, [sp, #0]
 8000f04:	2301      	movs	r3, #1
 8000f06:	2219      	movs	r2, #25
 8000f08:	21d0      	movs	r1, #208	; 0xd0
 8000f0a:	4810      	ldr	r0, [pc, #64]	; (8000f4c <MPU6050_init+0xb0>)
 8000f0c:	f001 f9c0 	bl	8002290 <HAL_I2C_Mem_Write>
		data = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, DIR_MPU, GYRO_CONFIG, 1, &data, 1, 100);//+-250°/s
 8000f14:	2364      	movs	r3, #100	; 0x64
 8000f16:	9302      	str	r3, [sp, #8]
 8000f18:	2301      	movs	r3, #1
 8000f1a:	9301      	str	r3, [sp, #4]
 8000f1c:	1dbb      	adds	r3, r7, #6
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	2301      	movs	r3, #1
 8000f22:	221b      	movs	r2, #27
 8000f24:	21d0      	movs	r1, #208	; 0xd0
 8000f26:	4809      	ldr	r0, [pc, #36]	; (8000f4c <MPU6050_init+0xb0>)
 8000f28:	f001 f9b2 	bl	8002290 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(&hi2c2, DIR_MPU, ACCEL_CONFIG, 1,&data, 1, 100);//+-2g
 8000f2c:	2364      	movs	r3, #100	; 0x64
 8000f2e:	9302      	str	r3, [sp, #8]
 8000f30:	2301      	movs	r3, #1
 8000f32:	9301      	str	r3, [sp, #4]
 8000f34:	1dbb      	adds	r3, r7, #6
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	2301      	movs	r3, #1
 8000f3a:	221c      	movs	r2, #28
 8000f3c:	21d0      	movs	r1, #208	; 0xd0
 8000f3e:	4803      	ldr	r0, [pc, #12]	; (8000f4c <MPU6050_init+0xb0>)
 8000f40:	f001 f9a6 	bl	8002290 <HAL_I2C_Mem_Write>
	}
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	240001f4 	.word	0x240001f4

08000f50 <MPU6050_read_gyro>:


void MPU6050_read_gyro(void){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af04      	add	r7, sp, #16

	HAL_I2C_Mem_Read(&hi2c2, DIR_MPU, GYRO_XOUT_H, 1,&XG_H, 1, 100);
 8000f56:	2364      	movs	r3, #100	; 0x64
 8000f58:	9302      	str	r3, [sp, #8]
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	9301      	str	r3, [sp, #4]
 8000f5e:	4b4e      	ldr	r3, [pc, #312]	; (8001098 <MPU6050_read_gyro+0x148>)
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	2301      	movs	r3, #1
 8000f64:	2243      	movs	r2, #67	; 0x43
 8000f66:	21d0      	movs	r1, #208	; 0xd0
 8000f68:	484c      	ldr	r0, [pc, #304]	; (800109c <MPU6050_read_gyro+0x14c>)
 8000f6a:	f001 faa5 	bl	80024b8 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, DIR_MPU, GYRO_XOUT_L, 1,&XG_L, 1, 100);
 8000f6e:	2364      	movs	r3, #100	; 0x64
 8000f70:	9302      	str	r3, [sp, #8]
 8000f72:	2301      	movs	r3, #1
 8000f74:	9301      	str	r3, [sp, #4]
 8000f76:	4b4a      	ldr	r3, [pc, #296]	; (80010a0 <MPU6050_read_gyro+0x150>)
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	2244      	movs	r2, #68	; 0x44
 8000f7e:	21d0      	movs	r1, #208	; 0xd0
 8000f80:	4846      	ldr	r0, [pc, #280]	; (800109c <MPU6050_read_gyro+0x14c>)
 8000f82:	f001 fa99 	bl	80024b8 <HAL_I2C_Mem_Read>

	HAL_I2C_Mem_Read(&hi2c2, DIR_MPU, GYRO_YOUT_H, 1,&YG_H, 1, 100);
 8000f86:	2364      	movs	r3, #100	; 0x64
 8000f88:	9302      	str	r3, [sp, #8]
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	9301      	str	r3, [sp, #4]
 8000f8e:	4b45      	ldr	r3, [pc, #276]	; (80010a4 <MPU6050_read_gyro+0x154>)
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	2301      	movs	r3, #1
 8000f94:	2245      	movs	r2, #69	; 0x45
 8000f96:	21d0      	movs	r1, #208	; 0xd0
 8000f98:	4840      	ldr	r0, [pc, #256]	; (800109c <MPU6050_read_gyro+0x14c>)
 8000f9a:	f001 fa8d 	bl	80024b8 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, DIR_MPU, GYRO_YOUT_L, 1,&YG_L, 1, 100);
 8000f9e:	2364      	movs	r3, #100	; 0x64
 8000fa0:	9302      	str	r3, [sp, #8]
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	9301      	str	r3, [sp, #4]
 8000fa6:	4b40      	ldr	r3, [pc, #256]	; (80010a8 <MPU6050_read_gyro+0x158>)
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	2301      	movs	r3, #1
 8000fac:	2246      	movs	r2, #70	; 0x46
 8000fae:	21d0      	movs	r1, #208	; 0xd0
 8000fb0:	483a      	ldr	r0, [pc, #232]	; (800109c <MPU6050_read_gyro+0x14c>)
 8000fb2:	f001 fa81 	bl	80024b8 <HAL_I2C_Mem_Read>

	HAL_I2C_Mem_Read(&hi2c2, DIR_MPU, GYRO_ZOUT_H, 1,&ZG_H, 1, 100);
 8000fb6:	2364      	movs	r3, #100	; 0x64
 8000fb8:	9302      	str	r3, [sp, #8]
 8000fba:	2301      	movs	r3, #1
 8000fbc:	9301      	str	r3, [sp, #4]
 8000fbe:	4b3b      	ldr	r3, [pc, #236]	; (80010ac <MPU6050_read_gyro+0x15c>)
 8000fc0:	9300      	str	r3, [sp, #0]
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	2247      	movs	r2, #71	; 0x47
 8000fc6:	21d0      	movs	r1, #208	; 0xd0
 8000fc8:	4834      	ldr	r0, [pc, #208]	; (800109c <MPU6050_read_gyro+0x14c>)
 8000fca:	f001 fa75 	bl	80024b8 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, DIR_MPU, GYRO_ZOUT_L, 1,&ZG_L, 1, 100);
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9302      	str	r3, [sp, #8]
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	9301      	str	r3, [sp, #4]
 8000fd6:	4b36      	ldr	r3, [pc, #216]	; (80010b0 <MPU6050_read_gyro+0x160>)
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	2301      	movs	r3, #1
 8000fdc:	2248      	movs	r2, #72	; 0x48
 8000fde:	21d0      	movs	r1, #208	; 0xd0
 8000fe0:	482e      	ldr	r0, [pc, #184]	; (800109c <MPU6050_read_gyro+0x14c>)
 8000fe2:	f001 fa69 	bl	80024b8 <HAL_I2C_Mem_Read>

	xG = (XG_H << 8) | XG_L;
 8000fe6:	4b2c      	ldr	r3, [pc, #176]	; (8001098 <MPU6050_read_gyro+0x148>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	021b      	lsls	r3, r3, #8
 8000fec:	b21a      	sxth	r2, r3
 8000fee:	4b2c      	ldr	r3, [pc, #176]	; (80010a0 <MPU6050_read_gyro+0x150>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	b21b      	sxth	r3, r3
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	b21a      	sxth	r2, r3
 8000ff8:	4b2e      	ldr	r3, [pc, #184]	; (80010b4 <MPU6050_read_gyro+0x164>)
 8000ffa:	801a      	strh	r2, [r3, #0]
	yG = (YG_H << 8) | YG_L;
 8000ffc:	4b29      	ldr	r3, [pc, #164]	; (80010a4 <MPU6050_read_gyro+0x154>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	021b      	lsls	r3, r3, #8
 8001002:	b21a      	sxth	r2, r3
 8001004:	4b28      	ldr	r3, [pc, #160]	; (80010a8 <MPU6050_read_gyro+0x158>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	b21b      	sxth	r3, r3
 800100a:	4313      	orrs	r3, r2
 800100c:	b21a      	sxth	r2, r3
 800100e:	4b2a      	ldr	r3, [pc, #168]	; (80010b8 <MPU6050_read_gyro+0x168>)
 8001010:	801a      	strh	r2, [r3, #0]
	zG = (ZG_H << 8) | ZG_L;
 8001012:	4b26      	ldr	r3, [pc, #152]	; (80010ac <MPU6050_read_gyro+0x15c>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	021b      	lsls	r3, r3, #8
 8001018:	b21a      	sxth	r2, r3
 800101a:	4b25      	ldr	r3, [pc, #148]	; (80010b0 <MPU6050_read_gyro+0x160>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	b21b      	sxth	r3, r3
 8001020:	4313      	orrs	r3, r2
 8001022:	b21a      	sxth	r2, r3
 8001024:	4b25      	ldr	r3, [pc, #148]	; (80010bc <MPU6050_read_gyro+0x16c>)
 8001026:	801a      	strh	r2, [r3, #0]

	xgs = (xG/131.00);
 8001028:	4b22      	ldr	r3, [pc, #136]	; (80010b4 <MPU6050_read_gyro+0x164>)
 800102a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800102e:	ee07 3a90 	vmov	s15, r3
 8001032:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001036:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8001090 <MPU6050_read_gyro+0x140>
 800103a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800103e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001042:	4b1f      	ldr	r3, [pc, #124]	; (80010c0 <MPU6050_read_gyro+0x170>)
 8001044:	edc3 7a00 	vstr	s15, [r3]
	ygs = (yG/131.00);
 8001048:	4b1b      	ldr	r3, [pc, #108]	; (80010b8 <MPU6050_read_gyro+0x168>)
 800104a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800104e:	ee07 3a90 	vmov	s15, r3
 8001052:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001056:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 8001090 <MPU6050_read_gyro+0x140>
 800105a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800105e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001062:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <MPU6050_read_gyro+0x174>)
 8001064:	edc3 7a00 	vstr	s15, [r3]
	zgs = (zG/131.00);
 8001068:	4b14      	ldr	r3, [pc, #80]	; (80010bc <MPU6050_read_gyro+0x16c>)
 800106a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800106e:	ee07 3a90 	vmov	s15, r3
 8001072:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001076:	ed9f 5b06 	vldr	d5, [pc, #24]	; 8001090 <MPU6050_read_gyro+0x140>
 800107a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800107e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <MPU6050_read_gyro+0x178>)
 8001084:	edc3 7a00 	vstr	s15, [r3]


}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	00000000 	.word	0x00000000
 8001094:	40606000 	.word	0x40606000
 8001098:	24000869 	.word	0x24000869
 800109c:	240001f4 	.word	0x240001f4
 80010a0:	24000868 	.word	0x24000868
 80010a4:	2400086b 	.word	0x2400086b
 80010a8:	2400086a 	.word	0x2400086a
 80010ac:	2400086d 	.word	0x2400086d
 80010b0:	2400086c 	.word	0x2400086c
 80010b4:	2400086e 	.word	0x2400086e
 80010b8:	24000870 	.word	0x24000870
 80010bc:	24000872 	.word	0x24000872
 80010c0:	24000874 	.word	0x24000874
 80010c4:	24000878 	.word	0x24000878
 80010c8:	2400087c 	.word	0x2400087c

080010cc <bitReverse>:

int bitReverse(int x, int log2n) {
 80010cc:	b480      	push	{r7}
 80010ce:	b087      	sub	sp, #28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
	int n = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
	int mask = 0x1;
 80010da:	2301      	movs	r3, #1
 80010dc:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < log2n; i++) {
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	e011      	b.n	8001108 <bitReverse+0x3c>
        n <<= 1;
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	617b      	str	r3, [r7, #20]
        n |= (x & mask) >> i;
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	401a      	ands	r2, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	fa42 f303 	asr.w	r3, r2, r3
 80010f6:	697a      	ldr	r2, [r7, #20]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	617b      	str	r3, [r7, #20]
        mask <<= 1;
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < log2n; i++) {
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	3301      	adds	r3, #1
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fa      	ldr	r2, [r7, #12]
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	429a      	cmp	r2, r3
 800110e:	dbe9      	blt.n	80010e4 <bitReverse+0x18>
    }
    return n;
 8001110:	697b      	ldr	r3, [r7, #20]
}
 8001112:	4618      	mov	r0, r3
 8001114:	371c      	adds	r7, #28
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
	...

08001120 <iterativeFFT>:

void iterativeFFT(float complex* a, int log2n) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b09e      	sub	sp, #120	; 0x78
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
	int n = 1 << log2n;
 800112a:	2201      	movs	r2, #1
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	65fb      	str	r3, [r7, #92]	; 0x5c
    for (int i = 0; i < n; i++) {
 8001134:	2300      	movs	r3, #0
 8001136:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001138:	e02b      	b.n	8001192 <iterativeFFT+0x72>
    	int rev = bitReverse(i, log2n);
 800113a:	6839      	ldr	r1, [r7, #0]
 800113c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800113e:	f7ff ffc5 	bl	80010cc <bitReverse>
 8001142:	6378      	str	r0, [r7, #52]	; 0x34
        if (i < rev) {
 8001144:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001148:	429a      	cmp	r2, r3
 800114a:	da1f      	bge.n	800118c <iterativeFFT+0x6c>
            float complex tmp = a[i];
 800114c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	4413      	add	r3, r2
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	613a      	str	r2, [r7, #16]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001162:	633b      	str	r3, [r7, #48]	; 0x30
            a[i] = a[rev];
 8001164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	441a      	add	r2, r3
 800116c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	6879      	ldr	r1, [r7, #4]
 8001172:	440b      	add	r3, r1
 8001174:	6811      	ldr	r1, [r2, #0]
 8001176:	6852      	ldr	r2, [r2, #4]
 8001178:	6019      	str	r1, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
            a[rev] = tmp;
 800117c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800117e:	00db      	lsls	r3, r3, #3
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	4413      	add	r3, r2
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	68fa      	ldr	r2, [r7, #12]
 800118a:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < n; i++) {
 800118c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800118e:	3301      	adds	r3, #1
 8001190:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001192:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001194:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001196:	429a      	cmp	r2, r3
 8001198:	dbcf      	blt.n	800113a <iterativeFFT+0x1a>
        }
    }

    for (int s = 1; s <= log2n; s++) {
 800119a:	2301      	movs	r3, #1
 800119c:	66bb      	str	r3, [r7, #104]	; 0x68
 800119e:	e0d0      	b.n	8001342 <iterativeFFT+0x222>
    	int m = 1 << s;
 80011a0:	2201      	movs	r2, #1
 80011a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	65bb      	str	r3, [r7, #88]	; 0x58
        float complex wm = cexp(-2.0 * I * M_PI / (float)m);
 80011aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011ac:	ee07 3a90 	vmov	s15, r3
 80011b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011b8:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8001358 <iterativeFFT+0x238>
 80011bc:	ee86 4b07 	vdiv.f64	d4, d6, d7
 80011c0:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8001360 <iterativeFFT+0x240>
 80011c4:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80011c8:	ec51 0b14 	vmov	r0, r1, d4
 80011cc:	ec53 2b15 	vmov	r2, r3, d5
 80011d0:	ec41 0b16 	vmov	d6, r0, r1
 80011d4:	ec43 2b17 	vmov	d7, r2, r3
 80011d8:	eeb0 0b46 	vmov.f64	d0, d6
 80011dc:	eeb0 1b47 	vmov.f64	d1, d7
 80011e0:	f009 fb66 	bl	800a8b0 <cexp>
 80011e4:	eeb0 6b40 	vmov.f64	d6, d0
 80011e8:	eeb0 7b41 	vmov.f64	d7, d1
 80011ec:	eef7 6bc6 	vcvt.f32.f64	s13, d6
 80011f0:	edc7 6a1d 	vstr	s13, [r7, #116]	; 0x74
 80011f4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011f8:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
 80011fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80011fe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001200:	653a      	str	r2, [r7, #80]	; 0x50
 8001202:	657b      	str	r3, [r7, #84]	; 0x54
        for (int k = 0; k < n; k += m) {
 8001204:	2300      	movs	r3, #0
 8001206:	667b      	str	r3, [r7, #100]	; 0x64
 8001208:	e093      	b.n	8001332 <iterativeFFT+0x212>
            float complex w = 1;
 800120a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800120e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001210:	f04f 0300 	mov.w	r3, #0
 8001214:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (int j = 0; j < m/2; j++) {
 8001216:	2300      	movs	r3, #0
 8001218:	663b      	str	r3, [r7, #96]	; 0x60
 800121a:	f04f 0300 	mov.w	r3, #0
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
 8001220:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001224:	62bb      	str	r3, [r7, #40]	; 0x28
 8001226:	e076      	b.n	8001316 <iterativeFFT+0x1f6>
                float complex t = w * a[k + j + m/2];
 8001228:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800122a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800122c:	441a      	add	r2, r3
 800122e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001230:	2b00      	cmp	r3, #0
 8001232:	da00      	bge.n	8001236 <iterativeFFT+0x116>
 8001234:	3301      	adds	r3, #1
 8001236:	105b      	asrs	r3, r3, #1
 8001238:	4413      	add	r3, r2
 800123a:	00db      	lsls	r3, r3, #3
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	4413      	add	r3, r2
 8001240:	edd3 7a00 	vldr	s15, [r3]
 8001244:	ed93 7a01 	vldr	s14, [r3, #4]
 8001248:	eef0 1a47 	vmov.f32	s3, s14
 800124c:	eeb0 1a67 	vmov.f32	s2, s15
 8001250:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8001254:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8001258:	f7ff f8b2 	bl	80003c0 <__mulsc3>
 800125c:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
 8001260:	edc7 0a11 	vstr	s1, [r7, #68]	; 0x44
 8001264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001266:	623b      	str	r3, [r7, #32]
 8001268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800126a:	61fb      	str	r3, [r7, #28]
                float complex u = a[k + j];
 800126c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800126e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001270:	4413      	add	r3, r2
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	4413      	add	r3, r2
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	61ba      	str	r2, [r7, #24]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	617b      	str	r3, [r7, #20]
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	63ba      	str	r2, [r7, #56]	; 0x38
 8001286:	63fb      	str	r3, [r7, #60]	; 0x3c
                a[k + j] = u + t;
 8001288:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800128a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800128c:	4413      	add	r3, r2
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	4413      	add	r3, r2
 8001294:	ed97 7a08 	vldr	s14, [r7, #32]
 8001298:	edd7 7a06 	vldr	s15, [r7, #24]
 800129c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80012a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80012a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80012ac:	ed83 7a00 	vstr	s14, [r3]
 80012b0:	edc3 7a01 	vstr	s15, [r3, #4]
                a[k + j + m/2] = u - t;
 80012b4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80012b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012b8:	441a      	add	r2, r3
 80012ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80012bc:	2b00      	cmp	r3, #0
 80012be:	da00      	bge.n	80012c2 <iterativeFFT+0x1a2>
 80012c0:	3301      	adds	r3, #1
 80012c2:	105b      	asrs	r3, r3, #1
 80012c4:	4413      	add	r3, r2
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	4413      	add	r3, r2
 80012cc:	ed97 7a06 	vldr	s14, [r7, #24]
 80012d0:	edd7 7a08 	vldr	s15, [r7, #32]
 80012d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012d8:	edd7 6a05 	vldr	s13, [r7, #20]
 80012dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80012e0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80012e4:	ed83 7a00 	vstr	s14, [r3]
 80012e8:	edc3 7a01 	vstr	s15, [r3, #4]
                w = w * wm;
 80012ec:	edd7 1a1c 	vldr	s3, [r7, #112]	; 0x70
 80012f0:	ed97 1a1d 	vldr	s2, [r7, #116]	; 0x74
 80012f4:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 80012f8:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80012fc:	f7ff f860 	bl	80003c0 <__mulsc3>
 8001300:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
 8001304:	edc7 0a13 	vstr	s1, [r7, #76]	; 0x4c
 8001308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800130a:	62bb      	str	r3, [r7, #40]	; 0x28
 800130c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800130e:	627b      	str	r3, [r7, #36]	; 0x24
            for (int j = 0; j < m/2; j++) {
 8001310:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001312:	3301      	adds	r3, #1
 8001314:	663b      	str	r3, [r7, #96]	; 0x60
 8001316:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001318:	2b00      	cmp	r3, #0
 800131a:	da00      	bge.n	800131e <iterativeFFT+0x1fe>
 800131c:	3301      	adds	r3, #1
 800131e:	105b      	asrs	r3, r3, #1
 8001320:	461a      	mov	r2, r3
 8001322:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001324:	4293      	cmp	r3, r2
 8001326:	f6ff af7f 	blt.w	8001228 <iterativeFFT+0x108>
        for (int k = 0; k < n; k += m) {
 800132a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800132c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800132e:	4413      	add	r3, r2
 8001330:	667b      	str	r3, [r7, #100]	; 0x64
 8001332:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001334:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001336:	429a      	cmp	r2, r3
 8001338:	f6ff af67 	blt.w	800120a <iterativeFFT+0xea>
    for (int s = 1; s <= log2n; s++) {
 800133c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800133e:	3301      	adds	r3, #1
 8001340:	66bb      	str	r3, [r7, #104]	; 0x68
 8001342:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	f77f af2a 	ble.w	80011a0 <iterativeFFT+0x80>
            }
        }
    }
}
 800134c:	bf00      	nop
 800134e:	bf00      	nop
 8001350:	3778      	adds	r7, #120	; 0x78
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	00000000 	.word	0x00000000
 800135c:	80000000 	.word	0x80000000
 8001360:	54442d18 	.word	0x54442d18
 8001364:	c01921fb 	.word	0xc01921fb

08001368 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8001368:	b590      	push	{r4, r7, lr}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	if(htim == &htim6){
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4a1a      	ldr	r2, [pc, #104]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d12d      	bne.n	80013d4 <HAL_TIM_PeriodElapsedCallback+0x6c>
		if(cont < 512){
 8001378:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800137a:	881b      	ldrh	r3, [r3, #0]
 800137c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001380:	d218      	bcs.n	80013b4 <HAL_TIM_PeriodElapsedCallback+0x4c>
			MPU6050_read_gyro();
 8001382:	f7ff fde5 	bl	8000f50 <MPU6050_read_gyro>
			fftarrGz[cont] = zgs;
 8001386:	4b17      	ldr	r3, [pc, #92]	; (80013e4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001388:	6819      	ldr	r1, [r3, #0]
 800138a:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800138c:	881b      	ldrh	r3, [r3, #0]
 800138e:	461a      	mov	r2, r3
 8001390:	460c      	mov	r4, r1
 8001392:	f04f 0000 	mov.w	r0, #0
 8001396:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001398:	00d1      	lsls	r1, r2, #3
 800139a:	4419      	add	r1, r3
 800139c:	600c      	str	r4, [r1, #0]
 800139e:	00d2      	lsls	r2, r2, #3
 80013a0:	4413      	add	r3, r2
 80013a2:	3304      	adds	r3, #4
 80013a4:	6018      	str	r0, [r3, #0]
			cont++;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80013a8:	881b      	ldrh	r3, [r3, #0]
 80013aa:	3301      	adds	r3, #1
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80013b0:	801a      	strh	r2, [r3, #0]
			cont = 0;


		}
	}
}
 80013b2:	e00f      	b.n	80013d4 <HAL_TIM_PeriodElapsedCallback+0x6c>
			HAL_TIM_Base_Stop_IT(&htim6);
 80013b4:	4809      	ldr	r0, [pc, #36]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x74>)
 80013b6:	f004 fd7d 	bl	8005eb4 <HAL_TIM_Base_Stop_IT>
			iterativeFFT(fftarrGz, 9);
 80013ba:	2109      	movs	r1, #9
 80013bc:	480a      	ldr	r0, [pc, #40]	; (80013e8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80013be:	f7ff feaf 	bl	8001120 <iterativeFFT>
			evaluacionFrec();
 80013c2:	f000 f813 	bl	80013ec <evaluacionFrec>
			HAL_HSEM_Release(HSEM_ID_0,0);
 80013c6:	2100      	movs	r1, #0
 80013c8:	2000      	movs	r0, #0
 80013ca:	f000 febd 	bl	8002148 <HAL_HSEM_Release>
			cont = 0;
 80013ce:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	801a      	strh	r2, [r3, #0]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd90      	pop	{r4, r7, pc}
 80013dc:	24000248 	.word	0x24000248
 80013e0:	24000880 	.word	0x24000880
 80013e4:	2400087c 	.word	0x2400087c
 80013e8:	24000884 	.word	0x24000884

080013ec <evaluacionFrec>:

void evaluacionFrec(){
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
	int sum = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
	for(uint8_t i = 101; i < 201; i++){
 80013f6:	2365      	movs	r3, #101	; 0x65
 80013f8:	70fb      	strb	r3, [r7, #3]
 80013fa:	e013      	b.n	8001424 <evaluacionFrec+0x38>
		sum+=abs((int)creal(fftarrGz[i]));
 80013fc:	78fb      	ldrb	r3, [r7, #3]
 80013fe:	4a18      	ldr	r2, [pc, #96]	; (8001460 <evaluacionFrec+0x74>)
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	4413      	add	r3, r2
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	ee07 3a90 	vmov	s15, r3
 800140a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800140e:	ee17 3a90 	vmov	r3, s15
 8001412:	2b00      	cmp	r3, #0
 8001414:	bfb8      	it	lt
 8001416:	425b      	neglt	r3, r3
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	4413      	add	r3, r2
 800141c:	607b      	str	r3, [r7, #4]
	for(uint8_t i = 101; i < 201; i++){
 800141e:	78fb      	ldrb	r3, [r7, #3]
 8001420:	3301      	adds	r3, #1
 8001422:	70fb      	strb	r3, [r7, #3]
 8001424:	78fb      	ldrb	r3, [r7, #3]
 8001426:	2bc8      	cmp	r3, #200	; 0xc8
 8001428:	d9e8      	bls.n	80013fc <evaluacionFrec+0x10>
	}
	if(sum > 4000){
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001430:	dd02      	ble.n	8001438 <evaluacionFrec+0x4c>
		xfr_ptr->alerta = 1;
 8001432:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <evaluacionFrec+0x78>)
 8001434:	2201      	movs	r2, #1
 8001436:	701a      	strb	r2, [r3, #0]
	}

	len = sprintf(buffer, "%d \n\r", sum);
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	490b      	ldr	r1, [pc, #44]	; (8001468 <evaluacionFrec+0x7c>)
 800143c:	480b      	ldr	r0, [pc, #44]	; (800146c <evaluacionFrec+0x80>)
 800143e:	f007 f95f 	bl	8008700 <siprintf>
 8001442:	4603      	mov	r3, r0
 8001444:	b29a      	uxth	r2, r3
 8001446:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <evaluacionFrec+0x84>)
 8001448:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t* )buffer, len, 100);
 800144a:	4b09      	ldr	r3, [pc, #36]	; (8001470 <evaluacionFrec+0x84>)
 800144c:	881a      	ldrh	r2, [r3, #0]
 800144e:	2364      	movs	r3, #100	; 0x64
 8001450:	4906      	ldr	r1, [pc, #24]	; (800146c <evaluacionFrec+0x80>)
 8001452:	4808      	ldr	r0, [pc, #32]	; (8001474 <evaluacionFrec+0x88>)
 8001454:	f005 f83a 	bl	80064cc <HAL_UART_Transmit>
}
 8001458:	bf00      	nop
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	24000884 	.word	0x24000884
 8001464:	38001000 	.word	0x38001000
 8001468:	0800b7f0 	.word	0x0800b7f0
 800146c:	24000834 	.word	0x24000834
 8001470:	24000866 	.word	0x24000866
 8001474:	24000294 	.word	0x24000294

08001478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800147c:	b672      	cpsid	i
}
 800147e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001480:	e7fe      	b.n	8001480 <Error_Handler+0x8>
	...

08001484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148a:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <HAL_MspInit+0x30>)
 800148c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001490:	4a08      	ldr	r2, [pc, #32]	; (80014b4 <HAL_MspInit+0x30>)
 8001492:	f043 0302 	orr.w	r3, r3, #2
 8001496:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800149a:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <HAL_MspInit+0x30>)
 800149c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	58024400 	.word	0x58024400

080014b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b0ba      	sub	sp, #232	; 0xe8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014d0:	f107 0310 	add.w	r3, r7, #16
 80014d4:	22c0      	movs	r2, #192	; 0xc0
 80014d6:	2100      	movs	r1, #0
 80014d8:	4618      	mov	r0, r3
 80014da:	f007 f974 	bl	80087c6 <memset>
  if(hi2c->Instance==I2C2)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a27      	ldr	r2, [pc, #156]	; (8001580 <HAL_I2C_MspInit+0xc8>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d146      	bne.n	8001576 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80014e8:	f04f 0208 	mov.w	r2, #8
 80014ec:	f04f 0300 	mov.w	r3, #0
 80014f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80014f4:	2300      	movs	r3, #0
 80014f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014fa:	f107 0310 	add.w	r3, r7, #16
 80014fe:	4618      	mov	r0, r3
 8001500:	f002 fddc 	bl	80040bc <HAL_RCCEx_PeriphCLKConfig>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800150a:	f7ff ffb5 	bl	8001478 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800150e:	4b1d      	ldr	r3, [pc, #116]	; (8001584 <HAL_I2C_MspInit+0xcc>)
 8001510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001514:	4a1b      	ldr	r2, [pc, #108]	; (8001584 <HAL_I2C_MspInit+0xcc>)
 8001516:	f043 0302 	orr.w	r3, r3, #2
 800151a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800151e:	4b19      	ldr	r3, [pc, #100]	; (8001584 <HAL_I2C_MspInit+0xcc>)
 8001520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800152c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001530:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001534:	2312      	movs	r3, #18
 8001536:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001540:	2300      	movs	r3, #0
 8001542:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001546:	2304      	movs	r3, #4
 8001548:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001550:	4619      	mov	r1, r3
 8001552:	480d      	ldr	r0, [pc, #52]	; (8001588 <HAL_I2C_MspInit+0xd0>)
 8001554:	f000 fc2e 	bl	8001db4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001558:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <HAL_I2C_MspInit+0xcc>)
 800155a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800155e:	4a09      	ldr	r2, [pc, #36]	; (8001584 <HAL_I2C_MspInit+0xcc>)
 8001560:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001564:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <HAL_I2C_MspInit+0xcc>)
 800156a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800156e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001576:	bf00      	nop
 8001578:	37e8      	adds	r7, #232	; 0xe8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40005800 	.word	0x40005800
 8001584:	58024400 	.word	0x58024400
 8001588:	58020400 	.word	0x58020400

0800158c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a0e      	ldr	r2, [pc, #56]	; (80015d4 <HAL_TIM_Base_MspInit+0x48>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d116      	bne.n	80015cc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <HAL_TIM_Base_MspInit+0x4c>)
 80015a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015a4:	4a0c      	ldr	r2, [pc, #48]	; (80015d8 <HAL_TIM_Base_MspInit+0x4c>)
 80015a6:	f043 0310 	orr.w	r3, r3, #16
 80015aa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80015ae:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <HAL_TIM_Base_MspInit+0x4c>)
 80015b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015b4:	f003 0310 	and.w	r3, r3, #16
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80015bc:	2200      	movs	r2, #0
 80015be:	2100      	movs	r1, #0
 80015c0:	2036      	movs	r0, #54	; 0x36
 80015c2:	f000 fbc2 	bl	8001d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015c6:	2036      	movs	r0, #54	; 0x36
 80015c8:	f000 fbd9 	bl	8001d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80015cc:	bf00      	nop
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40001000 	.word	0x40001000
 80015d8:	58024400 	.word	0x58024400

080015dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b0ba      	sub	sp, #232	; 0xe8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015f4:	f107 0310 	add.w	r3, r7, #16
 80015f8:	22c0      	movs	r2, #192	; 0xc0
 80015fa:	2100      	movs	r1, #0
 80015fc:	4618      	mov	r0, r3
 80015fe:	f007 f8e2 	bl	80087c6 <memset>
  if(huart->Instance==USART3)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a27      	ldr	r2, [pc, #156]	; (80016a4 <HAL_UART_MspInit+0xc8>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d146      	bne.n	800169a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800160c:	f04f 0202 	mov.w	r2, #2
 8001610:	f04f 0300 	mov.w	r3, #0
 8001614:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001618:	2300      	movs	r3, #0
 800161a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800161e:	f107 0310 	add.w	r3, r7, #16
 8001622:	4618      	mov	r0, r3
 8001624:	f002 fd4a 	bl	80040bc <HAL_RCCEx_PeriphCLKConfig>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800162e:	f7ff ff23 	bl	8001478 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001632:	4b1d      	ldr	r3, [pc, #116]	; (80016a8 <HAL_UART_MspInit+0xcc>)
 8001634:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001638:	4a1b      	ldr	r2, [pc, #108]	; (80016a8 <HAL_UART_MspInit+0xcc>)
 800163a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800163e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001642:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <HAL_UART_MspInit+0xcc>)
 8001644:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001648:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001650:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <HAL_UART_MspInit+0xcc>)
 8001652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001656:	4a14      	ldr	r2, [pc, #80]	; (80016a8 <HAL_UART_MspInit+0xcc>)
 8001658:	f043 0308 	orr.w	r3, r3, #8
 800165c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <HAL_UART_MspInit+0xcc>)
 8001662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001666:	f003 0308 	and.w	r3, r3, #8
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800166e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001672:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	2302      	movs	r3, #2
 8001678:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001682:	2300      	movs	r3, #0
 8001684:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001688:	2307      	movs	r3, #7
 800168a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800168e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001692:	4619      	mov	r1, r3
 8001694:	4805      	ldr	r0, [pc, #20]	; (80016ac <HAL_UART_MspInit+0xd0>)
 8001696:	f000 fb8d 	bl	8001db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800169a:	bf00      	nop
 800169c:	37e8      	adds	r7, #232	; 0xe8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40004800 	.word	0x40004800
 80016a8:	58024400 	.word	0x58024400
 80016ac:	58020c00 	.word	0x58020c00

080016b0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b0ba      	sub	sp, #232	; 0xe8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016c8:	f107 0310 	add.w	r3, r7, #16
 80016cc:	22c0      	movs	r2, #192	; 0xc0
 80016ce:	2100      	movs	r1, #0
 80016d0:	4618      	mov	r0, r3
 80016d2:	f007 f878 	bl	80087c6 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a38      	ldr	r2, [pc, #224]	; (80017bc <HAL_PCD_MspInit+0x10c>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d169      	bne.n	80017b4 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80016e0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80016e4:	f04f 0300 	mov.w	r3, #0
 80016e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 80016ec:	2301      	movs	r3, #1
 80016ee:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 80016f0:	2312      	movs	r3, #18
 80016f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80016f4:	2302      	movs	r3, #2
 80016f6:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 80016f8:	2303      	movs	r3, #3
 80016fa:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80016fc:	2302      	movs	r3, #2
 80016fe:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001700:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001704:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8001706:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800170a:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 800170c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001710:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001714:	f107 0310 	add.w	r3, r7, #16
 8001718:	4618      	mov	r0, r3
 800171a:	f002 fccf 	bl	80040bc <HAL_RCCEx_PeriphCLKConfig>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 8001724:	f7ff fea8 	bl	8001478 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001728:	f001 fcd2 	bl	80030d0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172c:	4b24      	ldr	r3, [pc, #144]	; (80017c0 <HAL_PCD_MspInit+0x110>)
 800172e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001732:	4a23      	ldr	r2, [pc, #140]	; (80017c0 <HAL_PCD_MspInit+0x110>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800173c:	4b20      	ldr	r3, [pc, #128]	; (80017c0 <HAL_PCD_MspInit+0x110>)
 800173e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800174a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800174e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175e:	2300      	movs	r3, #0
 8001760:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001764:	230a      	movs	r3, #10
 8001766:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800176e:	4619      	mov	r1, r3
 8001770:	4814      	ldr	r0, [pc, #80]	; (80017c4 <HAL_PCD_MspInit+0x114>)
 8001772:	f000 fb1f 	bl	8001db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001776:	f44f 7300 	mov.w	r3, #512	; 0x200
 800177a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800177e:	2300      	movs	r3, #0
 8001780:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800178e:	4619      	mov	r1, r3
 8001790:	480c      	ldr	r0, [pc, #48]	; (80017c4 <HAL_PCD_MspInit+0x114>)
 8001792:	f000 fb0f 	bl	8001db4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001796:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <HAL_PCD_MspInit+0x110>)
 8001798:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800179c:	4a08      	ldr	r2, [pc, #32]	; (80017c0 <HAL_PCD_MspInit+0x110>)
 800179e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80017a2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80017a6:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <HAL_PCD_MspInit+0x110>)
 80017a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80017b0:	60bb      	str	r3, [r7, #8]
 80017b2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80017b4:	bf00      	nop
 80017b6:	37e8      	adds	r7, #232	; 0xe8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40080000 	.word	0x40080000
 80017c0:	58024400 	.word	0x58024400
 80017c4:	58020000 	.word	0x58020000

080017c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017cc:	e7fe      	b.n	80017cc <NMI_Handler+0x4>

080017ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017d2:	e7fe      	b.n	80017d2 <HardFault_Handler+0x4>

080017d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <MemManage_Handler+0x4>

080017da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017de:	e7fe      	b.n	80017de <BusFault_Handler+0x4>

080017e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <UsageFault_Handler+0x4>

080017e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001814:	f000 f96e 	bl	8001af4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}

0800181c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001820:	4802      	ldr	r0, [pc, #8]	; (800182c <TIM6_DAC_IRQHandler+0x10>)
 8001822:	f004 fb76 	bl	8005f12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	24000248 	.word	0x24000248

08001830 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return 1;
 8001834:	2301      	movs	r3, #1
}
 8001836:	4618      	mov	r0, r3
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <_kill>:

int _kill(int pid, int sig)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800184a:	f007 f80f 	bl	800886c <__errno>
 800184e:	4603      	mov	r3, r0
 8001850:	2216      	movs	r2, #22
 8001852:	601a      	str	r2, [r3, #0]
  return -1;
 8001854:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001858:	4618      	mov	r0, r3
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <_exit>:

void _exit (int status)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001868:	f04f 31ff 	mov.w	r1, #4294967295
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff ffe7 	bl	8001840 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001872:	e7fe      	b.n	8001872 <_exit+0x12>

08001874 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]
 8001884:	e00a      	b.n	800189c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001886:	f3af 8000 	nop.w
 800188a:	4601      	mov	r1, r0
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	1c5a      	adds	r2, r3, #1
 8001890:	60ba      	str	r2, [r7, #8]
 8001892:	b2ca      	uxtb	r2, r1
 8001894:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	3301      	adds	r3, #1
 800189a:	617b      	str	r3, [r7, #20]
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	dbf0      	blt.n	8001886 <_read+0x12>
  }

  return len;
 80018a4:	687b      	ldr	r3, [r7, #4]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b086      	sub	sp, #24
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	60f8      	str	r0, [r7, #12]
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	e009      	b.n	80018d4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	1c5a      	adds	r2, r3, #1
 80018c4:	60ba      	str	r2, [r7, #8]
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	3301      	adds	r3, #1
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	429a      	cmp	r2, r3
 80018da:	dbf1      	blt.n	80018c0 <_write+0x12>
  }
  return len;
 80018dc:	687b      	ldr	r3, [r7, #4]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <_close>:

int _close(int file)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
 8001906:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800190e:	605a      	str	r2, [r3, #4]
  return 0;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <_isatty>:

int _isatty(int file)
{
 800191e:	b480      	push	{r7}
 8001920:	b083      	sub	sp, #12
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001926:	2301      	movs	r3, #1
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3714      	adds	r7, #20
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
	...

08001950 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001958:	4a14      	ldr	r2, [pc, #80]	; (80019ac <_sbrk+0x5c>)
 800195a:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <_sbrk+0x60>)
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001964:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <_sbrk+0x64>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d102      	bne.n	8001972 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800196c:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <_sbrk+0x64>)
 800196e:	4a12      	ldr	r2, [pc, #72]	; (80019b8 <_sbrk+0x68>)
 8001970:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <_sbrk+0x64>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4413      	add	r3, r2
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	429a      	cmp	r2, r3
 800197e:	d207      	bcs.n	8001990 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001980:	f006 ff74 	bl	800886c <__errno>
 8001984:	4603      	mov	r3, r0
 8001986:	220c      	movs	r2, #12
 8001988:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800198a:	f04f 33ff 	mov.w	r3, #4294967295
 800198e:	e009      	b.n	80019a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001990:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <_sbrk+0x64>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001996:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <_sbrk+0x64>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4413      	add	r3, r2
 800199e:	4a05      	ldr	r2, [pc, #20]	; (80019b4 <_sbrk+0x64>)
 80019a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019a2:	68fb      	ldr	r3, [r7, #12]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	24080000 	.word	0x24080000
 80019b0:	00000400 	.word	0x00000400
 80019b4:	24001884 	.word	0x24001884
 80019b8:	240019d8 	.word	0x240019d8

080019bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80019bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80019c0:	f7fe ffae 	bl	8000920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019c4:	480c      	ldr	r0, [pc, #48]	; (80019f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019c6:	490d      	ldr	r1, [pc, #52]	; (80019fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019c8:	4a0d      	ldr	r2, [pc, #52]	; (8001a00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019cc:	e002      	b.n	80019d4 <LoopCopyDataInit>

080019ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019d2:	3304      	adds	r3, #4

080019d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d8:	d3f9      	bcc.n	80019ce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019da:	4a0a      	ldr	r2, [pc, #40]	; (8001a04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019dc:	4c0a      	ldr	r4, [pc, #40]	; (8001a08 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e0:	e001      	b.n	80019e6 <LoopFillZerobss>

080019e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e4:	3204      	adds	r2, #4

080019e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e8:	d3fb      	bcc.n	80019e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ea:	f006 ff45 	bl	8008878 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ee:	f7ff f82d 	bl	8000a4c <main>
  bx  lr
 80019f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019f4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80019f8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80019fc:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001a00:	0800c600 	.word	0x0800c600
  ldr r2, =_sbss
 8001a04:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8001a08:	240019d8 	.word	0x240019d8

08001a0c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a0c:	e7fe      	b.n	8001a0c <ADC3_IRQHandler>
	...

08001a10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a16:	2003      	movs	r0, #3
 8001a18:	f000 f98c 	bl	8001d34 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a1c:	f002 f978 	bl	8003d10 <HAL_RCC_GetSysClockFreq>
 8001a20:	4602      	mov	r2, r0
 8001a22:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <HAL_Init+0x68>)
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	0a1b      	lsrs	r3, r3, #8
 8001a28:	f003 030f 	and.w	r3, r3, #15
 8001a2c:	4913      	ldr	r1, [pc, #76]	; (8001a7c <HAL_Init+0x6c>)
 8001a2e:	5ccb      	ldrb	r3, [r1, r3]
 8001a30:	f003 031f 	and.w	r3, r3, #31
 8001a34:	fa22 f303 	lsr.w	r3, r2, r3
 8001a38:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a3a:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <HAL_Init+0x68>)
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	f003 030f 	and.w	r3, r3, #15
 8001a42:	4a0e      	ldr	r2, [pc, #56]	; (8001a7c <HAL_Init+0x6c>)
 8001a44:	5cd3      	ldrb	r3, [r2, r3]
 8001a46:	f003 031f 	and.w	r3, r3, #31
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a50:	4a0b      	ldr	r2, [pc, #44]	; (8001a80 <HAL_Init+0x70>)
 8001a52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a54:	4a0b      	ldr	r2, [pc, #44]	; (8001a84 <HAL_Init+0x74>)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	f000 f814 	bl	8001a88 <HAL_InitTick>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e002      	b.n	8001a70 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a6a:	f7ff fd0b 	bl	8001484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	58024400 	.word	0x58024400
 8001a7c:	0800b7f8 	.word	0x0800b7f8
 8001a80:	24000004 	.word	0x24000004
 8001a84:	24000000 	.word	0x24000000

08001a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001a90:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <HAL_InitTick+0x60>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d101      	bne.n	8001a9c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e021      	b.n	8001ae0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001a9c:	4b13      	ldr	r3, [pc, #76]	; (8001aec <HAL_InitTick+0x64>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <HAL_InitTick+0x60>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f000 f971 	bl	8001d9a <HAL_SYSTICK_Config>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e00e      	b.n	8001ae0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b0f      	cmp	r3, #15
 8001ac6:	d80a      	bhi.n	8001ade <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	6879      	ldr	r1, [r7, #4]
 8001acc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad0:	f000 f93b 	bl	8001d4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ad4:	4a06      	ldr	r2, [pc, #24]	; (8001af0 <HAL_InitTick+0x68>)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ada:	2300      	movs	r3, #0
 8001adc:	e000      	b.n	8001ae0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	2400000c 	.word	0x2400000c
 8001aec:	24000000 	.word	0x24000000
 8001af0:	24000008 	.word	0x24000008

08001af4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001af8:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <HAL_IncTick+0x20>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	461a      	mov	r2, r3
 8001afe:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <HAL_IncTick+0x24>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4413      	add	r3, r2
 8001b04:	4a04      	ldr	r2, [pc, #16]	; (8001b18 <HAL_IncTick+0x24>)
 8001b06:	6013      	str	r3, [r2, #0]
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	2400000c 	.word	0x2400000c
 8001b18:	24001888 	.word	0x24001888

08001b1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <HAL_GetTick+0x14>)
 8001b22:	681b      	ldr	r3, [r3, #0]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	24001888 	.word	0x24001888

08001b34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b3c:	f7ff ffee 	bl	8001b1c <HAL_GetTick>
 8001b40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b4c:	d005      	beq.n	8001b5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <HAL_Delay+0x44>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	461a      	mov	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	4413      	add	r3, r2
 8001b58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b5a:	bf00      	nop
 8001b5c:	f7ff ffde 	bl	8001b1c <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d8f7      	bhi.n	8001b5c <HAL_Delay+0x28>
  {
  }
}
 8001b6c:	bf00      	nop
 8001b6e:	bf00      	nop
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	2400000c 	.word	0x2400000c

08001b7c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001b80:	4b03      	ldr	r3, [pc, #12]	; (8001b90 <HAL_GetREVID+0x14>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	0c1b      	lsrs	r3, r3, #16
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	5c001000 	.word	0x5c001000

08001b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <__NVIC_SetPriorityGrouping+0x40>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bc2:	4a04      	ldr	r2, [pc, #16]	; (8001bd4 <__NVIC_SetPriorityGrouping+0x40>)
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	60d3      	str	r3, [r2, #12]
}
 8001bc8:	bf00      	nop
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	e000ed00 	.word	0xe000ed00
 8001bd8:	05fa0000 	.word	0x05fa0000

08001bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be0:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	0a1b      	lsrs	r3, r3, #8
 8001be6:	f003 0307 	and.w	r3, r3, #7
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	db0b      	blt.n	8001c22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c0a:	88fb      	ldrh	r3, [r7, #6]
 8001c0c:	f003 021f 	and.w	r2, r3, #31
 8001c10:	4907      	ldr	r1, [pc, #28]	; (8001c30 <__NVIC_EnableIRQ+0x38>)
 8001c12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c16:	095b      	lsrs	r3, r3, #5
 8001c18:	2001      	movs	r0, #1
 8001c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	e000e100 	.word	0xe000e100

08001c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	6039      	str	r1, [r7, #0]
 8001c3e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	db0a      	blt.n	8001c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	490c      	ldr	r1, [pc, #48]	; (8001c80 <__NVIC_SetPriority+0x4c>)
 8001c4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c52:	0112      	lsls	r2, r2, #4
 8001c54:	b2d2      	uxtb	r2, r2
 8001c56:	440b      	add	r3, r1
 8001c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c5c:	e00a      	b.n	8001c74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	4908      	ldr	r1, [pc, #32]	; (8001c84 <__NVIC_SetPriority+0x50>)
 8001c64:	88fb      	ldrh	r3, [r7, #6]
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	3b04      	subs	r3, #4
 8001c6c:	0112      	lsls	r2, r2, #4
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	440b      	add	r3, r1
 8001c72:	761a      	strb	r2, [r3, #24]
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000e100 	.word	0xe000e100
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b089      	sub	sp, #36	; 0x24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	bf28      	it	cs
 8001ca6:	2304      	movcs	r3, #4
 8001ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3304      	adds	r3, #4
 8001cae:	2b06      	cmp	r3, #6
 8001cb0:	d902      	bls.n	8001cb8 <NVIC_EncodePriority+0x30>
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3b03      	subs	r3, #3
 8001cb6:	e000      	b.n	8001cba <NVIC_EncodePriority+0x32>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43da      	mvns	r2, r3
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	401a      	ands	r2, r3
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cda:	43d9      	mvns	r1, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce0:	4313      	orrs	r3, r2
         );
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3724      	adds	r7, #36	; 0x24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d00:	d301      	bcc.n	8001d06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d02:	2301      	movs	r3, #1
 8001d04:	e00f      	b.n	8001d26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d06:	4a0a      	ldr	r2, [pc, #40]	; (8001d30 <SysTick_Config+0x40>)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d0e:	210f      	movs	r1, #15
 8001d10:	f04f 30ff 	mov.w	r0, #4294967295
 8001d14:	f7ff ff8e 	bl	8001c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d18:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <SysTick_Config+0x40>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d1e:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <SysTick_Config+0x40>)
 8001d20:	2207      	movs	r2, #7
 8001d22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	e000e010 	.word	0xe000e010

08001d34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff ff29 	bl	8001b94 <__NVIC_SetPriorityGrouping>
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b086      	sub	sp, #24
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	4603      	mov	r3, r0
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	607a      	str	r2, [r7, #4]
 8001d56:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d58:	f7ff ff40 	bl	8001bdc <__NVIC_GetPriorityGrouping>
 8001d5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	68b9      	ldr	r1, [r7, #8]
 8001d62:	6978      	ldr	r0, [r7, #20]
 8001d64:	f7ff ff90 	bl	8001c88 <NVIC_EncodePriority>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d6e:	4611      	mov	r1, r2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff ff5f 	bl	8001c34 <__NVIC_SetPriority>
}
 8001d76:	bf00      	nop
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	4603      	mov	r3, r0
 8001d86:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ff33 	bl	8001bf8 <__NVIC_EnableIRQ>
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff ffa4 	bl	8001cf0 <SysTick_Config>
 8001da8:	4603      	mov	r3, r0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
	...

08001db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b089      	sub	sp, #36	; 0x24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001dc2:	4b89      	ldr	r3, [pc, #548]	; (8001fe8 <HAL_GPIO_Init+0x234>)
 8001dc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001dc6:	e194      	b.n	80020f2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	2101      	movs	r1, #1
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 8186 	beq.w	80020ec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 0303 	and.w	r3, r3, #3
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d005      	beq.n	8001df8 <HAL_GPIO_Init+0x44>
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 0303 	and.w	r3, r3, #3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d130      	bne.n	8001e5a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	2203      	movs	r2, #3
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e2e:	2201      	movs	r2, #1
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43db      	mvns	r3, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	091b      	lsrs	r3, r3, #4
 8001e44:	f003 0201 	and.w	r2, r3, #1
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	2b03      	cmp	r3, #3
 8001e64:	d017      	beq.n	8001e96 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	2203      	movs	r2, #3
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43db      	mvns	r3, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d123      	bne.n	8001eea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	08da      	lsrs	r2, r3, #3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	3208      	adds	r2, #8
 8001eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	220f      	movs	r2, #15
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	691a      	ldr	r2, [r3, #16]
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	08da      	lsrs	r2, r3, #3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3208      	adds	r2, #8
 8001ee4:	69b9      	ldr	r1, [r7, #24]
 8001ee6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	2203      	movs	r2, #3
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43db      	mvns	r3, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4013      	ands	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f003 0203 	and.w	r2, r3, #3
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 80e0 	beq.w	80020ec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f2c:	4b2f      	ldr	r3, [pc, #188]	; (8001fec <HAL_GPIO_Init+0x238>)
 8001f2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f32:	4a2e      	ldr	r2, [pc, #184]	; (8001fec <HAL_GPIO_Init+0x238>)
 8001f34:	f043 0302 	orr.w	r3, r3, #2
 8001f38:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001f3c:	4b2b      	ldr	r3, [pc, #172]	; (8001fec <HAL_GPIO_Init+0x238>)
 8001f3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f4a:	4a29      	ldr	r2, [pc, #164]	; (8001ff0 <HAL_GPIO_Init+0x23c>)
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	089b      	lsrs	r3, r3, #2
 8001f50:	3302      	adds	r3, #2
 8001f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	220f      	movs	r2, #15
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43db      	mvns	r3, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a20      	ldr	r2, [pc, #128]	; (8001ff4 <HAL_GPIO_Init+0x240>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d052      	beq.n	800201c <HAL_GPIO_Init+0x268>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a1f      	ldr	r2, [pc, #124]	; (8001ff8 <HAL_GPIO_Init+0x244>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d031      	beq.n	8001fe2 <HAL_GPIO_Init+0x22e>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a1e      	ldr	r2, [pc, #120]	; (8001ffc <HAL_GPIO_Init+0x248>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d02b      	beq.n	8001fde <HAL_GPIO_Init+0x22a>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a1d      	ldr	r2, [pc, #116]	; (8002000 <HAL_GPIO_Init+0x24c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d025      	beq.n	8001fda <HAL_GPIO_Init+0x226>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a1c      	ldr	r2, [pc, #112]	; (8002004 <HAL_GPIO_Init+0x250>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d01f      	beq.n	8001fd6 <HAL_GPIO_Init+0x222>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a1b      	ldr	r2, [pc, #108]	; (8002008 <HAL_GPIO_Init+0x254>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d019      	beq.n	8001fd2 <HAL_GPIO_Init+0x21e>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a1a      	ldr	r2, [pc, #104]	; (800200c <HAL_GPIO_Init+0x258>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d013      	beq.n	8001fce <HAL_GPIO_Init+0x21a>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a19      	ldr	r2, [pc, #100]	; (8002010 <HAL_GPIO_Init+0x25c>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d00d      	beq.n	8001fca <HAL_GPIO_Init+0x216>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a18      	ldr	r2, [pc, #96]	; (8002014 <HAL_GPIO_Init+0x260>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d007      	beq.n	8001fc6 <HAL_GPIO_Init+0x212>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a17      	ldr	r2, [pc, #92]	; (8002018 <HAL_GPIO_Init+0x264>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d101      	bne.n	8001fc2 <HAL_GPIO_Init+0x20e>
 8001fbe:	2309      	movs	r3, #9
 8001fc0:	e02d      	b.n	800201e <HAL_GPIO_Init+0x26a>
 8001fc2:	230a      	movs	r3, #10
 8001fc4:	e02b      	b.n	800201e <HAL_GPIO_Init+0x26a>
 8001fc6:	2308      	movs	r3, #8
 8001fc8:	e029      	b.n	800201e <HAL_GPIO_Init+0x26a>
 8001fca:	2307      	movs	r3, #7
 8001fcc:	e027      	b.n	800201e <HAL_GPIO_Init+0x26a>
 8001fce:	2306      	movs	r3, #6
 8001fd0:	e025      	b.n	800201e <HAL_GPIO_Init+0x26a>
 8001fd2:	2305      	movs	r3, #5
 8001fd4:	e023      	b.n	800201e <HAL_GPIO_Init+0x26a>
 8001fd6:	2304      	movs	r3, #4
 8001fd8:	e021      	b.n	800201e <HAL_GPIO_Init+0x26a>
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e01f      	b.n	800201e <HAL_GPIO_Init+0x26a>
 8001fde:	2302      	movs	r3, #2
 8001fe0:	e01d      	b.n	800201e <HAL_GPIO_Init+0x26a>
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e01b      	b.n	800201e <HAL_GPIO_Init+0x26a>
 8001fe6:	bf00      	nop
 8001fe8:	58000080 	.word	0x58000080
 8001fec:	58024400 	.word	0x58024400
 8001ff0:	58000400 	.word	0x58000400
 8001ff4:	58020000 	.word	0x58020000
 8001ff8:	58020400 	.word	0x58020400
 8001ffc:	58020800 	.word	0x58020800
 8002000:	58020c00 	.word	0x58020c00
 8002004:	58021000 	.word	0x58021000
 8002008:	58021400 	.word	0x58021400
 800200c:	58021800 	.word	0x58021800
 8002010:	58021c00 	.word	0x58021c00
 8002014:	58022000 	.word	0x58022000
 8002018:	58022400 	.word	0x58022400
 800201c:	2300      	movs	r3, #0
 800201e:	69fa      	ldr	r2, [r7, #28]
 8002020:	f002 0203 	and.w	r2, r2, #3
 8002024:	0092      	lsls	r2, r2, #2
 8002026:	4093      	lsls	r3, r2
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4313      	orrs	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800202e:	4938      	ldr	r1, [pc, #224]	; (8002110 <HAL_GPIO_Init+0x35c>)
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	089b      	lsrs	r3, r3, #2
 8002034:	3302      	adds	r3, #2
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800203c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	43db      	mvns	r3, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4013      	ands	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	4313      	orrs	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002062:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800206a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	43db      	mvns	r3, r3
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4013      	ands	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d003      	beq.n	8002090 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	4313      	orrs	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002090:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	43db      	mvns	r3, r3
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4013      	ands	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	43db      	mvns	r3, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4013      	ands	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	3301      	adds	r3, #1
 80020f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	fa22 f303 	lsr.w	r3, r2, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f47f ae63 	bne.w	8001dc8 <HAL_GPIO_Init+0x14>
  }
}
 8002102:	bf00      	nop
 8002104:	bf00      	nop
 8002106:	3724      	adds	r7, #36	; 0x24
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	58000400 	.word	0x58000400

08002114 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800211c:	4a08      	ldr	r2, [pc, #32]	; (8002140 <HAL_HSEM_FastTake+0x2c>)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3320      	adds	r3, #32
 8002122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002126:	4a07      	ldr	r2, [pc, #28]	; (8002144 <HAL_HSEM_FastTake+0x30>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d101      	bne.n	8002130 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800212c:	2300      	movs	r3, #0
 800212e:	e000      	b.n	8002132 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
}
 8002132:	4618      	mov	r0, r3
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	58026400 	.word	0x58026400
 8002144:	80000300 	.word	0x80000300

08002148 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002152:	4906      	ldr	r1, [pc, #24]	; (800216c <HAL_HSEM_Release+0x24>)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	58026400 	.word	0x58026400

08002170 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e07f      	b.n	8002282 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d106      	bne.n	800219c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7ff f98e 	bl	80014b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2224      	movs	r2, #36	; 0x24
 80021a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f022 0201 	bic.w	r2, r2, #1
 80021b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d107      	bne.n	80021ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689a      	ldr	r2, [r3, #8]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	e006      	b.n	80021f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689a      	ldr	r2, [r3, #8]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80021f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d104      	bne.n	800220a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002208:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	6859      	ldr	r1, [r3, #4]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	4b1d      	ldr	r3, [pc, #116]	; (800228c <HAL_I2C_Init+0x11c>)
 8002216:	430b      	orrs	r3, r1
 8002218:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68da      	ldr	r2, [r3, #12]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002228:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	691a      	ldr	r2, [r3, #16]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	430a      	orrs	r2, r1
 8002242:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	69d9      	ldr	r1, [r3, #28]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a1a      	ldr	r2, [r3, #32]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	430a      	orrs	r2, r1
 8002252:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 0201 	orr.w	r2, r2, #1
 8002262:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2220      	movs	r2, #32
 800226e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	02008000 	.word	0x02008000

08002290 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b088      	sub	sp, #32
 8002294:	af02      	add	r7, sp, #8
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	4608      	mov	r0, r1
 800229a:	4611      	mov	r1, r2
 800229c:	461a      	mov	r2, r3
 800229e:	4603      	mov	r3, r0
 80022a0:	817b      	strh	r3, [r7, #10]
 80022a2:	460b      	mov	r3, r1
 80022a4:	813b      	strh	r3, [r7, #8]
 80022a6:	4613      	mov	r3, r2
 80022a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b20      	cmp	r3, #32
 80022b4:	f040 80f9 	bne.w	80024aa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022b8:	6a3b      	ldr	r3, [r7, #32]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d002      	beq.n	80022c4 <HAL_I2C_Mem_Write+0x34>
 80022be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d105      	bne.n	80022d0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022ca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e0ed      	b.n	80024ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d101      	bne.n	80022de <HAL_I2C_Mem_Write+0x4e>
 80022da:	2302      	movs	r3, #2
 80022dc:	e0e6      	b.n	80024ac <HAL_I2C_Mem_Write+0x21c>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022e6:	f7ff fc19 	bl	8001b1c <HAL_GetTick>
 80022ea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	2319      	movs	r3, #25
 80022f2:	2201      	movs	r2, #1
 80022f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022f8:	68f8      	ldr	r0, [r7, #12]
 80022fa:	f000 fac3 	bl	8002884 <I2C_WaitOnFlagUntilTimeout>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e0d1      	b.n	80024ac <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2221      	movs	r2, #33	; 0x21
 800230c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2240      	movs	r2, #64	; 0x40
 8002314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6a3a      	ldr	r2, [r7, #32]
 8002322:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002328:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002330:	88f8      	ldrh	r0, [r7, #6]
 8002332:	893a      	ldrh	r2, [r7, #8]
 8002334:	8979      	ldrh	r1, [r7, #10]
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	9301      	str	r3, [sp, #4]
 800233a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	4603      	mov	r3, r0
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f000 f9d3 	bl	80026ec <I2C_RequestMemoryWrite>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d005      	beq.n	8002358 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e0a9      	b.n	80024ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800235c:	b29b      	uxth	r3, r3
 800235e:	2bff      	cmp	r3, #255	; 0xff
 8002360:	d90e      	bls.n	8002380 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	22ff      	movs	r2, #255	; 0xff
 8002366:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800236c:	b2da      	uxtb	r2, r3
 800236e:	8979      	ldrh	r1, [r7, #10]
 8002370:	2300      	movs	r3, #0
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f000 fc3d 	bl	8002bf8 <I2C_TransferConfig>
 800237e:	e00f      	b.n	80023a0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002384:	b29a      	uxth	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800238e:	b2da      	uxtb	r2, r3
 8002390:	8979      	ldrh	r1, [r7, #10]
 8002392:	2300      	movs	r3, #0
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f000 fc2c 	bl	8002bf8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f000 fabc 	bl	8002922 <I2C_WaitOnTXISFlagUntilTimeout>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e07b      	b.n	80024ac <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b8:	781a      	ldrb	r2, [r3, #0]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	1c5a      	adds	r2, r3, #1
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	3b01      	subs	r3, #1
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023dc:	3b01      	subs	r3, #1
 80023de:	b29a      	uxth	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d034      	beq.n	8002458 <HAL_I2C_Mem_Write+0x1c8>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d130      	bne.n	8002458 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fc:	2200      	movs	r2, #0
 80023fe:	2180      	movs	r1, #128	; 0x80
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f000 fa3f 	bl	8002884 <I2C_WaitOnFlagUntilTimeout>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e04d      	b.n	80024ac <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002414:	b29b      	uxth	r3, r3
 8002416:	2bff      	cmp	r3, #255	; 0xff
 8002418:	d90e      	bls.n	8002438 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	22ff      	movs	r2, #255	; 0xff
 800241e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002424:	b2da      	uxtb	r2, r3
 8002426:	8979      	ldrh	r1, [r7, #10]
 8002428:	2300      	movs	r3, #0
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 fbe1 	bl	8002bf8 <I2C_TransferConfig>
 8002436:	e00f      	b.n	8002458 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800243c:	b29a      	uxth	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002446:	b2da      	uxtb	r2, r3
 8002448:	8979      	ldrh	r1, [r7, #10]
 800244a:	2300      	movs	r3, #0
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f000 fbd0 	bl	8002bf8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800245c:	b29b      	uxth	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d19e      	bne.n	80023a0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f000 faa2 	bl	80029b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e01a      	b.n	80024ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2220      	movs	r2, #32
 800247c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6859      	ldr	r1, [r3, #4]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	4b0a      	ldr	r3, [pc, #40]	; (80024b4 <HAL_I2C_Mem_Write+0x224>)
 800248a:	400b      	ands	r3, r1
 800248c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2220      	movs	r2, #32
 8002492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024a6:	2300      	movs	r3, #0
 80024a8:	e000      	b.n	80024ac <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80024aa:	2302      	movs	r3, #2
  }
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3718      	adds	r7, #24
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	fe00e800 	.word	0xfe00e800

080024b8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b088      	sub	sp, #32
 80024bc:	af02      	add	r7, sp, #8
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	4608      	mov	r0, r1
 80024c2:	4611      	mov	r1, r2
 80024c4:	461a      	mov	r2, r3
 80024c6:	4603      	mov	r3, r0
 80024c8:	817b      	strh	r3, [r7, #10]
 80024ca:	460b      	mov	r3, r1
 80024cc:	813b      	strh	r3, [r7, #8]
 80024ce:	4613      	mov	r3, r2
 80024d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b20      	cmp	r3, #32
 80024dc:	f040 80fd 	bne.w	80026da <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80024e0:	6a3b      	ldr	r3, [r7, #32]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d002      	beq.n	80024ec <HAL_I2C_Mem_Read+0x34>
 80024e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d105      	bne.n	80024f8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024f2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e0f1      	b.n	80026dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d101      	bne.n	8002506 <HAL_I2C_Mem_Read+0x4e>
 8002502:	2302      	movs	r3, #2
 8002504:	e0ea      	b.n	80026dc <HAL_I2C_Mem_Read+0x224>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800250e:	f7ff fb05 	bl	8001b1c <HAL_GetTick>
 8002512:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	9300      	str	r3, [sp, #0]
 8002518:	2319      	movs	r3, #25
 800251a:	2201      	movs	r2, #1
 800251c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f000 f9af 	bl	8002884 <I2C_WaitOnFlagUntilTimeout>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e0d5      	b.n	80026dc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2222      	movs	r2, #34	; 0x22
 8002534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2240      	movs	r2, #64	; 0x40
 800253c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6a3a      	ldr	r2, [r7, #32]
 800254a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002550:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002558:	88f8      	ldrh	r0, [r7, #6]
 800255a:	893a      	ldrh	r2, [r7, #8]
 800255c:	8979      	ldrh	r1, [r7, #10]
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	9301      	str	r3, [sp, #4]
 8002562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	4603      	mov	r3, r0
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f000 f913 	bl	8002794 <I2C_RequestMemoryRead>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d005      	beq.n	8002580 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e0ad      	b.n	80026dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002584:	b29b      	uxth	r3, r3
 8002586:	2bff      	cmp	r3, #255	; 0xff
 8002588:	d90e      	bls.n	80025a8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	22ff      	movs	r2, #255	; 0xff
 800258e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002594:	b2da      	uxtb	r2, r3
 8002596:	8979      	ldrh	r1, [r7, #10]
 8002598:	4b52      	ldr	r3, [pc, #328]	; (80026e4 <HAL_I2C_Mem_Read+0x22c>)
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f000 fb29 	bl	8002bf8 <I2C_TransferConfig>
 80025a6:	e00f      	b.n	80025c8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	8979      	ldrh	r1, [r7, #10]
 80025ba:	4b4a      	ldr	r3, [pc, #296]	; (80026e4 <HAL_I2C_Mem_Read+0x22c>)
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f000 fb18 	bl	8002bf8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ce:	2200      	movs	r2, #0
 80025d0:	2104      	movs	r1, #4
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f000 f956 	bl	8002884 <I2C_WaitOnFlagUntilTimeout>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e07c      	b.n	80026dc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f4:	1c5a      	adds	r2, r3, #1
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fe:	3b01      	subs	r3, #1
 8002600:	b29a      	uxth	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800260a:	b29b      	uxth	r3, r3
 800260c:	3b01      	subs	r3, #1
 800260e:	b29a      	uxth	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002618:	b29b      	uxth	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d034      	beq.n	8002688 <HAL_I2C_Mem_Read+0x1d0>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002622:	2b00      	cmp	r3, #0
 8002624:	d130      	bne.n	8002688 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262c:	2200      	movs	r2, #0
 800262e:	2180      	movs	r1, #128	; 0x80
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f000 f927 	bl	8002884 <I2C_WaitOnFlagUntilTimeout>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e04d      	b.n	80026dc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002644:	b29b      	uxth	r3, r3
 8002646:	2bff      	cmp	r3, #255	; 0xff
 8002648:	d90e      	bls.n	8002668 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	22ff      	movs	r2, #255	; 0xff
 800264e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002654:	b2da      	uxtb	r2, r3
 8002656:	8979      	ldrh	r1, [r7, #10]
 8002658:	2300      	movs	r3, #0
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	f000 fac9 	bl	8002bf8 <I2C_TransferConfig>
 8002666:	e00f      	b.n	8002688 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266c:	b29a      	uxth	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002676:	b2da      	uxtb	r2, r3
 8002678:	8979      	ldrh	r1, [r7, #10]
 800267a:	2300      	movs	r3, #0
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f000 fab8 	bl	8002bf8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800268c:	b29b      	uxth	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d19a      	bne.n	80025c8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f000 f98a 	bl	80029b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e01a      	b.n	80026dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2220      	movs	r2, #32
 80026ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6859      	ldr	r1, [r3, #4]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <HAL_I2C_Mem_Read+0x230>)
 80026ba:	400b      	ands	r3, r1
 80026bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2220      	movs	r2, #32
 80026c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026d6:	2300      	movs	r3, #0
 80026d8:	e000      	b.n	80026dc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80026da:	2302      	movs	r3, #2
  }
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3718      	adds	r7, #24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	80002400 	.word	0x80002400
 80026e8:	fe00e800 	.word	0xfe00e800

080026ec <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af02      	add	r7, sp, #8
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	4608      	mov	r0, r1
 80026f6:	4611      	mov	r1, r2
 80026f8:	461a      	mov	r2, r3
 80026fa:	4603      	mov	r3, r0
 80026fc:	817b      	strh	r3, [r7, #10]
 80026fe:	460b      	mov	r3, r1
 8002700:	813b      	strh	r3, [r7, #8]
 8002702:	4613      	mov	r3, r2
 8002704:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002706:	88fb      	ldrh	r3, [r7, #6]
 8002708:	b2da      	uxtb	r2, r3
 800270a:	8979      	ldrh	r1, [r7, #10]
 800270c:	4b20      	ldr	r3, [pc, #128]	; (8002790 <I2C_RequestMemoryWrite+0xa4>)
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f000 fa6f 	bl	8002bf8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800271a:	69fa      	ldr	r2, [r7, #28]
 800271c:	69b9      	ldr	r1, [r7, #24]
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f000 f8ff 	bl	8002922 <I2C_WaitOnTXISFlagUntilTimeout>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e02c      	b.n	8002788 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800272e:	88fb      	ldrh	r3, [r7, #6]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d105      	bne.n	8002740 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002734:	893b      	ldrh	r3, [r7, #8]
 8002736:	b2da      	uxtb	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	629a      	str	r2, [r3, #40]	; 0x28
 800273e:	e015      	b.n	800276c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002740:	893b      	ldrh	r3, [r7, #8]
 8002742:	0a1b      	lsrs	r3, r3, #8
 8002744:	b29b      	uxth	r3, r3
 8002746:	b2da      	uxtb	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800274e:	69fa      	ldr	r2, [r7, #28]
 8002750:	69b9      	ldr	r1, [r7, #24]
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 f8e5 	bl	8002922 <I2C_WaitOnTXISFlagUntilTimeout>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e012      	b.n	8002788 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002762:	893b      	ldrh	r3, [r7, #8]
 8002764:	b2da      	uxtb	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	2200      	movs	r2, #0
 8002774:	2180      	movs	r1, #128	; 0x80
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f000 f884 	bl	8002884 <I2C_WaitOnFlagUntilTimeout>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e000      	b.n	8002788 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	80002000 	.word	0x80002000

08002794 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af02      	add	r7, sp, #8
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	4608      	mov	r0, r1
 800279e:	4611      	mov	r1, r2
 80027a0:	461a      	mov	r2, r3
 80027a2:	4603      	mov	r3, r0
 80027a4:	817b      	strh	r3, [r7, #10]
 80027a6:	460b      	mov	r3, r1
 80027a8:	813b      	strh	r3, [r7, #8]
 80027aa:	4613      	mov	r3, r2
 80027ac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80027ae:	88fb      	ldrh	r3, [r7, #6]
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	8979      	ldrh	r1, [r7, #10]
 80027b4:	4b20      	ldr	r3, [pc, #128]	; (8002838 <I2C_RequestMemoryRead+0xa4>)
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	2300      	movs	r3, #0
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f000 fa1c 	bl	8002bf8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027c0:	69fa      	ldr	r2, [r7, #28]
 80027c2:	69b9      	ldr	r1, [r7, #24]
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f000 f8ac 	bl	8002922 <I2C_WaitOnTXISFlagUntilTimeout>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e02c      	b.n	800282e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027d4:	88fb      	ldrh	r3, [r7, #6]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d105      	bne.n	80027e6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027da:	893b      	ldrh	r3, [r7, #8]
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	629a      	str	r2, [r3, #40]	; 0x28
 80027e4:	e015      	b.n	8002812 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80027e6:	893b      	ldrh	r3, [r7, #8]
 80027e8:	0a1b      	lsrs	r3, r3, #8
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027f4:	69fa      	ldr	r2, [r7, #28]
 80027f6:	69b9      	ldr	r1, [r7, #24]
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f000 f892 	bl	8002922 <I2C_WaitOnTXISFlagUntilTimeout>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e012      	b.n	800282e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002808:	893b      	ldrh	r3, [r7, #8]
 800280a:	b2da      	uxtb	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	2200      	movs	r2, #0
 800281a:	2140      	movs	r1, #64	; 0x40
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f000 f831 	bl	8002884 <I2C_WaitOnFlagUntilTimeout>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e000      	b.n	800282e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	80002000 	.word	0x80002000

0800283c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b02      	cmp	r3, #2
 8002850:	d103      	bne.n	800285a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2200      	movs	r2, #0
 8002858:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	2b01      	cmp	r3, #1
 8002866:	d007      	beq.n	8002878 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	699a      	ldr	r2, [r3, #24]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f042 0201 	orr.w	r2, r2, #1
 8002876:	619a      	str	r2, [r3, #24]
  }
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	603b      	str	r3, [r7, #0]
 8002890:	4613      	mov	r3, r2
 8002892:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002894:	e031      	b.n	80028fa <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800289c:	d02d      	beq.n	80028fa <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800289e:	f7ff f93d 	bl	8001b1c <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d302      	bcc.n	80028b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d122      	bne.n	80028fa <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	699a      	ldr	r2, [r3, #24]
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	4013      	ands	r3, r2
 80028be:	68ba      	ldr	r2, [r7, #8]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	bf0c      	ite	eq
 80028c4:	2301      	moveq	r3, #1
 80028c6:	2300      	movne	r3, #0
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	461a      	mov	r2, r3
 80028cc:	79fb      	ldrb	r3, [r7, #7]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d113      	bne.n	80028fa <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d6:	f043 0220 	orr.w	r2, r3, #32
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2220      	movs	r2, #32
 80028e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e00f      	b.n	800291a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	699a      	ldr	r2, [r3, #24]
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	4013      	ands	r3, r2
 8002904:	68ba      	ldr	r2, [r7, #8]
 8002906:	429a      	cmp	r2, r3
 8002908:	bf0c      	ite	eq
 800290a:	2301      	moveq	r3, #1
 800290c:	2300      	movne	r3, #0
 800290e:	b2db      	uxtb	r3, r3
 8002910:	461a      	mov	r2, r3
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	429a      	cmp	r2, r3
 8002916:	d0be      	beq.n	8002896 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b084      	sub	sp, #16
 8002926:	af00      	add	r7, sp, #0
 8002928:	60f8      	str	r0, [r7, #12]
 800292a:	60b9      	str	r1, [r7, #8]
 800292c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800292e:	e033      	b.n	8002998 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	68b9      	ldr	r1, [r7, #8]
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f000 f87f 	bl	8002a38 <I2C_IsErrorOccurred>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e031      	b.n	80029a8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800294a:	d025      	beq.n	8002998 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800294c:	f7ff f8e6 	bl	8001b1c <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	429a      	cmp	r2, r3
 800295a:	d302      	bcc.n	8002962 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d11a      	bne.n	8002998 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b02      	cmp	r3, #2
 800296e:	d013      	beq.n	8002998 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002974:	f043 0220 	orr.w	r2, r3, #32
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2220      	movs	r2, #32
 8002980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e007      	b.n	80029a8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d1c4      	bne.n	8002930 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029bc:	e02f      	b.n	8002a1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	68b9      	ldr	r1, [r7, #8]
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 f838 	bl	8002a38 <I2C_IsErrorOccurred>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e02d      	b.n	8002a2e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029d2:	f7ff f8a3 	bl	8001b1c <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	68ba      	ldr	r2, [r7, #8]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d302      	bcc.n	80029e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d11a      	bne.n	8002a1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	f003 0320 	and.w	r3, r3, #32
 80029f2:	2b20      	cmp	r3, #32
 80029f4:	d013      	beq.n	8002a1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	f043 0220 	orr.w	r2, r3, #32
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2220      	movs	r2, #32
 8002a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e007      	b.n	8002a2e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	f003 0320 	and.w	r3, r3, #32
 8002a28:	2b20      	cmp	r3, #32
 8002a2a:	d1c8      	bne.n	80029be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
	...

08002a38 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b08a      	sub	sp, #40	; 0x28
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a44:	2300      	movs	r3, #0
 8002a46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002a52:	2300      	movs	r3, #0
 8002a54:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	f003 0310 	and.w	r3, r3, #16
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d068      	beq.n	8002b36 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2210      	movs	r2, #16
 8002a6a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a6c:	e049      	b.n	8002b02 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a74:	d045      	beq.n	8002b02 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a76:	f7ff f851 	bl	8001b1c <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	68ba      	ldr	r2, [r7, #8]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d302      	bcc.n	8002a8c <I2C_IsErrorOccurred+0x54>
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d13a      	bne.n	8002b02 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a96:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a9e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002aaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aae:	d121      	bne.n	8002af4 <I2C_IsErrorOccurred+0xbc>
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ab6:	d01d      	beq.n	8002af4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002ab8:	7cfb      	ldrb	r3, [r7, #19]
 8002aba:	2b20      	cmp	r3, #32
 8002abc:	d01a      	beq.n	8002af4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002acc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002ace:	f7ff f825 	bl	8001b1c <HAL_GetTick>
 8002ad2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ad4:	e00e      	b.n	8002af4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002ad6:	f7ff f821 	bl	8001b1c <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b19      	cmp	r3, #25
 8002ae2:	d907      	bls.n	8002af4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002ae4:	6a3b      	ldr	r3, [r7, #32]
 8002ae6:	f043 0320 	orr.w	r3, r3, #32
 8002aea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002af2:	e006      	b.n	8002b02 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	f003 0320 	and.w	r3, r3, #32
 8002afe:	2b20      	cmp	r3, #32
 8002b00:	d1e9      	bne.n	8002ad6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	f003 0320 	and.w	r3, r3, #32
 8002b0c:	2b20      	cmp	r3, #32
 8002b0e:	d003      	beq.n	8002b18 <I2C_IsErrorOccurred+0xe0>
 8002b10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0aa      	beq.n	8002a6e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002b18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d103      	bne.n	8002b28 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2220      	movs	r2, #32
 8002b26:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002b28:	6a3b      	ldr	r3, [r7, #32]
 8002b2a:	f043 0304 	orr.w	r3, r3, #4
 8002b2e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00b      	beq.n	8002b60 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002b48:	6a3b      	ldr	r3, [r7, #32]
 8002b4a:	f043 0301 	orr.w	r3, r3, #1
 8002b4e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b58:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00b      	beq.n	8002b82 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002b6a:	6a3b      	ldr	r3, [r7, #32]
 8002b6c:	f043 0308 	orr.w	r3, r3, #8
 8002b70:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b7a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00b      	beq.n	8002ba4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002b8c:	6a3b      	ldr	r3, [r7, #32]
 8002b8e:	f043 0302 	orr.w	r3, r3, #2
 8002b92:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b9c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002ba4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d01c      	beq.n	8002be6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f7ff fe45 	bl	800283c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6859      	ldr	r1, [r3, #4]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	4b0d      	ldr	r3, [pc, #52]	; (8002bf4 <I2C_IsErrorOccurred+0x1bc>)
 8002bbe:	400b      	ands	r3, r1
 8002bc0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bc6:	6a3b      	ldr	r3, [r7, #32]
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002be6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3728      	adds	r7, #40	; 0x28
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	fe00e800 	.word	0xfe00e800

08002bf8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b087      	sub	sp, #28
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	607b      	str	r3, [r7, #4]
 8002c02:	460b      	mov	r3, r1
 8002c04:	817b      	strh	r3, [r7, #10]
 8002c06:	4613      	mov	r3, r2
 8002c08:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c0a:	897b      	ldrh	r3, [r7, #10]
 8002c0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c10:	7a7b      	ldrb	r3, [r7, #9]
 8002c12:	041b      	lsls	r3, r3, #16
 8002c14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c18:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c1e:	6a3b      	ldr	r3, [r7, #32]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c26:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	0d5b      	lsrs	r3, r3, #21
 8002c32:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002c36:	4b08      	ldr	r3, [pc, #32]	; (8002c58 <I2C_TransferConfig+0x60>)
 8002c38:	430b      	orrs	r3, r1
 8002c3a:	43db      	mvns	r3, r3
 8002c3c:	ea02 0103 	and.w	r1, r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	430a      	orrs	r2, r1
 8002c48:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002c4a:	bf00      	nop
 8002c4c:	371c      	adds	r7, #28
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	03ff63ff 	.word	0x03ff63ff

08002c5c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b20      	cmp	r3, #32
 8002c70:	d138      	bne.n	8002ce4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d101      	bne.n	8002c80 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	e032      	b.n	8002ce6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2224      	movs	r2, #36	; 0x24
 8002c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 0201 	bic.w	r2, r2, #1
 8002c9e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6819      	ldr	r1, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f042 0201 	orr.w	r2, r2, #1
 8002cce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	e000      	b.n	8002ce6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ce4:	2302      	movs	r3, #2
  }
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b085      	sub	sp, #20
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
 8002cfa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b20      	cmp	r3, #32
 8002d06:	d139      	bne.n	8002d7c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d101      	bne.n	8002d16 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d12:	2302      	movs	r3, #2
 8002d14:	e033      	b.n	8002d7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2224      	movs	r2, #36	; 0x24
 8002d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 0201 	bic.w	r2, r2, #1
 8002d34:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d44:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	021b      	lsls	r3, r3, #8
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f042 0201 	orr.w	r2, r2, #1
 8002d66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	e000      	b.n	8002d7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002d7c:	2302      	movs	r3, #2
  }
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d8c:	b08f      	sub	sp, #60	; 0x3c
 8002d8e:	af0a      	add	r7, sp, #40	; 0x28
 8002d90:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e116      	b.n	8002fca <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d106      	bne.n	8002dbc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7fe fc7a 	bl	80016b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2203      	movs	r2, #3
 8002dc0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d102      	bne.n	8002dd6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f004 fcf8 	bl	80077d0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	603b      	str	r3, [r7, #0]
 8002de6:	687e      	ldr	r6, [r7, #4]
 8002de8:	466d      	mov	r5, sp
 8002dea:	f106 0410 	add.w	r4, r6, #16
 8002dee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002df0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002df2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002df4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002df6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002dfa:	e885 0003 	stmia.w	r5, {r0, r1}
 8002dfe:	1d33      	adds	r3, r6, #4
 8002e00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e02:	6838      	ldr	r0, [r7, #0]
 8002e04:	f004 fc76 	bl	80076f4 <USB_CoreInit>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d005      	beq.n	8002e1a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2202      	movs	r2, #2
 8002e12:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e0d7      	b.n	8002fca <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2100      	movs	r1, #0
 8002e20:	4618      	mov	r0, r3
 8002e22:	f004 fce6 	bl	80077f2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e26:	2300      	movs	r3, #0
 8002e28:	73fb      	strb	r3, [r7, #15]
 8002e2a:	e04a      	b.n	8002ec2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e2c:	7bfa      	ldrb	r2, [r7, #15]
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	4613      	mov	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	4413      	add	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	333d      	adds	r3, #61	; 0x3d
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e40:	7bfa      	ldrb	r2, [r7, #15]
 8002e42:	6879      	ldr	r1, [r7, #4]
 8002e44:	4613      	mov	r3, r2
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	4413      	add	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	440b      	add	r3, r1
 8002e4e:	333c      	adds	r3, #60	; 0x3c
 8002e50:	7bfa      	ldrb	r2, [r7, #15]
 8002e52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e54:	7bfa      	ldrb	r2, [r7, #15]
 8002e56:	7bfb      	ldrb	r3, [r7, #15]
 8002e58:	b298      	uxth	r0, r3
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	4413      	add	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	440b      	add	r3, r1
 8002e66:	3356      	adds	r3, #86	; 0x56
 8002e68:	4602      	mov	r2, r0
 8002e6a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e6c:	7bfa      	ldrb	r2, [r7, #15]
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	4613      	mov	r3, r2
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	4413      	add	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	440b      	add	r3, r1
 8002e7a:	3340      	adds	r3, #64	; 0x40
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e80:	7bfa      	ldrb	r2, [r7, #15]
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	4613      	mov	r3, r2
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	4413      	add	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	3344      	adds	r3, #68	; 0x44
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e94:	7bfa      	ldrb	r2, [r7, #15]
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	3348      	adds	r3, #72	; 0x48
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ea8:	7bfa      	ldrb	r2, [r7, #15]
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	4613      	mov	r3, r2
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	4413      	add	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	334c      	adds	r3, #76	; 0x4c
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ebc:	7bfb      	ldrb	r3, [r7, #15]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	73fb      	strb	r3, [r7, #15]
 8002ec2:	7bfa      	ldrb	r2, [r7, #15]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d3af      	bcc.n	8002e2c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ecc:	2300      	movs	r3, #0
 8002ece:	73fb      	strb	r3, [r7, #15]
 8002ed0:	e044      	b.n	8002f5c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ed2:	7bfa      	ldrb	r2, [r7, #15]
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	4413      	add	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	440b      	add	r3, r1
 8002ee0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ee8:	7bfa      	ldrb	r2, [r7, #15]
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	4613      	mov	r3, r2
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002efa:	7bfa      	ldrb	r2, [r7, #15]
 8002efc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002efe:	7bfa      	ldrb	r2, [r7, #15]
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	4613      	mov	r3, r2
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	4413      	add	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	440b      	add	r3, r1
 8002f0c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002f10:	2200      	movs	r2, #0
 8002f12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f14:	7bfa      	ldrb	r2, [r7, #15]
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	4413      	add	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002f26:	2200      	movs	r2, #0
 8002f28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f2a:	7bfa      	ldrb	r2, [r7, #15]
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	4413      	add	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	440b      	add	r3, r1
 8002f38:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f40:	7bfa      	ldrb	r2, [r7, #15]
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	4613      	mov	r3, r2
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	4413      	add	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002f52:	2200      	movs	r2, #0
 8002f54:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f56:	7bfb      	ldrb	r3, [r7, #15]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	73fb      	strb	r3, [r7, #15]
 8002f5c:	7bfa      	ldrb	r2, [r7, #15]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d3b5      	bcc.n	8002ed2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	603b      	str	r3, [r7, #0]
 8002f6c:	687e      	ldr	r6, [r7, #4]
 8002f6e:	466d      	mov	r5, sp
 8002f70:	f106 0410 	add.w	r4, r6, #16
 8002f74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f7c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f80:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f84:	1d33      	adds	r3, r6, #4
 8002f86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f88:	6838      	ldr	r0, [r7, #0]
 8002f8a:	f004 fc7f 	bl	800788c <USB_DevInit>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2202      	movs	r2, #2
 8002f98:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e014      	b.n	8002fca <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d102      	bne.n	8002fbe <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 f80b 	bl	8002fd4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f004 fe3d 	bl	8007c42 <USB_DevDisconnect>

  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3714      	adds	r7, #20
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002fd4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003002:	4b05      	ldr	r3, [pc, #20]	; (8003018 <HAL_PCDEx_ActivateLPM+0x44>)
 8003004:	4313      	orrs	r3, r2
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	10000003 	.word	0x10000003

0800301c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003024:	4b29      	ldr	r3, [pc, #164]	; (80030cc <HAL_PWREx_ConfigSupply+0xb0>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	2b06      	cmp	r3, #6
 800302e:	d00a      	beq.n	8003046 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003030:	4b26      	ldr	r3, [pc, #152]	; (80030cc <HAL_PWREx_ConfigSupply+0xb0>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	429a      	cmp	r2, r3
 800303c:	d001      	beq.n	8003042 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e040      	b.n	80030c4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003042:	2300      	movs	r3, #0
 8003044:	e03e      	b.n	80030c4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003046:	4b21      	ldr	r3, [pc, #132]	; (80030cc <HAL_PWREx_ConfigSupply+0xb0>)
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800304e:	491f      	ldr	r1, [pc, #124]	; (80030cc <HAL_PWREx_ConfigSupply+0xb0>)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4313      	orrs	r3, r2
 8003054:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003056:	f7fe fd61 	bl	8001b1c <HAL_GetTick>
 800305a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800305c:	e009      	b.n	8003072 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800305e:	f7fe fd5d 	bl	8001b1c <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800306c:	d901      	bls.n	8003072 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e028      	b.n	80030c4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003072:	4b16      	ldr	r3, [pc, #88]	; (80030cc <HAL_PWREx_ConfigSupply+0xb0>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800307a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800307e:	d1ee      	bne.n	800305e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b1e      	cmp	r3, #30
 8003084:	d008      	beq.n	8003098 <HAL_PWREx_ConfigSupply+0x7c>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b2e      	cmp	r3, #46	; 0x2e
 800308a:	d005      	beq.n	8003098 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b1d      	cmp	r3, #29
 8003090:	d002      	beq.n	8003098 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b2d      	cmp	r3, #45	; 0x2d
 8003096:	d114      	bne.n	80030c2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003098:	f7fe fd40 	bl	8001b1c <HAL_GetTick>
 800309c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800309e:	e009      	b.n	80030b4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80030a0:	f7fe fd3c 	bl	8001b1c <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030ae:	d901      	bls.n	80030b4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e007      	b.n	80030c4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80030b4:	4b05      	ldr	r3, [pc, #20]	; (80030cc <HAL_PWREx_ConfigSupply+0xb0>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030c0:	d1ee      	bne.n	80030a0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	58024800 	.word	0x58024800

080030d0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80030d4:	4b05      	ldr	r3, [pc, #20]	; (80030ec <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	4a04      	ldr	r2, [pc, #16]	; (80030ec <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80030da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030de:	60d3      	str	r3, [r2, #12]
}
 80030e0:	bf00      	nop
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	58024800 	.word	0x58024800

080030f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b08c      	sub	sp, #48	; 0x30
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d102      	bne.n	8003104 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	f000 bc48 	b.w	8003994 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 8088 	beq.w	8003222 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003112:	4b99      	ldr	r3, [pc, #612]	; (8003378 <HAL_RCC_OscConfig+0x288>)
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800311a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800311c:	4b96      	ldr	r3, [pc, #600]	; (8003378 <HAL_RCC_OscConfig+0x288>)
 800311e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003120:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003124:	2b10      	cmp	r3, #16
 8003126:	d007      	beq.n	8003138 <HAL_RCC_OscConfig+0x48>
 8003128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800312a:	2b18      	cmp	r3, #24
 800312c:	d111      	bne.n	8003152 <HAL_RCC_OscConfig+0x62>
 800312e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003130:	f003 0303 	and.w	r3, r3, #3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d10c      	bne.n	8003152 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003138:	4b8f      	ldr	r3, [pc, #572]	; (8003378 <HAL_RCC_OscConfig+0x288>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d06d      	beq.n	8003220 <HAL_RCC_OscConfig+0x130>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d169      	bne.n	8003220 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	f000 bc21 	b.w	8003994 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800315a:	d106      	bne.n	800316a <HAL_RCC_OscConfig+0x7a>
 800315c:	4b86      	ldr	r3, [pc, #536]	; (8003378 <HAL_RCC_OscConfig+0x288>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a85      	ldr	r2, [pc, #532]	; (8003378 <HAL_RCC_OscConfig+0x288>)
 8003162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003166:	6013      	str	r3, [r2, #0]
 8003168:	e02e      	b.n	80031c8 <HAL_RCC_OscConfig+0xd8>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10c      	bne.n	800318c <HAL_RCC_OscConfig+0x9c>
 8003172:	4b81      	ldr	r3, [pc, #516]	; (8003378 <HAL_RCC_OscConfig+0x288>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a80      	ldr	r2, [pc, #512]	; (8003378 <HAL_RCC_OscConfig+0x288>)
 8003178:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800317c:	6013      	str	r3, [r2, #0]
 800317e:	4b7e      	ldr	r3, [pc, #504]	; (8003378 <HAL_RCC_OscConfig+0x288>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a7d      	ldr	r2, [pc, #500]	; (8003378 <HAL_RCC_OscConfig+0x288>)
 8003184:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003188:	6013      	str	r3, [r2, #0]
 800318a:	e01d      	b.n	80031c8 <HAL_RCC_OscConfig+0xd8>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003194:	d10c      	bne.n	80031b0 <HAL_RCC_OscConfig+0xc0>
 8003196:	4b78      	ldr	r3, [pc, #480]	; (8003378 <HAL_RCC_OscConfig+0x288>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a77      	ldr	r2, [pc, #476]	; (8003378 <HAL_RCC_OscConfig+0x288>)
 800319c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031a0:	6013      	str	r3, [r2, #0]
 80031a2:	4b75      	ldr	r3, [pc, #468]	; (8003378 <HAL_RCC_OscConfig+0x288>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a74      	ldr	r2, [pc, #464]	; (8003378 <HAL_RCC_OscConfig+0x288>)
 80031a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ac:	6013      	str	r3, [r2, #0]
 80031ae:	e00b      	b.n	80031c8 <HAL_RCC_OscConfig+0xd8>
 80031b0:	4b71      	ldr	r3, [pc, #452]	; (8003378 <HAL_RCC_OscConfig+0x288>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a70      	ldr	r2, [pc, #448]	; (8003378 <HAL_RCC_OscConfig+0x288>)
 80031b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ba:	6013      	str	r3, [r2, #0]
 80031bc:	4b6e      	ldr	r3, [pc, #440]	; (8003378 <HAL_RCC_OscConfig+0x288>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a6d      	ldr	r2, [pc, #436]	; (8003378 <HAL_RCC_OscConfig+0x288>)
 80031c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d013      	beq.n	80031f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d0:	f7fe fca4 	bl	8001b1c <HAL_GetTick>
 80031d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031d8:	f7fe fca0 	bl	8001b1c <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b64      	cmp	r3, #100	; 0x64
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e3d4      	b.n	8003994 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031ea:	4b63      	ldr	r3, [pc, #396]	; (8003378 <HAL_RCC_OscConfig+0x288>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d0f0      	beq.n	80031d8 <HAL_RCC_OscConfig+0xe8>
 80031f6:	e014      	b.n	8003222 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f8:	f7fe fc90 	bl	8001b1c <HAL_GetTick>
 80031fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003200:	f7fe fc8c 	bl	8001b1c <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b64      	cmp	r3, #100	; 0x64
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e3c0      	b.n	8003994 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003212:	4b59      	ldr	r3, [pc, #356]	; (8003378 <HAL_RCC_OscConfig+0x288>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1f0      	bne.n	8003200 <HAL_RCC_OscConfig+0x110>
 800321e:	e000      	b.n	8003222 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003220:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 80ca 	beq.w	80033c4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003230:	4b51      	ldr	r3, [pc, #324]	; (8003378 <HAL_RCC_OscConfig+0x288>)
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003238:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800323a:	4b4f      	ldr	r3, [pc, #316]	; (8003378 <HAL_RCC_OscConfig+0x288>)
 800323c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003240:	6a3b      	ldr	r3, [r7, #32]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d007      	beq.n	8003256 <HAL_RCC_OscConfig+0x166>
 8003246:	6a3b      	ldr	r3, [r7, #32]
 8003248:	2b18      	cmp	r3, #24
 800324a:	d156      	bne.n	80032fa <HAL_RCC_OscConfig+0x20a>
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	f003 0303 	and.w	r3, r3, #3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d151      	bne.n	80032fa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003256:	4b48      	ldr	r3, [pc, #288]	; (8003378 <HAL_RCC_OscConfig+0x288>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0304 	and.w	r3, r3, #4
 800325e:	2b00      	cmp	r3, #0
 8003260:	d005      	beq.n	800326e <HAL_RCC_OscConfig+0x17e>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e392      	b.n	8003994 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800326e:	4b42      	ldr	r3, [pc, #264]	; (8003378 <HAL_RCC_OscConfig+0x288>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f023 0219 	bic.w	r2, r3, #25
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	493f      	ldr	r1, [pc, #252]	; (8003378 <HAL_RCC_OscConfig+0x288>)
 800327c:	4313      	orrs	r3, r2
 800327e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003280:	f7fe fc4c 	bl	8001b1c <HAL_GetTick>
 8003284:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003288:	f7fe fc48 	bl	8001b1c <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e37c      	b.n	8003994 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800329a:	4b37      	ldr	r3, [pc, #220]	; (8003378 <HAL_RCC_OscConfig+0x288>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0304 	and.w	r3, r3, #4
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0f0      	beq.n	8003288 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a6:	f7fe fc69 	bl	8001b7c <HAL_GetREVID>
 80032aa:	4603      	mov	r3, r0
 80032ac:	f241 0203 	movw	r2, #4099	; 0x1003
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d817      	bhi.n	80032e4 <HAL_RCC_OscConfig+0x1f4>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	2b40      	cmp	r3, #64	; 0x40
 80032ba:	d108      	bne.n	80032ce <HAL_RCC_OscConfig+0x1de>
 80032bc:	4b2e      	ldr	r3, [pc, #184]	; (8003378 <HAL_RCC_OscConfig+0x288>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80032c4:	4a2c      	ldr	r2, [pc, #176]	; (8003378 <HAL_RCC_OscConfig+0x288>)
 80032c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032ca:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032cc:	e07a      	b.n	80033c4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ce:	4b2a      	ldr	r3, [pc, #168]	; (8003378 <HAL_RCC_OscConfig+0x288>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	031b      	lsls	r3, r3, #12
 80032dc:	4926      	ldr	r1, [pc, #152]	; (8003378 <HAL_RCC_OscConfig+0x288>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032e2:	e06f      	b.n	80033c4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e4:	4b24      	ldr	r3, [pc, #144]	; (8003378 <HAL_RCC_OscConfig+0x288>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	061b      	lsls	r3, r3, #24
 80032f2:	4921      	ldr	r1, [pc, #132]	; (8003378 <HAL_RCC_OscConfig+0x288>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032f8:	e064      	b.n	80033c4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d047      	beq.n	8003392 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003302:	4b1d      	ldr	r3, [pc, #116]	; (8003378 <HAL_RCC_OscConfig+0x288>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f023 0219 	bic.w	r2, r3, #25
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	491a      	ldr	r1, [pc, #104]	; (8003378 <HAL_RCC_OscConfig+0x288>)
 8003310:	4313      	orrs	r3, r2
 8003312:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003314:	f7fe fc02 	bl	8001b1c <HAL_GetTick>
 8003318:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800331c:	f7fe fbfe 	bl	8001b1c <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e332      	b.n	8003994 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800332e:	4b12      	ldr	r3, [pc, #72]	; (8003378 <HAL_RCC_OscConfig+0x288>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0304 	and.w	r3, r3, #4
 8003336:	2b00      	cmp	r3, #0
 8003338:	d0f0      	beq.n	800331c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800333a:	f7fe fc1f 	bl	8001b7c <HAL_GetREVID>
 800333e:	4603      	mov	r3, r0
 8003340:	f241 0203 	movw	r2, #4099	; 0x1003
 8003344:	4293      	cmp	r3, r2
 8003346:	d819      	bhi.n	800337c <HAL_RCC_OscConfig+0x28c>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	2b40      	cmp	r3, #64	; 0x40
 800334e:	d108      	bne.n	8003362 <HAL_RCC_OscConfig+0x272>
 8003350:	4b09      	ldr	r3, [pc, #36]	; (8003378 <HAL_RCC_OscConfig+0x288>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003358:	4a07      	ldr	r2, [pc, #28]	; (8003378 <HAL_RCC_OscConfig+0x288>)
 800335a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800335e:	6053      	str	r3, [r2, #4]
 8003360:	e030      	b.n	80033c4 <HAL_RCC_OscConfig+0x2d4>
 8003362:	4b05      	ldr	r3, [pc, #20]	; (8003378 <HAL_RCC_OscConfig+0x288>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	031b      	lsls	r3, r3, #12
 8003370:	4901      	ldr	r1, [pc, #4]	; (8003378 <HAL_RCC_OscConfig+0x288>)
 8003372:	4313      	orrs	r3, r2
 8003374:	604b      	str	r3, [r1, #4]
 8003376:	e025      	b.n	80033c4 <HAL_RCC_OscConfig+0x2d4>
 8003378:	58024400 	.word	0x58024400
 800337c:	4b9a      	ldr	r3, [pc, #616]	; (80035e8 <HAL_RCC_OscConfig+0x4f8>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	061b      	lsls	r3, r3, #24
 800338a:	4997      	ldr	r1, [pc, #604]	; (80035e8 <HAL_RCC_OscConfig+0x4f8>)
 800338c:	4313      	orrs	r3, r2
 800338e:	604b      	str	r3, [r1, #4]
 8003390:	e018      	b.n	80033c4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003392:	4b95      	ldr	r3, [pc, #596]	; (80035e8 <HAL_RCC_OscConfig+0x4f8>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a94      	ldr	r2, [pc, #592]	; (80035e8 <HAL_RCC_OscConfig+0x4f8>)
 8003398:	f023 0301 	bic.w	r3, r3, #1
 800339c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339e:	f7fe fbbd 	bl	8001b1c <HAL_GetTick>
 80033a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80033a4:	e008      	b.n	80033b8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033a6:	f7fe fbb9 	bl	8001b1c <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e2ed      	b.n	8003994 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80033b8:	4b8b      	ldr	r3, [pc, #556]	; (80035e8 <HAL_RCC_OscConfig+0x4f8>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1f0      	bne.n	80033a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0310 	and.w	r3, r3, #16
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f000 80a9 	beq.w	8003524 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033d2:	4b85      	ldr	r3, [pc, #532]	; (80035e8 <HAL_RCC_OscConfig+0x4f8>)
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033da:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80033dc:	4b82      	ldr	r3, [pc, #520]	; (80035e8 <HAL_RCC_OscConfig+0x4f8>)
 80033de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	d007      	beq.n	80033f8 <HAL_RCC_OscConfig+0x308>
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	2b18      	cmp	r3, #24
 80033ec:	d13a      	bne.n	8003464 <HAL_RCC_OscConfig+0x374>
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f003 0303 	and.w	r3, r3, #3
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d135      	bne.n	8003464 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80033f8:	4b7b      	ldr	r3, [pc, #492]	; (80035e8 <HAL_RCC_OscConfig+0x4f8>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003400:	2b00      	cmp	r3, #0
 8003402:	d005      	beq.n	8003410 <HAL_RCC_OscConfig+0x320>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	69db      	ldr	r3, [r3, #28]
 8003408:	2b80      	cmp	r3, #128	; 0x80
 800340a:	d001      	beq.n	8003410 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e2c1      	b.n	8003994 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003410:	f7fe fbb4 	bl	8001b7c <HAL_GetREVID>
 8003414:	4603      	mov	r3, r0
 8003416:	f241 0203 	movw	r2, #4099	; 0x1003
 800341a:	4293      	cmp	r3, r2
 800341c:	d817      	bhi.n	800344e <HAL_RCC_OscConfig+0x35e>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	2b20      	cmp	r3, #32
 8003424:	d108      	bne.n	8003438 <HAL_RCC_OscConfig+0x348>
 8003426:	4b70      	ldr	r3, [pc, #448]	; (80035e8 <HAL_RCC_OscConfig+0x4f8>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800342e:	4a6e      	ldr	r2, [pc, #440]	; (80035e8 <HAL_RCC_OscConfig+0x4f8>)
 8003430:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003434:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003436:	e075      	b.n	8003524 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003438:	4b6b      	ldr	r3, [pc, #428]	; (80035e8 <HAL_RCC_OscConfig+0x4f8>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	069b      	lsls	r3, r3, #26
 8003446:	4968      	ldr	r1, [pc, #416]	; (80035e8 <HAL_RCC_OscConfig+0x4f8>)
 8003448:	4313      	orrs	r3, r2
 800344a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800344c:	e06a      	b.n	8003524 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800344e:	4b66      	ldr	r3, [pc, #408]	; (80035e8 <HAL_RCC_OscConfig+0x4f8>)
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	061b      	lsls	r3, r3, #24
 800345c:	4962      	ldr	r1, [pc, #392]	; (80035e8 <HAL_RCC_OscConfig+0x4f8>)
 800345e:	4313      	orrs	r3, r2
 8003460:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003462:	e05f      	b.n	8003524 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	69db      	ldr	r3, [r3, #28]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d042      	beq.n	80034f2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800346c:	4b5e      	ldr	r3, [pc, #376]	; (80035e8 <HAL_RCC_OscConfig+0x4f8>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a5d      	ldr	r2, [pc, #372]	; (80035e8 <HAL_RCC_OscConfig+0x4f8>)
 8003472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003476:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003478:	f7fe fb50 	bl	8001b1c <HAL_GetTick>
 800347c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800347e:	e008      	b.n	8003492 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003480:	f7fe fb4c 	bl	8001b1c <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e280      	b.n	8003994 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003492:	4b55      	ldr	r3, [pc, #340]	; (80035e8 <HAL_RCC_OscConfig+0x4f8>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349a:	2b00      	cmp	r3, #0
 800349c:	d0f0      	beq.n	8003480 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800349e:	f7fe fb6d 	bl	8001b7c <HAL_GetREVID>
 80034a2:	4603      	mov	r3, r0
 80034a4:	f241 0203 	movw	r2, #4099	; 0x1003
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d817      	bhi.n	80034dc <HAL_RCC_OscConfig+0x3ec>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	2b20      	cmp	r3, #32
 80034b2:	d108      	bne.n	80034c6 <HAL_RCC_OscConfig+0x3d6>
 80034b4:	4b4c      	ldr	r3, [pc, #304]	; (80035e8 <HAL_RCC_OscConfig+0x4f8>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80034bc:	4a4a      	ldr	r2, [pc, #296]	; (80035e8 <HAL_RCC_OscConfig+0x4f8>)
 80034be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80034c2:	6053      	str	r3, [r2, #4]
 80034c4:	e02e      	b.n	8003524 <HAL_RCC_OscConfig+0x434>
 80034c6:	4b48      	ldr	r3, [pc, #288]	; (80035e8 <HAL_RCC_OscConfig+0x4f8>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a1b      	ldr	r3, [r3, #32]
 80034d2:	069b      	lsls	r3, r3, #26
 80034d4:	4944      	ldr	r1, [pc, #272]	; (80035e8 <HAL_RCC_OscConfig+0x4f8>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	604b      	str	r3, [r1, #4]
 80034da:	e023      	b.n	8003524 <HAL_RCC_OscConfig+0x434>
 80034dc:	4b42      	ldr	r3, [pc, #264]	; (80035e8 <HAL_RCC_OscConfig+0x4f8>)
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	061b      	lsls	r3, r3, #24
 80034ea:	493f      	ldr	r1, [pc, #252]	; (80035e8 <HAL_RCC_OscConfig+0x4f8>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	60cb      	str	r3, [r1, #12]
 80034f0:	e018      	b.n	8003524 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80034f2:	4b3d      	ldr	r3, [pc, #244]	; (80035e8 <HAL_RCC_OscConfig+0x4f8>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a3c      	ldr	r2, [pc, #240]	; (80035e8 <HAL_RCC_OscConfig+0x4f8>)
 80034f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fe:	f7fe fb0d 	bl	8001b1c <HAL_GetTick>
 8003502:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003504:	e008      	b.n	8003518 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003506:	f7fe fb09 	bl	8001b1c <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e23d      	b.n	8003994 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003518:	4b33      	ldr	r3, [pc, #204]	; (80035e8 <HAL_RCC_OscConfig+0x4f8>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1f0      	bne.n	8003506 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0308 	and.w	r3, r3, #8
 800352c:	2b00      	cmp	r3, #0
 800352e:	d036      	beq.n	800359e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d019      	beq.n	800356c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003538:	4b2b      	ldr	r3, [pc, #172]	; (80035e8 <HAL_RCC_OscConfig+0x4f8>)
 800353a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800353c:	4a2a      	ldr	r2, [pc, #168]	; (80035e8 <HAL_RCC_OscConfig+0x4f8>)
 800353e:	f043 0301 	orr.w	r3, r3, #1
 8003542:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003544:	f7fe faea 	bl	8001b1c <HAL_GetTick>
 8003548:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800354c:	f7fe fae6 	bl	8001b1c <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e21a      	b.n	8003994 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800355e:	4b22      	ldr	r3, [pc, #136]	; (80035e8 <HAL_RCC_OscConfig+0x4f8>)
 8003560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0f0      	beq.n	800354c <HAL_RCC_OscConfig+0x45c>
 800356a:	e018      	b.n	800359e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800356c:	4b1e      	ldr	r3, [pc, #120]	; (80035e8 <HAL_RCC_OscConfig+0x4f8>)
 800356e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003570:	4a1d      	ldr	r2, [pc, #116]	; (80035e8 <HAL_RCC_OscConfig+0x4f8>)
 8003572:	f023 0301 	bic.w	r3, r3, #1
 8003576:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003578:	f7fe fad0 	bl	8001b1c <HAL_GetTick>
 800357c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003580:	f7fe facc 	bl	8001b1c <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e200      	b.n	8003994 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003592:	4b15      	ldr	r3, [pc, #84]	; (80035e8 <HAL_RCC_OscConfig+0x4f8>)
 8003594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f0      	bne.n	8003580 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0320 	and.w	r3, r3, #32
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d039      	beq.n	800361e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d01c      	beq.n	80035ec <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035b2:	4b0d      	ldr	r3, [pc, #52]	; (80035e8 <HAL_RCC_OscConfig+0x4f8>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a0c      	ldr	r2, [pc, #48]	; (80035e8 <HAL_RCC_OscConfig+0x4f8>)
 80035b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80035bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80035be:	f7fe faad 	bl	8001b1c <HAL_GetTick>
 80035c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80035c4:	e008      	b.n	80035d8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035c6:	f7fe faa9 	bl	8001b1c <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d901      	bls.n	80035d8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e1dd      	b.n	8003994 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80035d8:	4b03      	ldr	r3, [pc, #12]	; (80035e8 <HAL_RCC_OscConfig+0x4f8>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d0f0      	beq.n	80035c6 <HAL_RCC_OscConfig+0x4d6>
 80035e4:	e01b      	b.n	800361e <HAL_RCC_OscConfig+0x52e>
 80035e6:	bf00      	nop
 80035e8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035ec:	4b9b      	ldr	r3, [pc, #620]	; (800385c <HAL_RCC_OscConfig+0x76c>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a9a      	ldr	r2, [pc, #616]	; (800385c <HAL_RCC_OscConfig+0x76c>)
 80035f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035f6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80035f8:	f7fe fa90 	bl	8001b1c <HAL_GetTick>
 80035fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003600:	f7fe fa8c 	bl	8001b1c <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e1c0      	b.n	8003994 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003612:	4b92      	ldr	r3, [pc, #584]	; (800385c <HAL_RCC_OscConfig+0x76c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1f0      	bne.n	8003600 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0304 	and.w	r3, r3, #4
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 8081 	beq.w	800372e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800362c:	4b8c      	ldr	r3, [pc, #560]	; (8003860 <HAL_RCC_OscConfig+0x770>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a8b      	ldr	r2, [pc, #556]	; (8003860 <HAL_RCC_OscConfig+0x770>)
 8003632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003636:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003638:	f7fe fa70 	bl	8001b1c <HAL_GetTick>
 800363c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003640:	f7fe fa6c 	bl	8001b1c <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b64      	cmp	r3, #100	; 0x64
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e1a0      	b.n	8003994 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003652:	4b83      	ldr	r3, [pc, #524]	; (8003860 <HAL_RCC_OscConfig+0x770>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0f0      	beq.n	8003640 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d106      	bne.n	8003674 <HAL_RCC_OscConfig+0x584>
 8003666:	4b7d      	ldr	r3, [pc, #500]	; (800385c <HAL_RCC_OscConfig+0x76c>)
 8003668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366a:	4a7c      	ldr	r2, [pc, #496]	; (800385c <HAL_RCC_OscConfig+0x76c>)
 800366c:	f043 0301 	orr.w	r3, r3, #1
 8003670:	6713      	str	r3, [r2, #112]	; 0x70
 8003672:	e02d      	b.n	80036d0 <HAL_RCC_OscConfig+0x5e0>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10c      	bne.n	8003696 <HAL_RCC_OscConfig+0x5a6>
 800367c:	4b77      	ldr	r3, [pc, #476]	; (800385c <HAL_RCC_OscConfig+0x76c>)
 800367e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003680:	4a76      	ldr	r2, [pc, #472]	; (800385c <HAL_RCC_OscConfig+0x76c>)
 8003682:	f023 0301 	bic.w	r3, r3, #1
 8003686:	6713      	str	r3, [r2, #112]	; 0x70
 8003688:	4b74      	ldr	r3, [pc, #464]	; (800385c <HAL_RCC_OscConfig+0x76c>)
 800368a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368c:	4a73      	ldr	r2, [pc, #460]	; (800385c <HAL_RCC_OscConfig+0x76c>)
 800368e:	f023 0304 	bic.w	r3, r3, #4
 8003692:	6713      	str	r3, [r2, #112]	; 0x70
 8003694:	e01c      	b.n	80036d0 <HAL_RCC_OscConfig+0x5e0>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	2b05      	cmp	r3, #5
 800369c:	d10c      	bne.n	80036b8 <HAL_RCC_OscConfig+0x5c8>
 800369e:	4b6f      	ldr	r3, [pc, #444]	; (800385c <HAL_RCC_OscConfig+0x76c>)
 80036a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a2:	4a6e      	ldr	r2, [pc, #440]	; (800385c <HAL_RCC_OscConfig+0x76c>)
 80036a4:	f043 0304 	orr.w	r3, r3, #4
 80036a8:	6713      	str	r3, [r2, #112]	; 0x70
 80036aa:	4b6c      	ldr	r3, [pc, #432]	; (800385c <HAL_RCC_OscConfig+0x76c>)
 80036ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ae:	4a6b      	ldr	r2, [pc, #428]	; (800385c <HAL_RCC_OscConfig+0x76c>)
 80036b0:	f043 0301 	orr.w	r3, r3, #1
 80036b4:	6713      	str	r3, [r2, #112]	; 0x70
 80036b6:	e00b      	b.n	80036d0 <HAL_RCC_OscConfig+0x5e0>
 80036b8:	4b68      	ldr	r3, [pc, #416]	; (800385c <HAL_RCC_OscConfig+0x76c>)
 80036ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036bc:	4a67      	ldr	r2, [pc, #412]	; (800385c <HAL_RCC_OscConfig+0x76c>)
 80036be:	f023 0301 	bic.w	r3, r3, #1
 80036c2:	6713      	str	r3, [r2, #112]	; 0x70
 80036c4:	4b65      	ldr	r3, [pc, #404]	; (800385c <HAL_RCC_OscConfig+0x76c>)
 80036c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c8:	4a64      	ldr	r2, [pc, #400]	; (800385c <HAL_RCC_OscConfig+0x76c>)
 80036ca:	f023 0304 	bic.w	r3, r3, #4
 80036ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d015      	beq.n	8003704 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d8:	f7fe fa20 	bl	8001b1c <HAL_GetTick>
 80036dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036de:	e00a      	b.n	80036f6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036e0:	f7fe fa1c 	bl	8001b1c <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e14e      	b.n	8003994 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036f6:	4b59      	ldr	r3, [pc, #356]	; (800385c <HAL_RCC_OscConfig+0x76c>)
 80036f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0ee      	beq.n	80036e0 <HAL_RCC_OscConfig+0x5f0>
 8003702:	e014      	b.n	800372e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003704:	f7fe fa0a 	bl	8001b1c <HAL_GetTick>
 8003708:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800370a:	e00a      	b.n	8003722 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800370c:	f7fe fa06 	bl	8001b1c <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	f241 3288 	movw	r2, #5000	; 0x1388
 800371a:	4293      	cmp	r3, r2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e138      	b.n	8003994 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003722:	4b4e      	ldr	r3, [pc, #312]	; (800385c <HAL_RCC_OscConfig+0x76c>)
 8003724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1ee      	bne.n	800370c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 812d 	beq.w	8003992 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003738:	4b48      	ldr	r3, [pc, #288]	; (800385c <HAL_RCC_OscConfig+0x76c>)
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003740:	2b18      	cmp	r3, #24
 8003742:	f000 80bd 	beq.w	80038c0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374a:	2b02      	cmp	r3, #2
 800374c:	f040 809e 	bne.w	800388c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003750:	4b42      	ldr	r3, [pc, #264]	; (800385c <HAL_RCC_OscConfig+0x76c>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a41      	ldr	r2, [pc, #260]	; (800385c <HAL_RCC_OscConfig+0x76c>)
 8003756:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800375a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375c:	f7fe f9de 	bl	8001b1c <HAL_GetTick>
 8003760:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003764:	f7fe f9da 	bl	8001b1c <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b02      	cmp	r3, #2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e10e      	b.n	8003994 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003776:	4b39      	ldr	r3, [pc, #228]	; (800385c <HAL_RCC_OscConfig+0x76c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1f0      	bne.n	8003764 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003782:	4b36      	ldr	r3, [pc, #216]	; (800385c <HAL_RCC_OscConfig+0x76c>)
 8003784:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003786:	4b37      	ldr	r3, [pc, #220]	; (8003864 <HAL_RCC_OscConfig+0x774>)
 8003788:	4013      	ands	r3, r2
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003792:	0112      	lsls	r2, r2, #4
 8003794:	430a      	orrs	r2, r1
 8003796:	4931      	ldr	r1, [pc, #196]	; (800385c <HAL_RCC_OscConfig+0x76c>)
 8003798:	4313      	orrs	r3, r2
 800379a:	628b      	str	r3, [r1, #40]	; 0x28
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a0:	3b01      	subs	r3, #1
 80037a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037aa:	3b01      	subs	r3, #1
 80037ac:	025b      	lsls	r3, r3, #9
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	431a      	orrs	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b6:	3b01      	subs	r3, #1
 80037b8:	041b      	lsls	r3, r3, #16
 80037ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c4:	3b01      	subs	r3, #1
 80037c6:	061b      	lsls	r3, r3, #24
 80037c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80037cc:	4923      	ldr	r1, [pc, #140]	; (800385c <HAL_RCC_OscConfig+0x76c>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80037d2:	4b22      	ldr	r3, [pc, #136]	; (800385c <HAL_RCC_OscConfig+0x76c>)
 80037d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d6:	4a21      	ldr	r2, [pc, #132]	; (800385c <HAL_RCC_OscConfig+0x76c>)
 80037d8:	f023 0301 	bic.w	r3, r3, #1
 80037dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80037de:	4b1f      	ldr	r3, [pc, #124]	; (800385c <HAL_RCC_OscConfig+0x76c>)
 80037e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037e2:	4b21      	ldr	r3, [pc, #132]	; (8003868 <HAL_RCC_OscConfig+0x778>)
 80037e4:	4013      	ands	r3, r2
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80037ea:	00d2      	lsls	r2, r2, #3
 80037ec:	491b      	ldr	r1, [pc, #108]	; (800385c <HAL_RCC_OscConfig+0x76c>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80037f2:	4b1a      	ldr	r3, [pc, #104]	; (800385c <HAL_RCC_OscConfig+0x76c>)
 80037f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f6:	f023 020c 	bic.w	r2, r3, #12
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	4917      	ldr	r1, [pc, #92]	; (800385c <HAL_RCC_OscConfig+0x76c>)
 8003800:	4313      	orrs	r3, r2
 8003802:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003804:	4b15      	ldr	r3, [pc, #84]	; (800385c <HAL_RCC_OscConfig+0x76c>)
 8003806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003808:	f023 0202 	bic.w	r2, r3, #2
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003810:	4912      	ldr	r1, [pc, #72]	; (800385c <HAL_RCC_OscConfig+0x76c>)
 8003812:	4313      	orrs	r3, r2
 8003814:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003816:	4b11      	ldr	r3, [pc, #68]	; (800385c <HAL_RCC_OscConfig+0x76c>)
 8003818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381a:	4a10      	ldr	r2, [pc, #64]	; (800385c <HAL_RCC_OscConfig+0x76c>)
 800381c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003820:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003822:	4b0e      	ldr	r3, [pc, #56]	; (800385c <HAL_RCC_OscConfig+0x76c>)
 8003824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003826:	4a0d      	ldr	r2, [pc, #52]	; (800385c <HAL_RCC_OscConfig+0x76c>)
 8003828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800382c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800382e:	4b0b      	ldr	r3, [pc, #44]	; (800385c <HAL_RCC_OscConfig+0x76c>)
 8003830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003832:	4a0a      	ldr	r2, [pc, #40]	; (800385c <HAL_RCC_OscConfig+0x76c>)
 8003834:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003838:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800383a:	4b08      	ldr	r3, [pc, #32]	; (800385c <HAL_RCC_OscConfig+0x76c>)
 800383c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383e:	4a07      	ldr	r2, [pc, #28]	; (800385c <HAL_RCC_OscConfig+0x76c>)
 8003840:	f043 0301 	orr.w	r3, r3, #1
 8003844:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003846:	4b05      	ldr	r3, [pc, #20]	; (800385c <HAL_RCC_OscConfig+0x76c>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a04      	ldr	r2, [pc, #16]	; (800385c <HAL_RCC_OscConfig+0x76c>)
 800384c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003850:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003852:	f7fe f963 	bl	8001b1c <HAL_GetTick>
 8003856:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003858:	e011      	b.n	800387e <HAL_RCC_OscConfig+0x78e>
 800385a:	bf00      	nop
 800385c:	58024400 	.word	0x58024400
 8003860:	58024800 	.word	0x58024800
 8003864:	fffffc0c 	.word	0xfffffc0c
 8003868:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800386c:	f7fe f956 	bl	8001b1c <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e08a      	b.n	8003994 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800387e:	4b47      	ldr	r3, [pc, #284]	; (800399c <HAL_RCC_OscConfig+0x8ac>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d0f0      	beq.n	800386c <HAL_RCC_OscConfig+0x77c>
 800388a:	e082      	b.n	8003992 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800388c:	4b43      	ldr	r3, [pc, #268]	; (800399c <HAL_RCC_OscConfig+0x8ac>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a42      	ldr	r2, [pc, #264]	; (800399c <HAL_RCC_OscConfig+0x8ac>)
 8003892:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003898:	f7fe f940 	bl	8001b1c <HAL_GetTick>
 800389c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a0:	f7fe f93c 	bl	8001b1c <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e070      	b.n	8003994 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038b2:	4b3a      	ldr	r3, [pc, #232]	; (800399c <HAL_RCC_OscConfig+0x8ac>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1f0      	bne.n	80038a0 <HAL_RCC_OscConfig+0x7b0>
 80038be:	e068      	b.n	8003992 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80038c0:	4b36      	ldr	r3, [pc, #216]	; (800399c <HAL_RCC_OscConfig+0x8ac>)
 80038c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80038c6:	4b35      	ldr	r3, [pc, #212]	; (800399c <HAL_RCC_OscConfig+0x8ac>)
 80038c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ca:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d031      	beq.n	8003938 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	f003 0203 	and.w	r2, r3, #3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038de:	429a      	cmp	r2, r3
 80038e0:	d12a      	bne.n	8003938 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	091b      	lsrs	r3, r3, #4
 80038e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d122      	bne.n	8003938 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80038fe:	429a      	cmp	r2, r3
 8003900:	d11a      	bne.n	8003938 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	0a5b      	lsrs	r3, r3, #9
 8003906:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800390e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003910:	429a      	cmp	r2, r3
 8003912:	d111      	bne.n	8003938 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	0c1b      	lsrs	r3, r3, #16
 8003918:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003920:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003922:	429a      	cmp	r2, r3
 8003924:	d108      	bne.n	8003938 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	0e1b      	lsrs	r3, r3, #24
 800392a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003932:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003934:	429a      	cmp	r2, r3
 8003936:	d001      	beq.n	800393c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e02b      	b.n	8003994 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800393c:	4b17      	ldr	r3, [pc, #92]	; (800399c <HAL_RCC_OscConfig+0x8ac>)
 800393e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003940:	08db      	lsrs	r3, r3, #3
 8003942:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003946:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	429a      	cmp	r2, r3
 8003950:	d01f      	beq.n	8003992 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003952:	4b12      	ldr	r3, [pc, #72]	; (800399c <HAL_RCC_OscConfig+0x8ac>)
 8003954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003956:	4a11      	ldr	r2, [pc, #68]	; (800399c <HAL_RCC_OscConfig+0x8ac>)
 8003958:	f023 0301 	bic.w	r3, r3, #1
 800395c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800395e:	f7fe f8dd 	bl	8001b1c <HAL_GetTick>
 8003962:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003964:	bf00      	nop
 8003966:	f7fe f8d9 	bl	8001b1c <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	4293      	cmp	r3, r2
 8003970:	d0f9      	beq.n	8003966 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003972:	4b0a      	ldr	r3, [pc, #40]	; (800399c <HAL_RCC_OscConfig+0x8ac>)
 8003974:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003976:	4b0a      	ldr	r3, [pc, #40]	; (80039a0 <HAL_RCC_OscConfig+0x8b0>)
 8003978:	4013      	ands	r3, r2
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800397e:	00d2      	lsls	r2, r2, #3
 8003980:	4906      	ldr	r1, [pc, #24]	; (800399c <HAL_RCC_OscConfig+0x8ac>)
 8003982:	4313      	orrs	r3, r2
 8003984:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003986:	4b05      	ldr	r3, [pc, #20]	; (800399c <HAL_RCC_OscConfig+0x8ac>)
 8003988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398a:	4a04      	ldr	r2, [pc, #16]	; (800399c <HAL_RCC_OscConfig+0x8ac>)
 800398c:	f043 0301 	orr.w	r3, r3, #1
 8003990:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3730      	adds	r7, #48	; 0x30
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	58024400 	.word	0x58024400
 80039a0:	ffff0007 	.word	0xffff0007

080039a4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d101      	bne.n	80039b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e19c      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039b8:	4b8a      	ldr	r3, [pc, #552]	; (8003be4 <HAL_RCC_ClockConfig+0x240>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 030f 	and.w	r3, r3, #15
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d910      	bls.n	80039e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039c6:	4b87      	ldr	r3, [pc, #540]	; (8003be4 <HAL_RCC_ClockConfig+0x240>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f023 020f 	bic.w	r2, r3, #15
 80039ce:	4985      	ldr	r1, [pc, #532]	; (8003be4 <HAL_RCC_ClockConfig+0x240>)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039d6:	4b83      	ldr	r3, [pc, #524]	; (8003be4 <HAL_RCC_ClockConfig+0x240>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d001      	beq.n	80039e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e184      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d010      	beq.n	8003a16 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	691a      	ldr	r2, [r3, #16]
 80039f8:	4b7b      	ldr	r3, [pc, #492]	; (8003be8 <HAL_RCC_ClockConfig+0x244>)
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d908      	bls.n	8003a16 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003a04:	4b78      	ldr	r3, [pc, #480]	; (8003be8 <HAL_RCC_ClockConfig+0x244>)
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	4975      	ldr	r1, [pc, #468]	; (8003be8 <HAL_RCC_ClockConfig+0x244>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0308 	and.w	r3, r3, #8
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d010      	beq.n	8003a44 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	695a      	ldr	r2, [r3, #20]
 8003a26:	4b70      	ldr	r3, [pc, #448]	; (8003be8 <HAL_RCC_ClockConfig+0x244>)
 8003a28:	69db      	ldr	r3, [r3, #28]
 8003a2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d908      	bls.n	8003a44 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003a32:	4b6d      	ldr	r3, [pc, #436]	; (8003be8 <HAL_RCC_ClockConfig+0x244>)
 8003a34:	69db      	ldr	r3, [r3, #28]
 8003a36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	496a      	ldr	r1, [pc, #424]	; (8003be8 <HAL_RCC_ClockConfig+0x244>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0310 	and.w	r3, r3, #16
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d010      	beq.n	8003a72 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	699a      	ldr	r2, [r3, #24]
 8003a54:	4b64      	ldr	r3, [pc, #400]	; (8003be8 <HAL_RCC_ClockConfig+0x244>)
 8003a56:	69db      	ldr	r3, [r3, #28]
 8003a58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d908      	bls.n	8003a72 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a60:	4b61      	ldr	r3, [pc, #388]	; (8003be8 <HAL_RCC_ClockConfig+0x244>)
 8003a62:	69db      	ldr	r3, [r3, #28]
 8003a64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	495e      	ldr	r1, [pc, #376]	; (8003be8 <HAL_RCC_ClockConfig+0x244>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0320 	and.w	r3, r3, #32
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d010      	beq.n	8003aa0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	69da      	ldr	r2, [r3, #28]
 8003a82:	4b59      	ldr	r3, [pc, #356]	; (8003be8 <HAL_RCC_ClockConfig+0x244>)
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d908      	bls.n	8003aa0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003a8e:	4b56      	ldr	r3, [pc, #344]	; (8003be8 <HAL_RCC_ClockConfig+0x244>)
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	4953      	ldr	r1, [pc, #332]	; (8003be8 <HAL_RCC_ClockConfig+0x244>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d010      	beq.n	8003ace <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68da      	ldr	r2, [r3, #12]
 8003ab0:	4b4d      	ldr	r3, [pc, #308]	; (8003be8 <HAL_RCC_ClockConfig+0x244>)
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	f003 030f 	and.w	r3, r3, #15
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d908      	bls.n	8003ace <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003abc:	4b4a      	ldr	r3, [pc, #296]	; (8003be8 <HAL_RCC_ClockConfig+0x244>)
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	f023 020f 	bic.w	r2, r3, #15
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	4947      	ldr	r1, [pc, #284]	; (8003be8 <HAL_RCC_ClockConfig+0x244>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d055      	beq.n	8003b86 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003ada:	4b43      	ldr	r3, [pc, #268]	; (8003be8 <HAL_RCC_ClockConfig+0x244>)
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	4940      	ldr	r1, [pc, #256]	; (8003be8 <HAL_RCC_ClockConfig+0x244>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d107      	bne.n	8003b04 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003af4:	4b3c      	ldr	r3, [pc, #240]	; (8003be8 <HAL_RCC_ClockConfig+0x244>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d121      	bne.n	8003b44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e0f6      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	2b03      	cmp	r3, #3
 8003b0a:	d107      	bne.n	8003b1c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b0c:	4b36      	ldr	r3, [pc, #216]	; (8003be8 <HAL_RCC_ClockConfig+0x244>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d115      	bne.n	8003b44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e0ea      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d107      	bne.n	8003b34 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b24:	4b30      	ldr	r3, [pc, #192]	; (8003be8 <HAL_RCC_ClockConfig+0x244>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d109      	bne.n	8003b44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e0de      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b34:	4b2c      	ldr	r3, [pc, #176]	; (8003be8 <HAL_RCC_ClockConfig+0x244>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0304 	and.w	r3, r3, #4
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d101      	bne.n	8003b44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e0d6      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b44:	4b28      	ldr	r3, [pc, #160]	; (8003be8 <HAL_RCC_ClockConfig+0x244>)
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	f023 0207 	bic.w	r2, r3, #7
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	4925      	ldr	r1, [pc, #148]	; (8003be8 <HAL_RCC_ClockConfig+0x244>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b56:	f7fd ffe1 	bl	8001b1c <HAL_GetTick>
 8003b5a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b5c:	e00a      	b.n	8003b74 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b5e:	f7fd ffdd 	bl	8001b1c <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e0be      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b74:	4b1c      	ldr	r3, [pc, #112]	; (8003be8 <HAL_RCC_ClockConfig+0x244>)
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d1eb      	bne.n	8003b5e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d010      	beq.n	8003bb4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68da      	ldr	r2, [r3, #12]
 8003b96:	4b14      	ldr	r3, [pc, #80]	; (8003be8 <HAL_RCC_ClockConfig+0x244>)
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d208      	bcs.n	8003bb4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ba2:	4b11      	ldr	r3, [pc, #68]	; (8003be8 <HAL_RCC_ClockConfig+0x244>)
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	f023 020f 	bic.w	r2, r3, #15
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	490e      	ldr	r1, [pc, #56]	; (8003be8 <HAL_RCC_ClockConfig+0x244>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bb4:	4b0b      	ldr	r3, [pc, #44]	; (8003be4 <HAL_RCC_ClockConfig+0x240>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 030f 	and.w	r3, r3, #15
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d214      	bcs.n	8003bec <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bc2:	4b08      	ldr	r3, [pc, #32]	; (8003be4 <HAL_RCC_ClockConfig+0x240>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f023 020f 	bic.w	r2, r3, #15
 8003bca:	4906      	ldr	r1, [pc, #24]	; (8003be4 <HAL_RCC_ClockConfig+0x240>)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bd2:	4b04      	ldr	r3, [pc, #16]	; (8003be4 <HAL_RCC_ClockConfig+0x240>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 030f 	and.w	r3, r3, #15
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d005      	beq.n	8003bec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e086      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x34e>
 8003be4:	52002000 	.word	0x52002000
 8003be8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0304 	and.w	r3, r3, #4
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d010      	beq.n	8003c1a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	691a      	ldr	r2, [r3, #16]
 8003bfc:	4b3f      	ldr	r3, [pc, #252]	; (8003cfc <HAL_RCC_ClockConfig+0x358>)
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d208      	bcs.n	8003c1a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003c08:	4b3c      	ldr	r3, [pc, #240]	; (8003cfc <HAL_RCC_ClockConfig+0x358>)
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	4939      	ldr	r1, [pc, #228]	; (8003cfc <HAL_RCC_ClockConfig+0x358>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d010      	beq.n	8003c48 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	695a      	ldr	r2, [r3, #20]
 8003c2a:	4b34      	ldr	r3, [pc, #208]	; (8003cfc <HAL_RCC_ClockConfig+0x358>)
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d208      	bcs.n	8003c48 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003c36:	4b31      	ldr	r3, [pc, #196]	; (8003cfc <HAL_RCC_ClockConfig+0x358>)
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	492e      	ldr	r1, [pc, #184]	; (8003cfc <HAL_RCC_ClockConfig+0x358>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0310 	and.w	r3, r3, #16
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d010      	beq.n	8003c76 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	699a      	ldr	r2, [r3, #24]
 8003c58:	4b28      	ldr	r3, [pc, #160]	; (8003cfc <HAL_RCC_ClockConfig+0x358>)
 8003c5a:	69db      	ldr	r3, [r3, #28]
 8003c5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d208      	bcs.n	8003c76 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c64:	4b25      	ldr	r3, [pc, #148]	; (8003cfc <HAL_RCC_ClockConfig+0x358>)
 8003c66:	69db      	ldr	r3, [r3, #28]
 8003c68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	4922      	ldr	r1, [pc, #136]	; (8003cfc <HAL_RCC_ClockConfig+0x358>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0320 	and.w	r3, r3, #32
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d010      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	69da      	ldr	r2, [r3, #28]
 8003c86:	4b1d      	ldr	r3, [pc, #116]	; (8003cfc <HAL_RCC_ClockConfig+0x358>)
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d208      	bcs.n	8003ca4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003c92:	4b1a      	ldr	r3, [pc, #104]	; (8003cfc <HAL_RCC_ClockConfig+0x358>)
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	4917      	ldr	r1, [pc, #92]	; (8003cfc <HAL_RCC_ClockConfig+0x358>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003ca4:	f000 f834 	bl	8003d10 <HAL_RCC_GetSysClockFreq>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	4b14      	ldr	r3, [pc, #80]	; (8003cfc <HAL_RCC_ClockConfig+0x358>)
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	0a1b      	lsrs	r3, r3, #8
 8003cb0:	f003 030f 	and.w	r3, r3, #15
 8003cb4:	4912      	ldr	r1, [pc, #72]	; (8003d00 <HAL_RCC_ClockConfig+0x35c>)
 8003cb6:	5ccb      	ldrb	r3, [r1, r3]
 8003cb8:	f003 031f 	and.w	r3, r3, #31
 8003cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8003cc0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003cc2:	4b0e      	ldr	r3, [pc, #56]	; (8003cfc <HAL_RCC_ClockConfig+0x358>)
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	f003 030f 	and.w	r3, r3, #15
 8003cca:	4a0d      	ldr	r2, [pc, #52]	; (8003d00 <HAL_RCC_ClockConfig+0x35c>)
 8003ccc:	5cd3      	ldrb	r3, [r2, r3]
 8003cce:	f003 031f 	and.w	r3, r3, #31
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd8:	4a0a      	ldr	r2, [pc, #40]	; (8003d04 <HAL_RCC_ClockConfig+0x360>)
 8003cda:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003cdc:	4a0a      	ldr	r2, [pc, #40]	; (8003d08 <HAL_RCC_ClockConfig+0x364>)
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003ce2:	4b0a      	ldr	r3, [pc, #40]	; (8003d0c <HAL_RCC_ClockConfig+0x368>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7fd fece 	bl	8001a88 <HAL_InitTick>
 8003cec:	4603      	mov	r3, r0
 8003cee:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3718      	adds	r7, #24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	58024400 	.word	0x58024400
 8003d00:	0800b7f8 	.word	0x0800b7f8
 8003d04:	24000004 	.word	0x24000004
 8003d08:	24000000 	.word	0x24000000
 8003d0c:	24000008 	.word	0x24000008

08003d10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b089      	sub	sp, #36	; 0x24
 8003d14:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d16:	4bb3      	ldr	r3, [pc, #716]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d1e:	2b18      	cmp	r3, #24
 8003d20:	f200 8155 	bhi.w	8003fce <HAL_RCC_GetSysClockFreq+0x2be>
 8003d24:	a201      	add	r2, pc, #4	; (adr r2, 8003d2c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d2a:	bf00      	nop
 8003d2c:	08003d91 	.word	0x08003d91
 8003d30:	08003fcf 	.word	0x08003fcf
 8003d34:	08003fcf 	.word	0x08003fcf
 8003d38:	08003fcf 	.word	0x08003fcf
 8003d3c:	08003fcf 	.word	0x08003fcf
 8003d40:	08003fcf 	.word	0x08003fcf
 8003d44:	08003fcf 	.word	0x08003fcf
 8003d48:	08003fcf 	.word	0x08003fcf
 8003d4c:	08003db7 	.word	0x08003db7
 8003d50:	08003fcf 	.word	0x08003fcf
 8003d54:	08003fcf 	.word	0x08003fcf
 8003d58:	08003fcf 	.word	0x08003fcf
 8003d5c:	08003fcf 	.word	0x08003fcf
 8003d60:	08003fcf 	.word	0x08003fcf
 8003d64:	08003fcf 	.word	0x08003fcf
 8003d68:	08003fcf 	.word	0x08003fcf
 8003d6c:	08003dbd 	.word	0x08003dbd
 8003d70:	08003fcf 	.word	0x08003fcf
 8003d74:	08003fcf 	.word	0x08003fcf
 8003d78:	08003fcf 	.word	0x08003fcf
 8003d7c:	08003fcf 	.word	0x08003fcf
 8003d80:	08003fcf 	.word	0x08003fcf
 8003d84:	08003fcf 	.word	0x08003fcf
 8003d88:	08003fcf 	.word	0x08003fcf
 8003d8c:	08003dc3 	.word	0x08003dc3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d90:	4b94      	ldr	r3, [pc, #592]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0320 	and.w	r3, r3, #32
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d009      	beq.n	8003db0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003d9c:	4b91      	ldr	r3, [pc, #580]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	08db      	lsrs	r3, r3, #3
 8003da2:	f003 0303 	and.w	r3, r3, #3
 8003da6:	4a90      	ldr	r2, [pc, #576]	; (8003fe8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003da8:	fa22 f303 	lsr.w	r3, r2, r3
 8003dac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003dae:	e111      	b.n	8003fd4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003db0:	4b8d      	ldr	r3, [pc, #564]	; (8003fe8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003db2:	61bb      	str	r3, [r7, #24]
      break;
 8003db4:	e10e      	b.n	8003fd4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003db6:	4b8d      	ldr	r3, [pc, #564]	; (8003fec <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003db8:	61bb      	str	r3, [r7, #24]
      break;
 8003dba:	e10b      	b.n	8003fd4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003dbc:	4b8c      	ldr	r3, [pc, #560]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003dbe:	61bb      	str	r3, [r7, #24]
      break;
 8003dc0:	e108      	b.n	8003fd4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003dc2:	4b88      	ldr	r3, [pc, #544]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc6:	f003 0303 	and.w	r3, r3, #3
 8003dca:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003dcc:	4b85      	ldr	r3, [pc, #532]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd0:	091b      	lsrs	r3, r3, #4
 8003dd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dd6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003dd8:	4b82      	ldr	r3, [pc, #520]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003de2:	4b80      	ldr	r3, [pc, #512]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003de6:	08db      	lsrs	r3, r3, #3
 8003de8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	fb02 f303 	mul.w	r3, r2, r3
 8003df2:	ee07 3a90 	vmov	s15, r3
 8003df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dfa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f000 80e1 	beq.w	8003fc8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	f000 8083 	beq.w	8003f14 <HAL_RCC_GetSysClockFreq+0x204>
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	f200 80a1 	bhi.w	8003f58 <HAL_RCC_GetSysClockFreq+0x248>
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <HAL_RCC_GetSysClockFreq+0x114>
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d056      	beq.n	8003ed0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003e22:	e099      	b.n	8003f58 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e24:	4b6f      	ldr	r3, [pc, #444]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0320 	and.w	r3, r3, #32
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d02d      	beq.n	8003e8c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003e30:	4b6c      	ldr	r3, [pc, #432]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	08db      	lsrs	r3, r3, #3
 8003e36:	f003 0303 	and.w	r3, r3, #3
 8003e3a:	4a6b      	ldr	r2, [pc, #428]	; (8003fe8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e40:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	ee07 3a90 	vmov	s15, r3
 8003e48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	ee07 3a90 	vmov	s15, r3
 8003e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e5a:	4b62      	ldr	r3, [pc, #392]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e62:	ee07 3a90 	vmov	s15, r3
 8003e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e6e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003ff4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e86:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003e8a:	e087      	b.n	8003f9c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	ee07 3a90 	vmov	s15, r3
 8003e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e96:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003ff8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e9e:	4b51      	ldr	r3, [pc, #324]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ea6:	ee07 3a90 	vmov	s15, r3
 8003eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eae:	ed97 6a02 	vldr	s12, [r7, #8]
 8003eb2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003ff4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003eb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ebe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003ece:	e065      	b.n	8003f9c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	ee07 3a90 	vmov	s15, r3
 8003ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eda:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003ffc <HAL_RCC_GetSysClockFreq+0x2ec>
 8003ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ee2:	4b40      	ldr	r3, [pc, #256]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eea:	ee07 3a90 	vmov	s15, r3
 8003eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ef2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ef6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003ff4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003efa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f0e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003f12:	e043      	b.n	8003f9c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	ee07 3a90 	vmov	s15, r3
 8003f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f1e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004000 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f26:	4b2f      	ldr	r3, [pc, #188]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f2e:	ee07 3a90 	vmov	s15, r3
 8003f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f36:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f3a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003ff4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f52:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003f56:	e021      	b.n	8003f9c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	ee07 3a90 	vmov	s15, r3
 8003f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f62:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003ffc <HAL_RCC_GetSysClockFreq+0x2ec>
 8003f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f6a:	4b1e      	ldr	r3, [pc, #120]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f72:	ee07 3a90 	vmov	s15, r3
 8003f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f7e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003ff4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003f9a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003f9c:	4b11      	ldr	r3, [pc, #68]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa0:	0a5b      	lsrs	r3, r3, #9
 8003fa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	ee07 3a90 	vmov	s15, r3
 8003fb0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fc0:	ee17 3a90 	vmov	r3, s15
 8003fc4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003fc6:	e005      	b.n	8003fd4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	61bb      	str	r3, [r7, #24]
      break;
 8003fcc:	e002      	b.n	8003fd4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003fce:	4b07      	ldr	r3, [pc, #28]	; (8003fec <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003fd0:	61bb      	str	r3, [r7, #24]
      break;
 8003fd2:	bf00      	nop
  }

  return sysclockfreq;
 8003fd4:	69bb      	ldr	r3, [r7, #24]
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3724      	adds	r7, #36	; 0x24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	58024400 	.word	0x58024400
 8003fe8:	03d09000 	.word	0x03d09000
 8003fec:	003d0900 	.word	0x003d0900
 8003ff0:	007a1200 	.word	0x007a1200
 8003ff4:	46000000 	.word	0x46000000
 8003ff8:	4c742400 	.word	0x4c742400
 8003ffc:	4a742400 	.word	0x4a742400
 8004000:	4af42400 	.word	0x4af42400

08004004 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800400a:	f7ff fe81 	bl	8003d10 <HAL_RCC_GetSysClockFreq>
 800400e:	4602      	mov	r2, r0
 8004010:	4b10      	ldr	r3, [pc, #64]	; (8004054 <HAL_RCC_GetHCLKFreq+0x50>)
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	0a1b      	lsrs	r3, r3, #8
 8004016:	f003 030f 	and.w	r3, r3, #15
 800401a:	490f      	ldr	r1, [pc, #60]	; (8004058 <HAL_RCC_GetHCLKFreq+0x54>)
 800401c:	5ccb      	ldrb	r3, [r1, r3]
 800401e:	f003 031f 	and.w	r3, r3, #31
 8004022:	fa22 f303 	lsr.w	r3, r2, r3
 8004026:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004028:	4b0a      	ldr	r3, [pc, #40]	; (8004054 <HAL_RCC_GetHCLKFreq+0x50>)
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	f003 030f 	and.w	r3, r3, #15
 8004030:	4a09      	ldr	r2, [pc, #36]	; (8004058 <HAL_RCC_GetHCLKFreq+0x54>)
 8004032:	5cd3      	ldrb	r3, [r2, r3]
 8004034:	f003 031f 	and.w	r3, r3, #31
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	fa22 f303 	lsr.w	r3, r2, r3
 800403e:	4a07      	ldr	r2, [pc, #28]	; (800405c <HAL_RCC_GetHCLKFreq+0x58>)
 8004040:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004042:	4a07      	ldr	r2, [pc, #28]	; (8004060 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004048:	4b04      	ldr	r3, [pc, #16]	; (800405c <HAL_RCC_GetHCLKFreq+0x58>)
 800404a:	681b      	ldr	r3, [r3, #0]
}
 800404c:	4618      	mov	r0, r3
 800404e:	3708      	adds	r7, #8
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	58024400 	.word	0x58024400
 8004058:	0800b7f8 	.word	0x0800b7f8
 800405c:	24000004 	.word	0x24000004
 8004060:	24000000 	.word	0x24000000

08004064 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004068:	f7ff ffcc 	bl	8004004 <HAL_RCC_GetHCLKFreq>
 800406c:	4602      	mov	r2, r0
 800406e:	4b06      	ldr	r3, [pc, #24]	; (8004088 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	091b      	lsrs	r3, r3, #4
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	4904      	ldr	r1, [pc, #16]	; (800408c <HAL_RCC_GetPCLK1Freq+0x28>)
 800407a:	5ccb      	ldrb	r3, [r1, r3]
 800407c:	f003 031f 	and.w	r3, r3, #31
 8004080:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004084:	4618      	mov	r0, r3
 8004086:	bd80      	pop	{r7, pc}
 8004088:	58024400 	.word	0x58024400
 800408c:	0800b7f8 	.word	0x0800b7f8

08004090 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004094:	f7ff ffb6 	bl	8004004 <HAL_RCC_GetHCLKFreq>
 8004098:	4602      	mov	r2, r0
 800409a:	4b06      	ldr	r3, [pc, #24]	; (80040b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800409c:	69db      	ldr	r3, [r3, #28]
 800409e:	0a1b      	lsrs	r3, r3, #8
 80040a0:	f003 0307 	and.w	r3, r3, #7
 80040a4:	4904      	ldr	r1, [pc, #16]	; (80040b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80040a6:	5ccb      	ldrb	r3, [r1, r3]
 80040a8:	f003 031f 	and.w	r3, r3, #31
 80040ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	58024400 	.word	0x58024400
 80040b8:	0800b7f8 	.word	0x0800b7f8

080040bc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040c0:	b0ca      	sub	sp, #296	; 0x128
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040c8:	2300      	movs	r3, #0
 80040ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040ce:	2300      	movs	r3, #0
 80040d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040dc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80040e0:	2500      	movs	r5, #0
 80040e2:	ea54 0305 	orrs.w	r3, r4, r5
 80040e6:	d049      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80040e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040f2:	d02f      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80040f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040f8:	d828      	bhi.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80040fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040fe:	d01a      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004100:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004104:	d822      	bhi.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800410a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800410e:	d007      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004110:	e01c      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004112:	4bb8      	ldr	r3, [pc, #736]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004116:	4ab7      	ldr	r2, [pc, #732]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800411c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800411e:	e01a      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004120:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004124:	3308      	adds	r3, #8
 8004126:	2102      	movs	r1, #2
 8004128:	4618      	mov	r0, r3
 800412a:	f001 fc8f 	bl	8005a4c <RCCEx_PLL2_Config>
 800412e:	4603      	mov	r3, r0
 8004130:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004134:	e00f      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004136:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800413a:	3328      	adds	r3, #40	; 0x28
 800413c:	2102      	movs	r1, #2
 800413e:	4618      	mov	r0, r3
 8004140:	f001 fd36 	bl	8005bb0 <RCCEx_PLL3_Config>
 8004144:	4603      	mov	r3, r0
 8004146:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800414a:	e004      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004152:	e000      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004154:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004156:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10a      	bne.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800415e:	4ba5      	ldr	r3, [pc, #660]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004162:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004166:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800416a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800416c:	4aa1      	ldr	r2, [pc, #644]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800416e:	430b      	orrs	r3, r1
 8004170:	6513      	str	r3, [r2, #80]	; 0x50
 8004172:	e003      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004174:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004178:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800417c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004184:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004188:	f04f 0900 	mov.w	r9, #0
 800418c:	ea58 0309 	orrs.w	r3, r8, r9
 8004190:	d047      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004192:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004198:	2b04      	cmp	r3, #4
 800419a:	d82a      	bhi.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800419c:	a201      	add	r2, pc, #4	; (adr r2, 80041a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800419e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a2:	bf00      	nop
 80041a4:	080041b9 	.word	0x080041b9
 80041a8:	080041c7 	.word	0x080041c7
 80041ac:	080041dd 	.word	0x080041dd
 80041b0:	080041fb 	.word	0x080041fb
 80041b4:	080041fb 	.word	0x080041fb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041b8:	4b8e      	ldr	r3, [pc, #568]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041bc:	4a8d      	ldr	r2, [pc, #564]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80041c4:	e01a      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041ca:	3308      	adds	r3, #8
 80041cc:	2100      	movs	r1, #0
 80041ce:	4618      	mov	r0, r3
 80041d0:	f001 fc3c 	bl	8005a4c <RCCEx_PLL2_Config>
 80041d4:	4603      	mov	r3, r0
 80041d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80041da:	e00f      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80041dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041e0:	3328      	adds	r3, #40	; 0x28
 80041e2:	2100      	movs	r1, #0
 80041e4:	4618      	mov	r0, r3
 80041e6:	f001 fce3 	bl	8005bb0 <RCCEx_PLL3_Config>
 80041ea:	4603      	mov	r3, r0
 80041ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80041f0:	e004      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80041f8:	e000      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80041fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10a      	bne.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004204:	4b7b      	ldr	r3, [pc, #492]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004208:	f023 0107 	bic.w	r1, r3, #7
 800420c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004212:	4a78      	ldr	r2, [pc, #480]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004214:	430b      	orrs	r3, r1
 8004216:	6513      	str	r3, [r2, #80]	; 0x50
 8004218:	e003      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800421a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800421e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800422e:	f04f 0b00 	mov.w	fp, #0
 8004232:	ea5a 030b 	orrs.w	r3, sl, fp
 8004236:	d04c      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004238:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800423c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800423e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004242:	d030      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004244:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004248:	d829      	bhi.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800424a:	2bc0      	cmp	r3, #192	; 0xc0
 800424c:	d02d      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800424e:	2bc0      	cmp	r3, #192	; 0xc0
 8004250:	d825      	bhi.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004252:	2b80      	cmp	r3, #128	; 0x80
 8004254:	d018      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004256:	2b80      	cmp	r3, #128	; 0x80
 8004258:	d821      	bhi.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800425a:	2b00      	cmp	r3, #0
 800425c:	d002      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800425e:	2b40      	cmp	r3, #64	; 0x40
 8004260:	d007      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004262:	e01c      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004264:	4b63      	ldr	r3, [pc, #396]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004268:	4a62      	ldr	r2, [pc, #392]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800426a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800426e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004270:	e01c      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004272:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004276:	3308      	adds	r3, #8
 8004278:	2100      	movs	r1, #0
 800427a:	4618      	mov	r0, r3
 800427c:	f001 fbe6 	bl	8005a4c <RCCEx_PLL2_Config>
 8004280:	4603      	mov	r3, r0
 8004282:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004286:	e011      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004288:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800428c:	3328      	adds	r3, #40	; 0x28
 800428e:	2100      	movs	r1, #0
 8004290:	4618      	mov	r0, r3
 8004292:	f001 fc8d 	bl	8005bb0 <RCCEx_PLL3_Config>
 8004296:	4603      	mov	r3, r0
 8004298:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800429c:	e006      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80042a4:	e002      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80042a6:	bf00      	nop
 80042a8:	e000      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80042aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10a      	bne.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80042b4:	4b4f      	ldr	r3, [pc, #316]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80042bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c2:	4a4c      	ldr	r2, [pc, #304]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042c4:	430b      	orrs	r3, r1
 80042c6:	6513      	str	r3, [r2, #80]	; 0x50
 80042c8:	e003      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80042d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042da:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80042de:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80042e2:	2300      	movs	r3, #0
 80042e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80042e8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80042ec:	460b      	mov	r3, r1
 80042ee:	4313      	orrs	r3, r2
 80042f0:	d053      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80042f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80042fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042fe:	d035      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004300:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004304:	d82e      	bhi.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004306:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800430a:	d031      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800430c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004310:	d828      	bhi.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004312:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004316:	d01a      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004318:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800431c:	d822      	bhi.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004322:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004326:	d007      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004328:	e01c      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800432a:	4b32      	ldr	r3, [pc, #200]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800432c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432e:	4a31      	ldr	r2, [pc, #196]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004334:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004336:	e01c      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004338:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800433c:	3308      	adds	r3, #8
 800433e:	2100      	movs	r1, #0
 8004340:	4618      	mov	r0, r3
 8004342:	f001 fb83 	bl	8005a4c <RCCEx_PLL2_Config>
 8004346:	4603      	mov	r3, r0
 8004348:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800434c:	e011      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800434e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004352:	3328      	adds	r3, #40	; 0x28
 8004354:	2100      	movs	r1, #0
 8004356:	4618      	mov	r0, r3
 8004358:	f001 fc2a 	bl	8005bb0 <RCCEx_PLL3_Config>
 800435c:	4603      	mov	r3, r0
 800435e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004362:	e006      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800436a:	e002      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800436c:	bf00      	nop
 800436e:	e000      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004370:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004372:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10b      	bne.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800437a:	4b1e      	ldr	r3, [pc, #120]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800437c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8004382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004386:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800438a:	4a1a      	ldr	r2, [pc, #104]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800438c:	430b      	orrs	r3, r1
 800438e:	6593      	str	r3, [r2, #88]	; 0x58
 8004390:	e003      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004392:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004396:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800439a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800439e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80043a6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80043aa:	2300      	movs	r3, #0
 80043ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80043b0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80043b4:	460b      	mov	r3, r1
 80043b6:	4313      	orrs	r3, r2
 80043b8:	d056      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80043ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80043c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043c6:	d038      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80043c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043cc:	d831      	bhi.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80043ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80043d2:	d034      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80043d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80043d8:	d82b      	bhi.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80043da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043de:	d01d      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80043e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043e4:	d825      	bhi.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d006      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80043ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043ee:	d00a      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80043f0:	e01f      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80043f2:	bf00      	nop
 80043f4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043f8:	4ba2      	ldr	r3, [pc, #648]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fc:	4aa1      	ldr	r2, [pc, #644]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004402:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004404:	e01c      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004406:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800440a:	3308      	adds	r3, #8
 800440c:	2100      	movs	r1, #0
 800440e:	4618      	mov	r0, r3
 8004410:	f001 fb1c 	bl	8005a4c <RCCEx_PLL2_Config>
 8004414:	4603      	mov	r3, r0
 8004416:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800441a:	e011      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800441c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004420:	3328      	adds	r3, #40	; 0x28
 8004422:	2100      	movs	r1, #0
 8004424:	4618      	mov	r0, r3
 8004426:	f001 fbc3 	bl	8005bb0 <RCCEx_PLL3_Config>
 800442a:	4603      	mov	r3, r0
 800442c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004430:	e006      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004438:	e002      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800443a:	bf00      	nop
 800443c:	e000      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800443e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004440:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10b      	bne.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004448:	4b8e      	ldr	r3, [pc, #568]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800444a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800444c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004454:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004458:	4a8a      	ldr	r2, [pc, #552]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800445a:	430b      	orrs	r3, r1
 800445c:	6593      	str	r3, [r2, #88]	; 0x58
 800445e:	e003      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004460:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004464:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004468:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800446c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004470:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004474:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004478:	2300      	movs	r3, #0
 800447a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800447e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004482:	460b      	mov	r3, r1
 8004484:	4313      	orrs	r3, r2
 8004486:	d03a      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004488:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800448c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800448e:	2b30      	cmp	r3, #48	; 0x30
 8004490:	d01f      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004492:	2b30      	cmp	r3, #48	; 0x30
 8004494:	d819      	bhi.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004496:	2b20      	cmp	r3, #32
 8004498:	d00c      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800449a:	2b20      	cmp	r3, #32
 800449c:	d815      	bhi.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d019      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80044a2:	2b10      	cmp	r3, #16
 80044a4:	d111      	bne.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044a6:	4b77      	ldr	r3, [pc, #476]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044aa:	4a76      	ldr	r2, [pc, #472]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80044b2:	e011      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80044b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044b8:	3308      	adds	r3, #8
 80044ba:	2102      	movs	r1, #2
 80044bc:	4618      	mov	r0, r3
 80044be:	f001 fac5 	bl	8005a4c <RCCEx_PLL2_Config>
 80044c2:	4603      	mov	r3, r0
 80044c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80044c8:	e006      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80044d0:	e002      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80044d2:	bf00      	nop
 80044d4:	e000      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80044d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10a      	bne.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80044e0:	4b68      	ldr	r3, [pc, #416]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80044e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ee:	4a65      	ldr	r2, [pc, #404]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044f0:	430b      	orrs	r3, r1
 80044f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044f4:	e003      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80044fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004506:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800450a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800450e:	2300      	movs	r3, #0
 8004510:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004514:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004518:	460b      	mov	r3, r1
 800451a:	4313      	orrs	r3, r2
 800451c:	d051      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800451e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004524:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004528:	d035      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800452a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800452e:	d82e      	bhi.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004530:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004534:	d031      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004536:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800453a:	d828      	bhi.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800453c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004540:	d01a      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004546:	d822      	bhi.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004548:	2b00      	cmp	r3, #0
 800454a:	d003      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800454c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004550:	d007      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004552:	e01c      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004554:	4b4b      	ldr	r3, [pc, #300]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004558:	4a4a      	ldr	r2, [pc, #296]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800455a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800455e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004560:	e01c      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004562:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004566:	3308      	adds	r3, #8
 8004568:	2100      	movs	r1, #0
 800456a:	4618      	mov	r0, r3
 800456c:	f001 fa6e 	bl	8005a4c <RCCEx_PLL2_Config>
 8004570:	4603      	mov	r3, r0
 8004572:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004576:	e011      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004578:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800457c:	3328      	adds	r3, #40	; 0x28
 800457e:	2100      	movs	r1, #0
 8004580:	4618      	mov	r0, r3
 8004582:	f001 fb15 	bl	8005bb0 <RCCEx_PLL3_Config>
 8004586:	4603      	mov	r3, r0
 8004588:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800458c:	e006      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004594:	e002      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004596:	bf00      	nop
 8004598:	e000      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800459a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800459c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10a      	bne.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80045a4:	4b37      	ldr	r3, [pc, #220]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045a8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80045ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045b2:	4a34      	ldr	r2, [pc, #208]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045b4:	430b      	orrs	r3, r1
 80045b6:	6513      	str	r3, [r2, #80]	; 0x50
 80045b8:	e003      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80045c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ca:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80045ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80045d2:	2300      	movs	r3, #0
 80045d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80045d8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80045dc:	460b      	mov	r3, r1
 80045de:	4313      	orrs	r3, r2
 80045e0:	d056      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80045e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045ec:	d033      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80045ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045f2:	d82c      	bhi.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80045f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80045f8:	d02f      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80045fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80045fe:	d826      	bhi.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004600:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004604:	d02b      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004606:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800460a:	d820      	bhi.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800460c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004610:	d012      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004612:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004616:	d81a      	bhi.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004618:	2b00      	cmp	r3, #0
 800461a:	d022      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800461c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004620:	d115      	bne.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004622:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004626:	3308      	adds	r3, #8
 8004628:	2101      	movs	r1, #1
 800462a:	4618      	mov	r0, r3
 800462c:	f001 fa0e 	bl	8005a4c <RCCEx_PLL2_Config>
 8004630:	4603      	mov	r3, r0
 8004632:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004636:	e015      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004638:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800463c:	3328      	adds	r3, #40	; 0x28
 800463e:	2101      	movs	r1, #1
 8004640:	4618      	mov	r0, r3
 8004642:	f001 fab5 	bl	8005bb0 <RCCEx_PLL3_Config>
 8004646:	4603      	mov	r3, r0
 8004648:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800464c:	e00a      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004654:	e006      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004656:	bf00      	nop
 8004658:	e004      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800465a:	bf00      	nop
 800465c:	e002      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800465e:	bf00      	nop
 8004660:	e000      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004662:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004664:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10d      	bne.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800466c:	4b05      	ldr	r3, [pc, #20]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800466e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004670:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004674:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004678:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800467a:	4a02      	ldr	r2, [pc, #8]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800467c:	430b      	orrs	r3, r1
 800467e:	6513      	str	r3, [r2, #80]	; 0x50
 8004680:	e006      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004682:	bf00      	nop
 8004684:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004688:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800468c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004690:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004698:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800469c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80046a0:	2300      	movs	r3, #0
 80046a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80046a6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80046aa:	460b      	mov	r3, r1
 80046ac:	4313      	orrs	r3, r2
 80046ae:	d055      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80046b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80046b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046bc:	d033      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80046be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046c2:	d82c      	bhi.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80046c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c8:	d02f      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80046ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ce:	d826      	bhi.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80046d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80046d4:	d02b      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80046d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80046da:	d820      	bhi.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80046dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046e0:	d012      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80046e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046e6:	d81a      	bhi.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d022      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80046ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046f0:	d115      	bne.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046f6:	3308      	adds	r3, #8
 80046f8:	2101      	movs	r1, #1
 80046fa:	4618      	mov	r0, r3
 80046fc:	f001 f9a6 	bl	8005a4c <RCCEx_PLL2_Config>
 8004700:	4603      	mov	r3, r0
 8004702:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004706:	e015      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004708:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800470c:	3328      	adds	r3, #40	; 0x28
 800470e:	2101      	movs	r1, #1
 8004710:	4618      	mov	r0, r3
 8004712:	f001 fa4d 	bl	8005bb0 <RCCEx_PLL3_Config>
 8004716:	4603      	mov	r3, r0
 8004718:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800471c:	e00a      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004724:	e006      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004726:	bf00      	nop
 8004728:	e004      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800472a:	bf00      	nop
 800472c:	e002      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800472e:	bf00      	nop
 8004730:	e000      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004732:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004734:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10b      	bne.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800473c:	4ba3      	ldr	r3, [pc, #652]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800473e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004740:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004748:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800474c:	4a9f      	ldr	r2, [pc, #636]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800474e:	430b      	orrs	r3, r1
 8004750:	6593      	str	r3, [r2, #88]	; 0x58
 8004752:	e003      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004754:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004758:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800475c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004764:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004768:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800476c:	2300      	movs	r3, #0
 800476e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004772:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004776:	460b      	mov	r3, r1
 8004778:	4313      	orrs	r3, r2
 800477a:	d037      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800477c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004782:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004786:	d00e      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004788:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800478c:	d816      	bhi.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x700>
 800478e:	2b00      	cmp	r3, #0
 8004790:	d018      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004792:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004796:	d111      	bne.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004798:	4b8c      	ldr	r3, [pc, #560]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800479a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479c:	4a8b      	ldr	r2, [pc, #556]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800479e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80047a4:	e00f      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047aa:	3308      	adds	r3, #8
 80047ac:	2101      	movs	r1, #1
 80047ae:	4618      	mov	r0, r3
 80047b0:	f001 f94c 	bl	8005a4c <RCCEx_PLL2_Config>
 80047b4:	4603      	mov	r3, r0
 80047b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80047ba:	e004      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80047c2:	e000      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80047c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10a      	bne.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80047ce:	4b7f      	ldr	r3, [pc, #508]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047d2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80047d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047dc:	4a7b      	ldr	r2, [pc, #492]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047de:	430b      	orrs	r3, r1
 80047e0:	6513      	str	r3, [r2, #80]	; 0x50
 80047e2:	e003      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80047ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80047f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047fc:	2300      	movs	r3, #0
 80047fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004802:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004806:	460b      	mov	r3, r1
 8004808:	4313      	orrs	r3, r2
 800480a:	d039      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800480c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004812:	2b03      	cmp	r3, #3
 8004814:	d81c      	bhi.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004816:	a201      	add	r2, pc, #4	; (adr r2, 800481c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481c:	08004859 	.word	0x08004859
 8004820:	0800482d 	.word	0x0800482d
 8004824:	0800483b 	.word	0x0800483b
 8004828:	08004859 	.word	0x08004859
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800482c:	4b67      	ldr	r3, [pc, #412]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800482e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004830:	4a66      	ldr	r2, [pc, #408]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004832:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004836:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004838:	e00f      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800483a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800483e:	3308      	adds	r3, #8
 8004840:	2102      	movs	r1, #2
 8004842:	4618      	mov	r0, r3
 8004844:	f001 f902 	bl	8005a4c <RCCEx_PLL2_Config>
 8004848:	4603      	mov	r3, r0
 800484a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800484e:	e004      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004856:	e000      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004858:	bf00      	nop
    }

    if (ret == HAL_OK)
 800485a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10a      	bne.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004862:	4b5a      	ldr	r3, [pc, #360]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004866:	f023 0103 	bic.w	r1, r3, #3
 800486a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800486e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004870:	4a56      	ldr	r2, [pc, #344]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004872:	430b      	orrs	r3, r1
 8004874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004876:	e003      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004878:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800487c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004880:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004888:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800488c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004890:	2300      	movs	r3, #0
 8004892:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004896:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800489a:	460b      	mov	r3, r1
 800489c:	4313      	orrs	r3, r2
 800489e:	f000 809f 	beq.w	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048a2:	4b4b      	ldr	r3, [pc, #300]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a4a      	ldr	r2, [pc, #296]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80048a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048ae:	f7fd f935 	bl	8001b1c <HAL_GetTick>
 80048b2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048b6:	e00b      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048b8:	f7fd f930 	bl	8001b1c <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b64      	cmp	r3, #100	; 0x64
 80048c6:	d903      	bls.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80048ce:	e005      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048d0:	4b3f      	ldr	r3, [pc, #252]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d0ed      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80048dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d179      	bne.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80048e4:	4b39      	ldr	r3, [pc, #228]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80048f0:	4053      	eors	r3, r2
 80048f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d015      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048fa:	4b34      	ldr	r3, [pc, #208]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004902:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004906:	4b31      	ldr	r3, [pc, #196]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800490a:	4a30      	ldr	r2, [pc, #192]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800490c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004910:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004912:	4b2e      	ldr	r3, [pc, #184]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004916:	4a2d      	ldr	r2, [pc, #180]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004918:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800491c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800491e:	4a2b      	ldr	r2, [pc, #172]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004920:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004924:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004926:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800492a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800492e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004932:	d118      	bne.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004934:	f7fd f8f2 	bl	8001b1c <HAL_GetTick>
 8004938:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800493c:	e00d      	b.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800493e:	f7fd f8ed 	bl	8001b1c <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004948:	1ad2      	subs	r2, r2, r3
 800494a:	f241 3388 	movw	r3, #5000	; 0x1388
 800494e:	429a      	cmp	r2, r3
 8004950:	d903      	bls.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8004958:	e005      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800495a:	4b1c      	ldr	r3, [pc, #112]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800495c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d0eb      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004966:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800496a:	2b00      	cmp	r3, #0
 800496c:	d129      	bne.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800496e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004972:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800497a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800497e:	d10e      	bne.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004980:	4b12      	ldr	r3, [pc, #72]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004988:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800498c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004990:	091a      	lsrs	r2, r3, #4
 8004992:	4b10      	ldr	r3, [pc, #64]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004994:	4013      	ands	r3, r2
 8004996:	4a0d      	ldr	r2, [pc, #52]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004998:	430b      	orrs	r3, r1
 800499a:	6113      	str	r3, [r2, #16]
 800499c:	e005      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800499e:	4b0b      	ldr	r3, [pc, #44]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	4a0a      	ldr	r2, [pc, #40]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049a4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80049a8:	6113      	str	r3, [r2, #16]
 80049aa:	4b08      	ldr	r3, [pc, #32]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049ac:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80049ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80049b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049ba:	4a04      	ldr	r2, [pc, #16]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049bc:	430b      	orrs	r3, r1
 80049be:	6713      	str	r3, [r2, #112]	; 0x70
 80049c0:	e00e      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80049c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80049ca:	e009      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80049cc:	58024400 	.word	0x58024400
 80049d0:	58024800 	.word	0x58024800
 80049d4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80049e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e8:	f002 0301 	and.w	r3, r2, #1
 80049ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049f0:	2300      	movs	r3, #0
 80049f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80049f6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80049fa:	460b      	mov	r3, r1
 80049fc:	4313      	orrs	r3, r2
 80049fe:	f000 8089 	beq.w	8004b14 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a08:	2b28      	cmp	r3, #40	; 0x28
 8004a0a:	d86b      	bhi.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004a0c:	a201      	add	r2, pc, #4	; (adr r2, 8004a14 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a12:	bf00      	nop
 8004a14:	08004aed 	.word	0x08004aed
 8004a18:	08004ae5 	.word	0x08004ae5
 8004a1c:	08004ae5 	.word	0x08004ae5
 8004a20:	08004ae5 	.word	0x08004ae5
 8004a24:	08004ae5 	.word	0x08004ae5
 8004a28:	08004ae5 	.word	0x08004ae5
 8004a2c:	08004ae5 	.word	0x08004ae5
 8004a30:	08004ae5 	.word	0x08004ae5
 8004a34:	08004ab9 	.word	0x08004ab9
 8004a38:	08004ae5 	.word	0x08004ae5
 8004a3c:	08004ae5 	.word	0x08004ae5
 8004a40:	08004ae5 	.word	0x08004ae5
 8004a44:	08004ae5 	.word	0x08004ae5
 8004a48:	08004ae5 	.word	0x08004ae5
 8004a4c:	08004ae5 	.word	0x08004ae5
 8004a50:	08004ae5 	.word	0x08004ae5
 8004a54:	08004acf 	.word	0x08004acf
 8004a58:	08004ae5 	.word	0x08004ae5
 8004a5c:	08004ae5 	.word	0x08004ae5
 8004a60:	08004ae5 	.word	0x08004ae5
 8004a64:	08004ae5 	.word	0x08004ae5
 8004a68:	08004ae5 	.word	0x08004ae5
 8004a6c:	08004ae5 	.word	0x08004ae5
 8004a70:	08004ae5 	.word	0x08004ae5
 8004a74:	08004aed 	.word	0x08004aed
 8004a78:	08004ae5 	.word	0x08004ae5
 8004a7c:	08004ae5 	.word	0x08004ae5
 8004a80:	08004ae5 	.word	0x08004ae5
 8004a84:	08004ae5 	.word	0x08004ae5
 8004a88:	08004ae5 	.word	0x08004ae5
 8004a8c:	08004ae5 	.word	0x08004ae5
 8004a90:	08004ae5 	.word	0x08004ae5
 8004a94:	08004aed 	.word	0x08004aed
 8004a98:	08004ae5 	.word	0x08004ae5
 8004a9c:	08004ae5 	.word	0x08004ae5
 8004aa0:	08004ae5 	.word	0x08004ae5
 8004aa4:	08004ae5 	.word	0x08004ae5
 8004aa8:	08004ae5 	.word	0x08004ae5
 8004aac:	08004ae5 	.word	0x08004ae5
 8004ab0:	08004ae5 	.word	0x08004ae5
 8004ab4:	08004aed 	.word	0x08004aed
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004abc:	3308      	adds	r3, #8
 8004abe:	2101      	movs	r1, #1
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f000 ffc3 	bl	8005a4c <RCCEx_PLL2_Config>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004acc:	e00f      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ad2:	3328      	adds	r3, #40	; 0x28
 8004ad4:	2101      	movs	r1, #1
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f001 f86a 	bl	8005bb0 <RCCEx_PLL3_Config>
 8004adc:	4603      	mov	r3, r0
 8004ade:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004ae2:	e004      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004aea:	e000      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004aec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10a      	bne.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004af6:	4bbf      	ldr	r3, [pc, #764]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004afa:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b04:	4abb      	ldr	r2, [pc, #748]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b06:	430b      	orrs	r3, r1
 8004b08:	6553      	str	r3, [r2, #84]	; 0x54
 8004b0a:	e003      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b10:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1c:	f002 0302 	and.w	r3, r2, #2
 8004b20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b24:	2300      	movs	r3, #0
 8004b26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004b2a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004b2e:	460b      	mov	r3, r1
 8004b30:	4313      	orrs	r3, r2
 8004b32:	d041      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b3a:	2b05      	cmp	r3, #5
 8004b3c:	d824      	bhi.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004b3e:	a201      	add	r2, pc, #4	; (adr r2, 8004b44 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b44:	08004b91 	.word	0x08004b91
 8004b48:	08004b5d 	.word	0x08004b5d
 8004b4c:	08004b73 	.word	0x08004b73
 8004b50:	08004b91 	.word	0x08004b91
 8004b54:	08004b91 	.word	0x08004b91
 8004b58:	08004b91 	.word	0x08004b91
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b60:	3308      	adds	r3, #8
 8004b62:	2101      	movs	r1, #1
 8004b64:	4618      	mov	r0, r3
 8004b66:	f000 ff71 	bl	8005a4c <RCCEx_PLL2_Config>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004b70:	e00f      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b76:	3328      	adds	r3, #40	; 0x28
 8004b78:	2101      	movs	r1, #1
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f001 f818 	bl	8005bb0 <RCCEx_PLL3_Config>
 8004b80:	4603      	mov	r3, r0
 8004b82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004b86:	e004      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b8e:	e000      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004b90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10a      	bne.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004b9a:	4b96      	ldr	r3, [pc, #600]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b9e:	f023 0107 	bic.w	r1, r3, #7
 8004ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ba6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ba8:	4a92      	ldr	r2, [pc, #584]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004baa:	430b      	orrs	r3, r1
 8004bac:	6553      	str	r3, [r2, #84]	; 0x54
 8004bae:	e003      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bb4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc0:	f002 0304 	and.w	r3, r2, #4
 8004bc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004bc8:	2300      	movs	r3, #0
 8004bca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004bce:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	d044      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004be0:	2b05      	cmp	r3, #5
 8004be2:	d825      	bhi.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004be4:	a201      	add	r2, pc, #4	; (adr r2, 8004bec <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bea:	bf00      	nop
 8004bec:	08004c39 	.word	0x08004c39
 8004bf0:	08004c05 	.word	0x08004c05
 8004bf4:	08004c1b 	.word	0x08004c1b
 8004bf8:	08004c39 	.word	0x08004c39
 8004bfc:	08004c39 	.word	0x08004c39
 8004c00:	08004c39 	.word	0x08004c39
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c08:	3308      	adds	r3, #8
 8004c0a:	2101      	movs	r1, #1
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f000 ff1d 	bl	8005a4c <RCCEx_PLL2_Config>
 8004c12:	4603      	mov	r3, r0
 8004c14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004c18:	e00f      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c1e:	3328      	adds	r3, #40	; 0x28
 8004c20:	2101      	movs	r1, #1
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 ffc4 	bl	8005bb0 <RCCEx_PLL3_Config>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004c2e:	e004      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004c36:	e000      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004c38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10b      	bne.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c42:	4b6c      	ldr	r3, [pc, #432]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c46:	f023 0107 	bic.w	r1, r3, #7
 8004c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c52:	4a68      	ldr	r2, [pc, #416]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004c54:	430b      	orrs	r3, r1
 8004c56:	6593      	str	r3, [r2, #88]	; 0x58
 8004c58:	e003      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6a:	f002 0320 	and.w	r3, r2, #32
 8004c6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c72:	2300      	movs	r3, #0
 8004c74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	d055      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c8e:	d033      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004c90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c94:	d82c      	bhi.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c9a:	d02f      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ca0:	d826      	bhi.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004ca2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ca6:	d02b      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004ca8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004cac:	d820      	bhi.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004cae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cb2:	d012      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004cb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cb8:	d81a      	bhi.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d022      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004cbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cc2:	d115      	bne.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cc8:	3308      	adds	r3, #8
 8004cca:	2100      	movs	r1, #0
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f000 febd 	bl	8005a4c <RCCEx_PLL2_Config>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004cd8:	e015      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cde:	3328      	adds	r3, #40	; 0x28
 8004ce0:	2102      	movs	r1, #2
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 ff64 	bl	8005bb0 <RCCEx_PLL3_Config>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004cee:	e00a      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004cf6:	e006      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004cf8:	bf00      	nop
 8004cfa:	e004      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004cfc:	bf00      	nop
 8004cfe:	e002      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004d00:	bf00      	nop
 8004d02:	e000      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004d04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10b      	bne.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d0e:	4b39      	ldr	r3, [pc, #228]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d12:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d1e:	4a35      	ldr	r2, [pc, #212]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004d20:	430b      	orrs	r3, r1
 8004d22:	6553      	str	r3, [r2, #84]	; 0x54
 8004d24:	e003      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d36:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004d3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004d3e:	2300      	movs	r3, #0
 8004d40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004d44:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004d48:	460b      	mov	r3, r1
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	d058      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d56:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004d5a:	d033      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004d5c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004d60:	d82c      	bhi.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d66:	d02f      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004d68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d6c:	d826      	bhi.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004d6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d72:	d02b      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004d74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d78:	d820      	bhi.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004d7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d7e:	d012      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004d80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d84:	d81a      	bhi.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d022      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d8e:	d115      	bne.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d94:	3308      	adds	r3, #8
 8004d96:	2100      	movs	r1, #0
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f000 fe57 	bl	8005a4c <RCCEx_PLL2_Config>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004da4:	e015      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004daa:	3328      	adds	r3, #40	; 0x28
 8004dac:	2102      	movs	r1, #2
 8004dae:	4618      	mov	r0, r3
 8004db0:	f000 fefe 	bl	8005bb0 <RCCEx_PLL3_Config>
 8004db4:	4603      	mov	r3, r0
 8004db6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004dba:	e00a      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004dc2:	e006      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004dc4:	bf00      	nop
 8004dc6:	e004      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004dc8:	bf00      	nop
 8004dca:	e002      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004dcc:	bf00      	nop
 8004dce:	e000      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004dd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10e      	bne.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004dda:	4b06      	ldr	r3, [pc, #24]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dde:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004de6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004dea:	4a02      	ldr	r2, [pc, #8]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004dec:	430b      	orrs	r3, r1
 8004dee:	6593      	str	r3, [r2, #88]	; 0x58
 8004df0:	e006      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004df2:	bf00      	nop
 8004df4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004df8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004dfc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e08:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004e0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e10:	2300      	movs	r3, #0
 8004e12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e16:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	d055      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004e28:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004e2c:	d033      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004e2e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004e32:	d82c      	bhi.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004e34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e38:	d02f      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004e3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e3e:	d826      	bhi.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004e40:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004e44:	d02b      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004e46:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004e4a:	d820      	bhi.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004e4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e50:	d012      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004e52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e56:	d81a      	bhi.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d022      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004e5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e60:	d115      	bne.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e66:	3308      	adds	r3, #8
 8004e68:	2100      	movs	r1, #0
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f000 fdee 	bl	8005a4c <RCCEx_PLL2_Config>
 8004e70:	4603      	mov	r3, r0
 8004e72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004e76:	e015      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e7c:	3328      	adds	r3, #40	; 0x28
 8004e7e:	2102      	movs	r1, #2
 8004e80:	4618      	mov	r0, r3
 8004e82:	f000 fe95 	bl	8005bb0 <RCCEx_PLL3_Config>
 8004e86:	4603      	mov	r3, r0
 8004e88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004e8c:	e00a      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004e94:	e006      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004e96:	bf00      	nop
 8004e98:	e004      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004e9a:	bf00      	nop
 8004e9c:	e002      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004e9e:	bf00      	nop
 8004ea0:	e000      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004ea2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ea4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10b      	bne.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004eac:	4ba1      	ldr	r3, [pc, #644]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eb8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004ebc:	4a9d      	ldr	r2, [pc, #628]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ebe:	430b      	orrs	r3, r1
 8004ec0:	6593      	str	r3, [r2, #88]	; 0x58
 8004ec2:	e003      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ec4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ec8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed4:	f002 0308 	and.w	r3, r2, #8
 8004ed8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004edc:	2300      	movs	r3, #0
 8004ede:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004ee2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	d01e      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ef8:	d10c      	bne.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004efe:	3328      	adds	r3, #40	; 0x28
 8004f00:	2102      	movs	r1, #2
 8004f02:	4618      	mov	r0, r3
 8004f04:	f000 fe54 	bl	8005bb0 <RCCEx_PLL3_Config>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d002      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004f14:	4b87      	ldr	r3, [pc, #540]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f18:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f24:	4a83      	ldr	r2, [pc, #524]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f26:	430b      	orrs	r3, r1
 8004f28:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f32:	f002 0310 	and.w	r3, r2, #16
 8004f36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004f40:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004f44:	460b      	mov	r3, r1
 8004f46:	4313      	orrs	r3, r2
 8004f48:	d01e      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f56:	d10c      	bne.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f5c:	3328      	adds	r3, #40	; 0x28
 8004f5e:	2102      	movs	r1, #2
 8004f60:	4618      	mov	r0, r3
 8004f62:	f000 fe25 	bl	8005bb0 <RCCEx_PLL3_Config>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d002      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f72:	4b70      	ldr	r3, [pc, #448]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f76:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f82:	4a6c      	ldr	r2, [pc, #432]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f84:	430b      	orrs	r3, r1
 8004f86:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f90:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004f94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f98:	2300      	movs	r3, #0
 8004f9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f9e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	d03e      	beq.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004fb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fb4:	d022      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004fb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fba:	d81b      	bhi.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d003      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fc4:	d00b      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004fc6:	e015      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fcc:	3308      	adds	r3, #8
 8004fce:	2100      	movs	r1, #0
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f000 fd3b 	bl	8005a4c <RCCEx_PLL2_Config>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004fdc:	e00f      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fe2:	3328      	adds	r3, #40	; 0x28
 8004fe4:	2102      	movs	r1, #2
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 fde2 	bl	8005bb0 <RCCEx_PLL3_Config>
 8004fec:	4603      	mov	r3, r0
 8004fee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004ff2:	e004      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004ffa:	e000      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004ffc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ffe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10b      	bne.n	800501e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005006:	4b4b      	ldr	r3, [pc, #300]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800500a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800500e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005012:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005016:	4a47      	ldr	r2, [pc, #284]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005018:	430b      	orrs	r3, r1
 800501a:	6593      	str	r3, [r2, #88]	; 0x58
 800501c:	e003      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800501e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005022:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005026:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800502a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005032:	67bb      	str	r3, [r7, #120]	; 0x78
 8005034:	2300      	movs	r3, #0
 8005036:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005038:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800503c:	460b      	mov	r3, r1
 800503e:	4313      	orrs	r3, r2
 8005040:	d03b      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005042:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800504a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800504e:	d01f      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005050:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005054:	d818      	bhi.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005056:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800505a:	d003      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800505c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005060:	d007      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005062:	e011      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005064:	4b33      	ldr	r3, [pc, #204]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005068:	4a32      	ldr	r2, [pc, #200]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800506a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800506e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005070:	e00f      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005072:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005076:	3328      	adds	r3, #40	; 0x28
 8005078:	2101      	movs	r1, #1
 800507a:	4618      	mov	r0, r3
 800507c:	f000 fd98 	bl	8005bb0 <RCCEx_PLL3_Config>
 8005080:	4603      	mov	r3, r0
 8005082:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005086:	e004      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800508e:	e000      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005090:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005092:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10b      	bne.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800509a:	4b26      	ldr	r3, [pc, #152]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800509c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800509e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80050a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050aa:	4a22      	ldr	r2, [pc, #136]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80050ac:	430b      	orrs	r3, r1
 80050ae:	6553      	str	r3, [r2, #84]	; 0x54
 80050b0:	e003      	b.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80050ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80050c6:	673b      	str	r3, [r7, #112]	; 0x70
 80050c8:	2300      	movs	r3, #0
 80050ca:	677b      	str	r3, [r7, #116]	; 0x74
 80050cc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80050d0:	460b      	mov	r3, r1
 80050d2:	4313      	orrs	r3, r2
 80050d4:	d034      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80050d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d003      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80050e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050e4:	d007      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80050e6:	e011      	b.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050e8:	4b12      	ldr	r3, [pc, #72]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80050ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ec:	4a11      	ldr	r2, [pc, #68]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80050ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80050f4:	e00e      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80050f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050fa:	3308      	adds	r3, #8
 80050fc:	2102      	movs	r1, #2
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 fca4 	bl	8005a4c <RCCEx_PLL2_Config>
 8005104:	4603      	mov	r3, r0
 8005106:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800510a:	e003      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005112:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005114:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10d      	bne.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800511c:	4b05      	ldr	r3, [pc, #20]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800511e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005120:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005124:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800512a:	4a02      	ldr	r2, [pc, #8]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800512c:	430b      	orrs	r3, r1
 800512e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005130:	e006      	b.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005132:	bf00      	nop
 8005134:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005138:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800513c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005140:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005148:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800514c:	66bb      	str	r3, [r7, #104]	; 0x68
 800514e:	2300      	movs	r3, #0
 8005150:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005152:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005156:	460b      	mov	r3, r1
 8005158:	4313      	orrs	r3, r2
 800515a:	d00c      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800515c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005160:	3328      	adds	r3, #40	; 0x28
 8005162:	2102      	movs	r1, #2
 8005164:	4618      	mov	r0, r3
 8005166:	f000 fd23 	bl	8005bb0 <RCCEx_PLL3_Config>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d002      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005176:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800517a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800517e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005182:	663b      	str	r3, [r7, #96]	; 0x60
 8005184:	2300      	movs	r3, #0
 8005186:	667b      	str	r3, [r7, #100]	; 0x64
 8005188:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800518c:	460b      	mov	r3, r1
 800518e:	4313      	orrs	r3, r2
 8005190:	d038      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005192:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005196:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800519a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800519e:	d018      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80051a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051a4:	d811      	bhi.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80051a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051aa:	d014      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80051ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051b0:	d80b      	bhi.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d011      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80051b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051ba:	d106      	bne.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051bc:	4bc3      	ldr	r3, [pc, #780]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c0:	4ac2      	ldr	r2, [pc, #776]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80051c8:	e008      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80051d0:	e004      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80051d2:	bf00      	nop
 80051d4:	e002      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80051d6:	bf00      	nop
 80051d8:	e000      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80051da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d10b      	bne.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051e4:	4bb9      	ldr	r3, [pc, #740]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80051ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051f4:	4ab5      	ldr	r2, [pc, #724]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051f6:	430b      	orrs	r3, r1
 80051f8:	6553      	str	r3, [r2, #84]	; 0x54
 80051fa:	e003      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005200:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800520c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005210:	65bb      	str	r3, [r7, #88]	; 0x58
 8005212:	2300      	movs	r3, #0
 8005214:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005216:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800521a:	460b      	mov	r3, r1
 800521c:	4313      	orrs	r3, r2
 800521e:	d009      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005220:	4baa      	ldr	r3, [pc, #680]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005224:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005228:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800522c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800522e:	4aa7      	ldr	r2, [pc, #668]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005230:	430b      	orrs	r3, r1
 8005232:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005234:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005240:	653b      	str	r3, [r7, #80]	; 0x50
 8005242:	2300      	movs	r3, #0
 8005244:	657b      	str	r3, [r7, #84]	; 0x54
 8005246:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800524a:	460b      	mov	r3, r1
 800524c:	4313      	orrs	r3, r2
 800524e:	d00a      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005250:	4b9e      	ldr	r3, [pc, #632]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005258:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800525c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005260:	4a9a      	ldr	r2, [pc, #616]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005262:	430b      	orrs	r3, r1
 8005264:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005266:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800526a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005272:	64bb      	str	r3, [r7, #72]	; 0x48
 8005274:	2300      	movs	r3, #0
 8005276:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005278:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800527c:	460b      	mov	r3, r1
 800527e:	4313      	orrs	r3, r2
 8005280:	d009      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005282:	4b92      	ldr	r3, [pc, #584]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005286:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800528a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800528e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005290:	4a8e      	ldr	r2, [pc, #568]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005292:	430b      	orrs	r3, r1
 8005294:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005296:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800529a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800529e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80052a2:	643b      	str	r3, [r7, #64]	; 0x40
 80052a4:	2300      	movs	r3, #0
 80052a6:	647b      	str	r3, [r7, #68]	; 0x44
 80052a8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80052ac:	460b      	mov	r3, r1
 80052ae:	4313      	orrs	r3, r2
 80052b0:	d00e      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80052b2:	4b86      	ldr	r3, [pc, #536]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	4a85      	ldr	r2, [pc, #532]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80052bc:	6113      	str	r3, [r2, #16]
 80052be:	4b83      	ldr	r3, [pc, #524]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052c0:	6919      	ldr	r1, [r3, #16]
 80052c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052c6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80052ca:	4a80      	ldr	r2, [pc, #512]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052cc:	430b      	orrs	r3, r1
 80052ce:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80052d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80052dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80052de:	2300      	movs	r3, #0
 80052e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052e2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80052e6:	460b      	mov	r3, r1
 80052e8:	4313      	orrs	r3, r2
 80052ea:	d009      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80052ec:	4b77      	ldr	r3, [pc, #476]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052f0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80052f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052fa:	4a74      	ldr	r2, [pc, #464]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052fc:	430b      	orrs	r3, r1
 80052fe:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005300:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005308:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800530c:	633b      	str	r3, [r7, #48]	; 0x30
 800530e:	2300      	movs	r3, #0
 8005310:	637b      	str	r3, [r7, #52]	; 0x34
 8005312:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005316:	460b      	mov	r3, r1
 8005318:	4313      	orrs	r3, r2
 800531a:	d00a      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800531c:	4b6b      	ldr	r3, [pc, #428]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800531e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005320:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005324:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005328:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800532c:	4a67      	ldr	r2, [pc, #412]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800532e:	430b      	orrs	r3, r1
 8005330:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005332:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533a:	2100      	movs	r1, #0
 800533c:	62b9      	str	r1, [r7, #40]	; 0x28
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005344:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005348:	460b      	mov	r3, r1
 800534a:	4313      	orrs	r3, r2
 800534c:	d011      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800534e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005352:	3308      	adds	r3, #8
 8005354:	2100      	movs	r1, #0
 8005356:	4618      	mov	r0, r3
 8005358:	f000 fb78 	bl	8005a4c <RCCEx_PLL2_Config>
 800535c:	4603      	mov	r3, r0
 800535e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005362:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800536a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800536e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005372:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537a:	2100      	movs	r1, #0
 800537c:	6239      	str	r1, [r7, #32]
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	627b      	str	r3, [r7, #36]	; 0x24
 8005384:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005388:	460b      	mov	r3, r1
 800538a:	4313      	orrs	r3, r2
 800538c:	d011      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800538e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005392:	3308      	adds	r3, #8
 8005394:	2101      	movs	r1, #1
 8005396:	4618      	mov	r0, r3
 8005398:	f000 fb58 	bl	8005a4c <RCCEx_PLL2_Config>
 800539c:	4603      	mov	r3, r0
 800539e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80053a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d003      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80053b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ba:	2100      	movs	r1, #0
 80053bc:	61b9      	str	r1, [r7, #24]
 80053be:	f003 0304 	and.w	r3, r3, #4
 80053c2:	61fb      	str	r3, [r7, #28]
 80053c4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80053c8:	460b      	mov	r3, r1
 80053ca:	4313      	orrs	r3, r2
 80053cc:	d011      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80053ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053d2:	3308      	adds	r3, #8
 80053d4:	2102      	movs	r1, #2
 80053d6:	4618      	mov	r0, r3
 80053d8:	f000 fb38 	bl	8005a4c <RCCEx_PLL2_Config>
 80053dc:	4603      	mov	r3, r0
 80053de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80053e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80053f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fa:	2100      	movs	r1, #0
 80053fc:	6139      	str	r1, [r7, #16]
 80053fe:	f003 0308 	and.w	r3, r3, #8
 8005402:	617b      	str	r3, [r7, #20]
 8005404:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005408:	460b      	mov	r3, r1
 800540a:	4313      	orrs	r3, r2
 800540c:	d011      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800540e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005412:	3328      	adds	r3, #40	; 0x28
 8005414:	2100      	movs	r1, #0
 8005416:	4618      	mov	r0, r3
 8005418:	f000 fbca 	bl	8005bb0 <RCCEx_PLL3_Config>
 800541c:	4603      	mov	r3, r0
 800541e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8005422:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005426:	2b00      	cmp	r3, #0
 8005428:	d003      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800542a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800542e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005432:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543a:	2100      	movs	r1, #0
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	f003 0310 	and.w	r3, r3, #16
 8005442:	60fb      	str	r3, [r7, #12]
 8005444:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005448:	460b      	mov	r3, r1
 800544a:	4313      	orrs	r3, r2
 800544c:	d011      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800544e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005452:	3328      	adds	r3, #40	; 0x28
 8005454:	2101      	movs	r1, #1
 8005456:	4618      	mov	r0, r3
 8005458:	f000 fbaa 	bl	8005bb0 <RCCEx_PLL3_Config>
 800545c:	4603      	mov	r3, r0
 800545e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005462:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005466:	2b00      	cmp	r3, #0
 8005468:	d003      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800546a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800546e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005472:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547a:	2100      	movs	r1, #0
 800547c:	6039      	str	r1, [r7, #0]
 800547e:	f003 0320 	and.w	r3, r3, #32
 8005482:	607b      	str	r3, [r7, #4]
 8005484:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005488:	460b      	mov	r3, r1
 800548a:	4313      	orrs	r3, r2
 800548c:	d011      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800548e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005492:	3328      	adds	r3, #40	; 0x28
 8005494:	2102      	movs	r1, #2
 8005496:	4618      	mov	r0, r3
 8005498:	f000 fb8a 	bl	8005bb0 <RCCEx_PLL3_Config>
 800549c:	4603      	mov	r3, r0
 800549e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80054a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80054b2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d101      	bne.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80054ba:	2300      	movs	r3, #0
 80054bc:	e000      	b.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80054c6:	46bd      	mov	sp, r7
 80054c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054cc:	58024400 	.word	0x58024400

080054d0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80054d4:	f7fe fd96 	bl	8004004 <HAL_RCC_GetHCLKFreq>
 80054d8:	4602      	mov	r2, r0
 80054da:	4b06      	ldr	r3, [pc, #24]	; (80054f4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	091b      	lsrs	r3, r3, #4
 80054e0:	f003 0307 	and.w	r3, r3, #7
 80054e4:	4904      	ldr	r1, [pc, #16]	; (80054f8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80054e6:	5ccb      	ldrb	r3, [r1, r3]
 80054e8:	f003 031f 	and.w	r3, r3, #31
 80054ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	58024400 	.word	0x58024400
 80054f8:	0800b7f8 	.word	0x0800b7f8

080054fc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b089      	sub	sp, #36	; 0x24
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005504:	4ba1      	ldr	r3, [pc, #644]	; (800578c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005508:	f003 0303 	and.w	r3, r3, #3
 800550c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800550e:	4b9f      	ldr	r3, [pc, #636]	; (800578c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005512:	0b1b      	lsrs	r3, r3, #12
 8005514:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005518:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800551a:	4b9c      	ldr	r3, [pc, #624]	; (800578c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800551c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551e:	091b      	lsrs	r3, r3, #4
 8005520:	f003 0301 	and.w	r3, r3, #1
 8005524:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005526:	4b99      	ldr	r3, [pc, #612]	; (800578c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800552a:	08db      	lsrs	r3, r3, #3
 800552c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	fb02 f303 	mul.w	r3, r2, r3
 8005536:	ee07 3a90 	vmov	s15, r3
 800553a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800553e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	2b00      	cmp	r3, #0
 8005546:	f000 8111 	beq.w	800576c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	2b02      	cmp	r3, #2
 800554e:	f000 8083 	beq.w	8005658 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	2b02      	cmp	r3, #2
 8005556:	f200 80a1 	bhi.w	800569c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d003      	beq.n	8005568 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	2b01      	cmp	r3, #1
 8005564:	d056      	beq.n	8005614 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005566:	e099      	b.n	800569c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005568:	4b88      	ldr	r3, [pc, #544]	; (800578c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0320 	and.w	r3, r3, #32
 8005570:	2b00      	cmp	r3, #0
 8005572:	d02d      	beq.n	80055d0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005574:	4b85      	ldr	r3, [pc, #532]	; (800578c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	08db      	lsrs	r3, r3, #3
 800557a:	f003 0303 	and.w	r3, r3, #3
 800557e:	4a84      	ldr	r2, [pc, #528]	; (8005790 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005580:	fa22 f303 	lsr.w	r3, r2, r3
 8005584:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	ee07 3a90 	vmov	s15, r3
 800558c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	ee07 3a90 	vmov	s15, r3
 8005596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800559a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800559e:	4b7b      	ldr	r3, [pc, #492]	; (800578c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055a6:	ee07 3a90 	vmov	s15, r3
 80055aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80055b2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005794 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80055ce:	e087      	b.n	80056e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	ee07 3a90 	vmov	s15, r3
 80055d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055da:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005798 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80055de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055e2:	4b6a      	ldr	r3, [pc, #424]	; (800578c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ea:	ee07 3a90 	vmov	s15, r3
 80055ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80055f6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005794 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005602:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800560a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800560e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005612:	e065      	b.n	80056e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	ee07 3a90 	vmov	s15, r3
 800561a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800561e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800579c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005626:	4b59      	ldr	r3, [pc, #356]	; (800578c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800562e:	ee07 3a90 	vmov	s15, r3
 8005632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005636:	ed97 6a03 	vldr	s12, [r7, #12]
 800563a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005794 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800563e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005646:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800564a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800564e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005652:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005656:	e043      	b.n	80056e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	ee07 3a90 	vmov	s15, r3
 800565e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005662:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80057a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800566a:	4b48      	ldr	r3, [pc, #288]	; (800578c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800566c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005672:	ee07 3a90 	vmov	s15, r3
 8005676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800567a:	ed97 6a03 	vldr	s12, [r7, #12]
 800567e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005794 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005682:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800568a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800568e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005696:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800569a:	e021      	b.n	80056e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	ee07 3a90 	vmov	s15, r3
 80056a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056a6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800579c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80056aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056ae:	4b37      	ldr	r3, [pc, #220]	; (800578c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056b6:	ee07 3a90 	vmov	s15, r3
 80056ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056be:	ed97 6a03 	vldr	s12, [r7, #12]
 80056c2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005794 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80056c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056de:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80056e0:	4b2a      	ldr	r3, [pc, #168]	; (800578c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e4:	0a5b      	lsrs	r3, r3, #9
 80056e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056ea:	ee07 3a90 	vmov	s15, r3
 80056ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80056fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005702:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005706:	ee17 2a90 	vmov	r2, s15
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800570e:	4b1f      	ldr	r3, [pc, #124]	; (800578c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005712:	0c1b      	lsrs	r3, r3, #16
 8005714:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005718:	ee07 3a90 	vmov	s15, r3
 800571c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005720:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005724:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005728:	edd7 6a07 	vldr	s13, [r7, #28]
 800572c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005730:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005734:	ee17 2a90 	vmov	r2, s15
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800573c:	4b13      	ldr	r3, [pc, #76]	; (800578c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800573e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005740:	0e1b      	lsrs	r3, r3, #24
 8005742:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005746:	ee07 3a90 	vmov	s15, r3
 800574a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800574e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005752:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005756:	edd7 6a07 	vldr	s13, [r7, #28]
 800575a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800575e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005762:	ee17 2a90 	vmov	r2, s15
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800576a:	e008      	b.n	800577e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	609a      	str	r2, [r3, #8]
}
 800577e:	bf00      	nop
 8005780:	3724      	adds	r7, #36	; 0x24
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	58024400 	.word	0x58024400
 8005790:	03d09000 	.word	0x03d09000
 8005794:	46000000 	.word	0x46000000
 8005798:	4c742400 	.word	0x4c742400
 800579c:	4a742400 	.word	0x4a742400
 80057a0:	4af42400 	.word	0x4af42400

080057a4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b089      	sub	sp, #36	; 0x24
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80057ac:	4ba1      	ldr	r3, [pc, #644]	; (8005a34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b0:	f003 0303 	and.w	r3, r3, #3
 80057b4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80057b6:	4b9f      	ldr	r3, [pc, #636]	; (8005a34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ba:	0d1b      	lsrs	r3, r3, #20
 80057bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057c0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80057c2:	4b9c      	ldr	r3, [pc, #624]	; (8005a34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c6:	0a1b      	lsrs	r3, r3, #8
 80057c8:	f003 0301 	and.w	r3, r3, #1
 80057cc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80057ce:	4b99      	ldr	r3, [pc, #612]	; (8005a34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d2:	08db      	lsrs	r3, r3, #3
 80057d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	fb02 f303 	mul.w	r3, r2, r3
 80057de:	ee07 3a90 	vmov	s15, r3
 80057e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f000 8111 	beq.w	8005a14 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	f000 8083 	beq.w	8005900 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	f200 80a1 	bhi.w	8005944 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d003      	beq.n	8005810 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d056      	beq.n	80058bc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800580e:	e099      	b.n	8005944 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005810:	4b88      	ldr	r3, [pc, #544]	; (8005a34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0320 	and.w	r3, r3, #32
 8005818:	2b00      	cmp	r3, #0
 800581a:	d02d      	beq.n	8005878 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800581c:	4b85      	ldr	r3, [pc, #532]	; (8005a34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	08db      	lsrs	r3, r3, #3
 8005822:	f003 0303 	and.w	r3, r3, #3
 8005826:	4a84      	ldr	r2, [pc, #528]	; (8005a38 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005828:	fa22 f303 	lsr.w	r3, r2, r3
 800582c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	ee07 3a90 	vmov	s15, r3
 8005834:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	ee07 3a90 	vmov	s15, r3
 800583e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005846:	4b7b      	ldr	r3, [pc, #492]	; (8005a34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800584e:	ee07 3a90 	vmov	s15, r3
 8005852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005856:	ed97 6a03 	vldr	s12, [r7, #12]
 800585a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005a3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800585e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005866:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800586a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800586e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005872:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005876:	e087      	b.n	8005988 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	ee07 3a90 	vmov	s15, r3
 800587e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005882:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005a40 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800588a:	4b6a      	ldr	r3, [pc, #424]	; (8005a34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800588c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005892:	ee07 3a90 	vmov	s15, r3
 8005896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800589a:	ed97 6a03 	vldr	s12, [r7, #12]
 800589e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005a3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80058a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058ba:	e065      	b.n	8005988 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	ee07 3a90 	vmov	s15, r3
 80058c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058c6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005a44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80058ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ce:	4b59      	ldr	r3, [pc, #356]	; (8005a34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058d6:	ee07 3a90 	vmov	s15, r3
 80058da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058de:	ed97 6a03 	vldr	s12, [r7, #12]
 80058e2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005a3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80058e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058fe:	e043      	b.n	8005988 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	ee07 3a90 	vmov	s15, r3
 8005906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800590a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005a48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800590e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005912:	4b48      	ldr	r3, [pc, #288]	; (8005a34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800591a:	ee07 3a90 	vmov	s15, r3
 800591e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005922:	ed97 6a03 	vldr	s12, [r7, #12]
 8005926:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005a3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800592a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800592e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005932:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800593a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800593e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005942:	e021      	b.n	8005988 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	ee07 3a90 	vmov	s15, r3
 800594a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800594e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005a44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005956:	4b37      	ldr	r3, [pc, #220]	; (8005a34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800595e:	ee07 3a90 	vmov	s15, r3
 8005962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005966:	ed97 6a03 	vldr	s12, [r7, #12]
 800596a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005a3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800596e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005976:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800597a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800597e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005982:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005986:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005988:	4b2a      	ldr	r3, [pc, #168]	; (8005a34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800598a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598c:	0a5b      	lsrs	r3, r3, #9
 800598e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005992:	ee07 3a90 	vmov	s15, r3
 8005996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800599a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800599e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80059a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059ae:	ee17 2a90 	vmov	r2, s15
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80059b6:	4b1f      	ldr	r3, [pc, #124]	; (8005a34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ba:	0c1b      	lsrs	r3, r3, #16
 80059bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059c0:	ee07 3a90 	vmov	s15, r3
 80059c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80059d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059dc:	ee17 2a90 	vmov	r2, s15
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80059e4:	4b13      	ldr	r3, [pc, #76]	; (8005a34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e8:	0e1b      	lsrs	r3, r3, #24
 80059ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059ee:	ee07 3a90 	vmov	s15, r3
 80059f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a0a:	ee17 2a90 	vmov	r2, s15
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005a12:	e008      	b.n	8005a26 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	609a      	str	r2, [r3, #8]
}
 8005a26:	bf00      	nop
 8005a28:	3724      	adds	r7, #36	; 0x24
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	58024400 	.word	0x58024400
 8005a38:	03d09000 	.word	0x03d09000
 8005a3c:	46000000 	.word	0x46000000
 8005a40:	4c742400 	.word	0x4c742400
 8005a44:	4a742400 	.word	0x4a742400
 8005a48:	4af42400 	.word	0x4af42400

08005a4c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a56:	2300      	movs	r3, #0
 8005a58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005a5a:	4b53      	ldr	r3, [pc, #332]	; (8005ba8 <RCCEx_PLL2_Config+0x15c>)
 8005a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5e:	f003 0303 	and.w	r3, r3, #3
 8005a62:	2b03      	cmp	r3, #3
 8005a64:	d101      	bne.n	8005a6a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e099      	b.n	8005b9e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005a6a:	4b4f      	ldr	r3, [pc, #316]	; (8005ba8 <RCCEx_PLL2_Config+0x15c>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a4e      	ldr	r2, [pc, #312]	; (8005ba8 <RCCEx_PLL2_Config+0x15c>)
 8005a70:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a76:	f7fc f851 	bl	8001b1c <HAL_GetTick>
 8005a7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a7c:	e008      	b.n	8005a90 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005a7e:	f7fc f84d 	bl	8001b1c <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d901      	bls.n	8005a90 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e086      	b.n	8005b9e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a90:	4b45      	ldr	r3, [pc, #276]	; (8005ba8 <RCCEx_PLL2_Config+0x15c>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1f0      	bne.n	8005a7e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005a9c:	4b42      	ldr	r3, [pc, #264]	; (8005ba8 <RCCEx_PLL2_Config+0x15c>)
 8005a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	031b      	lsls	r3, r3, #12
 8005aaa:	493f      	ldr	r1, [pc, #252]	; (8005ba8 <RCCEx_PLL2_Config+0x15c>)
 8005aac:	4313      	orrs	r3, r2
 8005aae:	628b      	str	r3, [r1, #40]	; 0x28
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	025b      	lsls	r3, r3, #9
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	431a      	orrs	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	3b01      	subs	r3, #1
 8005acc:	041b      	lsls	r3, r3, #16
 8005ace:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	061b      	lsls	r3, r3, #24
 8005adc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005ae0:	4931      	ldr	r1, [pc, #196]	; (8005ba8 <RCCEx_PLL2_Config+0x15c>)
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005ae6:	4b30      	ldr	r3, [pc, #192]	; (8005ba8 <RCCEx_PLL2_Config+0x15c>)
 8005ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	492d      	ldr	r1, [pc, #180]	; (8005ba8 <RCCEx_PLL2_Config+0x15c>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005af8:	4b2b      	ldr	r3, [pc, #172]	; (8005ba8 <RCCEx_PLL2_Config+0x15c>)
 8005afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afc:	f023 0220 	bic.w	r2, r3, #32
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	699b      	ldr	r3, [r3, #24]
 8005b04:	4928      	ldr	r1, [pc, #160]	; (8005ba8 <RCCEx_PLL2_Config+0x15c>)
 8005b06:	4313      	orrs	r3, r2
 8005b08:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005b0a:	4b27      	ldr	r3, [pc, #156]	; (8005ba8 <RCCEx_PLL2_Config+0x15c>)
 8005b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0e:	4a26      	ldr	r2, [pc, #152]	; (8005ba8 <RCCEx_PLL2_Config+0x15c>)
 8005b10:	f023 0310 	bic.w	r3, r3, #16
 8005b14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005b16:	4b24      	ldr	r3, [pc, #144]	; (8005ba8 <RCCEx_PLL2_Config+0x15c>)
 8005b18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b1a:	4b24      	ldr	r3, [pc, #144]	; (8005bac <RCCEx_PLL2_Config+0x160>)
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	69d2      	ldr	r2, [r2, #28]
 8005b22:	00d2      	lsls	r2, r2, #3
 8005b24:	4920      	ldr	r1, [pc, #128]	; (8005ba8 <RCCEx_PLL2_Config+0x15c>)
 8005b26:	4313      	orrs	r3, r2
 8005b28:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005b2a:	4b1f      	ldr	r3, [pc, #124]	; (8005ba8 <RCCEx_PLL2_Config+0x15c>)
 8005b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2e:	4a1e      	ldr	r2, [pc, #120]	; (8005ba8 <RCCEx_PLL2_Config+0x15c>)
 8005b30:	f043 0310 	orr.w	r3, r3, #16
 8005b34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d106      	bne.n	8005b4a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005b3c:	4b1a      	ldr	r3, [pc, #104]	; (8005ba8 <RCCEx_PLL2_Config+0x15c>)
 8005b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b40:	4a19      	ldr	r2, [pc, #100]	; (8005ba8 <RCCEx_PLL2_Config+0x15c>)
 8005b42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b48:	e00f      	b.n	8005b6a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d106      	bne.n	8005b5e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005b50:	4b15      	ldr	r3, [pc, #84]	; (8005ba8 <RCCEx_PLL2_Config+0x15c>)
 8005b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b54:	4a14      	ldr	r2, [pc, #80]	; (8005ba8 <RCCEx_PLL2_Config+0x15c>)
 8005b56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b5c:	e005      	b.n	8005b6a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005b5e:	4b12      	ldr	r3, [pc, #72]	; (8005ba8 <RCCEx_PLL2_Config+0x15c>)
 8005b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b62:	4a11      	ldr	r2, [pc, #68]	; (8005ba8 <RCCEx_PLL2_Config+0x15c>)
 8005b64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b68:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005b6a:	4b0f      	ldr	r3, [pc, #60]	; (8005ba8 <RCCEx_PLL2_Config+0x15c>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a0e      	ldr	r2, [pc, #56]	; (8005ba8 <RCCEx_PLL2_Config+0x15c>)
 8005b70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b76:	f7fb ffd1 	bl	8001b1c <HAL_GetTick>
 8005b7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b7c:	e008      	b.n	8005b90 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005b7e:	f7fb ffcd 	bl	8001b1c <HAL_GetTick>
 8005b82:	4602      	mov	r2, r0
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d901      	bls.n	8005b90 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e006      	b.n	8005b9e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b90:	4b05      	ldr	r3, [pc, #20]	; (8005ba8 <RCCEx_PLL2_Config+0x15c>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d0f0      	beq.n	8005b7e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3710      	adds	r7, #16
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	58024400 	.word	0x58024400
 8005bac:	ffff0007 	.word	0xffff0007

08005bb0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005bbe:	4b53      	ldr	r3, [pc, #332]	; (8005d0c <RCCEx_PLL3_Config+0x15c>)
 8005bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc2:	f003 0303 	and.w	r3, r3, #3
 8005bc6:	2b03      	cmp	r3, #3
 8005bc8:	d101      	bne.n	8005bce <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e099      	b.n	8005d02 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005bce:	4b4f      	ldr	r3, [pc, #316]	; (8005d0c <RCCEx_PLL3_Config+0x15c>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a4e      	ldr	r2, [pc, #312]	; (8005d0c <RCCEx_PLL3_Config+0x15c>)
 8005bd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bda:	f7fb ff9f 	bl	8001b1c <HAL_GetTick>
 8005bde:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005be0:	e008      	b.n	8005bf4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005be2:	f7fb ff9b 	bl	8001b1c <HAL_GetTick>
 8005be6:	4602      	mov	r2, r0
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d901      	bls.n	8005bf4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e086      	b.n	8005d02 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005bf4:	4b45      	ldr	r3, [pc, #276]	; (8005d0c <RCCEx_PLL3_Config+0x15c>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1f0      	bne.n	8005be2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005c00:	4b42      	ldr	r3, [pc, #264]	; (8005d0c <RCCEx_PLL3_Config+0x15c>)
 8005c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c04:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	051b      	lsls	r3, r3, #20
 8005c0e:	493f      	ldr	r1, [pc, #252]	; (8005d0c <RCCEx_PLL3_Config+0x15c>)
 8005c10:	4313      	orrs	r3, r2
 8005c12:	628b      	str	r3, [r1, #40]	; 0x28
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	3b01      	subs	r3, #1
 8005c24:	025b      	lsls	r3, r3, #9
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	431a      	orrs	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	041b      	lsls	r3, r3, #16
 8005c32:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005c36:	431a      	orrs	r2, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	061b      	lsls	r3, r3, #24
 8005c40:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005c44:	4931      	ldr	r1, [pc, #196]	; (8005d0c <RCCEx_PLL3_Config+0x15c>)
 8005c46:	4313      	orrs	r3, r2
 8005c48:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005c4a:	4b30      	ldr	r3, [pc, #192]	; (8005d0c <RCCEx_PLL3_Config+0x15c>)
 8005c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	492d      	ldr	r1, [pc, #180]	; (8005d0c <RCCEx_PLL3_Config+0x15c>)
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005c5c:	4b2b      	ldr	r3, [pc, #172]	; (8005d0c <RCCEx_PLL3_Config+0x15c>)
 8005c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c60:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	4928      	ldr	r1, [pc, #160]	; (8005d0c <RCCEx_PLL3_Config+0x15c>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005c6e:	4b27      	ldr	r3, [pc, #156]	; (8005d0c <RCCEx_PLL3_Config+0x15c>)
 8005c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c72:	4a26      	ldr	r2, [pc, #152]	; (8005d0c <RCCEx_PLL3_Config+0x15c>)
 8005c74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005c7a:	4b24      	ldr	r3, [pc, #144]	; (8005d0c <RCCEx_PLL3_Config+0x15c>)
 8005c7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c7e:	4b24      	ldr	r3, [pc, #144]	; (8005d10 <RCCEx_PLL3_Config+0x160>)
 8005c80:	4013      	ands	r3, r2
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	69d2      	ldr	r2, [r2, #28]
 8005c86:	00d2      	lsls	r2, r2, #3
 8005c88:	4920      	ldr	r1, [pc, #128]	; (8005d0c <RCCEx_PLL3_Config+0x15c>)
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005c8e:	4b1f      	ldr	r3, [pc, #124]	; (8005d0c <RCCEx_PLL3_Config+0x15c>)
 8005c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c92:	4a1e      	ldr	r2, [pc, #120]	; (8005d0c <RCCEx_PLL3_Config+0x15c>)
 8005c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d106      	bne.n	8005cae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005ca0:	4b1a      	ldr	r3, [pc, #104]	; (8005d0c <RCCEx_PLL3_Config+0x15c>)
 8005ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca4:	4a19      	ldr	r2, [pc, #100]	; (8005d0c <RCCEx_PLL3_Config+0x15c>)
 8005ca6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005caa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005cac:	e00f      	b.n	8005cce <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d106      	bne.n	8005cc2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005cb4:	4b15      	ldr	r3, [pc, #84]	; (8005d0c <RCCEx_PLL3_Config+0x15c>)
 8005cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb8:	4a14      	ldr	r2, [pc, #80]	; (8005d0c <RCCEx_PLL3_Config+0x15c>)
 8005cba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005cbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005cc0:	e005      	b.n	8005cce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005cc2:	4b12      	ldr	r3, [pc, #72]	; (8005d0c <RCCEx_PLL3_Config+0x15c>)
 8005cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc6:	4a11      	ldr	r2, [pc, #68]	; (8005d0c <RCCEx_PLL3_Config+0x15c>)
 8005cc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ccc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005cce:	4b0f      	ldr	r3, [pc, #60]	; (8005d0c <RCCEx_PLL3_Config+0x15c>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a0e      	ldr	r2, [pc, #56]	; (8005d0c <RCCEx_PLL3_Config+0x15c>)
 8005cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cda:	f7fb ff1f 	bl	8001b1c <HAL_GetTick>
 8005cde:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ce0:	e008      	b.n	8005cf4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005ce2:	f7fb ff1b 	bl	8001b1c <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d901      	bls.n	8005cf4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e006      	b.n	8005d02 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005cf4:	4b05      	ldr	r3, [pc, #20]	; (8005d0c <RCCEx_PLL3_Config+0x15c>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d0f0      	beq.n	8005ce2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	58024400 	.word	0x58024400
 8005d10:	ffff0007 	.word	0xffff0007

08005d14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d101      	bne.n	8005d26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e049      	b.n	8005dba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d106      	bne.n	8005d40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f7fb fc26 	bl	800158c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2202      	movs	r2, #2
 8005d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	3304      	adds	r3, #4
 8005d50:	4619      	mov	r1, r3
 8005d52:	4610      	mov	r0, r2
 8005d54:	f000 fa24 	bl	80061a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3708      	adds	r7, #8
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
	...

08005dc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d001      	beq.n	8005ddc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e054      	b.n	8005e86 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2202      	movs	r2, #2
 8005de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68da      	ldr	r2, [r3, #12]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f042 0201 	orr.w	r2, r2, #1
 8005df2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a26      	ldr	r2, [pc, #152]	; (8005e94 <HAL_TIM_Base_Start_IT+0xd0>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d022      	beq.n	8005e44 <HAL_TIM_Base_Start_IT+0x80>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e06:	d01d      	beq.n	8005e44 <HAL_TIM_Base_Start_IT+0x80>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a22      	ldr	r2, [pc, #136]	; (8005e98 <HAL_TIM_Base_Start_IT+0xd4>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d018      	beq.n	8005e44 <HAL_TIM_Base_Start_IT+0x80>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a21      	ldr	r2, [pc, #132]	; (8005e9c <HAL_TIM_Base_Start_IT+0xd8>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d013      	beq.n	8005e44 <HAL_TIM_Base_Start_IT+0x80>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a1f      	ldr	r2, [pc, #124]	; (8005ea0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d00e      	beq.n	8005e44 <HAL_TIM_Base_Start_IT+0x80>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a1e      	ldr	r2, [pc, #120]	; (8005ea4 <HAL_TIM_Base_Start_IT+0xe0>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d009      	beq.n	8005e44 <HAL_TIM_Base_Start_IT+0x80>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a1c      	ldr	r2, [pc, #112]	; (8005ea8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d004      	beq.n	8005e44 <HAL_TIM_Base_Start_IT+0x80>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a1b      	ldr	r2, [pc, #108]	; (8005eac <HAL_TIM_Base_Start_IT+0xe8>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d115      	bne.n	8005e70 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	689a      	ldr	r2, [r3, #8]
 8005e4a:	4b19      	ldr	r3, [pc, #100]	; (8005eb0 <HAL_TIM_Base_Start_IT+0xec>)
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2b06      	cmp	r3, #6
 8005e54:	d015      	beq.n	8005e82 <HAL_TIM_Base_Start_IT+0xbe>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e5c:	d011      	beq.n	8005e82 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f042 0201 	orr.w	r2, r2, #1
 8005e6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e6e:	e008      	b.n	8005e82 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f042 0201 	orr.w	r2, r2, #1
 8005e7e:	601a      	str	r2, [r3, #0]
 8005e80:	e000      	b.n	8005e84 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3714      	adds	r7, #20
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	40010000 	.word	0x40010000
 8005e98:	40000400 	.word	0x40000400
 8005e9c:	40000800 	.word	0x40000800
 8005ea0:	40000c00 	.word	0x40000c00
 8005ea4:	40010400 	.word	0x40010400
 8005ea8:	40001800 	.word	0x40001800
 8005eac:	40014000 	.word	0x40014000
 8005eb0:	00010007 	.word	0x00010007

08005eb4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68da      	ldr	r2, [r3, #12]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f022 0201 	bic.w	r2, r2, #1
 8005eca:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	6a1a      	ldr	r2, [r3, #32]
 8005ed2:	f241 1311 	movw	r3, #4369	; 0x1111
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10f      	bne.n	8005efc <HAL_TIM_Base_Stop_IT+0x48>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6a1a      	ldr	r2, [r3, #32]
 8005ee2:	f240 4344 	movw	r3, #1092	; 0x444
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d107      	bne.n	8005efc <HAL_TIM_Base_Stop_IT+0x48>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f022 0201 	bic.w	r2, r2, #1
 8005efa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	370c      	adds	r7, #12
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr

08005f12 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b082      	sub	sp, #8
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	f003 0302 	and.w	r3, r3, #2
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d122      	bne.n	8005f6e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	f003 0302 	and.w	r3, r3, #2
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d11b      	bne.n	8005f6e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f06f 0202 	mvn.w	r2, #2
 8005f3e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	f003 0303 	and.w	r3, r3, #3
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d003      	beq.n	8005f5c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 f905 	bl	8006164 <HAL_TIM_IC_CaptureCallback>
 8005f5a:	e005      	b.n	8005f68 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 f8f7 	bl	8006150 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 f908 	bl	8006178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	f003 0304 	and.w	r3, r3, #4
 8005f78:	2b04      	cmp	r3, #4
 8005f7a:	d122      	bne.n	8005fc2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	f003 0304 	and.w	r3, r3, #4
 8005f86:	2b04      	cmp	r3, #4
 8005f88:	d11b      	bne.n	8005fc2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f06f 0204 	mvn.w	r2, #4
 8005f92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2202      	movs	r2, #2
 8005f98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d003      	beq.n	8005fb0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 f8db 	bl	8006164 <HAL_TIM_IC_CaptureCallback>
 8005fae:	e005      	b.n	8005fbc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 f8cd 	bl	8006150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 f8de 	bl	8006178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	f003 0308 	and.w	r3, r3, #8
 8005fcc:	2b08      	cmp	r3, #8
 8005fce:	d122      	bne.n	8006016 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	f003 0308 	and.w	r3, r3, #8
 8005fda:	2b08      	cmp	r3, #8
 8005fdc:	d11b      	bne.n	8006016 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f06f 0208 	mvn.w	r2, #8
 8005fe6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2204      	movs	r2, #4
 8005fec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	69db      	ldr	r3, [r3, #28]
 8005ff4:	f003 0303 	and.w	r3, r3, #3
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d003      	beq.n	8006004 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 f8b1 	bl	8006164 <HAL_TIM_IC_CaptureCallback>
 8006002:	e005      	b.n	8006010 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 f8a3 	bl	8006150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f8b4 	bl	8006178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	f003 0310 	and.w	r3, r3, #16
 8006020:	2b10      	cmp	r3, #16
 8006022:	d122      	bne.n	800606a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	f003 0310 	and.w	r3, r3, #16
 800602e:	2b10      	cmp	r3, #16
 8006030:	d11b      	bne.n	800606a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f06f 0210 	mvn.w	r2, #16
 800603a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2208      	movs	r2, #8
 8006040:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	69db      	ldr	r3, [r3, #28]
 8006048:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800604c:	2b00      	cmp	r3, #0
 800604e:	d003      	beq.n	8006058 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 f887 	bl	8006164 <HAL_TIM_IC_CaptureCallback>
 8006056:	e005      	b.n	8006064 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 f879 	bl	8006150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 f88a 	bl	8006178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	f003 0301 	and.w	r3, r3, #1
 8006074:	2b01      	cmp	r3, #1
 8006076:	d10e      	bne.n	8006096 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	f003 0301 	and.w	r3, r3, #1
 8006082:	2b01      	cmp	r3, #1
 8006084:	d107      	bne.n	8006096 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f06f 0201 	mvn.w	r2, #1
 800608e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f7fb f969 	bl	8001368 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060a0:	2b80      	cmp	r3, #128	; 0x80
 80060a2:	d10e      	bne.n	80060c2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ae:	2b80      	cmp	r3, #128	; 0x80
 80060b0:	d107      	bne.n	80060c2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 f9a1 	bl	8006404 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060d0:	d10e      	bne.n	80060f0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060dc:	2b80      	cmp	r3, #128	; 0x80
 80060de:	d107      	bne.n	80060f0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80060e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 f994 	bl	8006418 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060fa:	2b40      	cmp	r3, #64	; 0x40
 80060fc:	d10e      	bne.n	800611c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006108:	2b40      	cmp	r3, #64	; 0x40
 800610a:	d107      	bne.n	800611c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 f838 	bl	800618c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	f003 0320 	and.w	r3, r3, #32
 8006126:	2b20      	cmp	r3, #32
 8006128:	d10e      	bne.n	8006148 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	f003 0320 	and.w	r3, r3, #32
 8006134:	2b20      	cmp	r3, #32
 8006136:	d107      	bne.n	8006148 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f06f 0220 	mvn.w	r2, #32
 8006140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 f954 	bl	80063f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006148:	bf00      	nop
 800614a:	3708      	adds	r7, #8
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006158:	bf00      	nop
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800616c:	bf00      	nop
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006180:	bf00      	nop
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006194:	bf00      	nop
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a40      	ldr	r2, [pc, #256]	; (80062b4 <TIM_Base_SetConfig+0x114>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d013      	beq.n	80061e0 <TIM_Base_SetConfig+0x40>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061be:	d00f      	beq.n	80061e0 <TIM_Base_SetConfig+0x40>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a3d      	ldr	r2, [pc, #244]	; (80062b8 <TIM_Base_SetConfig+0x118>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d00b      	beq.n	80061e0 <TIM_Base_SetConfig+0x40>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a3c      	ldr	r2, [pc, #240]	; (80062bc <TIM_Base_SetConfig+0x11c>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d007      	beq.n	80061e0 <TIM_Base_SetConfig+0x40>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a3b      	ldr	r2, [pc, #236]	; (80062c0 <TIM_Base_SetConfig+0x120>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d003      	beq.n	80061e0 <TIM_Base_SetConfig+0x40>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a3a      	ldr	r2, [pc, #232]	; (80062c4 <TIM_Base_SetConfig+0x124>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d108      	bne.n	80061f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a2f      	ldr	r2, [pc, #188]	; (80062b4 <TIM_Base_SetConfig+0x114>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d01f      	beq.n	800623a <TIM_Base_SetConfig+0x9a>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006200:	d01b      	beq.n	800623a <TIM_Base_SetConfig+0x9a>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a2c      	ldr	r2, [pc, #176]	; (80062b8 <TIM_Base_SetConfig+0x118>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d017      	beq.n	800623a <TIM_Base_SetConfig+0x9a>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a2b      	ldr	r2, [pc, #172]	; (80062bc <TIM_Base_SetConfig+0x11c>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d013      	beq.n	800623a <TIM_Base_SetConfig+0x9a>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a2a      	ldr	r2, [pc, #168]	; (80062c0 <TIM_Base_SetConfig+0x120>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d00f      	beq.n	800623a <TIM_Base_SetConfig+0x9a>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a29      	ldr	r2, [pc, #164]	; (80062c4 <TIM_Base_SetConfig+0x124>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d00b      	beq.n	800623a <TIM_Base_SetConfig+0x9a>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a28      	ldr	r2, [pc, #160]	; (80062c8 <TIM_Base_SetConfig+0x128>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d007      	beq.n	800623a <TIM_Base_SetConfig+0x9a>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a27      	ldr	r2, [pc, #156]	; (80062cc <TIM_Base_SetConfig+0x12c>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d003      	beq.n	800623a <TIM_Base_SetConfig+0x9a>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a26      	ldr	r2, [pc, #152]	; (80062d0 <TIM_Base_SetConfig+0x130>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d108      	bne.n	800624c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006240:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	4313      	orrs	r3, r2
 800624a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	695b      	ldr	r3, [r3, #20]
 8006256:	4313      	orrs	r3, r2
 8006258:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	689a      	ldr	r2, [r3, #8]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a10      	ldr	r2, [pc, #64]	; (80062b4 <TIM_Base_SetConfig+0x114>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d00f      	beq.n	8006298 <TIM_Base_SetConfig+0xf8>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a12      	ldr	r2, [pc, #72]	; (80062c4 <TIM_Base_SetConfig+0x124>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d00b      	beq.n	8006298 <TIM_Base_SetConfig+0xf8>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a11      	ldr	r2, [pc, #68]	; (80062c8 <TIM_Base_SetConfig+0x128>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d007      	beq.n	8006298 <TIM_Base_SetConfig+0xf8>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a10      	ldr	r2, [pc, #64]	; (80062cc <TIM_Base_SetConfig+0x12c>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d003      	beq.n	8006298 <TIM_Base_SetConfig+0xf8>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a0f      	ldr	r2, [pc, #60]	; (80062d0 <TIM_Base_SetConfig+0x130>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d103      	bne.n	80062a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	691a      	ldr	r2, [r3, #16]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	615a      	str	r2, [r3, #20]
}
 80062a6:	bf00      	nop
 80062a8:	3714      	adds	r7, #20
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	40010000 	.word	0x40010000
 80062b8:	40000400 	.word	0x40000400
 80062bc:	40000800 	.word	0x40000800
 80062c0:	40000c00 	.word	0x40000c00
 80062c4:	40010400 	.word	0x40010400
 80062c8:	40014000 	.word	0x40014000
 80062cc:	40014400 	.word	0x40014400
 80062d0:	40014800 	.word	0x40014800

080062d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d101      	bne.n	80062ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062e8:	2302      	movs	r3, #2
 80062ea:	e06d      	b.n	80063c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2202      	movs	r2, #2
 80062f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a30      	ldr	r2, [pc, #192]	; (80063d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d004      	beq.n	8006320 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a2f      	ldr	r2, [pc, #188]	; (80063d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d108      	bne.n	8006332 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006326:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	4313      	orrs	r3, r2
 8006330:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006338:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	4313      	orrs	r3, r2
 8006342:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a20      	ldr	r2, [pc, #128]	; (80063d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d022      	beq.n	800639c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800635e:	d01d      	beq.n	800639c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a1d      	ldr	r2, [pc, #116]	; (80063dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d018      	beq.n	800639c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a1c      	ldr	r2, [pc, #112]	; (80063e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d013      	beq.n	800639c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a1a      	ldr	r2, [pc, #104]	; (80063e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d00e      	beq.n	800639c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a15      	ldr	r2, [pc, #84]	; (80063d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d009      	beq.n	800639c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a16      	ldr	r2, [pc, #88]	; (80063e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d004      	beq.n	800639c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a15      	ldr	r2, [pc, #84]	; (80063ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d10c      	bne.n	80063b6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	68ba      	ldr	r2, [r7, #8]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68ba      	ldr	r2, [r7, #8]
 80063b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3714      	adds	r7, #20
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr
 80063d4:	40010000 	.word	0x40010000
 80063d8:	40010400 	.word	0x40010400
 80063dc:	40000400 	.word	0x40000400
 80063e0:	40000800 	.word	0x40000800
 80063e4:	40000c00 	.word	0x40000c00
 80063e8:	40001800 	.word	0x40001800
 80063ec:	40014000 	.word	0x40014000

080063f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063f8:	bf00      	nop
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800640c:	bf00      	nop
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006420:	bf00      	nop
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d101      	bne.n	800643e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e042      	b.n	80064c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006444:	2b00      	cmp	r3, #0
 8006446:	d106      	bne.n	8006456 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f7fb f8c3 	bl	80015dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2224      	movs	r2, #36	; 0x24
 800645a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f022 0201 	bic.w	r2, r2, #1
 800646c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 f8ba 	bl	80065e8 <UART_SetConfig>
 8006474:	4603      	mov	r3, r0
 8006476:	2b01      	cmp	r3, #1
 8006478:	d101      	bne.n	800647e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e022      	b.n	80064c4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006482:	2b00      	cmp	r3, #0
 8006484:	d002      	beq.n	800648c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 fe16 	bl	80070b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	685a      	ldr	r2, [r3, #4]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800649a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	689a      	ldr	r2, [r3, #8]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f042 0201 	orr.w	r2, r2, #1
 80064ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 fe9d 	bl	80071fc <UART_CheckIdleState>
 80064c2:	4603      	mov	r3, r0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3708      	adds	r7, #8
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b08a      	sub	sp, #40	; 0x28
 80064d0:	af02      	add	r7, sp, #8
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	603b      	str	r3, [r7, #0]
 80064d8:	4613      	mov	r3, r2
 80064da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064e2:	2b20      	cmp	r3, #32
 80064e4:	d17b      	bne.n	80065de <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d002      	beq.n	80064f2 <HAL_UART_Transmit+0x26>
 80064ec:	88fb      	ldrh	r3, [r7, #6]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d101      	bne.n	80064f6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e074      	b.n	80065e0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2221      	movs	r2, #33	; 0x21
 8006502:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006506:	f7fb fb09 	bl	8001b1c <HAL_GetTick>
 800650a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	88fa      	ldrh	r2, [r7, #6]
 8006510:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	88fa      	ldrh	r2, [r7, #6]
 8006518:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006524:	d108      	bne.n	8006538 <HAL_UART_Transmit+0x6c>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d104      	bne.n	8006538 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800652e:	2300      	movs	r3, #0
 8006530:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	61bb      	str	r3, [r7, #24]
 8006536:	e003      	b.n	8006540 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800653c:	2300      	movs	r3, #0
 800653e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006540:	e030      	b.n	80065a4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	9300      	str	r3, [sp, #0]
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	2200      	movs	r2, #0
 800654a:	2180      	movs	r1, #128	; 0x80
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f000 feff 	bl	8007350 <UART_WaitOnFlagUntilTimeout>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d005      	beq.n	8006564 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2220      	movs	r2, #32
 800655c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006560:	2303      	movs	r3, #3
 8006562:	e03d      	b.n	80065e0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d10b      	bne.n	8006582 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	881b      	ldrh	r3, [r3, #0]
 800656e:	461a      	mov	r2, r3
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006578:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	3302      	adds	r3, #2
 800657e:	61bb      	str	r3, [r7, #24]
 8006580:	e007      	b.n	8006592 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	781a      	ldrb	r2, [r3, #0]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	3301      	adds	r3, #1
 8006590:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006598:	b29b      	uxth	r3, r3
 800659a:	3b01      	subs	r3, #1
 800659c:	b29a      	uxth	r2, r3
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1c8      	bne.n	8006542 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	9300      	str	r3, [sp, #0]
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	2200      	movs	r2, #0
 80065b8:	2140      	movs	r1, #64	; 0x40
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	f000 fec8 	bl	8007350 <UART_WaitOnFlagUntilTimeout>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d005      	beq.n	80065d2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2220      	movs	r2, #32
 80065ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e006      	b.n	80065e0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2220      	movs	r2, #32
 80065d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80065da:	2300      	movs	r3, #0
 80065dc:	e000      	b.n	80065e0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80065de:	2302      	movs	r3, #2
  }
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3720      	adds	r7, #32
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065ec:	b092      	sub	sp, #72	; 0x48
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065f2:	2300      	movs	r3, #0
 80065f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	689a      	ldr	r2, [r3, #8]
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	431a      	orrs	r2, r3
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	695b      	ldr	r3, [r3, #20]
 8006606:	431a      	orrs	r2, r3
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	69db      	ldr	r3, [r3, #28]
 800660c:	4313      	orrs	r3, r2
 800660e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	4bbe      	ldr	r3, [pc, #760]	; (8006910 <UART_SetConfig+0x328>)
 8006618:	4013      	ands	r3, r2
 800661a:	697a      	ldr	r2, [r7, #20]
 800661c:	6812      	ldr	r2, [r2, #0]
 800661e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006620:	430b      	orrs	r3, r1
 8006622:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	68da      	ldr	r2, [r3, #12]
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	430a      	orrs	r2, r1
 8006638:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	699b      	ldr	r3, [r3, #24]
 800663e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4ab3      	ldr	r2, [pc, #716]	; (8006914 <UART_SetConfig+0x32c>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d004      	beq.n	8006654 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006650:	4313      	orrs	r3, r2
 8006652:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	689a      	ldr	r2, [r3, #8]
 800665a:	4baf      	ldr	r3, [pc, #700]	; (8006918 <UART_SetConfig+0x330>)
 800665c:	4013      	ands	r3, r2
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	6812      	ldr	r2, [r2, #0]
 8006662:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006664:	430b      	orrs	r3, r1
 8006666:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800666e:	f023 010f 	bic.w	r1, r3, #15
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	430a      	orrs	r2, r1
 800667c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4aa6      	ldr	r2, [pc, #664]	; (800691c <UART_SetConfig+0x334>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d177      	bne.n	8006778 <UART_SetConfig+0x190>
 8006688:	4ba5      	ldr	r3, [pc, #660]	; (8006920 <UART_SetConfig+0x338>)
 800668a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800668c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006690:	2b28      	cmp	r3, #40	; 0x28
 8006692:	d86d      	bhi.n	8006770 <UART_SetConfig+0x188>
 8006694:	a201      	add	r2, pc, #4	; (adr r2, 800669c <UART_SetConfig+0xb4>)
 8006696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800669a:	bf00      	nop
 800669c:	08006741 	.word	0x08006741
 80066a0:	08006771 	.word	0x08006771
 80066a4:	08006771 	.word	0x08006771
 80066a8:	08006771 	.word	0x08006771
 80066ac:	08006771 	.word	0x08006771
 80066b0:	08006771 	.word	0x08006771
 80066b4:	08006771 	.word	0x08006771
 80066b8:	08006771 	.word	0x08006771
 80066bc:	08006749 	.word	0x08006749
 80066c0:	08006771 	.word	0x08006771
 80066c4:	08006771 	.word	0x08006771
 80066c8:	08006771 	.word	0x08006771
 80066cc:	08006771 	.word	0x08006771
 80066d0:	08006771 	.word	0x08006771
 80066d4:	08006771 	.word	0x08006771
 80066d8:	08006771 	.word	0x08006771
 80066dc:	08006751 	.word	0x08006751
 80066e0:	08006771 	.word	0x08006771
 80066e4:	08006771 	.word	0x08006771
 80066e8:	08006771 	.word	0x08006771
 80066ec:	08006771 	.word	0x08006771
 80066f0:	08006771 	.word	0x08006771
 80066f4:	08006771 	.word	0x08006771
 80066f8:	08006771 	.word	0x08006771
 80066fc:	08006759 	.word	0x08006759
 8006700:	08006771 	.word	0x08006771
 8006704:	08006771 	.word	0x08006771
 8006708:	08006771 	.word	0x08006771
 800670c:	08006771 	.word	0x08006771
 8006710:	08006771 	.word	0x08006771
 8006714:	08006771 	.word	0x08006771
 8006718:	08006771 	.word	0x08006771
 800671c:	08006761 	.word	0x08006761
 8006720:	08006771 	.word	0x08006771
 8006724:	08006771 	.word	0x08006771
 8006728:	08006771 	.word	0x08006771
 800672c:	08006771 	.word	0x08006771
 8006730:	08006771 	.word	0x08006771
 8006734:	08006771 	.word	0x08006771
 8006738:	08006771 	.word	0x08006771
 800673c:	08006769 	.word	0x08006769
 8006740:	2301      	movs	r3, #1
 8006742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006746:	e222      	b.n	8006b8e <UART_SetConfig+0x5a6>
 8006748:	2304      	movs	r3, #4
 800674a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800674e:	e21e      	b.n	8006b8e <UART_SetConfig+0x5a6>
 8006750:	2308      	movs	r3, #8
 8006752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006756:	e21a      	b.n	8006b8e <UART_SetConfig+0x5a6>
 8006758:	2310      	movs	r3, #16
 800675a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800675e:	e216      	b.n	8006b8e <UART_SetConfig+0x5a6>
 8006760:	2320      	movs	r3, #32
 8006762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006766:	e212      	b.n	8006b8e <UART_SetConfig+0x5a6>
 8006768:	2340      	movs	r3, #64	; 0x40
 800676a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800676e:	e20e      	b.n	8006b8e <UART_SetConfig+0x5a6>
 8006770:	2380      	movs	r3, #128	; 0x80
 8006772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006776:	e20a      	b.n	8006b8e <UART_SetConfig+0x5a6>
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a69      	ldr	r2, [pc, #420]	; (8006924 <UART_SetConfig+0x33c>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d130      	bne.n	80067e4 <UART_SetConfig+0x1fc>
 8006782:	4b67      	ldr	r3, [pc, #412]	; (8006920 <UART_SetConfig+0x338>)
 8006784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006786:	f003 0307 	and.w	r3, r3, #7
 800678a:	2b05      	cmp	r3, #5
 800678c:	d826      	bhi.n	80067dc <UART_SetConfig+0x1f4>
 800678e:	a201      	add	r2, pc, #4	; (adr r2, 8006794 <UART_SetConfig+0x1ac>)
 8006790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006794:	080067ad 	.word	0x080067ad
 8006798:	080067b5 	.word	0x080067b5
 800679c:	080067bd 	.word	0x080067bd
 80067a0:	080067c5 	.word	0x080067c5
 80067a4:	080067cd 	.word	0x080067cd
 80067a8:	080067d5 	.word	0x080067d5
 80067ac:	2300      	movs	r3, #0
 80067ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067b2:	e1ec      	b.n	8006b8e <UART_SetConfig+0x5a6>
 80067b4:	2304      	movs	r3, #4
 80067b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067ba:	e1e8      	b.n	8006b8e <UART_SetConfig+0x5a6>
 80067bc:	2308      	movs	r3, #8
 80067be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067c2:	e1e4      	b.n	8006b8e <UART_SetConfig+0x5a6>
 80067c4:	2310      	movs	r3, #16
 80067c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067ca:	e1e0      	b.n	8006b8e <UART_SetConfig+0x5a6>
 80067cc:	2320      	movs	r3, #32
 80067ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067d2:	e1dc      	b.n	8006b8e <UART_SetConfig+0x5a6>
 80067d4:	2340      	movs	r3, #64	; 0x40
 80067d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067da:	e1d8      	b.n	8006b8e <UART_SetConfig+0x5a6>
 80067dc:	2380      	movs	r3, #128	; 0x80
 80067de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067e2:	e1d4      	b.n	8006b8e <UART_SetConfig+0x5a6>
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a4f      	ldr	r2, [pc, #316]	; (8006928 <UART_SetConfig+0x340>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d130      	bne.n	8006850 <UART_SetConfig+0x268>
 80067ee:	4b4c      	ldr	r3, [pc, #304]	; (8006920 <UART_SetConfig+0x338>)
 80067f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067f2:	f003 0307 	and.w	r3, r3, #7
 80067f6:	2b05      	cmp	r3, #5
 80067f8:	d826      	bhi.n	8006848 <UART_SetConfig+0x260>
 80067fa:	a201      	add	r2, pc, #4	; (adr r2, 8006800 <UART_SetConfig+0x218>)
 80067fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006800:	08006819 	.word	0x08006819
 8006804:	08006821 	.word	0x08006821
 8006808:	08006829 	.word	0x08006829
 800680c:	08006831 	.word	0x08006831
 8006810:	08006839 	.word	0x08006839
 8006814:	08006841 	.word	0x08006841
 8006818:	2300      	movs	r3, #0
 800681a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800681e:	e1b6      	b.n	8006b8e <UART_SetConfig+0x5a6>
 8006820:	2304      	movs	r3, #4
 8006822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006826:	e1b2      	b.n	8006b8e <UART_SetConfig+0x5a6>
 8006828:	2308      	movs	r3, #8
 800682a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800682e:	e1ae      	b.n	8006b8e <UART_SetConfig+0x5a6>
 8006830:	2310      	movs	r3, #16
 8006832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006836:	e1aa      	b.n	8006b8e <UART_SetConfig+0x5a6>
 8006838:	2320      	movs	r3, #32
 800683a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800683e:	e1a6      	b.n	8006b8e <UART_SetConfig+0x5a6>
 8006840:	2340      	movs	r3, #64	; 0x40
 8006842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006846:	e1a2      	b.n	8006b8e <UART_SetConfig+0x5a6>
 8006848:	2380      	movs	r3, #128	; 0x80
 800684a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800684e:	e19e      	b.n	8006b8e <UART_SetConfig+0x5a6>
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a35      	ldr	r2, [pc, #212]	; (800692c <UART_SetConfig+0x344>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d130      	bne.n	80068bc <UART_SetConfig+0x2d4>
 800685a:	4b31      	ldr	r3, [pc, #196]	; (8006920 <UART_SetConfig+0x338>)
 800685c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800685e:	f003 0307 	and.w	r3, r3, #7
 8006862:	2b05      	cmp	r3, #5
 8006864:	d826      	bhi.n	80068b4 <UART_SetConfig+0x2cc>
 8006866:	a201      	add	r2, pc, #4	; (adr r2, 800686c <UART_SetConfig+0x284>)
 8006868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800686c:	08006885 	.word	0x08006885
 8006870:	0800688d 	.word	0x0800688d
 8006874:	08006895 	.word	0x08006895
 8006878:	0800689d 	.word	0x0800689d
 800687c:	080068a5 	.word	0x080068a5
 8006880:	080068ad 	.word	0x080068ad
 8006884:	2300      	movs	r3, #0
 8006886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800688a:	e180      	b.n	8006b8e <UART_SetConfig+0x5a6>
 800688c:	2304      	movs	r3, #4
 800688e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006892:	e17c      	b.n	8006b8e <UART_SetConfig+0x5a6>
 8006894:	2308      	movs	r3, #8
 8006896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800689a:	e178      	b.n	8006b8e <UART_SetConfig+0x5a6>
 800689c:	2310      	movs	r3, #16
 800689e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068a2:	e174      	b.n	8006b8e <UART_SetConfig+0x5a6>
 80068a4:	2320      	movs	r3, #32
 80068a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068aa:	e170      	b.n	8006b8e <UART_SetConfig+0x5a6>
 80068ac:	2340      	movs	r3, #64	; 0x40
 80068ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068b2:	e16c      	b.n	8006b8e <UART_SetConfig+0x5a6>
 80068b4:	2380      	movs	r3, #128	; 0x80
 80068b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068ba:	e168      	b.n	8006b8e <UART_SetConfig+0x5a6>
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a1b      	ldr	r2, [pc, #108]	; (8006930 <UART_SetConfig+0x348>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d142      	bne.n	800694c <UART_SetConfig+0x364>
 80068c6:	4b16      	ldr	r3, [pc, #88]	; (8006920 <UART_SetConfig+0x338>)
 80068c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ca:	f003 0307 	and.w	r3, r3, #7
 80068ce:	2b05      	cmp	r3, #5
 80068d0:	d838      	bhi.n	8006944 <UART_SetConfig+0x35c>
 80068d2:	a201      	add	r2, pc, #4	; (adr r2, 80068d8 <UART_SetConfig+0x2f0>)
 80068d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d8:	080068f1 	.word	0x080068f1
 80068dc:	080068f9 	.word	0x080068f9
 80068e0:	08006901 	.word	0x08006901
 80068e4:	08006909 	.word	0x08006909
 80068e8:	08006935 	.word	0x08006935
 80068ec:	0800693d 	.word	0x0800693d
 80068f0:	2300      	movs	r3, #0
 80068f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068f6:	e14a      	b.n	8006b8e <UART_SetConfig+0x5a6>
 80068f8:	2304      	movs	r3, #4
 80068fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068fe:	e146      	b.n	8006b8e <UART_SetConfig+0x5a6>
 8006900:	2308      	movs	r3, #8
 8006902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006906:	e142      	b.n	8006b8e <UART_SetConfig+0x5a6>
 8006908:	2310      	movs	r3, #16
 800690a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800690e:	e13e      	b.n	8006b8e <UART_SetConfig+0x5a6>
 8006910:	cfff69f3 	.word	0xcfff69f3
 8006914:	58000c00 	.word	0x58000c00
 8006918:	11fff4ff 	.word	0x11fff4ff
 800691c:	40011000 	.word	0x40011000
 8006920:	58024400 	.word	0x58024400
 8006924:	40004400 	.word	0x40004400
 8006928:	40004800 	.word	0x40004800
 800692c:	40004c00 	.word	0x40004c00
 8006930:	40005000 	.word	0x40005000
 8006934:	2320      	movs	r3, #32
 8006936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800693a:	e128      	b.n	8006b8e <UART_SetConfig+0x5a6>
 800693c:	2340      	movs	r3, #64	; 0x40
 800693e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006942:	e124      	b.n	8006b8e <UART_SetConfig+0x5a6>
 8006944:	2380      	movs	r3, #128	; 0x80
 8006946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800694a:	e120      	b.n	8006b8e <UART_SetConfig+0x5a6>
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4acb      	ldr	r2, [pc, #812]	; (8006c80 <UART_SetConfig+0x698>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d176      	bne.n	8006a44 <UART_SetConfig+0x45c>
 8006956:	4bcb      	ldr	r3, [pc, #812]	; (8006c84 <UART_SetConfig+0x69c>)
 8006958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800695a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800695e:	2b28      	cmp	r3, #40	; 0x28
 8006960:	d86c      	bhi.n	8006a3c <UART_SetConfig+0x454>
 8006962:	a201      	add	r2, pc, #4	; (adr r2, 8006968 <UART_SetConfig+0x380>)
 8006964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006968:	08006a0d 	.word	0x08006a0d
 800696c:	08006a3d 	.word	0x08006a3d
 8006970:	08006a3d 	.word	0x08006a3d
 8006974:	08006a3d 	.word	0x08006a3d
 8006978:	08006a3d 	.word	0x08006a3d
 800697c:	08006a3d 	.word	0x08006a3d
 8006980:	08006a3d 	.word	0x08006a3d
 8006984:	08006a3d 	.word	0x08006a3d
 8006988:	08006a15 	.word	0x08006a15
 800698c:	08006a3d 	.word	0x08006a3d
 8006990:	08006a3d 	.word	0x08006a3d
 8006994:	08006a3d 	.word	0x08006a3d
 8006998:	08006a3d 	.word	0x08006a3d
 800699c:	08006a3d 	.word	0x08006a3d
 80069a0:	08006a3d 	.word	0x08006a3d
 80069a4:	08006a3d 	.word	0x08006a3d
 80069a8:	08006a1d 	.word	0x08006a1d
 80069ac:	08006a3d 	.word	0x08006a3d
 80069b0:	08006a3d 	.word	0x08006a3d
 80069b4:	08006a3d 	.word	0x08006a3d
 80069b8:	08006a3d 	.word	0x08006a3d
 80069bc:	08006a3d 	.word	0x08006a3d
 80069c0:	08006a3d 	.word	0x08006a3d
 80069c4:	08006a3d 	.word	0x08006a3d
 80069c8:	08006a25 	.word	0x08006a25
 80069cc:	08006a3d 	.word	0x08006a3d
 80069d0:	08006a3d 	.word	0x08006a3d
 80069d4:	08006a3d 	.word	0x08006a3d
 80069d8:	08006a3d 	.word	0x08006a3d
 80069dc:	08006a3d 	.word	0x08006a3d
 80069e0:	08006a3d 	.word	0x08006a3d
 80069e4:	08006a3d 	.word	0x08006a3d
 80069e8:	08006a2d 	.word	0x08006a2d
 80069ec:	08006a3d 	.word	0x08006a3d
 80069f0:	08006a3d 	.word	0x08006a3d
 80069f4:	08006a3d 	.word	0x08006a3d
 80069f8:	08006a3d 	.word	0x08006a3d
 80069fc:	08006a3d 	.word	0x08006a3d
 8006a00:	08006a3d 	.word	0x08006a3d
 8006a04:	08006a3d 	.word	0x08006a3d
 8006a08:	08006a35 	.word	0x08006a35
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a12:	e0bc      	b.n	8006b8e <UART_SetConfig+0x5a6>
 8006a14:	2304      	movs	r3, #4
 8006a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a1a:	e0b8      	b.n	8006b8e <UART_SetConfig+0x5a6>
 8006a1c:	2308      	movs	r3, #8
 8006a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a22:	e0b4      	b.n	8006b8e <UART_SetConfig+0x5a6>
 8006a24:	2310      	movs	r3, #16
 8006a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a2a:	e0b0      	b.n	8006b8e <UART_SetConfig+0x5a6>
 8006a2c:	2320      	movs	r3, #32
 8006a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a32:	e0ac      	b.n	8006b8e <UART_SetConfig+0x5a6>
 8006a34:	2340      	movs	r3, #64	; 0x40
 8006a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a3a:	e0a8      	b.n	8006b8e <UART_SetConfig+0x5a6>
 8006a3c:	2380      	movs	r3, #128	; 0x80
 8006a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a42:	e0a4      	b.n	8006b8e <UART_SetConfig+0x5a6>
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a8f      	ldr	r2, [pc, #572]	; (8006c88 <UART_SetConfig+0x6a0>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d130      	bne.n	8006ab0 <UART_SetConfig+0x4c8>
 8006a4e:	4b8d      	ldr	r3, [pc, #564]	; (8006c84 <UART_SetConfig+0x69c>)
 8006a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a52:	f003 0307 	and.w	r3, r3, #7
 8006a56:	2b05      	cmp	r3, #5
 8006a58:	d826      	bhi.n	8006aa8 <UART_SetConfig+0x4c0>
 8006a5a:	a201      	add	r2, pc, #4	; (adr r2, 8006a60 <UART_SetConfig+0x478>)
 8006a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a60:	08006a79 	.word	0x08006a79
 8006a64:	08006a81 	.word	0x08006a81
 8006a68:	08006a89 	.word	0x08006a89
 8006a6c:	08006a91 	.word	0x08006a91
 8006a70:	08006a99 	.word	0x08006a99
 8006a74:	08006aa1 	.word	0x08006aa1
 8006a78:	2300      	movs	r3, #0
 8006a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a7e:	e086      	b.n	8006b8e <UART_SetConfig+0x5a6>
 8006a80:	2304      	movs	r3, #4
 8006a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a86:	e082      	b.n	8006b8e <UART_SetConfig+0x5a6>
 8006a88:	2308      	movs	r3, #8
 8006a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a8e:	e07e      	b.n	8006b8e <UART_SetConfig+0x5a6>
 8006a90:	2310      	movs	r3, #16
 8006a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a96:	e07a      	b.n	8006b8e <UART_SetConfig+0x5a6>
 8006a98:	2320      	movs	r3, #32
 8006a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a9e:	e076      	b.n	8006b8e <UART_SetConfig+0x5a6>
 8006aa0:	2340      	movs	r3, #64	; 0x40
 8006aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aa6:	e072      	b.n	8006b8e <UART_SetConfig+0x5a6>
 8006aa8:	2380      	movs	r3, #128	; 0x80
 8006aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aae:	e06e      	b.n	8006b8e <UART_SetConfig+0x5a6>
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a75      	ldr	r2, [pc, #468]	; (8006c8c <UART_SetConfig+0x6a4>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d130      	bne.n	8006b1c <UART_SetConfig+0x534>
 8006aba:	4b72      	ldr	r3, [pc, #456]	; (8006c84 <UART_SetConfig+0x69c>)
 8006abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006abe:	f003 0307 	and.w	r3, r3, #7
 8006ac2:	2b05      	cmp	r3, #5
 8006ac4:	d826      	bhi.n	8006b14 <UART_SetConfig+0x52c>
 8006ac6:	a201      	add	r2, pc, #4	; (adr r2, 8006acc <UART_SetConfig+0x4e4>)
 8006ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006acc:	08006ae5 	.word	0x08006ae5
 8006ad0:	08006aed 	.word	0x08006aed
 8006ad4:	08006af5 	.word	0x08006af5
 8006ad8:	08006afd 	.word	0x08006afd
 8006adc:	08006b05 	.word	0x08006b05
 8006ae0:	08006b0d 	.word	0x08006b0d
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aea:	e050      	b.n	8006b8e <UART_SetConfig+0x5a6>
 8006aec:	2304      	movs	r3, #4
 8006aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006af2:	e04c      	b.n	8006b8e <UART_SetConfig+0x5a6>
 8006af4:	2308      	movs	r3, #8
 8006af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006afa:	e048      	b.n	8006b8e <UART_SetConfig+0x5a6>
 8006afc:	2310      	movs	r3, #16
 8006afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b02:	e044      	b.n	8006b8e <UART_SetConfig+0x5a6>
 8006b04:	2320      	movs	r3, #32
 8006b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b0a:	e040      	b.n	8006b8e <UART_SetConfig+0x5a6>
 8006b0c:	2340      	movs	r3, #64	; 0x40
 8006b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b12:	e03c      	b.n	8006b8e <UART_SetConfig+0x5a6>
 8006b14:	2380      	movs	r3, #128	; 0x80
 8006b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b1a:	e038      	b.n	8006b8e <UART_SetConfig+0x5a6>
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a5b      	ldr	r2, [pc, #364]	; (8006c90 <UART_SetConfig+0x6a8>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d130      	bne.n	8006b88 <UART_SetConfig+0x5a0>
 8006b26:	4b57      	ldr	r3, [pc, #348]	; (8006c84 <UART_SetConfig+0x69c>)
 8006b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b2a:	f003 0307 	and.w	r3, r3, #7
 8006b2e:	2b05      	cmp	r3, #5
 8006b30:	d826      	bhi.n	8006b80 <UART_SetConfig+0x598>
 8006b32:	a201      	add	r2, pc, #4	; (adr r2, 8006b38 <UART_SetConfig+0x550>)
 8006b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b38:	08006b51 	.word	0x08006b51
 8006b3c:	08006b59 	.word	0x08006b59
 8006b40:	08006b61 	.word	0x08006b61
 8006b44:	08006b69 	.word	0x08006b69
 8006b48:	08006b71 	.word	0x08006b71
 8006b4c:	08006b79 	.word	0x08006b79
 8006b50:	2302      	movs	r3, #2
 8006b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b56:	e01a      	b.n	8006b8e <UART_SetConfig+0x5a6>
 8006b58:	2304      	movs	r3, #4
 8006b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b5e:	e016      	b.n	8006b8e <UART_SetConfig+0x5a6>
 8006b60:	2308      	movs	r3, #8
 8006b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b66:	e012      	b.n	8006b8e <UART_SetConfig+0x5a6>
 8006b68:	2310      	movs	r3, #16
 8006b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b6e:	e00e      	b.n	8006b8e <UART_SetConfig+0x5a6>
 8006b70:	2320      	movs	r3, #32
 8006b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b76:	e00a      	b.n	8006b8e <UART_SetConfig+0x5a6>
 8006b78:	2340      	movs	r3, #64	; 0x40
 8006b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b7e:	e006      	b.n	8006b8e <UART_SetConfig+0x5a6>
 8006b80:	2380      	movs	r3, #128	; 0x80
 8006b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b86:	e002      	b.n	8006b8e <UART_SetConfig+0x5a6>
 8006b88:	2380      	movs	r3, #128	; 0x80
 8006b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a3f      	ldr	r2, [pc, #252]	; (8006c90 <UART_SetConfig+0x6a8>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	f040 80f8 	bne.w	8006d8a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b9a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006b9e:	2b20      	cmp	r3, #32
 8006ba0:	dc46      	bgt.n	8006c30 <UART_SetConfig+0x648>
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	f2c0 8082 	blt.w	8006cac <UART_SetConfig+0x6c4>
 8006ba8:	3b02      	subs	r3, #2
 8006baa:	2b1e      	cmp	r3, #30
 8006bac:	d87e      	bhi.n	8006cac <UART_SetConfig+0x6c4>
 8006bae:	a201      	add	r2, pc, #4	; (adr r2, 8006bb4 <UART_SetConfig+0x5cc>)
 8006bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb4:	08006c37 	.word	0x08006c37
 8006bb8:	08006cad 	.word	0x08006cad
 8006bbc:	08006c3f 	.word	0x08006c3f
 8006bc0:	08006cad 	.word	0x08006cad
 8006bc4:	08006cad 	.word	0x08006cad
 8006bc8:	08006cad 	.word	0x08006cad
 8006bcc:	08006c4f 	.word	0x08006c4f
 8006bd0:	08006cad 	.word	0x08006cad
 8006bd4:	08006cad 	.word	0x08006cad
 8006bd8:	08006cad 	.word	0x08006cad
 8006bdc:	08006cad 	.word	0x08006cad
 8006be0:	08006cad 	.word	0x08006cad
 8006be4:	08006cad 	.word	0x08006cad
 8006be8:	08006cad 	.word	0x08006cad
 8006bec:	08006c5f 	.word	0x08006c5f
 8006bf0:	08006cad 	.word	0x08006cad
 8006bf4:	08006cad 	.word	0x08006cad
 8006bf8:	08006cad 	.word	0x08006cad
 8006bfc:	08006cad 	.word	0x08006cad
 8006c00:	08006cad 	.word	0x08006cad
 8006c04:	08006cad 	.word	0x08006cad
 8006c08:	08006cad 	.word	0x08006cad
 8006c0c:	08006cad 	.word	0x08006cad
 8006c10:	08006cad 	.word	0x08006cad
 8006c14:	08006cad 	.word	0x08006cad
 8006c18:	08006cad 	.word	0x08006cad
 8006c1c:	08006cad 	.word	0x08006cad
 8006c20:	08006cad 	.word	0x08006cad
 8006c24:	08006cad 	.word	0x08006cad
 8006c28:	08006cad 	.word	0x08006cad
 8006c2c:	08006c9f 	.word	0x08006c9f
 8006c30:	2b40      	cmp	r3, #64	; 0x40
 8006c32:	d037      	beq.n	8006ca4 <UART_SetConfig+0x6bc>
 8006c34:	e03a      	b.n	8006cac <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006c36:	f7fe fc4b 	bl	80054d0 <HAL_RCCEx_GetD3PCLK1Freq>
 8006c3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006c3c:	e03c      	b.n	8006cb8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7fe fc5a 	bl	80054fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c4c:	e034      	b.n	8006cb8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c4e:	f107 0318 	add.w	r3, r7, #24
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7fe fda6 	bl	80057a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c5c:	e02c      	b.n	8006cb8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c5e:	4b09      	ldr	r3, [pc, #36]	; (8006c84 <UART_SetConfig+0x69c>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 0320 	and.w	r3, r3, #32
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d016      	beq.n	8006c98 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006c6a:	4b06      	ldr	r3, [pc, #24]	; (8006c84 <UART_SetConfig+0x69c>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	08db      	lsrs	r3, r3, #3
 8006c70:	f003 0303 	and.w	r3, r3, #3
 8006c74:	4a07      	ldr	r2, [pc, #28]	; (8006c94 <UART_SetConfig+0x6ac>)
 8006c76:	fa22 f303 	lsr.w	r3, r2, r3
 8006c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006c7c:	e01c      	b.n	8006cb8 <UART_SetConfig+0x6d0>
 8006c7e:	bf00      	nop
 8006c80:	40011400 	.word	0x40011400
 8006c84:	58024400 	.word	0x58024400
 8006c88:	40007800 	.word	0x40007800
 8006c8c:	40007c00 	.word	0x40007c00
 8006c90:	58000c00 	.word	0x58000c00
 8006c94:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006c98:	4b9d      	ldr	r3, [pc, #628]	; (8006f10 <UART_SetConfig+0x928>)
 8006c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c9c:	e00c      	b.n	8006cb8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006c9e:	4b9d      	ldr	r3, [pc, #628]	; (8006f14 <UART_SetConfig+0x92c>)
 8006ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ca2:	e009      	b.n	8006cb8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ca4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006caa:	e005      	b.n	8006cb8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006cac:	2300      	movs	r3, #0
 8006cae:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006cb6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	f000 81de 	beq.w	800707c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc4:	4a94      	ldr	r2, [pc, #592]	; (8006f18 <UART_SetConfig+0x930>)
 8006cc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cca:	461a      	mov	r2, r3
 8006ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cce:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cd2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	685a      	ldr	r2, [r3, #4]
 8006cd8:	4613      	mov	r3, r2
 8006cda:	005b      	lsls	r3, r3, #1
 8006cdc:	4413      	add	r3, r2
 8006cde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d305      	bcc.n	8006cf0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006cea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d903      	bls.n	8006cf8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006cf6:	e1c1      	b.n	800707c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	60bb      	str	r3, [r7, #8]
 8006cfe:	60fa      	str	r2, [r7, #12]
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d04:	4a84      	ldr	r2, [pc, #528]	; (8006f18 <UART_SetConfig+0x930>)
 8006d06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	603b      	str	r3, [r7, #0]
 8006d10:	607a      	str	r2, [r7, #4]
 8006d12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006d1a:	f7f9 fb39 	bl	8000390 <__aeabi_uldivmod>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	460b      	mov	r3, r1
 8006d22:	4610      	mov	r0, r2
 8006d24:	4619      	mov	r1, r3
 8006d26:	f04f 0200 	mov.w	r2, #0
 8006d2a:	f04f 0300 	mov.w	r3, #0
 8006d2e:	020b      	lsls	r3, r1, #8
 8006d30:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006d34:	0202      	lsls	r2, r0, #8
 8006d36:	6979      	ldr	r1, [r7, #20]
 8006d38:	6849      	ldr	r1, [r1, #4]
 8006d3a:	0849      	lsrs	r1, r1, #1
 8006d3c:	2000      	movs	r0, #0
 8006d3e:	460c      	mov	r4, r1
 8006d40:	4605      	mov	r5, r0
 8006d42:	eb12 0804 	adds.w	r8, r2, r4
 8006d46:	eb43 0905 	adc.w	r9, r3, r5
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	469a      	mov	sl, r3
 8006d52:	4693      	mov	fp, r2
 8006d54:	4652      	mov	r2, sl
 8006d56:	465b      	mov	r3, fp
 8006d58:	4640      	mov	r0, r8
 8006d5a:	4649      	mov	r1, r9
 8006d5c:	f7f9 fb18 	bl	8000390 <__aeabi_uldivmod>
 8006d60:	4602      	mov	r2, r0
 8006d62:	460b      	mov	r3, r1
 8006d64:	4613      	mov	r3, r2
 8006d66:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d6e:	d308      	bcc.n	8006d82 <UART_SetConfig+0x79a>
 8006d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d76:	d204      	bcs.n	8006d82 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d7e:	60da      	str	r2, [r3, #12]
 8006d80:	e17c      	b.n	800707c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006d88:	e178      	b.n	800707c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	69db      	ldr	r3, [r3, #28]
 8006d8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d92:	f040 80c5 	bne.w	8006f20 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006d96:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006d9a:	2b20      	cmp	r3, #32
 8006d9c:	dc48      	bgt.n	8006e30 <UART_SetConfig+0x848>
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	db7b      	blt.n	8006e9a <UART_SetConfig+0x8b2>
 8006da2:	2b20      	cmp	r3, #32
 8006da4:	d879      	bhi.n	8006e9a <UART_SetConfig+0x8b2>
 8006da6:	a201      	add	r2, pc, #4	; (adr r2, 8006dac <UART_SetConfig+0x7c4>)
 8006da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dac:	08006e37 	.word	0x08006e37
 8006db0:	08006e3f 	.word	0x08006e3f
 8006db4:	08006e9b 	.word	0x08006e9b
 8006db8:	08006e9b 	.word	0x08006e9b
 8006dbc:	08006e47 	.word	0x08006e47
 8006dc0:	08006e9b 	.word	0x08006e9b
 8006dc4:	08006e9b 	.word	0x08006e9b
 8006dc8:	08006e9b 	.word	0x08006e9b
 8006dcc:	08006e57 	.word	0x08006e57
 8006dd0:	08006e9b 	.word	0x08006e9b
 8006dd4:	08006e9b 	.word	0x08006e9b
 8006dd8:	08006e9b 	.word	0x08006e9b
 8006ddc:	08006e9b 	.word	0x08006e9b
 8006de0:	08006e9b 	.word	0x08006e9b
 8006de4:	08006e9b 	.word	0x08006e9b
 8006de8:	08006e9b 	.word	0x08006e9b
 8006dec:	08006e67 	.word	0x08006e67
 8006df0:	08006e9b 	.word	0x08006e9b
 8006df4:	08006e9b 	.word	0x08006e9b
 8006df8:	08006e9b 	.word	0x08006e9b
 8006dfc:	08006e9b 	.word	0x08006e9b
 8006e00:	08006e9b 	.word	0x08006e9b
 8006e04:	08006e9b 	.word	0x08006e9b
 8006e08:	08006e9b 	.word	0x08006e9b
 8006e0c:	08006e9b 	.word	0x08006e9b
 8006e10:	08006e9b 	.word	0x08006e9b
 8006e14:	08006e9b 	.word	0x08006e9b
 8006e18:	08006e9b 	.word	0x08006e9b
 8006e1c:	08006e9b 	.word	0x08006e9b
 8006e20:	08006e9b 	.word	0x08006e9b
 8006e24:	08006e9b 	.word	0x08006e9b
 8006e28:	08006e9b 	.word	0x08006e9b
 8006e2c:	08006e8d 	.word	0x08006e8d
 8006e30:	2b40      	cmp	r3, #64	; 0x40
 8006e32:	d02e      	beq.n	8006e92 <UART_SetConfig+0x8aa>
 8006e34:	e031      	b.n	8006e9a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e36:	f7fd f915 	bl	8004064 <HAL_RCC_GetPCLK1Freq>
 8006e3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006e3c:	e033      	b.n	8006ea6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e3e:	f7fd f927 	bl	8004090 <HAL_RCC_GetPCLK2Freq>
 8006e42:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006e44:	e02f      	b.n	8006ea6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7fe fb56 	bl	80054fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e54:	e027      	b.n	8006ea6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e56:	f107 0318 	add.w	r3, r7, #24
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7fe fca2 	bl	80057a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e64:	e01f      	b.n	8006ea6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e66:	4b2d      	ldr	r3, [pc, #180]	; (8006f1c <UART_SetConfig+0x934>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 0320 	and.w	r3, r3, #32
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d009      	beq.n	8006e86 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006e72:	4b2a      	ldr	r3, [pc, #168]	; (8006f1c <UART_SetConfig+0x934>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	08db      	lsrs	r3, r3, #3
 8006e78:	f003 0303 	and.w	r3, r3, #3
 8006e7c:	4a24      	ldr	r2, [pc, #144]	; (8006f10 <UART_SetConfig+0x928>)
 8006e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006e84:	e00f      	b.n	8006ea6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006e86:	4b22      	ldr	r3, [pc, #136]	; (8006f10 <UART_SetConfig+0x928>)
 8006e88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e8a:	e00c      	b.n	8006ea6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006e8c:	4b21      	ldr	r3, [pc, #132]	; (8006f14 <UART_SetConfig+0x92c>)
 8006e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e90:	e009      	b.n	8006ea6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e98:	e005      	b.n	8006ea6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006ea4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	f000 80e7 	beq.w	800707c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb2:	4a19      	ldr	r2, [pc, #100]	; (8006f18 <UART_SetConfig+0x930>)
 8006eb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006eb8:	461a      	mov	r2, r3
 8006eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ebc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ec0:	005a      	lsls	r2, r3, #1
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	085b      	lsrs	r3, r3, #1
 8006ec8:	441a      	add	r2, r3
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ed2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed6:	2b0f      	cmp	r3, #15
 8006ed8:	d916      	bls.n	8006f08 <UART_SetConfig+0x920>
 8006eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ee0:	d212      	bcs.n	8006f08 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	f023 030f 	bic.w	r3, r3, #15
 8006eea:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eee:	085b      	lsrs	r3, r3, #1
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	f003 0307 	and.w	r3, r3, #7
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006efa:	4313      	orrs	r3, r2
 8006efc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006f04:	60da      	str	r2, [r3, #12]
 8006f06:	e0b9      	b.n	800707c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006f0e:	e0b5      	b.n	800707c <UART_SetConfig+0xa94>
 8006f10:	03d09000 	.word	0x03d09000
 8006f14:	003d0900 	.word	0x003d0900
 8006f18:	0800b808 	.word	0x0800b808
 8006f1c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f20:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006f24:	2b20      	cmp	r3, #32
 8006f26:	dc49      	bgt.n	8006fbc <UART_SetConfig+0x9d4>
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	db7c      	blt.n	8007026 <UART_SetConfig+0xa3e>
 8006f2c:	2b20      	cmp	r3, #32
 8006f2e:	d87a      	bhi.n	8007026 <UART_SetConfig+0xa3e>
 8006f30:	a201      	add	r2, pc, #4	; (adr r2, 8006f38 <UART_SetConfig+0x950>)
 8006f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f36:	bf00      	nop
 8006f38:	08006fc3 	.word	0x08006fc3
 8006f3c:	08006fcb 	.word	0x08006fcb
 8006f40:	08007027 	.word	0x08007027
 8006f44:	08007027 	.word	0x08007027
 8006f48:	08006fd3 	.word	0x08006fd3
 8006f4c:	08007027 	.word	0x08007027
 8006f50:	08007027 	.word	0x08007027
 8006f54:	08007027 	.word	0x08007027
 8006f58:	08006fe3 	.word	0x08006fe3
 8006f5c:	08007027 	.word	0x08007027
 8006f60:	08007027 	.word	0x08007027
 8006f64:	08007027 	.word	0x08007027
 8006f68:	08007027 	.word	0x08007027
 8006f6c:	08007027 	.word	0x08007027
 8006f70:	08007027 	.word	0x08007027
 8006f74:	08007027 	.word	0x08007027
 8006f78:	08006ff3 	.word	0x08006ff3
 8006f7c:	08007027 	.word	0x08007027
 8006f80:	08007027 	.word	0x08007027
 8006f84:	08007027 	.word	0x08007027
 8006f88:	08007027 	.word	0x08007027
 8006f8c:	08007027 	.word	0x08007027
 8006f90:	08007027 	.word	0x08007027
 8006f94:	08007027 	.word	0x08007027
 8006f98:	08007027 	.word	0x08007027
 8006f9c:	08007027 	.word	0x08007027
 8006fa0:	08007027 	.word	0x08007027
 8006fa4:	08007027 	.word	0x08007027
 8006fa8:	08007027 	.word	0x08007027
 8006fac:	08007027 	.word	0x08007027
 8006fb0:	08007027 	.word	0x08007027
 8006fb4:	08007027 	.word	0x08007027
 8006fb8:	08007019 	.word	0x08007019
 8006fbc:	2b40      	cmp	r3, #64	; 0x40
 8006fbe:	d02e      	beq.n	800701e <UART_SetConfig+0xa36>
 8006fc0:	e031      	b.n	8007026 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fc2:	f7fd f84f 	bl	8004064 <HAL_RCC_GetPCLK1Freq>
 8006fc6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006fc8:	e033      	b.n	8007032 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fca:	f7fd f861 	bl	8004090 <HAL_RCC_GetPCLK2Freq>
 8006fce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006fd0:	e02f      	b.n	8007032 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7fe fa90 	bl	80054fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fe0:	e027      	b.n	8007032 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fe2:	f107 0318 	add.w	r3, r7, #24
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7fe fbdc 	bl	80057a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ff0:	e01f      	b.n	8007032 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ff2:	4b2d      	ldr	r3, [pc, #180]	; (80070a8 <UART_SetConfig+0xac0>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 0320 	and.w	r3, r3, #32
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d009      	beq.n	8007012 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006ffe:	4b2a      	ldr	r3, [pc, #168]	; (80070a8 <UART_SetConfig+0xac0>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	08db      	lsrs	r3, r3, #3
 8007004:	f003 0303 	and.w	r3, r3, #3
 8007008:	4a28      	ldr	r2, [pc, #160]	; (80070ac <UART_SetConfig+0xac4>)
 800700a:	fa22 f303 	lsr.w	r3, r2, r3
 800700e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007010:	e00f      	b.n	8007032 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007012:	4b26      	ldr	r3, [pc, #152]	; (80070ac <UART_SetConfig+0xac4>)
 8007014:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007016:	e00c      	b.n	8007032 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007018:	4b25      	ldr	r3, [pc, #148]	; (80070b0 <UART_SetConfig+0xac8>)
 800701a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800701c:	e009      	b.n	8007032 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800701e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007022:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007024:	e005      	b.n	8007032 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007026:	2300      	movs	r3, #0
 8007028:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007030:	bf00      	nop
    }

    if (pclk != 0U)
 8007032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007034:	2b00      	cmp	r3, #0
 8007036:	d021      	beq.n	800707c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703c:	4a1d      	ldr	r2, [pc, #116]	; (80070b4 <UART_SetConfig+0xacc>)
 800703e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007042:	461a      	mov	r2, r3
 8007044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007046:	fbb3 f2f2 	udiv	r2, r3, r2
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	085b      	lsrs	r3, r3, #1
 8007050:	441a      	add	r2, r3
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	fbb2 f3f3 	udiv	r3, r2, r3
 800705a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800705c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705e:	2b0f      	cmp	r3, #15
 8007060:	d909      	bls.n	8007076 <UART_SetConfig+0xa8e>
 8007062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007068:	d205      	bcs.n	8007076 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800706a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706c:	b29a      	uxth	r2, r3
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	60da      	str	r2, [r3, #12]
 8007074:	e002      	b.n	800707c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	2201      	movs	r2, #1
 8007080:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	2201      	movs	r2, #1
 8007088:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	2200      	movs	r2, #0
 8007090:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	2200      	movs	r2, #0
 8007096:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007098:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800709c:	4618      	mov	r0, r3
 800709e:	3748      	adds	r7, #72	; 0x48
 80070a0:	46bd      	mov	sp, r7
 80070a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070a6:	bf00      	nop
 80070a8:	58024400 	.word	0x58024400
 80070ac:	03d09000 	.word	0x03d09000
 80070b0:	003d0900 	.word	0x003d0900
 80070b4:	0800b808 	.word	0x0800b808

080070b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c4:	f003 0301 	and.w	r3, r3, #1
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d00a      	beq.n	80070e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	430a      	orrs	r2, r1
 80070e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e6:	f003 0302 	and.w	r3, r3, #2
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00a      	beq.n	8007104 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	430a      	orrs	r2, r1
 8007102:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007108:	f003 0304 	and.w	r3, r3, #4
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00a      	beq.n	8007126 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	430a      	orrs	r2, r1
 8007124:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800712a:	f003 0308 	and.w	r3, r3, #8
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00a      	beq.n	8007148 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	430a      	orrs	r2, r1
 8007146:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800714c:	f003 0310 	and.w	r3, r3, #16
 8007150:	2b00      	cmp	r3, #0
 8007152:	d00a      	beq.n	800716a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	430a      	orrs	r2, r1
 8007168:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800716e:	f003 0320 	and.w	r3, r3, #32
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00a      	beq.n	800718c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	430a      	orrs	r2, r1
 800718a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007194:	2b00      	cmp	r3, #0
 8007196:	d01a      	beq.n	80071ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	430a      	orrs	r2, r1
 80071ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071b6:	d10a      	bne.n	80071ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	430a      	orrs	r2, r1
 80071cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00a      	beq.n	80071f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	430a      	orrs	r2, r1
 80071ee:	605a      	str	r2, [r3, #4]
  }
}
 80071f0:	bf00      	nop
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b098      	sub	sp, #96	; 0x60
 8007200:	af02      	add	r7, sp, #8
 8007202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800720c:	f7fa fc86 	bl	8001b1c <HAL_GetTick>
 8007210:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 0308 	and.w	r3, r3, #8
 800721c:	2b08      	cmp	r3, #8
 800721e:	d12f      	bne.n	8007280 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007220:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007224:	9300      	str	r3, [sp, #0]
 8007226:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007228:	2200      	movs	r2, #0
 800722a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f88e 	bl	8007350 <UART_WaitOnFlagUntilTimeout>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d022      	beq.n	8007280 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007242:	e853 3f00 	ldrex	r3, [r3]
 8007246:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800724a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800724e:	653b      	str	r3, [r7, #80]	; 0x50
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	461a      	mov	r2, r3
 8007256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007258:	647b      	str	r3, [r7, #68]	; 0x44
 800725a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800725e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007260:	e841 2300 	strex	r3, r2, [r1]
 8007264:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007268:	2b00      	cmp	r3, #0
 800726a:	d1e6      	bne.n	800723a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2220      	movs	r2, #32
 8007270:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800727c:	2303      	movs	r3, #3
 800727e:	e063      	b.n	8007348 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 0304 	and.w	r3, r3, #4
 800728a:	2b04      	cmp	r3, #4
 800728c:	d149      	bne.n	8007322 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800728e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007292:	9300      	str	r3, [sp, #0]
 8007294:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007296:	2200      	movs	r2, #0
 8007298:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 f857 	bl	8007350 <UART_WaitOnFlagUntilTimeout>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d03c      	beq.n	8007322 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b0:	e853 3f00 	ldrex	r3, [r3]
 80072b4:	623b      	str	r3, [r7, #32]
   return(result);
 80072b6:	6a3b      	ldr	r3, [r7, #32]
 80072b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	461a      	mov	r2, r3
 80072c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072c6:	633b      	str	r3, [r7, #48]	; 0x30
 80072c8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072ce:	e841 2300 	strex	r3, r2, [r1]
 80072d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80072d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1e6      	bne.n	80072a8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	3308      	adds	r3, #8
 80072e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	e853 3f00 	ldrex	r3, [r3]
 80072e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f023 0301 	bic.w	r3, r3, #1
 80072f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	3308      	adds	r3, #8
 80072f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072fa:	61fa      	str	r2, [r7, #28]
 80072fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fe:	69b9      	ldr	r1, [r7, #24]
 8007300:	69fa      	ldr	r2, [r7, #28]
 8007302:	e841 2300 	strex	r3, r2, [r1]
 8007306:	617b      	str	r3, [r7, #20]
   return(result);
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d1e5      	bne.n	80072da <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2220      	movs	r2, #32
 8007312:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800731e:	2303      	movs	r3, #3
 8007320:	e012      	b.n	8007348 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2220      	movs	r2, #32
 8007326:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2220      	movs	r2, #32
 800732e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007346:	2300      	movs	r3, #0
}
 8007348:	4618      	mov	r0, r3
 800734a:	3758      	adds	r7, #88	; 0x58
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	603b      	str	r3, [r7, #0]
 800735c:	4613      	mov	r3, r2
 800735e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007360:	e049      	b.n	80073f6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007368:	d045      	beq.n	80073f6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800736a:	f7fa fbd7 	bl	8001b1c <HAL_GetTick>
 800736e:	4602      	mov	r2, r0
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	1ad3      	subs	r3, r2, r3
 8007374:	69ba      	ldr	r2, [r7, #24]
 8007376:	429a      	cmp	r2, r3
 8007378:	d302      	bcc.n	8007380 <UART_WaitOnFlagUntilTimeout+0x30>
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d101      	bne.n	8007384 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007380:	2303      	movs	r3, #3
 8007382:	e048      	b.n	8007416 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f003 0304 	and.w	r3, r3, #4
 800738e:	2b00      	cmp	r3, #0
 8007390:	d031      	beq.n	80073f6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	69db      	ldr	r3, [r3, #28]
 8007398:	f003 0308 	and.w	r3, r3, #8
 800739c:	2b08      	cmp	r3, #8
 800739e:	d110      	bne.n	80073c2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2208      	movs	r2, #8
 80073a6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f000 f839 	bl	8007420 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2208      	movs	r2, #8
 80073b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	e029      	b.n	8007416 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	69db      	ldr	r3, [r3, #28]
 80073c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073d0:	d111      	bne.n	80073f6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80073dc:	68f8      	ldr	r0, [r7, #12]
 80073de:	f000 f81f 	bl	8007420 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2220      	movs	r2, #32
 80073e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80073f2:	2303      	movs	r3, #3
 80073f4:	e00f      	b.n	8007416 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	69da      	ldr	r2, [r3, #28]
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	4013      	ands	r3, r2
 8007400:	68ba      	ldr	r2, [r7, #8]
 8007402:	429a      	cmp	r2, r3
 8007404:	bf0c      	ite	eq
 8007406:	2301      	moveq	r3, #1
 8007408:	2300      	movne	r3, #0
 800740a:	b2db      	uxtb	r3, r3
 800740c:	461a      	mov	r2, r3
 800740e:	79fb      	ldrb	r3, [r7, #7]
 8007410:	429a      	cmp	r2, r3
 8007412:	d0a6      	beq.n	8007362 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3710      	adds	r7, #16
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
	...

08007420 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007420:	b480      	push	{r7}
 8007422:	b095      	sub	sp, #84	; 0x54
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007430:	e853 3f00 	ldrex	r3, [r3]
 8007434:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007438:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800743c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	461a      	mov	r2, r3
 8007444:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007446:	643b      	str	r3, [r7, #64]	; 0x40
 8007448:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800744c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800744e:	e841 2300 	strex	r3, r2, [r1]
 8007452:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007456:	2b00      	cmp	r3, #0
 8007458:	d1e6      	bne.n	8007428 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	3308      	adds	r3, #8
 8007460:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007462:	6a3b      	ldr	r3, [r7, #32]
 8007464:	e853 3f00 	ldrex	r3, [r3]
 8007468:	61fb      	str	r3, [r7, #28]
   return(result);
 800746a:	69fa      	ldr	r2, [r7, #28]
 800746c:	4b1e      	ldr	r3, [pc, #120]	; (80074e8 <UART_EndRxTransfer+0xc8>)
 800746e:	4013      	ands	r3, r2
 8007470:	64bb      	str	r3, [r7, #72]	; 0x48
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	3308      	adds	r3, #8
 8007478:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800747a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800747c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007480:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007482:	e841 2300 	strex	r3, r2, [r1]
 8007486:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748a:	2b00      	cmp	r3, #0
 800748c:	d1e5      	bne.n	800745a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007492:	2b01      	cmp	r3, #1
 8007494:	d118      	bne.n	80074c8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	e853 3f00 	ldrex	r3, [r3]
 80074a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	f023 0310 	bic.w	r3, r3, #16
 80074aa:	647b      	str	r3, [r7, #68]	; 0x44
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	461a      	mov	r2, r3
 80074b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074b4:	61bb      	str	r3, [r7, #24]
 80074b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b8:	6979      	ldr	r1, [r7, #20]
 80074ba:	69ba      	ldr	r2, [r7, #24]
 80074bc:	e841 2300 	strex	r3, r2, [r1]
 80074c0:	613b      	str	r3, [r7, #16]
   return(result);
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d1e6      	bne.n	8007496 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2220      	movs	r2, #32
 80074cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	675a      	str	r2, [r3, #116]	; 0x74
}
 80074dc:	bf00      	nop
 80074de:	3754      	adds	r7, #84	; 0x54
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr
 80074e8:	effffffe 	.word	0xeffffffe

080074ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b085      	sub	sp, #20
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d101      	bne.n	8007502 <HAL_UARTEx_DisableFifoMode+0x16>
 80074fe:	2302      	movs	r3, #2
 8007500:	e027      	b.n	8007552 <HAL_UARTEx_DisableFifoMode+0x66>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2201      	movs	r2, #1
 8007506:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2224      	movs	r2, #36	; 0x24
 800750e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f022 0201 	bic.w	r2, r2, #1
 8007528:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007530:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2220      	movs	r2, #32
 8007544:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007550:	2300      	movs	r3, #0
}
 8007552:	4618      	mov	r0, r3
 8007554:	3714      	adds	r7, #20
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr

0800755e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800755e:	b580      	push	{r7, lr}
 8007560:	b084      	sub	sp, #16
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
 8007566:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800756e:	2b01      	cmp	r3, #1
 8007570:	d101      	bne.n	8007576 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007572:	2302      	movs	r3, #2
 8007574:	e02d      	b.n	80075d2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2201      	movs	r2, #1
 800757a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2224      	movs	r2, #36	; 0x24
 8007582:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f022 0201 	bic.w	r2, r2, #1
 800759c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	683a      	ldr	r2, [r7, #0]
 80075ae:	430a      	orrs	r2, r1
 80075b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 f850 	bl	8007658 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2220      	movs	r2, #32
 80075c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3710      	adds	r7, #16
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b084      	sub	sp, #16
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
 80075e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d101      	bne.n	80075f2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80075ee:	2302      	movs	r3, #2
 80075f0:	e02d      	b.n	800764e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2201      	movs	r2, #1
 80075f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2224      	movs	r2, #36	; 0x24
 80075fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f022 0201 	bic.w	r2, r2, #1
 8007618:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	683a      	ldr	r2, [r7, #0]
 800762a:	430a      	orrs	r2, r1
 800762c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 f812 	bl	8007658 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	68fa      	ldr	r2, [r7, #12]
 800763a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2220      	movs	r2, #32
 8007640:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
	...

08007658 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007658:	b480      	push	{r7}
 800765a:	b085      	sub	sp, #20
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007664:	2b00      	cmp	r3, #0
 8007666:	d108      	bne.n	800767a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2201      	movs	r2, #1
 800766c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2201      	movs	r2, #1
 8007674:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007678:	e031      	b.n	80076de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800767a:	2310      	movs	r3, #16
 800767c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800767e:	2310      	movs	r3, #16
 8007680:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	0e5b      	lsrs	r3, r3, #25
 800768a:	b2db      	uxtb	r3, r3
 800768c:	f003 0307 	and.w	r3, r3, #7
 8007690:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	0f5b      	lsrs	r3, r3, #29
 800769a:	b2db      	uxtb	r3, r3
 800769c:	f003 0307 	and.w	r3, r3, #7
 80076a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80076a2:	7bbb      	ldrb	r3, [r7, #14]
 80076a4:	7b3a      	ldrb	r2, [r7, #12]
 80076a6:	4911      	ldr	r1, [pc, #68]	; (80076ec <UARTEx_SetNbDataToProcess+0x94>)
 80076a8:	5c8a      	ldrb	r2, [r1, r2]
 80076aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80076ae:	7b3a      	ldrb	r2, [r7, #12]
 80076b0:	490f      	ldr	r1, [pc, #60]	; (80076f0 <UARTEx_SetNbDataToProcess+0x98>)
 80076b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80076b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80076b8:	b29a      	uxth	r2, r3
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80076c0:	7bfb      	ldrb	r3, [r7, #15]
 80076c2:	7b7a      	ldrb	r2, [r7, #13]
 80076c4:	4909      	ldr	r1, [pc, #36]	; (80076ec <UARTEx_SetNbDataToProcess+0x94>)
 80076c6:	5c8a      	ldrb	r2, [r1, r2]
 80076c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80076cc:	7b7a      	ldrb	r2, [r7, #13]
 80076ce:	4908      	ldr	r1, [pc, #32]	; (80076f0 <UARTEx_SetNbDataToProcess+0x98>)
 80076d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80076d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80076de:	bf00      	nop
 80076e0:	3714      	adds	r7, #20
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	0800b820 	.word	0x0800b820
 80076f0:	0800b828 	.word	0x0800b828

080076f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80076f4:	b084      	sub	sp, #16
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b084      	sub	sp, #16
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
 80076fe:	f107 001c 	add.w	r0, r7, #28
 8007702:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007708:	2b01      	cmp	r3, #1
 800770a:	d120      	bne.n	800774e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007710:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	68da      	ldr	r2, [r3, #12]
 800771c:	4b2a      	ldr	r3, [pc, #168]	; (80077c8 <USB_CoreInit+0xd4>)
 800771e:	4013      	ands	r3, r2
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007732:	2b01      	cmp	r3, #1
 8007734:	d105      	bne.n	8007742 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 faac 	bl	8007ca0 <USB_CoreReset>
 8007748:	4603      	mov	r3, r0
 800774a:	73fb      	strb	r3, [r7, #15]
 800774c:	e01a      	b.n	8007784 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 faa0 	bl	8007ca0 <USB_CoreReset>
 8007760:	4603      	mov	r3, r0
 8007762:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007766:	2b00      	cmp	r3, #0
 8007768:	d106      	bne.n	8007778 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800776e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	639a      	str	r2, [r3, #56]	; 0x38
 8007776:	e005      	b.n	8007784 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800777c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007786:	2b01      	cmp	r3, #1
 8007788:	d116      	bne.n	80077b8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800778e:	b29a      	uxth	r2, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007798:	4b0c      	ldr	r3, [pc, #48]	; (80077cc <USB_CoreInit+0xd8>)
 800779a:	4313      	orrs	r3, r2
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	f043 0206 	orr.w	r2, r3, #6
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	f043 0220 	orr.w	r2, r3, #32
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80077b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80077c4:	b004      	add	sp, #16
 80077c6:	4770      	bx	lr
 80077c8:	ffbdffbf 	.word	0xffbdffbf
 80077cc:	03ee0000 	.word	0x03ee0000

080077d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	f023 0201 	bic.w	r2, r3, #1
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	370c      	adds	r7, #12
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr

080077f2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b084      	sub	sp, #16
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
 80077fa:	460b      	mov	r3, r1
 80077fc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80077fe:	2300      	movs	r3, #0
 8007800:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800780e:	78fb      	ldrb	r3, [r7, #3]
 8007810:	2b01      	cmp	r3, #1
 8007812:	d115      	bne.n	8007840 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007820:	2001      	movs	r0, #1
 8007822:	f7fa f987 	bl	8001b34 <HAL_Delay>
      ms++;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	3301      	adds	r3, #1
 800782a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 fa29 	bl	8007c84 <USB_GetMode>
 8007832:	4603      	mov	r3, r0
 8007834:	2b01      	cmp	r3, #1
 8007836:	d01e      	beq.n	8007876 <USB_SetCurrentMode+0x84>
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2b31      	cmp	r3, #49	; 0x31
 800783c:	d9f0      	bls.n	8007820 <USB_SetCurrentMode+0x2e>
 800783e:	e01a      	b.n	8007876 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007840:	78fb      	ldrb	r3, [r7, #3]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d115      	bne.n	8007872 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007852:	2001      	movs	r0, #1
 8007854:	f7fa f96e 	bl	8001b34 <HAL_Delay>
      ms++;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	3301      	adds	r3, #1
 800785c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 fa10 	bl	8007c84 <USB_GetMode>
 8007864:	4603      	mov	r3, r0
 8007866:	2b00      	cmp	r3, #0
 8007868:	d005      	beq.n	8007876 <USB_SetCurrentMode+0x84>
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2b31      	cmp	r3, #49	; 0x31
 800786e:	d9f0      	bls.n	8007852 <USB_SetCurrentMode+0x60>
 8007870:	e001      	b.n	8007876 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	e005      	b.n	8007882 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2b32      	cmp	r3, #50	; 0x32
 800787a:	d101      	bne.n	8007880 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	e000      	b.n	8007882 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3710      	adds	r7, #16
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
	...

0800788c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800788c:	b084      	sub	sp, #16
 800788e:	b580      	push	{r7, lr}
 8007890:	b086      	sub	sp, #24
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
 8007896:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800789a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800789e:	2300      	movs	r3, #0
 80078a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80078a6:	2300      	movs	r3, #0
 80078a8:	613b      	str	r3, [r7, #16]
 80078aa:	e009      	b.n	80078c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	3340      	adds	r3, #64	; 0x40
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	4413      	add	r3, r2
 80078b6:	2200      	movs	r2, #0
 80078b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	3301      	adds	r3, #1
 80078be:	613b      	str	r3, [r7, #16]
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	2b0e      	cmp	r3, #14
 80078c4:	d9f2      	bls.n	80078ac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80078c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d11c      	bne.n	8007906 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	68fa      	ldr	r2, [r7, #12]
 80078d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078da:	f043 0302 	orr.w	r3, r3, #2
 80078de:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	601a      	str	r2, [r3, #0]
 8007904:	e005      	b.n	8007912 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800790a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007918:	461a      	mov	r2, r3
 800791a:	2300      	movs	r3, #0
 800791c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007924:	4619      	mov	r1, r3
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800792c:	461a      	mov	r2, r3
 800792e:	680b      	ldr	r3, [r1, #0]
 8007930:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007934:	2b01      	cmp	r3, #1
 8007936:	d10c      	bne.n	8007952 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793a:	2b00      	cmp	r3, #0
 800793c:	d104      	bne.n	8007948 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800793e:	2100      	movs	r1, #0
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 f965 	bl	8007c10 <USB_SetDevSpeed>
 8007946:	e008      	b.n	800795a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007948:	2101      	movs	r1, #1
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f960 	bl	8007c10 <USB_SetDevSpeed>
 8007950:	e003      	b.n	800795a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007952:	2103      	movs	r1, #3
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 f95b 	bl	8007c10 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800795a:	2110      	movs	r1, #16
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 f8f3 	bl	8007b48 <USB_FlushTxFifo>
 8007962:	4603      	mov	r3, r0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d001      	beq.n	800796c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007968:	2301      	movs	r3, #1
 800796a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 f91f 	bl	8007bb0 <USB_FlushRxFifo>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d001      	beq.n	800797c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007978:	2301      	movs	r3, #1
 800797a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007982:	461a      	mov	r2, r3
 8007984:	2300      	movs	r3, #0
 8007986:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800798e:	461a      	mov	r2, r3
 8007990:	2300      	movs	r3, #0
 8007992:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800799a:	461a      	mov	r2, r3
 800799c:	2300      	movs	r3, #0
 800799e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079a0:	2300      	movs	r3, #0
 80079a2:	613b      	str	r3, [r7, #16]
 80079a4:	e043      	b.n	8007a2e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	015a      	lsls	r2, r3, #5
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	4413      	add	r3, r2
 80079ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079bc:	d118      	bne.n	80079f0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d10a      	bne.n	80079da <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	015a      	lsls	r2, r3, #5
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	4413      	add	r3, r2
 80079cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079d0:	461a      	mov	r2, r3
 80079d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80079d6:	6013      	str	r3, [r2, #0]
 80079d8:	e013      	b.n	8007a02 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	015a      	lsls	r2, r3, #5
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	4413      	add	r3, r2
 80079e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079e6:	461a      	mov	r2, r3
 80079e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80079ec:	6013      	str	r3, [r2, #0]
 80079ee:	e008      	b.n	8007a02 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	015a      	lsls	r2, r3, #5
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	4413      	add	r3, r2
 80079f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079fc:	461a      	mov	r2, r3
 80079fe:	2300      	movs	r3, #0
 8007a00:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	015a      	lsls	r2, r3, #5
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	4413      	add	r3, r2
 8007a0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a0e:	461a      	mov	r2, r3
 8007a10:	2300      	movs	r3, #0
 8007a12:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	015a      	lsls	r2, r3, #5
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	4413      	add	r3, r2
 8007a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a20:	461a      	mov	r2, r3
 8007a22:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	613b      	str	r3, [r7, #16]
 8007a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a30:	693a      	ldr	r2, [r7, #16]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d3b7      	bcc.n	80079a6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a36:	2300      	movs	r3, #0
 8007a38:	613b      	str	r3, [r7, #16]
 8007a3a:	e043      	b.n	8007ac4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	015a      	lsls	r2, r3, #5
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	4413      	add	r3, r2
 8007a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a52:	d118      	bne.n	8007a86 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d10a      	bne.n	8007a70 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	015a      	lsls	r2, r3, #5
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	4413      	add	r3, r2
 8007a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a66:	461a      	mov	r2, r3
 8007a68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a6c:	6013      	str	r3, [r2, #0]
 8007a6e:	e013      	b.n	8007a98 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	015a      	lsls	r2, r3, #5
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	4413      	add	r3, r2
 8007a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007a82:	6013      	str	r3, [r2, #0]
 8007a84:	e008      	b.n	8007a98 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	015a      	lsls	r2, r3, #5
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a92:	461a      	mov	r2, r3
 8007a94:	2300      	movs	r3, #0
 8007a96:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	015a      	lsls	r2, r3, #5
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	015a      	lsls	r2, r3, #5
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	4413      	add	r3, r2
 8007ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007abc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	613b      	str	r3, [r7, #16]
 8007ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac6:	693a      	ldr	r2, [r7, #16]
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d3b7      	bcc.n	8007a3c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ad2:	691b      	ldr	r3, [r3, #16]
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ada:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ade:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007aec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d105      	bne.n	8007b00 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	699b      	ldr	r3, [r3, #24]
 8007af8:	f043 0210 	orr.w	r2, r3, #16
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	699a      	ldr	r2, [r3, #24]
 8007b04:	4b0e      	ldr	r3, [pc, #56]	; (8007b40 <USB_DevInit+0x2b4>)
 8007b06:	4313      	orrs	r3, r2
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d005      	beq.n	8007b1e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	699b      	ldr	r3, [r3, #24]
 8007b16:	f043 0208 	orr.w	r2, r3, #8
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007b1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d105      	bne.n	8007b30 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	699a      	ldr	r2, [r3, #24]
 8007b28:	4b06      	ldr	r3, [pc, #24]	; (8007b44 <USB_DevInit+0x2b8>)
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007b30:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3718      	adds	r7, #24
 8007b36:	46bd      	mov	sp, r7
 8007b38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b3c:	b004      	add	sp, #16
 8007b3e:	4770      	bx	lr
 8007b40:	803c3800 	.word	0x803c3800
 8007b44:	40000004 	.word	0x40000004

08007b48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b085      	sub	sp, #20
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007b52:	2300      	movs	r3, #0
 8007b54:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	3301      	adds	r3, #1
 8007b5a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	4a13      	ldr	r2, [pc, #76]	; (8007bac <USB_FlushTxFifo+0x64>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d901      	bls.n	8007b68 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007b64:	2303      	movs	r3, #3
 8007b66:	e01b      	b.n	8007ba0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	691b      	ldr	r3, [r3, #16]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	daf2      	bge.n	8007b56 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007b70:	2300      	movs	r3, #0
 8007b72:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	019b      	lsls	r3, r3, #6
 8007b78:	f043 0220 	orr.w	r2, r3, #32
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	3301      	adds	r3, #1
 8007b84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	4a08      	ldr	r2, [pc, #32]	; (8007bac <USB_FlushTxFifo+0x64>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d901      	bls.n	8007b92 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007b8e:	2303      	movs	r3, #3
 8007b90:	e006      	b.n	8007ba0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	f003 0320 	and.w	r3, r3, #32
 8007b9a:	2b20      	cmp	r3, #32
 8007b9c:	d0f0      	beq.n	8007b80 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007b9e:	2300      	movs	r3, #0
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3714      	adds	r7, #20
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr
 8007bac:	00030d40 	.word	0x00030d40

08007bb0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	4a11      	ldr	r2, [pc, #68]	; (8007c0c <USB_FlushRxFifo+0x5c>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d901      	bls.n	8007bce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007bca:	2303      	movs	r3, #3
 8007bcc:	e018      	b.n	8007c00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	daf2      	bge.n	8007bbc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2210      	movs	r2, #16
 8007bde:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	3301      	adds	r3, #1
 8007be4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	4a08      	ldr	r2, [pc, #32]	; (8007c0c <USB_FlushRxFifo+0x5c>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d901      	bls.n	8007bf2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007bee:	2303      	movs	r3, #3
 8007bf0:	e006      	b.n	8007c00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	691b      	ldr	r3, [r3, #16]
 8007bf6:	f003 0310 	and.w	r3, r3, #16
 8007bfa:	2b10      	cmp	r3, #16
 8007bfc:	d0f0      	beq.n	8007be0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3714      	adds	r7, #20
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr
 8007c0c:	00030d40 	.word	0x00030d40

08007c10 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b085      	sub	sp, #20
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	460b      	mov	r3, r1
 8007c1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	78fb      	ldrb	r3, [r7, #3]
 8007c2a:	68f9      	ldr	r1, [r7, #12]
 8007c2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c30:	4313      	orrs	r3, r2
 8007c32:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3714      	adds	r7, #20
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr

08007c42 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007c42:	b480      	push	{r7}
 8007c44:	b085      	sub	sp, #20
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007c5c:	f023 0303 	bic.w	r3, r3, #3
 8007c60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	68fa      	ldr	r2, [r7, #12]
 8007c6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c70:	f043 0302 	orr.w	r3, r3, #2
 8007c74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c76:	2300      	movs	r3, #0
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3714      	adds	r7, #20
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	695b      	ldr	r3, [r3, #20]
 8007c90:	f003 0301 	and.w	r3, r3, #1
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b085      	sub	sp, #20
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	4a13      	ldr	r2, [pc, #76]	; (8007d04 <USB_CoreReset+0x64>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d901      	bls.n	8007cbe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007cba:	2303      	movs	r3, #3
 8007cbc:	e01b      	b.n	8007cf6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	691b      	ldr	r3, [r3, #16]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	daf2      	bge.n	8007cac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	f043 0201 	orr.w	r2, r3, #1
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	3301      	adds	r3, #1
 8007cda:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	4a09      	ldr	r2, [pc, #36]	; (8007d04 <USB_CoreReset+0x64>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d901      	bls.n	8007ce8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007ce4:	2303      	movs	r3, #3
 8007ce6:	e006      	b.n	8007cf6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	f003 0301 	and.w	r3, r3, #1
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d0f0      	beq.n	8007cd6 <USB_CoreReset+0x36>

  return HAL_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3714      	adds	r7, #20
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr
 8007d02:	bf00      	nop
 8007d04:	00030d40 	.word	0x00030d40

08007d08 <__cvt>:
 8007d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d0a:	ed2d 8b02 	vpush	{d8}
 8007d0e:	eeb0 8b40 	vmov.f64	d8, d0
 8007d12:	b085      	sub	sp, #20
 8007d14:	4617      	mov	r7, r2
 8007d16:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007d18:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007d1a:	ee18 2a90 	vmov	r2, s17
 8007d1e:	f025 0520 	bic.w	r5, r5, #32
 8007d22:	2a00      	cmp	r2, #0
 8007d24:	bfb6      	itet	lt
 8007d26:	222d      	movlt	r2, #45	; 0x2d
 8007d28:	2200      	movge	r2, #0
 8007d2a:	eeb1 8b40 	vneglt.f64	d8, d0
 8007d2e:	2d46      	cmp	r5, #70	; 0x46
 8007d30:	460c      	mov	r4, r1
 8007d32:	701a      	strb	r2, [r3, #0]
 8007d34:	d004      	beq.n	8007d40 <__cvt+0x38>
 8007d36:	2d45      	cmp	r5, #69	; 0x45
 8007d38:	d100      	bne.n	8007d3c <__cvt+0x34>
 8007d3a:	3401      	adds	r4, #1
 8007d3c:	2102      	movs	r1, #2
 8007d3e:	e000      	b.n	8007d42 <__cvt+0x3a>
 8007d40:	2103      	movs	r1, #3
 8007d42:	ab03      	add	r3, sp, #12
 8007d44:	9301      	str	r3, [sp, #4]
 8007d46:	ab02      	add	r3, sp, #8
 8007d48:	9300      	str	r3, [sp, #0]
 8007d4a:	4622      	mov	r2, r4
 8007d4c:	4633      	mov	r3, r6
 8007d4e:	eeb0 0b48 	vmov.f64	d0, d8
 8007d52:	f000 fe41 	bl	80089d8 <_dtoa_r>
 8007d56:	2d47      	cmp	r5, #71	; 0x47
 8007d58:	d101      	bne.n	8007d5e <__cvt+0x56>
 8007d5a:	07fb      	lsls	r3, r7, #31
 8007d5c:	d51a      	bpl.n	8007d94 <__cvt+0x8c>
 8007d5e:	2d46      	cmp	r5, #70	; 0x46
 8007d60:	eb00 0204 	add.w	r2, r0, r4
 8007d64:	d10c      	bne.n	8007d80 <__cvt+0x78>
 8007d66:	7803      	ldrb	r3, [r0, #0]
 8007d68:	2b30      	cmp	r3, #48	; 0x30
 8007d6a:	d107      	bne.n	8007d7c <__cvt+0x74>
 8007d6c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d74:	bf1c      	itt	ne
 8007d76:	f1c4 0401 	rsbne	r4, r4, #1
 8007d7a:	6034      	strne	r4, [r6, #0]
 8007d7c:	6833      	ldr	r3, [r6, #0]
 8007d7e:	441a      	add	r2, r3
 8007d80:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d88:	bf08      	it	eq
 8007d8a:	9203      	streq	r2, [sp, #12]
 8007d8c:	2130      	movs	r1, #48	; 0x30
 8007d8e:	9b03      	ldr	r3, [sp, #12]
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d307      	bcc.n	8007da4 <__cvt+0x9c>
 8007d94:	9b03      	ldr	r3, [sp, #12]
 8007d96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d98:	1a1b      	subs	r3, r3, r0
 8007d9a:	6013      	str	r3, [r2, #0]
 8007d9c:	b005      	add	sp, #20
 8007d9e:	ecbd 8b02 	vpop	{d8}
 8007da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007da4:	1c5c      	adds	r4, r3, #1
 8007da6:	9403      	str	r4, [sp, #12]
 8007da8:	7019      	strb	r1, [r3, #0]
 8007daa:	e7f0      	b.n	8007d8e <__cvt+0x86>

08007dac <__exponent>:
 8007dac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007dae:	4603      	mov	r3, r0
 8007db0:	2900      	cmp	r1, #0
 8007db2:	bfb8      	it	lt
 8007db4:	4249      	neglt	r1, r1
 8007db6:	f803 2b02 	strb.w	r2, [r3], #2
 8007dba:	bfb4      	ite	lt
 8007dbc:	222d      	movlt	r2, #45	; 0x2d
 8007dbe:	222b      	movge	r2, #43	; 0x2b
 8007dc0:	2909      	cmp	r1, #9
 8007dc2:	7042      	strb	r2, [r0, #1]
 8007dc4:	dd2a      	ble.n	8007e1c <__exponent+0x70>
 8007dc6:	f10d 0207 	add.w	r2, sp, #7
 8007dca:	4617      	mov	r7, r2
 8007dcc:	260a      	movs	r6, #10
 8007dce:	4694      	mov	ip, r2
 8007dd0:	fb91 f5f6 	sdiv	r5, r1, r6
 8007dd4:	fb06 1415 	mls	r4, r6, r5, r1
 8007dd8:	3430      	adds	r4, #48	; 0x30
 8007dda:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007dde:	460c      	mov	r4, r1
 8007de0:	2c63      	cmp	r4, #99	; 0x63
 8007de2:	f102 32ff 	add.w	r2, r2, #4294967295
 8007de6:	4629      	mov	r1, r5
 8007de8:	dcf1      	bgt.n	8007dce <__exponent+0x22>
 8007dea:	3130      	adds	r1, #48	; 0x30
 8007dec:	f1ac 0402 	sub.w	r4, ip, #2
 8007df0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007df4:	1c41      	adds	r1, r0, #1
 8007df6:	4622      	mov	r2, r4
 8007df8:	42ba      	cmp	r2, r7
 8007dfa:	d30a      	bcc.n	8007e12 <__exponent+0x66>
 8007dfc:	f10d 0209 	add.w	r2, sp, #9
 8007e00:	eba2 020c 	sub.w	r2, r2, ip
 8007e04:	42bc      	cmp	r4, r7
 8007e06:	bf88      	it	hi
 8007e08:	2200      	movhi	r2, #0
 8007e0a:	4413      	add	r3, r2
 8007e0c:	1a18      	subs	r0, r3, r0
 8007e0e:	b003      	add	sp, #12
 8007e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e12:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007e16:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007e1a:	e7ed      	b.n	8007df8 <__exponent+0x4c>
 8007e1c:	2330      	movs	r3, #48	; 0x30
 8007e1e:	3130      	adds	r1, #48	; 0x30
 8007e20:	7083      	strb	r3, [r0, #2]
 8007e22:	70c1      	strb	r1, [r0, #3]
 8007e24:	1d03      	adds	r3, r0, #4
 8007e26:	e7f1      	b.n	8007e0c <__exponent+0x60>

08007e28 <_printf_float>:
 8007e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e2c:	b08b      	sub	sp, #44	; 0x2c
 8007e2e:	460c      	mov	r4, r1
 8007e30:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8007e34:	4616      	mov	r6, r2
 8007e36:	461f      	mov	r7, r3
 8007e38:	4605      	mov	r5, r0
 8007e3a:	f000 fccd 	bl	80087d8 <_localeconv_r>
 8007e3e:	f8d0 b000 	ldr.w	fp, [r0]
 8007e42:	4658      	mov	r0, fp
 8007e44:	f7f8 fa9c 	bl	8000380 <strlen>
 8007e48:	2300      	movs	r3, #0
 8007e4a:	9308      	str	r3, [sp, #32]
 8007e4c:	f8d8 3000 	ldr.w	r3, [r8]
 8007e50:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007e54:	6822      	ldr	r2, [r4, #0]
 8007e56:	3307      	adds	r3, #7
 8007e58:	f023 0307 	bic.w	r3, r3, #7
 8007e5c:	f103 0108 	add.w	r1, r3, #8
 8007e60:	f8c8 1000 	str.w	r1, [r8]
 8007e64:	ed93 0b00 	vldr	d0, [r3]
 8007e68:	ed9f 6b97 	vldr	d6, [pc, #604]	; 80080c8 <_printf_float+0x2a0>
 8007e6c:	eeb0 7bc0 	vabs.f64	d7, d0
 8007e70:	eeb4 7b46 	vcmp.f64	d7, d6
 8007e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e78:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8007e7c:	4682      	mov	sl, r0
 8007e7e:	dd24      	ble.n	8007eca <_printf_float+0xa2>
 8007e80:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e88:	d502      	bpl.n	8007e90 <_printf_float+0x68>
 8007e8a:	232d      	movs	r3, #45	; 0x2d
 8007e8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e90:	498f      	ldr	r1, [pc, #572]	; (80080d0 <_printf_float+0x2a8>)
 8007e92:	4b90      	ldr	r3, [pc, #576]	; (80080d4 <_printf_float+0x2ac>)
 8007e94:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007e98:	bf94      	ite	ls
 8007e9a:	4688      	movls	r8, r1
 8007e9c:	4698      	movhi	r8, r3
 8007e9e:	2303      	movs	r3, #3
 8007ea0:	6123      	str	r3, [r4, #16]
 8007ea2:	f022 0204 	bic.w	r2, r2, #4
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	6022      	str	r2, [r4, #0]
 8007eaa:	9304      	str	r3, [sp, #16]
 8007eac:	9700      	str	r7, [sp, #0]
 8007eae:	4633      	mov	r3, r6
 8007eb0:	aa09      	add	r2, sp, #36	; 0x24
 8007eb2:	4621      	mov	r1, r4
 8007eb4:	4628      	mov	r0, r5
 8007eb6:	f000 f9d1 	bl	800825c <_printf_common>
 8007eba:	3001      	adds	r0, #1
 8007ebc:	f040 808a 	bne.w	8007fd4 <_printf_float+0x1ac>
 8007ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ec4:	b00b      	add	sp, #44	; 0x2c
 8007ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eca:	eeb4 0b40 	vcmp.f64	d0, d0
 8007ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ed2:	d709      	bvc.n	8007ee8 <_printf_float+0xc0>
 8007ed4:	ee10 3a90 	vmov	r3, s1
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	bfbc      	itt	lt
 8007edc:	232d      	movlt	r3, #45	; 0x2d
 8007ede:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007ee2:	497d      	ldr	r1, [pc, #500]	; (80080d8 <_printf_float+0x2b0>)
 8007ee4:	4b7d      	ldr	r3, [pc, #500]	; (80080dc <_printf_float+0x2b4>)
 8007ee6:	e7d5      	b.n	8007e94 <_printf_float+0x6c>
 8007ee8:	6863      	ldr	r3, [r4, #4]
 8007eea:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007eee:	9104      	str	r1, [sp, #16]
 8007ef0:	1c59      	adds	r1, r3, #1
 8007ef2:	d13c      	bne.n	8007f6e <_printf_float+0x146>
 8007ef4:	2306      	movs	r3, #6
 8007ef6:	6063      	str	r3, [r4, #4]
 8007ef8:	2300      	movs	r3, #0
 8007efa:	9303      	str	r3, [sp, #12]
 8007efc:	ab08      	add	r3, sp, #32
 8007efe:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007f02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007f06:	ab07      	add	r3, sp, #28
 8007f08:	6861      	ldr	r1, [r4, #4]
 8007f0a:	9300      	str	r3, [sp, #0]
 8007f0c:	6022      	str	r2, [r4, #0]
 8007f0e:	f10d 031b 	add.w	r3, sp, #27
 8007f12:	4628      	mov	r0, r5
 8007f14:	f7ff fef8 	bl	8007d08 <__cvt>
 8007f18:	9b04      	ldr	r3, [sp, #16]
 8007f1a:	9907      	ldr	r1, [sp, #28]
 8007f1c:	2b47      	cmp	r3, #71	; 0x47
 8007f1e:	4680      	mov	r8, r0
 8007f20:	d108      	bne.n	8007f34 <_printf_float+0x10c>
 8007f22:	1cc8      	adds	r0, r1, #3
 8007f24:	db02      	blt.n	8007f2c <_printf_float+0x104>
 8007f26:	6863      	ldr	r3, [r4, #4]
 8007f28:	4299      	cmp	r1, r3
 8007f2a:	dd41      	ble.n	8007fb0 <_printf_float+0x188>
 8007f2c:	f1a9 0902 	sub.w	r9, r9, #2
 8007f30:	fa5f f989 	uxtb.w	r9, r9
 8007f34:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007f38:	d820      	bhi.n	8007f7c <_printf_float+0x154>
 8007f3a:	3901      	subs	r1, #1
 8007f3c:	464a      	mov	r2, r9
 8007f3e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007f42:	9107      	str	r1, [sp, #28]
 8007f44:	f7ff ff32 	bl	8007dac <__exponent>
 8007f48:	9a08      	ldr	r2, [sp, #32]
 8007f4a:	9004      	str	r0, [sp, #16]
 8007f4c:	1813      	adds	r3, r2, r0
 8007f4e:	2a01      	cmp	r2, #1
 8007f50:	6123      	str	r3, [r4, #16]
 8007f52:	dc02      	bgt.n	8007f5a <_printf_float+0x132>
 8007f54:	6822      	ldr	r2, [r4, #0]
 8007f56:	07d2      	lsls	r2, r2, #31
 8007f58:	d501      	bpl.n	8007f5e <_printf_float+0x136>
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	6123      	str	r3, [r4, #16]
 8007f5e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d0a2      	beq.n	8007eac <_printf_float+0x84>
 8007f66:	232d      	movs	r3, #45	; 0x2d
 8007f68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f6c:	e79e      	b.n	8007eac <_printf_float+0x84>
 8007f6e:	9904      	ldr	r1, [sp, #16]
 8007f70:	2947      	cmp	r1, #71	; 0x47
 8007f72:	d1c1      	bne.n	8007ef8 <_printf_float+0xd0>
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d1bf      	bne.n	8007ef8 <_printf_float+0xd0>
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e7bc      	b.n	8007ef6 <_printf_float+0xce>
 8007f7c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007f80:	d118      	bne.n	8007fb4 <_printf_float+0x18c>
 8007f82:	2900      	cmp	r1, #0
 8007f84:	6863      	ldr	r3, [r4, #4]
 8007f86:	dd0b      	ble.n	8007fa0 <_printf_float+0x178>
 8007f88:	6121      	str	r1, [r4, #16]
 8007f8a:	b913      	cbnz	r3, 8007f92 <_printf_float+0x16a>
 8007f8c:	6822      	ldr	r2, [r4, #0]
 8007f8e:	07d0      	lsls	r0, r2, #31
 8007f90:	d502      	bpl.n	8007f98 <_printf_float+0x170>
 8007f92:	3301      	adds	r3, #1
 8007f94:	440b      	add	r3, r1
 8007f96:	6123      	str	r3, [r4, #16]
 8007f98:	2300      	movs	r3, #0
 8007f9a:	65a1      	str	r1, [r4, #88]	; 0x58
 8007f9c:	9304      	str	r3, [sp, #16]
 8007f9e:	e7de      	b.n	8007f5e <_printf_float+0x136>
 8007fa0:	b913      	cbnz	r3, 8007fa8 <_printf_float+0x180>
 8007fa2:	6822      	ldr	r2, [r4, #0]
 8007fa4:	07d2      	lsls	r2, r2, #31
 8007fa6:	d501      	bpl.n	8007fac <_printf_float+0x184>
 8007fa8:	3302      	adds	r3, #2
 8007faa:	e7f4      	b.n	8007f96 <_printf_float+0x16e>
 8007fac:	2301      	movs	r3, #1
 8007fae:	e7f2      	b.n	8007f96 <_printf_float+0x16e>
 8007fb0:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007fb4:	9b08      	ldr	r3, [sp, #32]
 8007fb6:	4299      	cmp	r1, r3
 8007fb8:	db05      	blt.n	8007fc6 <_printf_float+0x19e>
 8007fba:	6823      	ldr	r3, [r4, #0]
 8007fbc:	6121      	str	r1, [r4, #16]
 8007fbe:	07d8      	lsls	r0, r3, #31
 8007fc0:	d5ea      	bpl.n	8007f98 <_printf_float+0x170>
 8007fc2:	1c4b      	adds	r3, r1, #1
 8007fc4:	e7e7      	b.n	8007f96 <_printf_float+0x16e>
 8007fc6:	2900      	cmp	r1, #0
 8007fc8:	bfd4      	ite	le
 8007fca:	f1c1 0202 	rsble	r2, r1, #2
 8007fce:	2201      	movgt	r2, #1
 8007fd0:	4413      	add	r3, r2
 8007fd2:	e7e0      	b.n	8007f96 <_printf_float+0x16e>
 8007fd4:	6823      	ldr	r3, [r4, #0]
 8007fd6:	055a      	lsls	r2, r3, #21
 8007fd8:	d407      	bmi.n	8007fea <_printf_float+0x1c2>
 8007fda:	6923      	ldr	r3, [r4, #16]
 8007fdc:	4642      	mov	r2, r8
 8007fde:	4631      	mov	r1, r6
 8007fe0:	4628      	mov	r0, r5
 8007fe2:	47b8      	blx	r7
 8007fe4:	3001      	adds	r0, #1
 8007fe6:	d12a      	bne.n	800803e <_printf_float+0x216>
 8007fe8:	e76a      	b.n	8007ec0 <_printf_float+0x98>
 8007fea:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007fee:	f240 80e0 	bls.w	80081b2 <_printf_float+0x38a>
 8007ff2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007ff6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ffe:	d133      	bne.n	8008068 <_printf_float+0x240>
 8008000:	4a37      	ldr	r2, [pc, #220]	; (80080e0 <_printf_float+0x2b8>)
 8008002:	2301      	movs	r3, #1
 8008004:	4631      	mov	r1, r6
 8008006:	4628      	mov	r0, r5
 8008008:	47b8      	blx	r7
 800800a:	3001      	adds	r0, #1
 800800c:	f43f af58 	beq.w	8007ec0 <_printf_float+0x98>
 8008010:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008014:	429a      	cmp	r2, r3
 8008016:	db02      	blt.n	800801e <_printf_float+0x1f6>
 8008018:	6823      	ldr	r3, [r4, #0]
 800801a:	07d8      	lsls	r0, r3, #31
 800801c:	d50f      	bpl.n	800803e <_printf_float+0x216>
 800801e:	4653      	mov	r3, sl
 8008020:	465a      	mov	r2, fp
 8008022:	4631      	mov	r1, r6
 8008024:	4628      	mov	r0, r5
 8008026:	47b8      	blx	r7
 8008028:	3001      	adds	r0, #1
 800802a:	f43f af49 	beq.w	8007ec0 <_printf_float+0x98>
 800802e:	f04f 0800 	mov.w	r8, #0
 8008032:	f104 091a 	add.w	r9, r4, #26
 8008036:	9b08      	ldr	r3, [sp, #32]
 8008038:	3b01      	subs	r3, #1
 800803a:	4543      	cmp	r3, r8
 800803c:	dc09      	bgt.n	8008052 <_printf_float+0x22a>
 800803e:	6823      	ldr	r3, [r4, #0]
 8008040:	079b      	lsls	r3, r3, #30
 8008042:	f100 8106 	bmi.w	8008252 <_printf_float+0x42a>
 8008046:	68e0      	ldr	r0, [r4, #12]
 8008048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800804a:	4298      	cmp	r0, r3
 800804c:	bfb8      	it	lt
 800804e:	4618      	movlt	r0, r3
 8008050:	e738      	b.n	8007ec4 <_printf_float+0x9c>
 8008052:	2301      	movs	r3, #1
 8008054:	464a      	mov	r2, r9
 8008056:	4631      	mov	r1, r6
 8008058:	4628      	mov	r0, r5
 800805a:	47b8      	blx	r7
 800805c:	3001      	adds	r0, #1
 800805e:	f43f af2f 	beq.w	8007ec0 <_printf_float+0x98>
 8008062:	f108 0801 	add.w	r8, r8, #1
 8008066:	e7e6      	b.n	8008036 <_printf_float+0x20e>
 8008068:	9b07      	ldr	r3, [sp, #28]
 800806a:	2b00      	cmp	r3, #0
 800806c:	dc3a      	bgt.n	80080e4 <_printf_float+0x2bc>
 800806e:	4a1c      	ldr	r2, [pc, #112]	; (80080e0 <_printf_float+0x2b8>)
 8008070:	2301      	movs	r3, #1
 8008072:	4631      	mov	r1, r6
 8008074:	4628      	mov	r0, r5
 8008076:	47b8      	blx	r7
 8008078:	3001      	adds	r0, #1
 800807a:	f43f af21 	beq.w	8007ec0 <_printf_float+0x98>
 800807e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8008082:	4313      	orrs	r3, r2
 8008084:	d102      	bne.n	800808c <_printf_float+0x264>
 8008086:	6823      	ldr	r3, [r4, #0]
 8008088:	07d9      	lsls	r1, r3, #31
 800808a:	d5d8      	bpl.n	800803e <_printf_float+0x216>
 800808c:	4653      	mov	r3, sl
 800808e:	465a      	mov	r2, fp
 8008090:	4631      	mov	r1, r6
 8008092:	4628      	mov	r0, r5
 8008094:	47b8      	blx	r7
 8008096:	3001      	adds	r0, #1
 8008098:	f43f af12 	beq.w	8007ec0 <_printf_float+0x98>
 800809c:	f04f 0900 	mov.w	r9, #0
 80080a0:	f104 0a1a 	add.w	sl, r4, #26
 80080a4:	9b07      	ldr	r3, [sp, #28]
 80080a6:	425b      	negs	r3, r3
 80080a8:	454b      	cmp	r3, r9
 80080aa:	dc01      	bgt.n	80080b0 <_printf_float+0x288>
 80080ac:	9b08      	ldr	r3, [sp, #32]
 80080ae:	e795      	b.n	8007fdc <_printf_float+0x1b4>
 80080b0:	2301      	movs	r3, #1
 80080b2:	4652      	mov	r2, sl
 80080b4:	4631      	mov	r1, r6
 80080b6:	4628      	mov	r0, r5
 80080b8:	47b8      	blx	r7
 80080ba:	3001      	adds	r0, #1
 80080bc:	f43f af00 	beq.w	8007ec0 <_printf_float+0x98>
 80080c0:	f109 0901 	add.w	r9, r9, #1
 80080c4:	e7ee      	b.n	80080a4 <_printf_float+0x27c>
 80080c6:	bf00      	nop
 80080c8:	ffffffff 	.word	0xffffffff
 80080cc:	7fefffff 	.word	0x7fefffff
 80080d0:	0800b830 	.word	0x0800b830
 80080d4:	0800b834 	.word	0x0800b834
 80080d8:	0800b838 	.word	0x0800b838
 80080dc:	0800b83c 	.word	0x0800b83c
 80080e0:	0800b840 	.word	0x0800b840
 80080e4:	9a08      	ldr	r2, [sp, #32]
 80080e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80080e8:	429a      	cmp	r2, r3
 80080ea:	bfa8      	it	ge
 80080ec:	461a      	movge	r2, r3
 80080ee:	2a00      	cmp	r2, #0
 80080f0:	4691      	mov	r9, r2
 80080f2:	dc38      	bgt.n	8008166 <_printf_float+0x33e>
 80080f4:	2300      	movs	r3, #0
 80080f6:	9305      	str	r3, [sp, #20]
 80080f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080fc:	f104 021a 	add.w	r2, r4, #26
 8008100:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008102:	9905      	ldr	r1, [sp, #20]
 8008104:	9304      	str	r3, [sp, #16]
 8008106:	eba3 0309 	sub.w	r3, r3, r9
 800810a:	428b      	cmp	r3, r1
 800810c:	dc33      	bgt.n	8008176 <_printf_float+0x34e>
 800810e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008112:	429a      	cmp	r2, r3
 8008114:	db3c      	blt.n	8008190 <_printf_float+0x368>
 8008116:	6823      	ldr	r3, [r4, #0]
 8008118:	07da      	lsls	r2, r3, #31
 800811a:	d439      	bmi.n	8008190 <_printf_float+0x368>
 800811c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8008120:	eba2 0903 	sub.w	r9, r2, r3
 8008124:	9b04      	ldr	r3, [sp, #16]
 8008126:	1ad2      	subs	r2, r2, r3
 8008128:	4591      	cmp	r9, r2
 800812a:	bfa8      	it	ge
 800812c:	4691      	movge	r9, r2
 800812e:	f1b9 0f00 	cmp.w	r9, #0
 8008132:	dc35      	bgt.n	80081a0 <_printf_float+0x378>
 8008134:	f04f 0800 	mov.w	r8, #0
 8008138:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800813c:	f104 0a1a 	add.w	sl, r4, #26
 8008140:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008144:	1a9b      	subs	r3, r3, r2
 8008146:	eba3 0309 	sub.w	r3, r3, r9
 800814a:	4543      	cmp	r3, r8
 800814c:	f77f af77 	ble.w	800803e <_printf_float+0x216>
 8008150:	2301      	movs	r3, #1
 8008152:	4652      	mov	r2, sl
 8008154:	4631      	mov	r1, r6
 8008156:	4628      	mov	r0, r5
 8008158:	47b8      	blx	r7
 800815a:	3001      	adds	r0, #1
 800815c:	f43f aeb0 	beq.w	8007ec0 <_printf_float+0x98>
 8008160:	f108 0801 	add.w	r8, r8, #1
 8008164:	e7ec      	b.n	8008140 <_printf_float+0x318>
 8008166:	4613      	mov	r3, r2
 8008168:	4631      	mov	r1, r6
 800816a:	4642      	mov	r2, r8
 800816c:	4628      	mov	r0, r5
 800816e:	47b8      	blx	r7
 8008170:	3001      	adds	r0, #1
 8008172:	d1bf      	bne.n	80080f4 <_printf_float+0x2cc>
 8008174:	e6a4      	b.n	8007ec0 <_printf_float+0x98>
 8008176:	2301      	movs	r3, #1
 8008178:	4631      	mov	r1, r6
 800817a:	4628      	mov	r0, r5
 800817c:	9204      	str	r2, [sp, #16]
 800817e:	47b8      	blx	r7
 8008180:	3001      	adds	r0, #1
 8008182:	f43f ae9d 	beq.w	8007ec0 <_printf_float+0x98>
 8008186:	9b05      	ldr	r3, [sp, #20]
 8008188:	9a04      	ldr	r2, [sp, #16]
 800818a:	3301      	adds	r3, #1
 800818c:	9305      	str	r3, [sp, #20]
 800818e:	e7b7      	b.n	8008100 <_printf_float+0x2d8>
 8008190:	4653      	mov	r3, sl
 8008192:	465a      	mov	r2, fp
 8008194:	4631      	mov	r1, r6
 8008196:	4628      	mov	r0, r5
 8008198:	47b8      	blx	r7
 800819a:	3001      	adds	r0, #1
 800819c:	d1be      	bne.n	800811c <_printf_float+0x2f4>
 800819e:	e68f      	b.n	8007ec0 <_printf_float+0x98>
 80081a0:	9a04      	ldr	r2, [sp, #16]
 80081a2:	464b      	mov	r3, r9
 80081a4:	4442      	add	r2, r8
 80081a6:	4631      	mov	r1, r6
 80081a8:	4628      	mov	r0, r5
 80081aa:	47b8      	blx	r7
 80081ac:	3001      	adds	r0, #1
 80081ae:	d1c1      	bne.n	8008134 <_printf_float+0x30c>
 80081b0:	e686      	b.n	8007ec0 <_printf_float+0x98>
 80081b2:	9a08      	ldr	r2, [sp, #32]
 80081b4:	2a01      	cmp	r2, #1
 80081b6:	dc01      	bgt.n	80081bc <_printf_float+0x394>
 80081b8:	07db      	lsls	r3, r3, #31
 80081ba:	d537      	bpl.n	800822c <_printf_float+0x404>
 80081bc:	2301      	movs	r3, #1
 80081be:	4642      	mov	r2, r8
 80081c0:	4631      	mov	r1, r6
 80081c2:	4628      	mov	r0, r5
 80081c4:	47b8      	blx	r7
 80081c6:	3001      	adds	r0, #1
 80081c8:	f43f ae7a 	beq.w	8007ec0 <_printf_float+0x98>
 80081cc:	4653      	mov	r3, sl
 80081ce:	465a      	mov	r2, fp
 80081d0:	4631      	mov	r1, r6
 80081d2:	4628      	mov	r0, r5
 80081d4:	47b8      	blx	r7
 80081d6:	3001      	adds	r0, #1
 80081d8:	f43f ae72 	beq.w	8007ec0 <_printf_float+0x98>
 80081dc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80081e0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80081e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081e8:	9b08      	ldr	r3, [sp, #32]
 80081ea:	d01a      	beq.n	8008222 <_printf_float+0x3fa>
 80081ec:	3b01      	subs	r3, #1
 80081ee:	f108 0201 	add.w	r2, r8, #1
 80081f2:	4631      	mov	r1, r6
 80081f4:	4628      	mov	r0, r5
 80081f6:	47b8      	blx	r7
 80081f8:	3001      	adds	r0, #1
 80081fa:	d10e      	bne.n	800821a <_printf_float+0x3f2>
 80081fc:	e660      	b.n	8007ec0 <_printf_float+0x98>
 80081fe:	2301      	movs	r3, #1
 8008200:	464a      	mov	r2, r9
 8008202:	4631      	mov	r1, r6
 8008204:	4628      	mov	r0, r5
 8008206:	47b8      	blx	r7
 8008208:	3001      	adds	r0, #1
 800820a:	f43f ae59 	beq.w	8007ec0 <_printf_float+0x98>
 800820e:	f108 0801 	add.w	r8, r8, #1
 8008212:	9b08      	ldr	r3, [sp, #32]
 8008214:	3b01      	subs	r3, #1
 8008216:	4543      	cmp	r3, r8
 8008218:	dcf1      	bgt.n	80081fe <_printf_float+0x3d6>
 800821a:	9b04      	ldr	r3, [sp, #16]
 800821c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008220:	e6dd      	b.n	8007fde <_printf_float+0x1b6>
 8008222:	f04f 0800 	mov.w	r8, #0
 8008226:	f104 091a 	add.w	r9, r4, #26
 800822a:	e7f2      	b.n	8008212 <_printf_float+0x3ea>
 800822c:	2301      	movs	r3, #1
 800822e:	4642      	mov	r2, r8
 8008230:	e7df      	b.n	80081f2 <_printf_float+0x3ca>
 8008232:	2301      	movs	r3, #1
 8008234:	464a      	mov	r2, r9
 8008236:	4631      	mov	r1, r6
 8008238:	4628      	mov	r0, r5
 800823a:	47b8      	blx	r7
 800823c:	3001      	adds	r0, #1
 800823e:	f43f ae3f 	beq.w	8007ec0 <_printf_float+0x98>
 8008242:	f108 0801 	add.w	r8, r8, #1
 8008246:	68e3      	ldr	r3, [r4, #12]
 8008248:	9909      	ldr	r1, [sp, #36]	; 0x24
 800824a:	1a5b      	subs	r3, r3, r1
 800824c:	4543      	cmp	r3, r8
 800824e:	dcf0      	bgt.n	8008232 <_printf_float+0x40a>
 8008250:	e6f9      	b.n	8008046 <_printf_float+0x21e>
 8008252:	f04f 0800 	mov.w	r8, #0
 8008256:	f104 0919 	add.w	r9, r4, #25
 800825a:	e7f4      	b.n	8008246 <_printf_float+0x41e>

0800825c <_printf_common>:
 800825c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008260:	4616      	mov	r6, r2
 8008262:	4699      	mov	r9, r3
 8008264:	688a      	ldr	r2, [r1, #8]
 8008266:	690b      	ldr	r3, [r1, #16]
 8008268:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800826c:	4293      	cmp	r3, r2
 800826e:	bfb8      	it	lt
 8008270:	4613      	movlt	r3, r2
 8008272:	6033      	str	r3, [r6, #0]
 8008274:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008278:	4607      	mov	r7, r0
 800827a:	460c      	mov	r4, r1
 800827c:	b10a      	cbz	r2, 8008282 <_printf_common+0x26>
 800827e:	3301      	adds	r3, #1
 8008280:	6033      	str	r3, [r6, #0]
 8008282:	6823      	ldr	r3, [r4, #0]
 8008284:	0699      	lsls	r1, r3, #26
 8008286:	bf42      	ittt	mi
 8008288:	6833      	ldrmi	r3, [r6, #0]
 800828a:	3302      	addmi	r3, #2
 800828c:	6033      	strmi	r3, [r6, #0]
 800828e:	6825      	ldr	r5, [r4, #0]
 8008290:	f015 0506 	ands.w	r5, r5, #6
 8008294:	d106      	bne.n	80082a4 <_printf_common+0x48>
 8008296:	f104 0a19 	add.w	sl, r4, #25
 800829a:	68e3      	ldr	r3, [r4, #12]
 800829c:	6832      	ldr	r2, [r6, #0]
 800829e:	1a9b      	subs	r3, r3, r2
 80082a0:	42ab      	cmp	r3, r5
 80082a2:	dc26      	bgt.n	80082f2 <_printf_common+0x96>
 80082a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80082a8:	1e13      	subs	r3, r2, #0
 80082aa:	6822      	ldr	r2, [r4, #0]
 80082ac:	bf18      	it	ne
 80082ae:	2301      	movne	r3, #1
 80082b0:	0692      	lsls	r2, r2, #26
 80082b2:	d42b      	bmi.n	800830c <_printf_common+0xb0>
 80082b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80082b8:	4649      	mov	r1, r9
 80082ba:	4638      	mov	r0, r7
 80082bc:	47c0      	blx	r8
 80082be:	3001      	adds	r0, #1
 80082c0:	d01e      	beq.n	8008300 <_printf_common+0xa4>
 80082c2:	6823      	ldr	r3, [r4, #0]
 80082c4:	6922      	ldr	r2, [r4, #16]
 80082c6:	f003 0306 	and.w	r3, r3, #6
 80082ca:	2b04      	cmp	r3, #4
 80082cc:	bf02      	ittt	eq
 80082ce:	68e5      	ldreq	r5, [r4, #12]
 80082d0:	6833      	ldreq	r3, [r6, #0]
 80082d2:	1aed      	subeq	r5, r5, r3
 80082d4:	68a3      	ldr	r3, [r4, #8]
 80082d6:	bf0c      	ite	eq
 80082d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80082dc:	2500      	movne	r5, #0
 80082de:	4293      	cmp	r3, r2
 80082e0:	bfc4      	itt	gt
 80082e2:	1a9b      	subgt	r3, r3, r2
 80082e4:	18ed      	addgt	r5, r5, r3
 80082e6:	2600      	movs	r6, #0
 80082e8:	341a      	adds	r4, #26
 80082ea:	42b5      	cmp	r5, r6
 80082ec:	d11a      	bne.n	8008324 <_printf_common+0xc8>
 80082ee:	2000      	movs	r0, #0
 80082f0:	e008      	b.n	8008304 <_printf_common+0xa8>
 80082f2:	2301      	movs	r3, #1
 80082f4:	4652      	mov	r2, sl
 80082f6:	4649      	mov	r1, r9
 80082f8:	4638      	mov	r0, r7
 80082fa:	47c0      	blx	r8
 80082fc:	3001      	adds	r0, #1
 80082fe:	d103      	bne.n	8008308 <_printf_common+0xac>
 8008300:	f04f 30ff 	mov.w	r0, #4294967295
 8008304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008308:	3501      	adds	r5, #1
 800830a:	e7c6      	b.n	800829a <_printf_common+0x3e>
 800830c:	18e1      	adds	r1, r4, r3
 800830e:	1c5a      	adds	r2, r3, #1
 8008310:	2030      	movs	r0, #48	; 0x30
 8008312:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008316:	4422      	add	r2, r4
 8008318:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800831c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008320:	3302      	adds	r3, #2
 8008322:	e7c7      	b.n	80082b4 <_printf_common+0x58>
 8008324:	2301      	movs	r3, #1
 8008326:	4622      	mov	r2, r4
 8008328:	4649      	mov	r1, r9
 800832a:	4638      	mov	r0, r7
 800832c:	47c0      	blx	r8
 800832e:	3001      	adds	r0, #1
 8008330:	d0e6      	beq.n	8008300 <_printf_common+0xa4>
 8008332:	3601      	adds	r6, #1
 8008334:	e7d9      	b.n	80082ea <_printf_common+0x8e>
	...

08008338 <_printf_i>:
 8008338:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800833c:	7e0f      	ldrb	r7, [r1, #24]
 800833e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008340:	2f78      	cmp	r7, #120	; 0x78
 8008342:	4691      	mov	r9, r2
 8008344:	4680      	mov	r8, r0
 8008346:	460c      	mov	r4, r1
 8008348:	469a      	mov	sl, r3
 800834a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800834e:	d807      	bhi.n	8008360 <_printf_i+0x28>
 8008350:	2f62      	cmp	r7, #98	; 0x62
 8008352:	d80a      	bhi.n	800836a <_printf_i+0x32>
 8008354:	2f00      	cmp	r7, #0
 8008356:	f000 80d4 	beq.w	8008502 <_printf_i+0x1ca>
 800835a:	2f58      	cmp	r7, #88	; 0x58
 800835c:	f000 80c0 	beq.w	80084e0 <_printf_i+0x1a8>
 8008360:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008364:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008368:	e03a      	b.n	80083e0 <_printf_i+0xa8>
 800836a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800836e:	2b15      	cmp	r3, #21
 8008370:	d8f6      	bhi.n	8008360 <_printf_i+0x28>
 8008372:	a101      	add	r1, pc, #4	; (adr r1, 8008378 <_printf_i+0x40>)
 8008374:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008378:	080083d1 	.word	0x080083d1
 800837c:	080083e5 	.word	0x080083e5
 8008380:	08008361 	.word	0x08008361
 8008384:	08008361 	.word	0x08008361
 8008388:	08008361 	.word	0x08008361
 800838c:	08008361 	.word	0x08008361
 8008390:	080083e5 	.word	0x080083e5
 8008394:	08008361 	.word	0x08008361
 8008398:	08008361 	.word	0x08008361
 800839c:	08008361 	.word	0x08008361
 80083a0:	08008361 	.word	0x08008361
 80083a4:	080084e9 	.word	0x080084e9
 80083a8:	08008411 	.word	0x08008411
 80083ac:	080084a3 	.word	0x080084a3
 80083b0:	08008361 	.word	0x08008361
 80083b4:	08008361 	.word	0x08008361
 80083b8:	0800850b 	.word	0x0800850b
 80083bc:	08008361 	.word	0x08008361
 80083c0:	08008411 	.word	0x08008411
 80083c4:	08008361 	.word	0x08008361
 80083c8:	08008361 	.word	0x08008361
 80083cc:	080084ab 	.word	0x080084ab
 80083d0:	682b      	ldr	r3, [r5, #0]
 80083d2:	1d1a      	adds	r2, r3, #4
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	602a      	str	r2, [r5, #0]
 80083d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80083e0:	2301      	movs	r3, #1
 80083e2:	e09f      	b.n	8008524 <_printf_i+0x1ec>
 80083e4:	6820      	ldr	r0, [r4, #0]
 80083e6:	682b      	ldr	r3, [r5, #0]
 80083e8:	0607      	lsls	r7, r0, #24
 80083ea:	f103 0104 	add.w	r1, r3, #4
 80083ee:	6029      	str	r1, [r5, #0]
 80083f0:	d501      	bpl.n	80083f6 <_printf_i+0xbe>
 80083f2:	681e      	ldr	r6, [r3, #0]
 80083f4:	e003      	b.n	80083fe <_printf_i+0xc6>
 80083f6:	0646      	lsls	r6, r0, #25
 80083f8:	d5fb      	bpl.n	80083f2 <_printf_i+0xba>
 80083fa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80083fe:	2e00      	cmp	r6, #0
 8008400:	da03      	bge.n	800840a <_printf_i+0xd2>
 8008402:	232d      	movs	r3, #45	; 0x2d
 8008404:	4276      	negs	r6, r6
 8008406:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800840a:	485a      	ldr	r0, [pc, #360]	; (8008574 <_printf_i+0x23c>)
 800840c:	230a      	movs	r3, #10
 800840e:	e012      	b.n	8008436 <_printf_i+0xfe>
 8008410:	682b      	ldr	r3, [r5, #0]
 8008412:	6820      	ldr	r0, [r4, #0]
 8008414:	1d19      	adds	r1, r3, #4
 8008416:	6029      	str	r1, [r5, #0]
 8008418:	0605      	lsls	r5, r0, #24
 800841a:	d501      	bpl.n	8008420 <_printf_i+0xe8>
 800841c:	681e      	ldr	r6, [r3, #0]
 800841e:	e002      	b.n	8008426 <_printf_i+0xee>
 8008420:	0641      	lsls	r1, r0, #25
 8008422:	d5fb      	bpl.n	800841c <_printf_i+0xe4>
 8008424:	881e      	ldrh	r6, [r3, #0]
 8008426:	4853      	ldr	r0, [pc, #332]	; (8008574 <_printf_i+0x23c>)
 8008428:	2f6f      	cmp	r7, #111	; 0x6f
 800842a:	bf0c      	ite	eq
 800842c:	2308      	moveq	r3, #8
 800842e:	230a      	movne	r3, #10
 8008430:	2100      	movs	r1, #0
 8008432:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008436:	6865      	ldr	r5, [r4, #4]
 8008438:	60a5      	str	r5, [r4, #8]
 800843a:	2d00      	cmp	r5, #0
 800843c:	bfa2      	ittt	ge
 800843e:	6821      	ldrge	r1, [r4, #0]
 8008440:	f021 0104 	bicge.w	r1, r1, #4
 8008444:	6021      	strge	r1, [r4, #0]
 8008446:	b90e      	cbnz	r6, 800844c <_printf_i+0x114>
 8008448:	2d00      	cmp	r5, #0
 800844a:	d04b      	beq.n	80084e4 <_printf_i+0x1ac>
 800844c:	4615      	mov	r5, r2
 800844e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008452:	fb03 6711 	mls	r7, r3, r1, r6
 8008456:	5dc7      	ldrb	r7, [r0, r7]
 8008458:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800845c:	4637      	mov	r7, r6
 800845e:	42bb      	cmp	r3, r7
 8008460:	460e      	mov	r6, r1
 8008462:	d9f4      	bls.n	800844e <_printf_i+0x116>
 8008464:	2b08      	cmp	r3, #8
 8008466:	d10b      	bne.n	8008480 <_printf_i+0x148>
 8008468:	6823      	ldr	r3, [r4, #0]
 800846a:	07de      	lsls	r6, r3, #31
 800846c:	d508      	bpl.n	8008480 <_printf_i+0x148>
 800846e:	6923      	ldr	r3, [r4, #16]
 8008470:	6861      	ldr	r1, [r4, #4]
 8008472:	4299      	cmp	r1, r3
 8008474:	bfde      	ittt	le
 8008476:	2330      	movle	r3, #48	; 0x30
 8008478:	f805 3c01 	strble.w	r3, [r5, #-1]
 800847c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008480:	1b52      	subs	r2, r2, r5
 8008482:	6122      	str	r2, [r4, #16]
 8008484:	f8cd a000 	str.w	sl, [sp]
 8008488:	464b      	mov	r3, r9
 800848a:	aa03      	add	r2, sp, #12
 800848c:	4621      	mov	r1, r4
 800848e:	4640      	mov	r0, r8
 8008490:	f7ff fee4 	bl	800825c <_printf_common>
 8008494:	3001      	adds	r0, #1
 8008496:	d14a      	bne.n	800852e <_printf_i+0x1f6>
 8008498:	f04f 30ff 	mov.w	r0, #4294967295
 800849c:	b004      	add	sp, #16
 800849e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084a2:	6823      	ldr	r3, [r4, #0]
 80084a4:	f043 0320 	orr.w	r3, r3, #32
 80084a8:	6023      	str	r3, [r4, #0]
 80084aa:	4833      	ldr	r0, [pc, #204]	; (8008578 <_printf_i+0x240>)
 80084ac:	2778      	movs	r7, #120	; 0x78
 80084ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80084b2:	6823      	ldr	r3, [r4, #0]
 80084b4:	6829      	ldr	r1, [r5, #0]
 80084b6:	061f      	lsls	r7, r3, #24
 80084b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80084bc:	d402      	bmi.n	80084c4 <_printf_i+0x18c>
 80084be:	065f      	lsls	r7, r3, #25
 80084c0:	bf48      	it	mi
 80084c2:	b2b6      	uxthmi	r6, r6
 80084c4:	07df      	lsls	r7, r3, #31
 80084c6:	bf48      	it	mi
 80084c8:	f043 0320 	orrmi.w	r3, r3, #32
 80084cc:	6029      	str	r1, [r5, #0]
 80084ce:	bf48      	it	mi
 80084d0:	6023      	strmi	r3, [r4, #0]
 80084d2:	b91e      	cbnz	r6, 80084dc <_printf_i+0x1a4>
 80084d4:	6823      	ldr	r3, [r4, #0]
 80084d6:	f023 0320 	bic.w	r3, r3, #32
 80084da:	6023      	str	r3, [r4, #0]
 80084dc:	2310      	movs	r3, #16
 80084de:	e7a7      	b.n	8008430 <_printf_i+0xf8>
 80084e0:	4824      	ldr	r0, [pc, #144]	; (8008574 <_printf_i+0x23c>)
 80084e2:	e7e4      	b.n	80084ae <_printf_i+0x176>
 80084e4:	4615      	mov	r5, r2
 80084e6:	e7bd      	b.n	8008464 <_printf_i+0x12c>
 80084e8:	682b      	ldr	r3, [r5, #0]
 80084ea:	6826      	ldr	r6, [r4, #0]
 80084ec:	6961      	ldr	r1, [r4, #20]
 80084ee:	1d18      	adds	r0, r3, #4
 80084f0:	6028      	str	r0, [r5, #0]
 80084f2:	0635      	lsls	r5, r6, #24
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	d501      	bpl.n	80084fc <_printf_i+0x1c4>
 80084f8:	6019      	str	r1, [r3, #0]
 80084fa:	e002      	b.n	8008502 <_printf_i+0x1ca>
 80084fc:	0670      	lsls	r0, r6, #25
 80084fe:	d5fb      	bpl.n	80084f8 <_printf_i+0x1c0>
 8008500:	8019      	strh	r1, [r3, #0]
 8008502:	2300      	movs	r3, #0
 8008504:	6123      	str	r3, [r4, #16]
 8008506:	4615      	mov	r5, r2
 8008508:	e7bc      	b.n	8008484 <_printf_i+0x14c>
 800850a:	682b      	ldr	r3, [r5, #0]
 800850c:	1d1a      	adds	r2, r3, #4
 800850e:	602a      	str	r2, [r5, #0]
 8008510:	681d      	ldr	r5, [r3, #0]
 8008512:	6862      	ldr	r2, [r4, #4]
 8008514:	2100      	movs	r1, #0
 8008516:	4628      	mov	r0, r5
 8008518:	f7f7 fee2 	bl	80002e0 <memchr>
 800851c:	b108      	cbz	r0, 8008522 <_printf_i+0x1ea>
 800851e:	1b40      	subs	r0, r0, r5
 8008520:	6060      	str	r0, [r4, #4]
 8008522:	6863      	ldr	r3, [r4, #4]
 8008524:	6123      	str	r3, [r4, #16]
 8008526:	2300      	movs	r3, #0
 8008528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800852c:	e7aa      	b.n	8008484 <_printf_i+0x14c>
 800852e:	6923      	ldr	r3, [r4, #16]
 8008530:	462a      	mov	r2, r5
 8008532:	4649      	mov	r1, r9
 8008534:	4640      	mov	r0, r8
 8008536:	47d0      	blx	sl
 8008538:	3001      	adds	r0, #1
 800853a:	d0ad      	beq.n	8008498 <_printf_i+0x160>
 800853c:	6823      	ldr	r3, [r4, #0]
 800853e:	079b      	lsls	r3, r3, #30
 8008540:	d413      	bmi.n	800856a <_printf_i+0x232>
 8008542:	68e0      	ldr	r0, [r4, #12]
 8008544:	9b03      	ldr	r3, [sp, #12]
 8008546:	4298      	cmp	r0, r3
 8008548:	bfb8      	it	lt
 800854a:	4618      	movlt	r0, r3
 800854c:	e7a6      	b.n	800849c <_printf_i+0x164>
 800854e:	2301      	movs	r3, #1
 8008550:	4632      	mov	r2, r6
 8008552:	4649      	mov	r1, r9
 8008554:	4640      	mov	r0, r8
 8008556:	47d0      	blx	sl
 8008558:	3001      	adds	r0, #1
 800855a:	d09d      	beq.n	8008498 <_printf_i+0x160>
 800855c:	3501      	adds	r5, #1
 800855e:	68e3      	ldr	r3, [r4, #12]
 8008560:	9903      	ldr	r1, [sp, #12]
 8008562:	1a5b      	subs	r3, r3, r1
 8008564:	42ab      	cmp	r3, r5
 8008566:	dcf2      	bgt.n	800854e <_printf_i+0x216>
 8008568:	e7eb      	b.n	8008542 <_printf_i+0x20a>
 800856a:	2500      	movs	r5, #0
 800856c:	f104 0619 	add.w	r6, r4, #25
 8008570:	e7f5      	b.n	800855e <_printf_i+0x226>
 8008572:	bf00      	nop
 8008574:	0800b842 	.word	0x0800b842
 8008578:	0800b853 	.word	0x0800b853

0800857c <std>:
 800857c:	2300      	movs	r3, #0
 800857e:	b510      	push	{r4, lr}
 8008580:	4604      	mov	r4, r0
 8008582:	e9c0 3300 	strd	r3, r3, [r0]
 8008586:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800858a:	6083      	str	r3, [r0, #8]
 800858c:	8181      	strh	r1, [r0, #12]
 800858e:	6643      	str	r3, [r0, #100]	; 0x64
 8008590:	81c2      	strh	r2, [r0, #14]
 8008592:	6183      	str	r3, [r0, #24]
 8008594:	4619      	mov	r1, r3
 8008596:	2208      	movs	r2, #8
 8008598:	305c      	adds	r0, #92	; 0x5c
 800859a:	f000 f914 	bl	80087c6 <memset>
 800859e:	4b0d      	ldr	r3, [pc, #52]	; (80085d4 <std+0x58>)
 80085a0:	6263      	str	r3, [r4, #36]	; 0x24
 80085a2:	4b0d      	ldr	r3, [pc, #52]	; (80085d8 <std+0x5c>)
 80085a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80085a6:	4b0d      	ldr	r3, [pc, #52]	; (80085dc <std+0x60>)
 80085a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80085aa:	4b0d      	ldr	r3, [pc, #52]	; (80085e0 <std+0x64>)
 80085ac:	6323      	str	r3, [r4, #48]	; 0x30
 80085ae:	4b0d      	ldr	r3, [pc, #52]	; (80085e4 <std+0x68>)
 80085b0:	6224      	str	r4, [r4, #32]
 80085b2:	429c      	cmp	r4, r3
 80085b4:	d006      	beq.n	80085c4 <std+0x48>
 80085b6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80085ba:	4294      	cmp	r4, r2
 80085bc:	d002      	beq.n	80085c4 <std+0x48>
 80085be:	33d0      	adds	r3, #208	; 0xd0
 80085c0:	429c      	cmp	r4, r3
 80085c2:	d105      	bne.n	80085d0 <std+0x54>
 80085c4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80085c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085cc:	f000 b978 	b.w	80088c0 <__retarget_lock_init_recursive>
 80085d0:	bd10      	pop	{r4, pc}
 80085d2:	bf00      	nop
 80085d4:	08008741 	.word	0x08008741
 80085d8:	08008763 	.word	0x08008763
 80085dc:	0800879b 	.word	0x0800879b
 80085e0:	080087bf 	.word	0x080087bf
 80085e4:	2400188c 	.word	0x2400188c

080085e8 <stdio_exit_handler>:
 80085e8:	4a02      	ldr	r2, [pc, #8]	; (80085f4 <stdio_exit_handler+0xc>)
 80085ea:	4903      	ldr	r1, [pc, #12]	; (80085f8 <stdio_exit_handler+0x10>)
 80085ec:	4803      	ldr	r0, [pc, #12]	; (80085fc <stdio_exit_handler+0x14>)
 80085ee:	f000 b869 	b.w	80086c4 <_fwalk_sglue>
 80085f2:	bf00      	nop
 80085f4:	24000010 	.word	0x24000010
 80085f8:	0800a165 	.word	0x0800a165
 80085fc:	2400001c 	.word	0x2400001c

08008600 <cleanup_stdio>:
 8008600:	6841      	ldr	r1, [r0, #4]
 8008602:	4b0c      	ldr	r3, [pc, #48]	; (8008634 <cleanup_stdio+0x34>)
 8008604:	4299      	cmp	r1, r3
 8008606:	b510      	push	{r4, lr}
 8008608:	4604      	mov	r4, r0
 800860a:	d001      	beq.n	8008610 <cleanup_stdio+0x10>
 800860c:	f001 fdaa 	bl	800a164 <_fflush_r>
 8008610:	68a1      	ldr	r1, [r4, #8]
 8008612:	4b09      	ldr	r3, [pc, #36]	; (8008638 <cleanup_stdio+0x38>)
 8008614:	4299      	cmp	r1, r3
 8008616:	d002      	beq.n	800861e <cleanup_stdio+0x1e>
 8008618:	4620      	mov	r0, r4
 800861a:	f001 fda3 	bl	800a164 <_fflush_r>
 800861e:	68e1      	ldr	r1, [r4, #12]
 8008620:	4b06      	ldr	r3, [pc, #24]	; (800863c <cleanup_stdio+0x3c>)
 8008622:	4299      	cmp	r1, r3
 8008624:	d004      	beq.n	8008630 <cleanup_stdio+0x30>
 8008626:	4620      	mov	r0, r4
 8008628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800862c:	f001 bd9a 	b.w	800a164 <_fflush_r>
 8008630:	bd10      	pop	{r4, pc}
 8008632:	bf00      	nop
 8008634:	2400188c 	.word	0x2400188c
 8008638:	240018f4 	.word	0x240018f4
 800863c:	2400195c 	.word	0x2400195c

08008640 <global_stdio_init.part.0>:
 8008640:	b510      	push	{r4, lr}
 8008642:	4b0b      	ldr	r3, [pc, #44]	; (8008670 <global_stdio_init.part.0+0x30>)
 8008644:	4c0b      	ldr	r4, [pc, #44]	; (8008674 <global_stdio_init.part.0+0x34>)
 8008646:	4a0c      	ldr	r2, [pc, #48]	; (8008678 <global_stdio_init.part.0+0x38>)
 8008648:	601a      	str	r2, [r3, #0]
 800864a:	4620      	mov	r0, r4
 800864c:	2200      	movs	r2, #0
 800864e:	2104      	movs	r1, #4
 8008650:	f7ff ff94 	bl	800857c <std>
 8008654:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008658:	2201      	movs	r2, #1
 800865a:	2109      	movs	r1, #9
 800865c:	f7ff ff8e 	bl	800857c <std>
 8008660:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008664:	2202      	movs	r2, #2
 8008666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800866a:	2112      	movs	r1, #18
 800866c:	f7ff bf86 	b.w	800857c <std>
 8008670:	240019c4 	.word	0x240019c4
 8008674:	2400188c 	.word	0x2400188c
 8008678:	080085e9 	.word	0x080085e9

0800867c <__sfp_lock_acquire>:
 800867c:	4801      	ldr	r0, [pc, #4]	; (8008684 <__sfp_lock_acquire+0x8>)
 800867e:	f000 b920 	b.w	80088c2 <__retarget_lock_acquire_recursive>
 8008682:	bf00      	nop
 8008684:	240019cd 	.word	0x240019cd

08008688 <__sfp_lock_release>:
 8008688:	4801      	ldr	r0, [pc, #4]	; (8008690 <__sfp_lock_release+0x8>)
 800868a:	f000 b91b 	b.w	80088c4 <__retarget_lock_release_recursive>
 800868e:	bf00      	nop
 8008690:	240019cd 	.word	0x240019cd

08008694 <__sinit>:
 8008694:	b510      	push	{r4, lr}
 8008696:	4604      	mov	r4, r0
 8008698:	f7ff fff0 	bl	800867c <__sfp_lock_acquire>
 800869c:	6a23      	ldr	r3, [r4, #32]
 800869e:	b11b      	cbz	r3, 80086a8 <__sinit+0x14>
 80086a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086a4:	f7ff bff0 	b.w	8008688 <__sfp_lock_release>
 80086a8:	4b04      	ldr	r3, [pc, #16]	; (80086bc <__sinit+0x28>)
 80086aa:	6223      	str	r3, [r4, #32]
 80086ac:	4b04      	ldr	r3, [pc, #16]	; (80086c0 <__sinit+0x2c>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d1f5      	bne.n	80086a0 <__sinit+0xc>
 80086b4:	f7ff ffc4 	bl	8008640 <global_stdio_init.part.0>
 80086b8:	e7f2      	b.n	80086a0 <__sinit+0xc>
 80086ba:	bf00      	nop
 80086bc:	08008601 	.word	0x08008601
 80086c0:	240019c4 	.word	0x240019c4

080086c4 <_fwalk_sglue>:
 80086c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086c8:	4607      	mov	r7, r0
 80086ca:	4688      	mov	r8, r1
 80086cc:	4614      	mov	r4, r2
 80086ce:	2600      	movs	r6, #0
 80086d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80086d4:	f1b9 0901 	subs.w	r9, r9, #1
 80086d8:	d505      	bpl.n	80086e6 <_fwalk_sglue+0x22>
 80086da:	6824      	ldr	r4, [r4, #0]
 80086dc:	2c00      	cmp	r4, #0
 80086de:	d1f7      	bne.n	80086d0 <_fwalk_sglue+0xc>
 80086e0:	4630      	mov	r0, r6
 80086e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086e6:	89ab      	ldrh	r3, [r5, #12]
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d907      	bls.n	80086fc <_fwalk_sglue+0x38>
 80086ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80086f0:	3301      	adds	r3, #1
 80086f2:	d003      	beq.n	80086fc <_fwalk_sglue+0x38>
 80086f4:	4629      	mov	r1, r5
 80086f6:	4638      	mov	r0, r7
 80086f8:	47c0      	blx	r8
 80086fa:	4306      	orrs	r6, r0
 80086fc:	3568      	adds	r5, #104	; 0x68
 80086fe:	e7e9      	b.n	80086d4 <_fwalk_sglue+0x10>

08008700 <siprintf>:
 8008700:	b40e      	push	{r1, r2, r3}
 8008702:	b500      	push	{lr}
 8008704:	b09c      	sub	sp, #112	; 0x70
 8008706:	ab1d      	add	r3, sp, #116	; 0x74
 8008708:	9002      	str	r0, [sp, #8]
 800870a:	9006      	str	r0, [sp, #24]
 800870c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008710:	4809      	ldr	r0, [pc, #36]	; (8008738 <siprintf+0x38>)
 8008712:	9107      	str	r1, [sp, #28]
 8008714:	9104      	str	r1, [sp, #16]
 8008716:	4909      	ldr	r1, [pc, #36]	; (800873c <siprintf+0x3c>)
 8008718:	f853 2b04 	ldr.w	r2, [r3], #4
 800871c:	9105      	str	r1, [sp, #20]
 800871e:	6800      	ldr	r0, [r0, #0]
 8008720:	9301      	str	r3, [sp, #4]
 8008722:	a902      	add	r1, sp, #8
 8008724:	f001 fb9a 	bl	8009e5c <_svfiprintf_r>
 8008728:	9b02      	ldr	r3, [sp, #8]
 800872a:	2200      	movs	r2, #0
 800872c:	701a      	strb	r2, [r3, #0]
 800872e:	b01c      	add	sp, #112	; 0x70
 8008730:	f85d eb04 	ldr.w	lr, [sp], #4
 8008734:	b003      	add	sp, #12
 8008736:	4770      	bx	lr
 8008738:	24000068 	.word	0x24000068
 800873c:	ffff0208 	.word	0xffff0208

08008740 <__sread>:
 8008740:	b510      	push	{r4, lr}
 8008742:	460c      	mov	r4, r1
 8008744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008748:	f000 f86c 	bl	8008824 <_read_r>
 800874c:	2800      	cmp	r0, #0
 800874e:	bfab      	itete	ge
 8008750:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008752:	89a3      	ldrhlt	r3, [r4, #12]
 8008754:	181b      	addge	r3, r3, r0
 8008756:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800875a:	bfac      	ite	ge
 800875c:	6563      	strge	r3, [r4, #84]	; 0x54
 800875e:	81a3      	strhlt	r3, [r4, #12]
 8008760:	bd10      	pop	{r4, pc}

08008762 <__swrite>:
 8008762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008766:	461f      	mov	r7, r3
 8008768:	898b      	ldrh	r3, [r1, #12]
 800876a:	05db      	lsls	r3, r3, #23
 800876c:	4605      	mov	r5, r0
 800876e:	460c      	mov	r4, r1
 8008770:	4616      	mov	r6, r2
 8008772:	d505      	bpl.n	8008780 <__swrite+0x1e>
 8008774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008778:	2302      	movs	r3, #2
 800877a:	2200      	movs	r2, #0
 800877c:	f000 f840 	bl	8008800 <_lseek_r>
 8008780:	89a3      	ldrh	r3, [r4, #12]
 8008782:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008786:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800878a:	81a3      	strh	r3, [r4, #12]
 800878c:	4632      	mov	r2, r6
 800878e:	463b      	mov	r3, r7
 8008790:	4628      	mov	r0, r5
 8008792:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008796:	f000 b857 	b.w	8008848 <_write_r>

0800879a <__sseek>:
 800879a:	b510      	push	{r4, lr}
 800879c:	460c      	mov	r4, r1
 800879e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087a2:	f000 f82d 	bl	8008800 <_lseek_r>
 80087a6:	1c43      	adds	r3, r0, #1
 80087a8:	89a3      	ldrh	r3, [r4, #12]
 80087aa:	bf15      	itete	ne
 80087ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80087ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80087b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80087b6:	81a3      	strheq	r3, [r4, #12]
 80087b8:	bf18      	it	ne
 80087ba:	81a3      	strhne	r3, [r4, #12]
 80087bc:	bd10      	pop	{r4, pc}

080087be <__sclose>:
 80087be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087c2:	f000 b80d 	b.w	80087e0 <_close_r>

080087c6 <memset>:
 80087c6:	4402      	add	r2, r0
 80087c8:	4603      	mov	r3, r0
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d100      	bne.n	80087d0 <memset+0xa>
 80087ce:	4770      	bx	lr
 80087d0:	f803 1b01 	strb.w	r1, [r3], #1
 80087d4:	e7f9      	b.n	80087ca <memset+0x4>
	...

080087d8 <_localeconv_r>:
 80087d8:	4800      	ldr	r0, [pc, #0]	; (80087dc <_localeconv_r+0x4>)
 80087da:	4770      	bx	lr
 80087dc:	2400015c 	.word	0x2400015c

080087e0 <_close_r>:
 80087e0:	b538      	push	{r3, r4, r5, lr}
 80087e2:	4d06      	ldr	r5, [pc, #24]	; (80087fc <_close_r+0x1c>)
 80087e4:	2300      	movs	r3, #0
 80087e6:	4604      	mov	r4, r0
 80087e8:	4608      	mov	r0, r1
 80087ea:	602b      	str	r3, [r5, #0]
 80087ec:	f7f9 f87b 	bl	80018e6 <_close>
 80087f0:	1c43      	adds	r3, r0, #1
 80087f2:	d102      	bne.n	80087fa <_close_r+0x1a>
 80087f4:	682b      	ldr	r3, [r5, #0]
 80087f6:	b103      	cbz	r3, 80087fa <_close_r+0x1a>
 80087f8:	6023      	str	r3, [r4, #0]
 80087fa:	bd38      	pop	{r3, r4, r5, pc}
 80087fc:	240019c8 	.word	0x240019c8

08008800 <_lseek_r>:
 8008800:	b538      	push	{r3, r4, r5, lr}
 8008802:	4d07      	ldr	r5, [pc, #28]	; (8008820 <_lseek_r+0x20>)
 8008804:	4604      	mov	r4, r0
 8008806:	4608      	mov	r0, r1
 8008808:	4611      	mov	r1, r2
 800880a:	2200      	movs	r2, #0
 800880c:	602a      	str	r2, [r5, #0]
 800880e:	461a      	mov	r2, r3
 8008810:	f7f9 f890 	bl	8001934 <_lseek>
 8008814:	1c43      	adds	r3, r0, #1
 8008816:	d102      	bne.n	800881e <_lseek_r+0x1e>
 8008818:	682b      	ldr	r3, [r5, #0]
 800881a:	b103      	cbz	r3, 800881e <_lseek_r+0x1e>
 800881c:	6023      	str	r3, [r4, #0]
 800881e:	bd38      	pop	{r3, r4, r5, pc}
 8008820:	240019c8 	.word	0x240019c8

08008824 <_read_r>:
 8008824:	b538      	push	{r3, r4, r5, lr}
 8008826:	4d07      	ldr	r5, [pc, #28]	; (8008844 <_read_r+0x20>)
 8008828:	4604      	mov	r4, r0
 800882a:	4608      	mov	r0, r1
 800882c:	4611      	mov	r1, r2
 800882e:	2200      	movs	r2, #0
 8008830:	602a      	str	r2, [r5, #0]
 8008832:	461a      	mov	r2, r3
 8008834:	f7f9 f81e 	bl	8001874 <_read>
 8008838:	1c43      	adds	r3, r0, #1
 800883a:	d102      	bne.n	8008842 <_read_r+0x1e>
 800883c:	682b      	ldr	r3, [r5, #0]
 800883e:	b103      	cbz	r3, 8008842 <_read_r+0x1e>
 8008840:	6023      	str	r3, [r4, #0]
 8008842:	bd38      	pop	{r3, r4, r5, pc}
 8008844:	240019c8 	.word	0x240019c8

08008848 <_write_r>:
 8008848:	b538      	push	{r3, r4, r5, lr}
 800884a:	4d07      	ldr	r5, [pc, #28]	; (8008868 <_write_r+0x20>)
 800884c:	4604      	mov	r4, r0
 800884e:	4608      	mov	r0, r1
 8008850:	4611      	mov	r1, r2
 8008852:	2200      	movs	r2, #0
 8008854:	602a      	str	r2, [r5, #0]
 8008856:	461a      	mov	r2, r3
 8008858:	f7f9 f829 	bl	80018ae <_write>
 800885c:	1c43      	adds	r3, r0, #1
 800885e:	d102      	bne.n	8008866 <_write_r+0x1e>
 8008860:	682b      	ldr	r3, [r5, #0]
 8008862:	b103      	cbz	r3, 8008866 <_write_r+0x1e>
 8008864:	6023      	str	r3, [r4, #0]
 8008866:	bd38      	pop	{r3, r4, r5, pc}
 8008868:	240019c8 	.word	0x240019c8

0800886c <__errno>:
 800886c:	4b01      	ldr	r3, [pc, #4]	; (8008874 <__errno+0x8>)
 800886e:	6818      	ldr	r0, [r3, #0]
 8008870:	4770      	bx	lr
 8008872:	bf00      	nop
 8008874:	24000068 	.word	0x24000068

08008878 <__libc_init_array>:
 8008878:	b570      	push	{r4, r5, r6, lr}
 800887a:	4d0d      	ldr	r5, [pc, #52]	; (80088b0 <__libc_init_array+0x38>)
 800887c:	4c0d      	ldr	r4, [pc, #52]	; (80088b4 <__libc_init_array+0x3c>)
 800887e:	1b64      	subs	r4, r4, r5
 8008880:	10a4      	asrs	r4, r4, #2
 8008882:	2600      	movs	r6, #0
 8008884:	42a6      	cmp	r6, r4
 8008886:	d109      	bne.n	800889c <__libc_init_array+0x24>
 8008888:	4d0b      	ldr	r5, [pc, #44]	; (80088b8 <__libc_init_array+0x40>)
 800888a:	4c0c      	ldr	r4, [pc, #48]	; (80088bc <__libc_init_array+0x44>)
 800888c:	f002 ffa4 	bl	800b7d8 <_init>
 8008890:	1b64      	subs	r4, r4, r5
 8008892:	10a4      	asrs	r4, r4, #2
 8008894:	2600      	movs	r6, #0
 8008896:	42a6      	cmp	r6, r4
 8008898:	d105      	bne.n	80088a6 <__libc_init_array+0x2e>
 800889a:	bd70      	pop	{r4, r5, r6, pc}
 800889c:	f855 3b04 	ldr.w	r3, [r5], #4
 80088a0:	4798      	blx	r3
 80088a2:	3601      	adds	r6, #1
 80088a4:	e7ee      	b.n	8008884 <__libc_init_array+0xc>
 80088a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80088aa:	4798      	blx	r3
 80088ac:	3601      	adds	r6, #1
 80088ae:	e7f2      	b.n	8008896 <__libc_init_array+0x1e>
 80088b0:	0800c5f8 	.word	0x0800c5f8
 80088b4:	0800c5f8 	.word	0x0800c5f8
 80088b8:	0800c5f8 	.word	0x0800c5f8
 80088bc:	0800c5fc 	.word	0x0800c5fc

080088c0 <__retarget_lock_init_recursive>:
 80088c0:	4770      	bx	lr

080088c2 <__retarget_lock_acquire_recursive>:
 80088c2:	4770      	bx	lr

080088c4 <__retarget_lock_release_recursive>:
 80088c4:	4770      	bx	lr

080088c6 <quorem>:
 80088c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ca:	6903      	ldr	r3, [r0, #16]
 80088cc:	690c      	ldr	r4, [r1, #16]
 80088ce:	42a3      	cmp	r3, r4
 80088d0:	4607      	mov	r7, r0
 80088d2:	db7e      	blt.n	80089d2 <quorem+0x10c>
 80088d4:	3c01      	subs	r4, #1
 80088d6:	f101 0814 	add.w	r8, r1, #20
 80088da:	f100 0514 	add.w	r5, r0, #20
 80088de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80088e2:	9301      	str	r3, [sp, #4]
 80088e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80088e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80088ec:	3301      	adds	r3, #1
 80088ee:	429a      	cmp	r2, r3
 80088f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80088f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80088f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80088fc:	d331      	bcc.n	8008962 <quorem+0x9c>
 80088fe:	f04f 0e00 	mov.w	lr, #0
 8008902:	4640      	mov	r0, r8
 8008904:	46ac      	mov	ip, r5
 8008906:	46f2      	mov	sl, lr
 8008908:	f850 2b04 	ldr.w	r2, [r0], #4
 800890c:	b293      	uxth	r3, r2
 800890e:	fb06 e303 	mla	r3, r6, r3, lr
 8008912:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008916:	0c1a      	lsrs	r2, r3, #16
 8008918:	b29b      	uxth	r3, r3
 800891a:	ebaa 0303 	sub.w	r3, sl, r3
 800891e:	f8dc a000 	ldr.w	sl, [ip]
 8008922:	fa13 f38a 	uxtah	r3, r3, sl
 8008926:	fb06 220e 	mla	r2, r6, lr, r2
 800892a:	9300      	str	r3, [sp, #0]
 800892c:	9b00      	ldr	r3, [sp, #0]
 800892e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008932:	b292      	uxth	r2, r2
 8008934:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008938:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800893c:	f8bd 3000 	ldrh.w	r3, [sp]
 8008940:	4581      	cmp	r9, r0
 8008942:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008946:	f84c 3b04 	str.w	r3, [ip], #4
 800894a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800894e:	d2db      	bcs.n	8008908 <quorem+0x42>
 8008950:	f855 300b 	ldr.w	r3, [r5, fp]
 8008954:	b92b      	cbnz	r3, 8008962 <quorem+0x9c>
 8008956:	9b01      	ldr	r3, [sp, #4]
 8008958:	3b04      	subs	r3, #4
 800895a:	429d      	cmp	r5, r3
 800895c:	461a      	mov	r2, r3
 800895e:	d32c      	bcc.n	80089ba <quorem+0xf4>
 8008960:	613c      	str	r4, [r7, #16]
 8008962:	4638      	mov	r0, r7
 8008964:	f001 f920 	bl	8009ba8 <__mcmp>
 8008968:	2800      	cmp	r0, #0
 800896a:	db22      	blt.n	80089b2 <quorem+0xec>
 800896c:	3601      	adds	r6, #1
 800896e:	4629      	mov	r1, r5
 8008970:	2000      	movs	r0, #0
 8008972:	f858 2b04 	ldr.w	r2, [r8], #4
 8008976:	f8d1 c000 	ldr.w	ip, [r1]
 800897a:	b293      	uxth	r3, r2
 800897c:	1ac3      	subs	r3, r0, r3
 800897e:	0c12      	lsrs	r2, r2, #16
 8008980:	fa13 f38c 	uxtah	r3, r3, ip
 8008984:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008988:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800898c:	b29b      	uxth	r3, r3
 800898e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008992:	45c1      	cmp	r9, r8
 8008994:	f841 3b04 	str.w	r3, [r1], #4
 8008998:	ea4f 4022 	mov.w	r0, r2, asr #16
 800899c:	d2e9      	bcs.n	8008972 <quorem+0xac>
 800899e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80089a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80089a6:	b922      	cbnz	r2, 80089b2 <quorem+0xec>
 80089a8:	3b04      	subs	r3, #4
 80089aa:	429d      	cmp	r5, r3
 80089ac:	461a      	mov	r2, r3
 80089ae:	d30a      	bcc.n	80089c6 <quorem+0x100>
 80089b0:	613c      	str	r4, [r7, #16]
 80089b2:	4630      	mov	r0, r6
 80089b4:	b003      	add	sp, #12
 80089b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ba:	6812      	ldr	r2, [r2, #0]
 80089bc:	3b04      	subs	r3, #4
 80089be:	2a00      	cmp	r2, #0
 80089c0:	d1ce      	bne.n	8008960 <quorem+0x9a>
 80089c2:	3c01      	subs	r4, #1
 80089c4:	e7c9      	b.n	800895a <quorem+0x94>
 80089c6:	6812      	ldr	r2, [r2, #0]
 80089c8:	3b04      	subs	r3, #4
 80089ca:	2a00      	cmp	r2, #0
 80089cc:	d1f0      	bne.n	80089b0 <quorem+0xea>
 80089ce:	3c01      	subs	r4, #1
 80089d0:	e7eb      	b.n	80089aa <quorem+0xe4>
 80089d2:	2000      	movs	r0, #0
 80089d4:	e7ee      	b.n	80089b4 <quorem+0xee>
	...

080089d8 <_dtoa_r>:
 80089d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089dc:	ed2d 8b02 	vpush	{d8}
 80089e0:	69c5      	ldr	r5, [r0, #28]
 80089e2:	b091      	sub	sp, #68	; 0x44
 80089e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80089e8:	ec59 8b10 	vmov	r8, r9, d0
 80089ec:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80089ee:	9106      	str	r1, [sp, #24]
 80089f0:	4606      	mov	r6, r0
 80089f2:	9208      	str	r2, [sp, #32]
 80089f4:	930c      	str	r3, [sp, #48]	; 0x30
 80089f6:	b975      	cbnz	r5, 8008a16 <_dtoa_r+0x3e>
 80089f8:	2010      	movs	r0, #16
 80089fa:	f000 fda5 	bl	8009548 <malloc>
 80089fe:	4602      	mov	r2, r0
 8008a00:	61f0      	str	r0, [r6, #28]
 8008a02:	b920      	cbnz	r0, 8008a0e <_dtoa_r+0x36>
 8008a04:	4ba6      	ldr	r3, [pc, #664]	; (8008ca0 <_dtoa_r+0x2c8>)
 8008a06:	21ef      	movs	r1, #239	; 0xef
 8008a08:	48a6      	ldr	r0, [pc, #664]	; (8008ca4 <_dtoa_r+0x2cc>)
 8008a0a:	f001 fc0b 	bl	800a224 <__assert_func>
 8008a0e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008a12:	6005      	str	r5, [r0, #0]
 8008a14:	60c5      	str	r5, [r0, #12]
 8008a16:	69f3      	ldr	r3, [r6, #28]
 8008a18:	6819      	ldr	r1, [r3, #0]
 8008a1a:	b151      	cbz	r1, 8008a32 <_dtoa_r+0x5a>
 8008a1c:	685a      	ldr	r2, [r3, #4]
 8008a1e:	604a      	str	r2, [r1, #4]
 8008a20:	2301      	movs	r3, #1
 8008a22:	4093      	lsls	r3, r2
 8008a24:	608b      	str	r3, [r1, #8]
 8008a26:	4630      	mov	r0, r6
 8008a28:	f000 fe82 	bl	8009730 <_Bfree>
 8008a2c:	69f3      	ldr	r3, [r6, #28]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	601a      	str	r2, [r3, #0]
 8008a32:	f1b9 0300 	subs.w	r3, r9, #0
 8008a36:	bfbb      	ittet	lt
 8008a38:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008a3c:	9303      	strlt	r3, [sp, #12]
 8008a3e:	2300      	movge	r3, #0
 8008a40:	2201      	movlt	r2, #1
 8008a42:	bfac      	ite	ge
 8008a44:	6023      	strge	r3, [r4, #0]
 8008a46:	6022      	strlt	r2, [r4, #0]
 8008a48:	4b97      	ldr	r3, [pc, #604]	; (8008ca8 <_dtoa_r+0x2d0>)
 8008a4a:	9c03      	ldr	r4, [sp, #12]
 8008a4c:	43a3      	bics	r3, r4
 8008a4e:	d11c      	bne.n	8008a8a <_dtoa_r+0xb2>
 8008a50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a52:	f242 730f 	movw	r3, #9999	; 0x270f
 8008a56:	6013      	str	r3, [r2, #0]
 8008a58:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008a5c:	ea53 0308 	orrs.w	r3, r3, r8
 8008a60:	f000 84fb 	beq.w	800945a <_dtoa_r+0xa82>
 8008a64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008a66:	b963      	cbnz	r3, 8008a82 <_dtoa_r+0xaa>
 8008a68:	4b90      	ldr	r3, [pc, #576]	; (8008cac <_dtoa_r+0x2d4>)
 8008a6a:	e020      	b.n	8008aae <_dtoa_r+0xd6>
 8008a6c:	4b90      	ldr	r3, [pc, #576]	; (8008cb0 <_dtoa_r+0x2d8>)
 8008a6e:	9301      	str	r3, [sp, #4]
 8008a70:	3308      	adds	r3, #8
 8008a72:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008a74:	6013      	str	r3, [r2, #0]
 8008a76:	9801      	ldr	r0, [sp, #4]
 8008a78:	b011      	add	sp, #68	; 0x44
 8008a7a:	ecbd 8b02 	vpop	{d8}
 8008a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a82:	4b8a      	ldr	r3, [pc, #552]	; (8008cac <_dtoa_r+0x2d4>)
 8008a84:	9301      	str	r3, [sp, #4]
 8008a86:	3303      	adds	r3, #3
 8008a88:	e7f3      	b.n	8008a72 <_dtoa_r+0x9a>
 8008a8a:	ed9d 8b02 	vldr	d8, [sp, #8]
 8008a8e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a96:	d10c      	bne.n	8008ab2 <_dtoa_r+0xda>
 8008a98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	6013      	str	r3, [r2, #0]
 8008a9e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	f000 84d7 	beq.w	8009454 <_dtoa_r+0xa7c>
 8008aa6:	4b83      	ldr	r3, [pc, #524]	; (8008cb4 <_dtoa_r+0x2dc>)
 8008aa8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008aaa:	6013      	str	r3, [r2, #0]
 8008aac:	3b01      	subs	r3, #1
 8008aae:	9301      	str	r3, [sp, #4]
 8008ab0:	e7e1      	b.n	8008a76 <_dtoa_r+0x9e>
 8008ab2:	aa0e      	add	r2, sp, #56	; 0x38
 8008ab4:	a90f      	add	r1, sp, #60	; 0x3c
 8008ab6:	4630      	mov	r0, r6
 8008ab8:	eeb0 0b48 	vmov.f64	d0, d8
 8008abc:	f001 f91a 	bl	8009cf4 <__d2b>
 8008ac0:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8008ac4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ac6:	4605      	mov	r5, r0
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d046      	beq.n	8008b5a <_dtoa_r+0x182>
 8008acc:	eeb0 7b48 	vmov.f64	d7, d8
 8008ad0:	ee18 1a90 	vmov	r1, s17
 8008ad4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008ad8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8008adc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008ae0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008ae4:	2000      	movs	r0, #0
 8008ae6:	ee07 1a90 	vmov	s15, r1
 8008aea:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8008aee:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8008c88 <_dtoa_r+0x2b0>
 8008af2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008af6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8008c90 <_dtoa_r+0x2b8>
 8008afa:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008afe:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8008c98 <_dtoa_r+0x2c0>
 8008b02:	ee07 3a90 	vmov	s15, r3
 8008b06:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8008b0a:	eeb0 7b46 	vmov.f64	d7, d6
 8008b0e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8008b12:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8008b16:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b1e:	ee16 ba90 	vmov	fp, s13
 8008b22:	9009      	str	r0, [sp, #36]	; 0x24
 8008b24:	d508      	bpl.n	8008b38 <_dtoa_r+0x160>
 8008b26:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008b2a:	eeb4 6b47 	vcmp.f64	d6, d7
 8008b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b32:	bf18      	it	ne
 8008b34:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8008b38:	f1bb 0f16 	cmp.w	fp, #22
 8008b3c:	d82b      	bhi.n	8008b96 <_dtoa_r+0x1be>
 8008b3e:	495e      	ldr	r1, [pc, #376]	; (8008cb8 <_dtoa_r+0x2e0>)
 8008b40:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8008b44:	ed91 7b00 	vldr	d7, [r1]
 8008b48:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b50:	d501      	bpl.n	8008b56 <_dtoa_r+0x17e>
 8008b52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008b56:	2100      	movs	r1, #0
 8008b58:	e01e      	b.n	8008b98 <_dtoa_r+0x1c0>
 8008b5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b5c:	4413      	add	r3, r2
 8008b5e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8008b62:	2920      	cmp	r1, #32
 8008b64:	bfc1      	itttt	gt
 8008b66:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8008b6a:	408c      	lslgt	r4, r1
 8008b6c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8008b70:	fa28 f101 	lsrgt.w	r1, r8, r1
 8008b74:	bfd6      	itet	le
 8008b76:	f1c1 0120 	rsble	r1, r1, #32
 8008b7a:	4321      	orrgt	r1, r4
 8008b7c:	fa08 f101 	lslle.w	r1, r8, r1
 8008b80:	ee07 1a90 	vmov	s15, r1
 8008b84:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008b88:	3b01      	subs	r3, #1
 8008b8a:	ee17 1a90 	vmov	r1, s15
 8008b8e:	2001      	movs	r0, #1
 8008b90:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008b94:	e7a7      	b.n	8008ae6 <_dtoa_r+0x10e>
 8008b96:	2101      	movs	r1, #1
 8008b98:	1ad2      	subs	r2, r2, r3
 8008b9a:	1e53      	subs	r3, r2, #1
 8008b9c:	9305      	str	r3, [sp, #20]
 8008b9e:	bf45      	ittet	mi
 8008ba0:	f1c2 0301 	rsbmi	r3, r2, #1
 8008ba4:	9304      	strmi	r3, [sp, #16]
 8008ba6:	2300      	movpl	r3, #0
 8008ba8:	2300      	movmi	r3, #0
 8008baa:	bf4c      	ite	mi
 8008bac:	9305      	strmi	r3, [sp, #20]
 8008bae:	9304      	strpl	r3, [sp, #16]
 8008bb0:	f1bb 0f00 	cmp.w	fp, #0
 8008bb4:	910b      	str	r1, [sp, #44]	; 0x2c
 8008bb6:	db18      	blt.n	8008bea <_dtoa_r+0x212>
 8008bb8:	9b05      	ldr	r3, [sp, #20]
 8008bba:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8008bbe:	445b      	add	r3, fp
 8008bc0:	9305      	str	r3, [sp, #20]
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	9a06      	ldr	r2, [sp, #24]
 8008bc6:	2a09      	cmp	r2, #9
 8008bc8:	d848      	bhi.n	8008c5c <_dtoa_r+0x284>
 8008bca:	2a05      	cmp	r2, #5
 8008bcc:	bfc4      	itt	gt
 8008bce:	3a04      	subgt	r2, #4
 8008bd0:	9206      	strgt	r2, [sp, #24]
 8008bd2:	9a06      	ldr	r2, [sp, #24]
 8008bd4:	f1a2 0202 	sub.w	r2, r2, #2
 8008bd8:	bfcc      	ite	gt
 8008bda:	2400      	movgt	r4, #0
 8008bdc:	2401      	movle	r4, #1
 8008bde:	2a03      	cmp	r2, #3
 8008be0:	d847      	bhi.n	8008c72 <_dtoa_r+0x29a>
 8008be2:	e8df f002 	tbb	[pc, r2]
 8008be6:	2d0b      	.short	0x2d0b
 8008be8:	392b      	.short	0x392b
 8008bea:	9b04      	ldr	r3, [sp, #16]
 8008bec:	2200      	movs	r2, #0
 8008bee:	eba3 030b 	sub.w	r3, r3, fp
 8008bf2:	9304      	str	r3, [sp, #16]
 8008bf4:	920a      	str	r2, [sp, #40]	; 0x28
 8008bf6:	f1cb 0300 	rsb	r3, fp, #0
 8008bfa:	e7e3      	b.n	8008bc4 <_dtoa_r+0x1ec>
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	9207      	str	r2, [sp, #28]
 8008c00:	9a08      	ldr	r2, [sp, #32]
 8008c02:	2a00      	cmp	r2, #0
 8008c04:	dc38      	bgt.n	8008c78 <_dtoa_r+0x2a0>
 8008c06:	f04f 0a01 	mov.w	sl, #1
 8008c0a:	46d1      	mov	r9, sl
 8008c0c:	4652      	mov	r2, sl
 8008c0e:	f8cd a020 	str.w	sl, [sp, #32]
 8008c12:	69f7      	ldr	r7, [r6, #28]
 8008c14:	2100      	movs	r1, #0
 8008c16:	2004      	movs	r0, #4
 8008c18:	f100 0c14 	add.w	ip, r0, #20
 8008c1c:	4594      	cmp	ip, r2
 8008c1e:	d930      	bls.n	8008c82 <_dtoa_r+0x2aa>
 8008c20:	6079      	str	r1, [r7, #4]
 8008c22:	4630      	mov	r0, r6
 8008c24:	930d      	str	r3, [sp, #52]	; 0x34
 8008c26:	f000 fd43 	bl	80096b0 <_Balloc>
 8008c2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c2c:	9001      	str	r0, [sp, #4]
 8008c2e:	4602      	mov	r2, r0
 8008c30:	2800      	cmp	r0, #0
 8008c32:	d145      	bne.n	8008cc0 <_dtoa_r+0x2e8>
 8008c34:	4b21      	ldr	r3, [pc, #132]	; (8008cbc <_dtoa_r+0x2e4>)
 8008c36:	f240 11af 	movw	r1, #431	; 0x1af
 8008c3a:	e6e5      	b.n	8008a08 <_dtoa_r+0x30>
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	e7de      	b.n	8008bfe <_dtoa_r+0x226>
 8008c40:	2200      	movs	r2, #0
 8008c42:	9207      	str	r2, [sp, #28]
 8008c44:	9a08      	ldr	r2, [sp, #32]
 8008c46:	eb0b 0a02 	add.w	sl, fp, r2
 8008c4a:	f10a 0901 	add.w	r9, sl, #1
 8008c4e:	464a      	mov	r2, r9
 8008c50:	2a01      	cmp	r2, #1
 8008c52:	bfb8      	it	lt
 8008c54:	2201      	movlt	r2, #1
 8008c56:	e7dc      	b.n	8008c12 <_dtoa_r+0x23a>
 8008c58:	2201      	movs	r2, #1
 8008c5a:	e7f2      	b.n	8008c42 <_dtoa_r+0x26a>
 8008c5c:	2401      	movs	r4, #1
 8008c5e:	2200      	movs	r2, #0
 8008c60:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8008c64:	f04f 3aff 	mov.w	sl, #4294967295
 8008c68:	2100      	movs	r1, #0
 8008c6a:	46d1      	mov	r9, sl
 8008c6c:	2212      	movs	r2, #18
 8008c6e:	9108      	str	r1, [sp, #32]
 8008c70:	e7cf      	b.n	8008c12 <_dtoa_r+0x23a>
 8008c72:	2201      	movs	r2, #1
 8008c74:	9207      	str	r2, [sp, #28]
 8008c76:	e7f5      	b.n	8008c64 <_dtoa_r+0x28c>
 8008c78:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008c7c:	46d1      	mov	r9, sl
 8008c7e:	4652      	mov	r2, sl
 8008c80:	e7c7      	b.n	8008c12 <_dtoa_r+0x23a>
 8008c82:	3101      	adds	r1, #1
 8008c84:	0040      	lsls	r0, r0, #1
 8008c86:	e7c7      	b.n	8008c18 <_dtoa_r+0x240>
 8008c88:	636f4361 	.word	0x636f4361
 8008c8c:	3fd287a7 	.word	0x3fd287a7
 8008c90:	8b60c8b3 	.word	0x8b60c8b3
 8008c94:	3fc68a28 	.word	0x3fc68a28
 8008c98:	509f79fb 	.word	0x509f79fb
 8008c9c:	3fd34413 	.word	0x3fd34413
 8008ca0:	0800b871 	.word	0x0800b871
 8008ca4:	0800b888 	.word	0x0800b888
 8008ca8:	7ff00000 	.word	0x7ff00000
 8008cac:	0800b86d 	.word	0x0800b86d
 8008cb0:	0800b864 	.word	0x0800b864
 8008cb4:	0800b841 	.word	0x0800b841
 8008cb8:	0800b978 	.word	0x0800b978
 8008cbc:	0800b8e0 	.word	0x0800b8e0
 8008cc0:	69f2      	ldr	r2, [r6, #28]
 8008cc2:	9901      	ldr	r1, [sp, #4]
 8008cc4:	6011      	str	r1, [r2, #0]
 8008cc6:	f1b9 0f0e 	cmp.w	r9, #14
 8008cca:	d86c      	bhi.n	8008da6 <_dtoa_r+0x3ce>
 8008ccc:	2c00      	cmp	r4, #0
 8008cce:	d06a      	beq.n	8008da6 <_dtoa_r+0x3ce>
 8008cd0:	f1bb 0f00 	cmp.w	fp, #0
 8008cd4:	f340 80a0 	ble.w	8008e18 <_dtoa_r+0x440>
 8008cd8:	4ac1      	ldr	r2, [pc, #772]	; (8008fe0 <_dtoa_r+0x608>)
 8008cda:	f00b 010f 	and.w	r1, fp, #15
 8008cde:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8008ce2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008ce6:	ed92 7b00 	vldr	d7, [r2]
 8008cea:	ea4f 122b 	mov.w	r2, fp, asr #4
 8008cee:	f000 8087 	beq.w	8008e00 <_dtoa_r+0x428>
 8008cf2:	49bc      	ldr	r1, [pc, #752]	; (8008fe4 <_dtoa_r+0x60c>)
 8008cf4:	ed91 6b08 	vldr	d6, [r1, #32]
 8008cf8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8008cfc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008d00:	f002 020f 	and.w	r2, r2, #15
 8008d04:	2103      	movs	r1, #3
 8008d06:	48b7      	ldr	r0, [pc, #732]	; (8008fe4 <_dtoa_r+0x60c>)
 8008d08:	2a00      	cmp	r2, #0
 8008d0a:	d17b      	bne.n	8008e04 <_dtoa_r+0x42c>
 8008d0c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008d10:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008d14:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008d18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008d1a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008d1e:	2a00      	cmp	r2, #0
 8008d20:	f000 80a0 	beq.w	8008e64 <_dtoa_r+0x48c>
 8008d24:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008d28:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d30:	f140 8098 	bpl.w	8008e64 <_dtoa_r+0x48c>
 8008d34:	f1b9 0f00 	cmp.w	r9, #0
 8008d38:	f000 8094 	beq.w	8008e64 <_dtoa_r+0x48c>
 8008d3c:	f1ba 0f00 	cmp.w	sl, #0
 8008d40:	dd2f      	ble.n	8008da2 <_dtoa_r+0x3ca>
 8008d42:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8008d46:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008d4a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008d4e:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008d52:	3101      	adds	r1, #1
 8008d54:	4654      	mov	r4, sl
 8008d56:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008d5a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8008d5e:	ee07 1a90 	vmov	s15, r1
 8008d62:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008d66:	eea7 5b06 	vfma.f64	d5, d7, d6
 8008d6a:	ee15 7a90 	vmov	r7, s11
 8008d6e:	ec51 0b15 	vmov	r0, r1, d5
 8008d72:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8008d76:	2c00      	cmp	r4, #0
 8008d78:	d177      	bne.n	8008e6a <_dtoa_r+0x492>
 8008d7a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008d7e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008d82:	ec41 0b17 	vmov	d7, r0, r1
 8008d86:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d8e:	f300 826a 	bgt.w	8009266 <_dtoa_r+0x88e>
 8008d92:	eeb1 7b47 	vneg.f64	d7, d7
 8008d96:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d9e:	f100 8260 	bmi.w	8009262 <_dtoa_r+0x88a>
 8008da2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008da6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008da8:	2a00      	cmp	r2, #0
 8008daa:	f2c0 811d 	blt.w	8008fe8 <_dtoa_r+0x610>
 8008dae:	f1bb 0f0e 	cmp.w	fp, #14
 8008db2:	f300 8119 	bgt.w	8008fe8 <_dtoa_r+0x610>
 8008db6:	4b8a      	ldr	r3, [pc, #552]	; (8008fe0 <_dtoa_r+0x608>)
 8008db8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008dbc:	ed93 6b00 	vldr	d6, [r3]
 8008dc0:	9b08      	ldr	r3, [sp, #32]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	f280 80b7 	bge.w	8008f36 <_dtoa_r+0x55e>
 8008dc8:	f1b9 0f00 	cmp.w	r9, #0
 8008dcc:	f300 80b3 	bgt.w	8008f36 <_dtoa_r+0x55e>
 8008dd0:	f040 8246 	bne.w	8009260 <_dtoa_r+0x888>
 8008dd4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008dd8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008ddc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008de0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008de8:	464c      	mov	r4, r9
 8008dea:	464f      	mov	r7, r9
 8008dec:	f280 821c 	bge.w	8009228 <_dtoa_r+0x850>
 8008df0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008df4:	2331      	movs	r3, #49	; 0x31
 8008df6:	f808 3b01 	strb.w	r3, [r8], #1
 8008dfa:	f10b 0b01 	add.w	fp, fp, #1
 8008dfe:	e218      	b.n	8009232 <_dtoa_r+0x85a>
 8008e00:	2102      	movs	r1, #2
 8008e02:	e780      	b.n	8008d06 <_dtoa_r+0x32e>
 8008e04:	07d4      	lsls	r4, r2, #31
 8008e06:	d504      	bpl.n	8008e12 <_dtoa_r+0x43a>
 8008e08:	ed90 6b00 	vldr	d6, [r0]
 8008e0c:	3101      	adds	r1, #1
 8008e0e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008e12:	1052      	asrs	r2, r2, #1
 8008e14:	3008      	adds	r0, #8
 8008e16:	e777      	b.n	8008d08 <_dtoa_r+0x330>
 8008e18:	d022      	beq.n	8008e60 <_dtoa_r+0x488>
 8008e1a:	f1cb 0200 	rsb	r2, fp, #0
 8008e1e:	4970      	ldr	r1, [pc, #448]	; (8008fe0 <_dtoa_r+0x608>)
 8008e20:	f002 000f 	and.w	r0, r2, #15
 8008e24:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008e28:	ed91 7b00 	vldr	d7, [r1]
 8008e2c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8008e30:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008e34:	486b      	ldr	r0, [pc, #428]	; (8008fe4 <_dtoa_r+0x60c>)
 8008e36:	1112      	asrs	r2, r2, #4
 8008e38:	2400      	movs	r4, #0
 8008e3a:	2102      	movs	r1, #2
 8008e3c:	b92a      	cbnz	r2, 8008e4a <_dtoa_r+0x472>
 8008e3e:	2c00      	cmp	r4, #0
 8008e40:	f43f af6a 	beq.w	8008d18 <_dtoa_r+0x340>
 8008e44:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008e48:	e766      	b.n	8008d18 <_dtoa_r+0x340>
 8008e4a:	07d7      	lsls	r7, r2, #31
 8008e4c:	d505      	bpl.n	8008e5a <_dtoa_r+0x482>
 8008e4e:	ed90 6b00 	vldr	d6, [r0]
 8008e52:	3101      	adds	r1, #1
 8008e54:	2401      	movs	r4, #1
 8008e56:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008e5a:	1052      	asrs	r2, r2, #1
 8008e5c:	3008      	adds	r0, #8
 8008e5e:	e7ed      	b.n	8008e3c <_dtoa_r+0x464>
 8008e60:	2102      	movs	r1, #2
 8008e62:	e759      	b.n	8008d18 <_dtoa_r+0x340>
 8008e64:	465a      	mov	r2, fp
 8008e66:	464c      	mov	r4, r9
 8008e68:	e775      	b.n	8008d56 <_dtoa_r+0x37e>
 8008e6a:	ec41 0b17 	vmov	d7, r0, r1
 8008e6e:	495c      	ldr	r1, [pc, #368]	; (8008fe0 <_dtoa_r+0x608>)
 8008e70:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8008e74:	ed11 4b02 	vldr	d4, [r1, #-8]
 8008e78:	9901      	ldr	r1, [sp, #4]
 8008e7a:	440c      	add	r4, r1
 8008e7c:	9907      	ldr	r1, [sp, #28]
 8008e7e:	b351      	cbz	r1, 8008ed6 <_dtoa_r+0x4fe>
 8008e80:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8008e84:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008e88:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008e8c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008e90:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008e94:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008e98:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008e9c:	ee14 1a90 	vmov	r1, s9
 8008ea0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008ea4:	3130      	adds	r1, #48	; 0x30
 8008ea6:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008eaa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eb2:	f808 1b01 	strb.w	r1, [r8], #1
 8008eb6:	d439      	bmi.n	8008f2c <_dtoa_r+0x554>
 8008eb8:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008ebc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ec4:	d472      	bmi.n	8008fac <_dtoa_r+0x5d4>
 8008ec6:	45a0      	cmp	r8, r4
 8008ec8:	f43f af6b 	beq.w	8008da2 <_dtoa_r+0x3ca>
 8008ecc:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008ed0:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008ed4:	e7e0      	b.n	8008e98 <_dtoa_r+0x4c0>
 8008ed6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008eda:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008ede:	4620      	mov	r0, r4
 8008ee0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008ee4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008ee8:	ee14 1a90 	vmov	r1, s9
 8008eec:	3130      	adds	r1, #48	; 0x30
 8008eee:	f808 1b01 	strb.w	r1, [r8], #1
 8008ef2:	45a0      	cmp	r8, r4
 8008ef4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008ef8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008efc:	d118      	bne.n	8008f30 <_dtoa_r+0x558>
 8008efe:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008f02:	ee37 4b05 	vadd.f64	d4, d7, d5
 8008f06:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8008f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f0e:	dc4d      	bgt.n	8008fac <_dtoa_r+0x5d4>
 8008f10:	ee35 5b47 	vsub.f64	d5, d5, d7
 8008f14:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8008f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f1c:	f57f af41 	bpl.w	8008da2 <_dtoa_r+0x3ca>
 8008f20:	4680      	mov	r8, r0
 8008f22:	3801      	subs	r0, #1
 8008f24:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8008f28:	2b30      	cmp	r3, #48	; 0x30
 8008f2a:	d0f9      	beq.n	8008f20 <_dtoa_r+0x548>
 8008f2c:	4693      	mov	fp, r2
 8008f2e:	e02a      	b.n	8008f86 <_dtoa_r+0x5ae>
 8008f30:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008f34:	e7d6      	b.n	8008ee4 <_dtoa_r+0x50c>
 8008f36:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008f3a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8008f3e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008f42:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008f46:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8008f4a:	ee15 3a10 	vmov	r3, s10
 8008f4e:	3330      	adds	r3, #48	; 0x30
 8008f50:	f808 3b01 	strb.w	r3, [r8], #1
 8008f54:	9b01      	ldr	r3, [sp, #4]
 8008f56:	eba8 0303 	sub.w	r3, r8, r3
 8008f5a:	4599      	cmp	r9, r3
 8008f5c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008f60:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008f64:	d133      	bne.n	8008fce <_dtoa_r+0x5f6>
 8008f66:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008f6a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f72:	dc1a      	bgt.n	8008faa <_dtoa_r+0x5d2>
 8008f74:	eeb4 7b46 	vcmp.f64	d7, d6
 8008f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f7c:	d103      	bne.n	8008f86 <_dtoa_r+0x5ae>
 8008f7e:	ee15 3a10 	vmov	r3, s10
 8008f82:	07d9      	lsls	r1, r3, #31
 8008f84:	d411      	bmi.n	8008faa <_dtoa_r+0x5d2>
 8008f86:	4629      	mov	r1, r5
 8008f88:	4630      	mov	r0, r6
 8008f8a:	f000 fbd1 	bl	8009730 <_Bfree>
 8008f8e:	2300      	movs	r3, #0
 8008f90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f92:	f888 3000 	strb.w	r3, [r8]
 8008f96:	f10b 0301 	add.w	r3, fp, #1
 8008f9a:	6013      	str	r3, [r2, #0]
 8008f9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	f43f ad69 	beq.w	8008a76 <_dtoa_r+0x9e>
 8008fa4:	f8c3 8000 	str.w	r8, [r3]
 8008fa8:	e565      	b.n	8008a76 <_dtoa_r+0x9e>
 8008faa:	465a      	mov	r2, fp
 8008fac:	4643      	mov	r3, r8
 8008fae:	4698      	mov	r8, r3
 8008fb0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8008fb4:	2939      	cmp	r1, #57	; 0x39
 8008fb6:	d106      	bne.n	8008fc6 <_dtoa_r+0x5ee>
 8008fb8:	9901      	ldr	r1, [sp, #4]
 8008fba:	4299      	cmp	r1, r3
 8008fbc:	d1f7      	bne.n	8008fae <_dtoa_r+0x5d6>
 8008fbe:	9801      	ldr	r0, [sp, #4]
 8008fc0:	2130      	movs	r1, #48	; 0x30
 8008fc2:	3201      	adds	r2, #1
 8008fc4:	7001      	strb	r1, [r0, #0]
 8008fc6:	7819      	ldrb	r1, [r3, #0]
 8008fc8:	3101      	adds	r1, #1
 8008fca:	7019      	strb	r1, [r3, #0]
 8008fcc:	e7ae      	b.n	8008f2c <_dtoa_r+0x554>
 8008fce:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008fd2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fda:	d1b2      	bne.n	8008f42 <_dtoa_r+0x56a>
 8008fdc:	e7d3      	b.n	8008f86 <_dtoa_r+0x5ae>
 8008fde:	bf00      	nop
 8008fe0:	0800b978 	.word	0x0800b978
 8008fe4:	0800b950 	.word	0x0800b950
 8008fe8:	9907      	ldr	r1, [sp, #28]
 8008fea:	2900      	cmp	r1, #0
 8008fec:	f000 80d0 	beq.w	8009190 <_dtoa_r+0x7b8>
 8008ff0:	9906      	ldr	r1, [sp, #24]
 8008ff2:	2901      	cmp	r1, #1
 8008ff4:	f300 80b4 	bgt.w	8009160 <_dtoa_r+0x788>
 8008ff8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ffa:	2900      	cmp	r1, #0
 8008ffc:	f000 80ac 	beq.w	8009158 <_dtoa_r+0x780>
 8009000:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009004:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009008:	461c      	mov	r4, r3
 800900a:	9309      	str	r3, [sp, #36]	; 0x24
 800900c:	9b04      	ldr	r3, [sp, #16]
 800900e:	4413      	add	r3, r2
 8009010:	9304      	str	r3, [sp, #16]
 8009012:	9b05      	ldr	r3, [sp, #20]
 8009014:	2101      	movs	r1, #1
 8009016:	4413      	add	r3, r2
 8009018:	4630      	mov	r0, r6
 800901a:	9305      	str	r3, [sp, #20]
 800901c:	f000 fc3e 	bl	800989c <__i2b>
 8009020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009022:	4607      	mov	r7, r0
 8009024:	f1b8 0f00 	cmp.w	r8, #0
 8009028:	d00d      	beq.n	8009046 <_dtoa_r+0x66e>
 800902a:	9a05      	ldr	r2, [sp, #20]
 800902c:	2a00      	cmp	r2, #0
 800902e:	dd0a      	ble.n	8009046 <_dtoa_r+0x66e>
 8009030:	4542      	cmp	r2, r8
 8009032:	9904      	ldr	r1, [sp, #16]
 8009034:	bfa8      	it	ge
 8009036:	4642      	movge	r2, r8
 8009038:	1a89      	subs	r1, r1, r2
 800903a:	9104      	str	r1, [sp, #16]
 800903c:	9905      	ldr	r1, [sp, #20]
 800903e:	eba8 0802 	sub.w	r8, r8, r2
 8009042:	1a8a      	subs	r2, r1, r2
 8009044:	9205      	str	r2, [sp, #20]
 8009046:	b303      	cbz	r3, 800908a <_dtoa_r+0x6b2>
 8009048:	9a07      	ldr	r2, [sp, #28]
 800904a:	2a00      	cmp	r2, #0
 800904c:	f000 80a5 	beq.w	800919a <_dtoa_r+0x7c2>
 8009050:	2c00      	cmp	r4, #0
 8009052:	dd13      	ble.n	800907c <_dtoa_r+0x6a4>
 8009054:	4639      	mov	r1, r7
 8009056:	4622      	mov	r2, r4
 8009058:	4630      	mov	r0, r6
 800905a:	930d      	str	r3, [sp, #52]	; 0x34
 800905c:	f000 fcde 	bl	8009a1c <__pow5mult>
 8009060:	462a      	mov	r2, r5
 8009062:	4601      	mov	r1, r0
 8009064:	4607      	mov	r7, r0
 8009066:	4630      	mov	r0, r6
 8009068:	f000 fc2e 	bl	80098c8 <__multiply>
 800906c:	4629      	mov	r1, r5
 800906e:	9009      	str	r0, [sp, #36]	; 0x24
 8009070:	4630      	mov	r0, r6
 8009072:	f000 fb5d 	bl	8009730 <_Bfree>
 8009076:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009078:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800907a:	4615      	mov	r5, r2
 800907c:	1b1a      	subs	r2, r3, r4
 800907e:	d004      	beq.n	800908a <_dtoa_r+0x6b2>
 8009080:	4629      	mov	r1, r5
 8009082:	4630      	mov	r0, r6
 8009084:	f000 fcca 	bl	8009a1c <__pow5mult>
 8009088:	4605      	mov	r5, r0
 800908a:	2101      	movs	r1, #1
 800908c:	4630      	mov	r0, r6
 800908e:	f000 fc05 	bl	800989c <__i2b>
 8009092:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009094:	2b00      	cmp	r3, #0
 8009096:	4604      	mov	r4, r0
 8009098:	f340 8081 	ble.w	800919e <_dtoa_r+0x7c6>
 800909c:	461a      	mov	r2, r3
 800909e:	4601      	mov	r1, r0
 80090a0:	4630      	mov	r0, r6
 80090a2:	f000 fcbb 	bl	8009a1c <__pow5mult>
 80090a6:	9b06      	ldr	r3, [sp, #24]
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	4604      	mov	r4, r0
 80090ac:	dd7a      	ble.n	80091a4 <_dtoa_r+0x7cc>
 80090ae:	2300      	movs	r3, #0
 80090b0:	9309      	str	r3, [sp, #36]	; 0x24
 80090b2:	6922      	ldr	r2, [r4, #16]
 80090b4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80090b8:	6910      	ldr	r0, [r2, #16]
 80090ba:	f000 fba1 	bl	8009800 <__hi0bits>
 80090be:	f1c0 0020 	rsb	r0, r0, #32
 80090c2:	9b05      	ldr	r3, [sp, #20]
 80090c4:	4418      	add	r0, r3
 80090c6:	f010 001f 	ands.w	r0, r0, #31
 80090ca:	f000 8093 	beq.w	80091f4 <_dtoa_r+0x81c>
 80090ce:	f1c0 0220 	rsb	r2, r0, #32
 80090d2:	2a04      	cmp	r2, #4
 80090d4:	f340 8085 	ble.w	80091e2 <_dtoa_r+0x80a>
 80090d8:	9b04      	ldr	r3, [sp, #16]
 80090da:	f1c0 001c 	rsb	r0, r0, #28
 80090de:	4403      	add	r3, r0
 80090e0:	9304      	str	r3, [sp, #16]
 80090e2:	9b05      	ldr	r3, [sp, #20]
 80090e4:	4480      	add	r8, r0
 80090e6:	4403      	add	r3, r0
 80090e8:	9305      	str	r3, [sp, #20]
 80090ea:	9b04      	ldr	r3, [sp, #16]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	dd05      	ble.n	80090fc <_dtoa_r+0x724>
 80090f0:	4629      	mov	r1, r5
 80090f2:	461a      	mov	r2, r3
 80090f4:	4630      	mov	r0, r6
 80090f6:	f000 fceb 	bl	8009ad0 <__lshift>
 80090fa:	4605      	mov	r5, r0
 80090fc:	9b05      	ldr	r3, [sp, #20]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	dd05      	ble.n	800910e <_dtoa_r+0x736>
 8009102:	4621      	mov	r1, r4
 8009104:	461a      	mov	r2, r3
 8009106:	4630      	mov	r0, r6
 8009108:	f000 fce2 	bl	8009ad0 <__lshift>
 800910c:	4604      	mov	r4, r0
 800910e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009110:	2b00      	cmp	r3, #0
 8009112:	d071      	beq.n	80091f8 <_dtoa_r+0x820>
 8009114:	4621      	mov	r1, r4
 8009116:	4628      	mov	r0, r5
 8009118:	f000 fd46 	bl	8009ba8 <__mcmp>
 800911c:	2800      	cmp	r0, #0
 800911e:	da6b      	bge.n	80091f8 <_dtoa_r+0x820>
 8009120:	2300      	movs	r3, #0
 8009122:	4629      	mov	r1, r5
 8009124:	220a      	movs	r2, #10
 8009126:	4630      	mov	r0, r6
 8009128:	f000 fb24 	bl	8009774 <__multadd>
 800912c:	9b07      	ldr	r3, [sp, #28]
 800912e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009132:	4605      	mov	r5, r0
 8009134:	2b00      	cmp	r3, #0
 8009136:	f000 8197 	beq.w	8009468 <_dtoa_r+0xa90>
 800913a:	4639      	mov	r1, r7
 800913c:	2300      	movs	r3, #0
 800913e:	220a      	movs	r2, #10
 8009140:	4630      	mov	r0, r6
 8009142:	f000 fb17 	bl	8009774 <__multadd>
 8009146:	f1ba 0f00 	cmp.w	sl, #0
 800914a:	4607      	mov	r7, r0
 800914c:	f300 8093 	bgt.w	8009276 <_dtoa_r+0x89e>
 8009150:	9b06      	ldr	r3, [sp, #24]
 8009152:	2b02      	cmp	r3, #2
 8009154:	dc57      	bgt.n	8009206 <_dtoa_r+0x82e>
 8009156:	e08e      	b.n	8009276 <_dtoa_r+0x89e>
 8009158:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800915a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800915e:	e751      	b.n	8009004 <_dtoa_r+0x62c>
 8009160:	f109 34ff 	add.w	r4, r9, #4294967295
 8009164:	42a3      	cmp	r3, r4
 8009166:	bfbf      	itttt	lt
 8009168:	1ae2      	sublt	r2, r4, r3
 800916a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800916c:	189b      	addlt	r3, r3, r2
 800916e:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009170:	bfae      	itee	ge
 8009172:	1b1c      	subge	r4, r3, r4
 8009174:	4623      	movlt	r3, r4
 8009176:	2400      	movlt	r4, #0
 8009178:	f1b9 0f00 	cmp.w	r9, #0
 800917c:	bfb5      	itete	lt
 800917e:	9a04      	ldrlt	r2, [sp, #16]
 8009180:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8009184:	eba2 0809 	sublt.w	r8, r2, r9
 8009188:	464a      	movge	r2, r9
 800918a:	bfb8      	it	lt
 800918c:	2200      	movlt	r2, #0
 800918e:	e73c      	b.n	800900a <_dtoa_r+0x632>
 8009190:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009194:	9f07      	ldr	r7, [sp, #28]
 8009196:	461c      	mov	r4, r3
 8009198:	e744      	b.n	8009024 <_dtoa_r+0x64c>
 800919a:	461a      	mov	r2, r3
 800919c:	e770      	b.n	8009080 <_dtoa_r+0x6a8>
 800919e:	9b06      	ldr	r3, [sp, #24]
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	dc18      	bgt.n	80091d6 <_dtoa_r+0x7fe>
 80091a4:	9b02      	ldr	r3, [sp, #8]
 80091a6:	b9b3      	cbnz	r3, 80091d6 <_dtoa_r+0x7fe>
 80091a8:	9b03      	ldr	r3, [sp, #12]
 80091aa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80091ae:	b9a2      	cbnz	r2, 80091da <_dtoa_r+0x802>
 80091b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80091b4:	0d12      	lsrs	r2, r2, #20
 80091b6:	0512      	lsls	r2, r2, #20
 80091b8:	b18a      	cbz	r2, 80091de <_dtoa_r+0x806>
 80091ba:	9b04      	ldr	r3, [sp, #16]
 80091bc:	3301      	adds	r3, #1
 80091be:	9304      	str	r3, [sp, #16]
 80091c0:	9b05      	ldr	r3, [sp, #20]
 80091c2:	3301      	adds	r3, #1
 80091c4:	9305      	str	r3, [sp, #20]
 80091c6:	2301      	movs	r3, #1
 80091c8:	9309      	str	r3, [sp, #36]	; 0x24
 80091ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	f47f af70 	bne.w	80090b2 <_dtoa_r+0x6da>
 80091d2:	2001      	movs	r0, #1
 80091d4:	e775      	b.n	80090c2 <_dtoa_r+0x6ea>
 80091d6:	2300      	movs	r3, #0
 80091d8:	e7f6      	b.n	80091c8 <_dtoa_r+0x7f0>
 80091da:	9b02      	ldr	r3, [sp, #8]
 80091dc:	e7f4      	b.n	80091c8 <_dtoa_r+0x7f0>
 80091de:	9209      	str	r2, [sp, #36]	; 0x24
 80091e0:	e7f3      	b.n	80091ca <_dtoa_r+0x7f2>
 80091e2:	d082      	beq.n	80090ea <_dtoa_r+0x712>
 80091e4:	9b04      	ldr	r3, [sp, #16]
 80091e6:	321c      	adds	r2, #28
 80091e8:	4413      	add	r3, r2
 80091ea:	9304      	str	r3, [sp, #16]
 80091ec:	9b05      	ldr	r3, [sp, #20]
 80091ee:	4490      	add	r8, r2
 80091f0:	4413      	add	r3, r2
 80091f2:	e779      	b.n	80090e8 <_dtoa_r+0x710>
 80091f4:	4602      	mov	r2, r0
 80091f6:	e7f5      	b.n	80091e4 <_dtoa_r+0x80c>
 80091f8:	f1b9 0f00 	cmp.w	r9, #0
 80091fc:	dc36      	bgt.n	800926c <_dtoa_r+0x894>
 80091fe:	9b06      	ldr	r3, [sp, #24]
 8009200:	2b02      	cmp	r3, #2
 8009202:	dd33      	ble.n	800926c <_dtoa_r+0x894>
 8009204:	46ca      	mov	sl, r9
 8009206:	f1ba 0f00 	cmp.w	sl, #0
 800920a:	d10d      	bne.n	8009228 <_dtoa_r+0x850>
 800920c:	4621      	mov	r1, r4
 800920e:	4653      	mov	r3, sl
 8009210:	2205      	movs	r2, #5
 8009212:	4630      	mov	r0, r6
 8009214:	f000 faae 	bl	8009774 <__multadd>
 8009218:	4601      	mov	r1, r0
 800921a:	4604      	mov	r4, r0
 800921c:	4628      	mov	r0, r5
 800921e:	f000 fcc3 	bl	8009ba8 <__mcmp>
 8009222:	2800      	cmp	r0, #0
 8009224:	f73f ade4 	bgt.w	8008df0 <_dtoa_r+0x418>
 8009228:	9b08      	ldr	r3, [sp, #32]
 800922a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800922e:	ea6f 0b03 	mvn.w	fp, r3
 8009232:	f04f 0900 	mov.w	r9, #0
 8009236:	4621      	mov	r1, r4
 8009238:	4630      	mov	r0, r6
 800923a:	f000 fa79 	bl	8009730 <_Bfree>
 800923e:	2f00      	cmp	r7, #0
 8009240:	f43f aea1 	beq.w	8008f86 <_dtoa_r+0x5ae>
 8009244:	f1b9 0f00 	cmp.w	r9, #0
 8009248:	d005      	beq.n	8009256 <_dtoa_r+0x87e>
 800924a:	45b9      	cmp	r9, r7
 800924c:	d003      	beq.n	8009256 <_dtoa_r+0x87e>
 800924e:	4649      	mov	r1, r9
 8009250:	4630      	mov	r0, r6
 8009252:	f000 fa6d 	bl	8009730 <_Bfree>
 8009256:	4639      	mov	r1, r7
 8009258:	4630      	mov	r0, r6
 800925a:	f000 fa69 	bl	8009730 <_Bfree>
 800925e:	e692      	b.n	8008f86 <_dtoa_r+0x5ae>
 8009260:	2400      	movs	r4, #0
 8009262:	4627      	mov	r7, r4
 8009264:	e7e0      	b.n	8009228 <_dtoa_r+0x850>
 8009266:	4693      	mov	fp, r2
 8009268:	4627      	mov	r7, r4
 800926a:	e5c1      	b.n	8008df0 <_dtoa_r+0x418>
 800926c:	9b07      	ldr	r3, [sp, #28]
 800926e:	46ca      	mov	sl, r9
 8009270:	2b00      	cmp	r3, #0
 8009272:	f000 8100 	beq.w	8009476 <_dtoa_r+0xa9e>
 8009276:	f1b8 0f00 	cmp.w	r8, #0
 800927a:	dd05      	ble.n	8009288 <_dtoa_r+0x8b0>
 800927c:	4639      	mov	r1, r7
 800927e:	4642      	mov	r2, r8
 8009280:	4630      	mov	r0, r6
 8009282:	f000 fc25 	bl	8009ad0 <__lshift>
 8009286:	4607      	mov	r7, r0
 8009288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800928a:	2b00      	cmp	r3, #0
 800928c:	d05d      	beq.n	800934a <_dtoa_r+0x972>
 800928e:	6879      	ldr	r1, [r7, #4]
 8009290:	4630      	mov	r0, r6
 8009292:	f000 fa0d 	bl	80096b0 <_Balloc>
 8009296:	4680      	mov	r8, r0
 8009298:	b928      	cbnz	r0, 80092a6 <_dtoa_r+0x8ce>
 800929a:	4b82      	ldr	r3, [pc, #520]	; (80094a4 <_dtoa_r+0xacc>)
 800929c:	4602      	mov	r2, r0
 800929e:	f240 21ef 	movw	r1, #751	; 0x2ef
 80092a2:	f7ff bbb1 	b.w	8008a08 <_dtoa_r+0x30>
 80092a6:	693a      	ldr	r2, [r7, #16]
 80092a8:	3202      	adds	r2, #2
 80092aa:	0092      	lsls	r2, r2, #2
 80092ac:	f107 010c 	add.w	r1, r7, #12
 80092b0:	300c      	adds	r0, #12
 80092b2:	f000 ffa9 	bl	800a208 <memcpy>
 80092b6:	2201      	movs	r2, #1
 80092b8:	4641      	mov	r1, r8
 80092ba:	4630      	mov	r0, r6
 80092bc:	f000 fc08 	bl	8009ad0 <__lshift>
 80092c0:	9b01      	ldr	r3, [sp, #4]
 80092c2:	3301      	adds	r3, #1
 80092c4:	9304      	str	r3, [sp, #16]
 80092c6:	9b01      	ldr	r3, [sp, #4]
 80092c8:	4453      	add	r3, sl
 80092ca:	9308      	str	r3, [sp, #32]
 80092cc:	9b02      	ldr	r3, [sp, #8]
 80092ce:	f003 0301 	and.w	r3, r3, #1
 80092d2:	46b9      	mov	r9, r7
 80092d4:	9307      	str	r3, [sp, #28]
 80092d6:	4607      	mov	r7, r0
 80092d8:	9b04      	ldr	r3, [sp, #16]
 80092da:	4621      	mov	r1, r4
 80092dc:	3b01      	subs	r3, #1
 80092de:	4628      	mov	r0, r5
 80092e0:	9302      	str	r3, [sp, #8]
 80092e2:	f7ff faf0 	bl	80088c6 <quorem>
 80092e6:	4603      	mov	r3, r0
 80092e8:	3330      	adds	r3, #48	; 0x30
 80092ea:	9005      	str	r0, [sp, #20]
 80092ec:	4649      	mov	r1, r9
 80092ee:	4628      	mov	r0, r5
 80092f0:	9309      	str	r3, [sp, #36]	; 0x24
 80092f2:	f000 fc59 	bl	8009ba8 <__mcmp>
 80092f6:	463a      	mov	r2, r7
 80092f8:	4682      	mov	sl, r0
 80092fa:	4621      	mov	r1, r4
 80092fc:	4630      	mov	r0, r6
 80092fe:	f000 fc6f 	bl	8009be0 <__mdiff>
 8009302:	68c2      	ldr	r2, [r0, #12]
 8009304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009306:	4680      	mov	r8, r0
 8009308:	bb0a      	cbnz	r2, 800934e <_dtoa_r+0x976>
 800930a:	4601      	mov	r1, r0
 800930c:	4628      	mov	r0, r5
 800930e:	f000 fc4b 	bl	8009ba8 <__mcmp>
 8009312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009314:	4602      	mov	r2, r0
 8009316:	4641      	mov	r1, r8
 8009318:	4630      	mov	r0, r6
 800931a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800931e:	f000 fa07 	bl	8009730 <_Bfree>
 8009322:	9b06      	ldr	r3, [sp, #24]
 8009324:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009326:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800932a:	ea43 0102 	orr.w	r1, r3, r2
 800932e:	9b07      	ldr	r3, [sp, #28]
 8009330:	4319      	orrs	r1, r3
 8009332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009334:	d10d      	bne.n	8009352 <_dtoa_r+0x97a>
 8009336:	2b39      	cmp	r3, #57	; 0x39
 8009338:	d029      	beq.n	800938e <_dtoa_r+0x9b6>
 800933a:	f1ba 0f00 	cmp.w	sl, #0
 800933e:	dd01      	ble.n	8009344 <_dtoa_r+0x96c>
 8009340:	9b05      	ldr	r3, [sp, #20]
 8009342:	3331      	adds	r3, #49	; 0x31
 8009344:	9a02      	ldr	r2, [sp, #8]
 8009346:	7013      	strb	r3, [r2, #0]
 8009348:	e775      	b.n	8009236 <_dtoa_r+0x85e>
 800934a:	4638      	mov	r0, r7
 800934c:	e7b8      	b.n	80092c0 <_dtoa_r+0x8e8>
 800934e:	2201      	movs	r2, #1
 8009350:	e7e1      	b.n	8009316 <_dtoa_r+0x93e>
 8009352:	f1ba 0f00 	cmp.w	sl, #0
 8009356:	db06      	blt.n	8009366 <_dtoa_r+0x98e>
 8009358:	9906      	ldr	r1, [sp, #24]
 800935a:	ea41 0a0a 	orr.w	sl, r1, sl
 800935e:	9907      	ldr	r1, [sp, #28]
 8009360:	ea5a 0a01 	orrs.w	sl, sl, r1
 8009364:	d120      	bne.n	80093a8 <_dtoa_r+0x9d0>
 8009366:	2a00      	cmp	r2, #0
 8009368:	ddec      	ble.n	8009344 <_dtoa_r+0x96c>
 800936a:	4629      	mov	r1, r5
 800936c:	2201      	movs	r2, #1
 800936e:	4630      	mov	r0, r6
 8009370:	9304      	str	r3, [sp, #16]
 8009372:	f000 fbad 	bl	8009ad0 <__lshift>
 8009376:	4621      	mov	r1, r4
 8009378:	4605      	mov	r5, r0
 800937a:	f000 fc15 	bl	8009ba8 <__mcmp>
 800937e:	2800      	cmp	r0, #0
 8009380:	9b04      	ldr	r3, [sp, #16]
 8009382:	dc02      	bgt.n	800938a <_dtoa_r+0x9b2>
 8009384:	d1de      	bne.n	8009344 <_dtoa_r+0x96c>
 8009386:	07da      	lsls	r2, r3, #31
 8009388:	d5dc      	bpl.n	8009344 <_dtoa_r+0x96c>
 800938a:	2b39      	cmp	r3, #57	; 0x39
 800938c:	d1d8      	bne.n	8009340 <_dtoa_r+0x968>
 800938e:	9a02      	ldr	r2, [sp, #8]
 8009390:	2339      	movs	r3, #57	; 0x39
 8009392:	7013      	strb	r3, [r2, #0]
 8009394:	4643      	mov	r3, r8
 8009396:	4698      	mov	r8, r3
 8009398:	3b01      	subs	r3, #1
 800939a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800939e:	2a39      	cmp	r2, #57	; 0x39
 80093a0:	d051      	beq.n	8009446 <_dtoa_r+0xa6e>
 80093a2:	3201      	adds	r2, #1
 80093a4:	701a      	strb	r2, [r3, #0]
 80093a6:	e746      	b.n	8009236 <_dtoa_r+0x85e>
 80093a8:	2a00      	cmp	r2, #0
 80093aa:	dd03      	ble.n	80093b4 <_dtoa_r+0x9dc>
 80093ac:	2b39      	cmp	r3, #57	; 0x39
 80093ae:	d0ee      	beq.n	800938e <_dtoa_r+0x9b6>
 80093b0:	3301      	adds	r3, #1
 80093b2:	e7c7      	b.n	8009344 <_dtoa_r+0x96c>
 80093b4:	9a04      	ldr	r2, [sp, #16]
 80093b6:	9908      	ldr	r1, [sp, #32]
 80093b8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80093bc:	428a      	cmp	r2, r1
 80093be:	d02b      	beq.n	8009418 <_dtoa_r+0xa40>
 80093c0:	4629      	mov	r1, r5
 80093c2:	2300      	movs	r3, #0
 80093c4:	220a      	movs	r2, #10
 80093c6:	4630      	mov	r0, r6
 80093c8:	f000 f9d4 	bl	8009774 <__multadd>
 80093cc:	45b9      	cmp	r9, r7
 80093ce:	4605      	mov	r5, r0
 80093d0:	f04f 0300 	mov.w	r3, #0
 80093d4:	f04f 020a 	mov.w	r2, #10
 80093d8:	4649      	mov	r1, r9
 80093da:	4630      	mov	r0, r6
 80093dc:	d107      	bne.n	80093ee <_dtoa_r+0xa16>
 80093de:	f000 f9c9 	bl	8009774 <__multadd>
 80093e2:	4681      	mov	r9, r0
 80093e4:	4607      	mov	r7, r0
 80093e6:	9b04      	ldr	r3, [sp, #16]
 80093e8:	3301      	adds	r3, #1
 80093ea:	9304      	str	r3, [sp, #16]
 80093ec:	e774      	b.n	80092d8 <_dtoa_r+0x900>
 80093ee:	f000 f9c1 	bl	8009774 <__multadd>
 80093f2:	4639      	mov	r1, r7
 80093f4:	4681      	mov	r9, r0
 80093f6:	2300      	movs	r3, #0
 80093f8:	220a      	movs	r2, #10
 80093fa:	4630      	mov	r0, r6
 80093fc:	f000 f9ba 	bl	8009774 <__multadd>
 8009400:	4607      	mov	r7, r0
 8009402:	e7f0      	b.n	80093e6 <_dtoa_r+0xa0e>
 8009404:	f1ba 0f00 	cmp.w	sl, #0
 8009408:	9a01      	ldr	r2, [sp, #4]
 800940a:	bfcc      	ite	gt
 800940c:	46d0      	movgt	r8, sl
 800940e:	f04f 0801 	movle.w	r8, #1
 8009412:	4490      	add	r8, r2
 8009414:	f04f 0900 	mov.w	r9, #0
 8009418:	4629      	mov	r1, r5
 800941a:	2201      	movs	r2, #1
 800941c:	4630      	mov	r0, r6
 800941e:	9302      	str	r3, [sp, #8]
 8009420:	f000 fb56 	bl	8009ad0 <__lshift>
 8009424:	4621      	mov	r1, r4
 8009426:	4605      	mov	r5, r0
 8009428:	f000 fbbe 	bl	8009ba8 <__mcmp>
 800942c:	2800      	cmp	r0, #0
 800942e:	dcb1      	bgt.n	8009394 <_dtoa_r+0x9bc>
 8009430:	d102      	bne.n	8009438 <_dtoa_r+0xa60>
 8009432:	9b02      	ldr	r3, [sp, #8]
 8009434:	07db      	lsls	r3, r3, #31
 8009436:	d4ad      	bmi.n	8009394 <_dtoa_r+0x9bc>
 8009438:	4643      	mov	r3, r8
 800943a:	4698      	mov	r8, r3
 800943c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009440:	2a30      	cmp	r2, #48	; 0x30
 8009442:	d0fa      	beq.n	800943a <_dtoa_r+0xa62>
 8009444:	e6f7      	b.n	8009236 <_dtoa_r+0x85e>
 8009446:	9a01      	ldr	r2, [sp, #4]
 8009448:	429a      	cmp	r2, r3
 800944a:	d1a4      	bne.n	8009396 <_dtoa_r+0x9be>
 800944c:	f10b 0b01 	add.w	fp, fp, #1
 8009450:	2331      	movs	r3, #49	; 0x31
 8009452:	e778      	b.n	8009346 <_dtoa_r+0x96e>
 8009454:	4b14      	ldr	r3, [pc, #80]	; (80094a8 <_dtoa_r+0xad0>)
 8009456:	f7ff bb2a 	b.w	8008aae <_dtoa_r+0xd6>
 800945a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800945c:	2b00      	cmp	r3, #0
 800945e:	f47f ab05 	bne.w	8008a6c <_dtoa_r+0x94>
 8009462:	4b12      	ldr	r3, [pc, #72]	; (80094ac <_dtoa_r+0xad4>)
 8009464:	f7ff bb23 	b.w	8008aae <_dtoa_r+0xd6>
 8009468:	f1ba 0f00 	cmp.w	sl, #0
 800946c:	dc03      	bgt.n	8009476 <_dtoa_r+0xa9e>
 800946e:	9b06      	ldr	r3, [sp, #24]
 8009470:	2b02      	cmp	r3, #2
 8009472:	f73f aec8 	bgt.w	8009206 <_dtoa_r+0x82e>
 8009476:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800947a:	4621      	mov	r1, r4
 800947c:	4628      	mov	r0, r5
 800947e:	f7ff fa22 	bl	80088c6 <quorem>
 8009482:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009486:	f808 3b01 	strb.w	r3, [r8], #1
 800948a:	9a01      	ldr	r2, [sp, #4]
 800948c:	eba8 0202 	sub.w	r2, r8, r2
 8009490:	4592      	cmp	sl, r2
 8009492:	ddb7      	ble.n	8009404 <_dtoa_r+0xa2c>
 8009494:	4629      	mov	r1, r5
 8009496:	2300      	movs	r3, #0
 8009498:	220a      	movs	r2, #10
 800949a:	4630      	mov	r0, r6
 800949c:	f000 f96a 	bl	8009774 <__multadd>
 80094a0:	4605      	mov	r5, r0
 80094a2:	e7ea      	b.n	800947a <_dtoa_r+0xaa2>
 80094a4:	0800b8e0 	.word	0x0800b8e0
 80094a8:	0800b840 	.word	0x0800b840
 80094ac:	0800b864 	.word	0x0800b864

080094b0 <_free_r>:
 80094b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80094b2:	2900      	cmp	r1, #0
 80094b4:	d044      	beq.n	8009540 <_free_r+0x90>
 80094b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094ba:	9001      	str	r0, [sp, #4]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	f1a1 0404 	sub.w	r4, r1, #4
 80094c2:	bfb8      	it	lt
 80094c4:	18e4      	addlt	r4, r4, r3
 80094c6:	f000 f8e7 	bl	8009698 <__malloc_lock>
 80094ca:	4a1e      	ldr	r2, [pc, #120]	; (8009544 <_free_r+0x94>)
 80094cc:	9801      	ldr	r0, [sp, #4]
 80094ce:	6813      	ldr	r3, [r2, #0]
 80094d0:	b933      	cbnz	r3, 80094e0 <_free_r+0x30>
 80094d2:	6063      	str	r3, [r4, #4]
 80094d4:	6014      	str	r4, [r2, #0]
 80094d6:	b003      	add	sp, #12
 80094d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094dc:	f000 b8e2 	b.w	80096a4 <__malloc_unlock>
 80094e0:	42a3      	cmp	r3, r4
 80094e2:	d908      	bls.n	80094f6 <_free_r+0x46>
 80094e4:	6825      	ldr	r5, [r4, #0]
 80094e6:	1961      	adds	r1, r4, r5
 80094e8:	428b      	cmp	r3, r1
 80094ea:	bf01      	itttt	eq
 80094ec:	6819      	ldreq	r1, [r3, #0]
 80094ee:	685b      	ldreq	r3, [r3, #4]
 80094f0:	1949      	addeq	r1, r1, r5
 80094f2:	6021      	streq	r1, [r4, #0]
 80094f4:	e7ed      	b.n	80094d2 <_free_r+0x22>
 80094f6:	461a      	mov	r2, r3
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	b10b      	cbz	r3, 8009500 <_free_r+0x50>
 80094fc:	42a3      	cmp	r3, r4
 80094fe:	d9fa      	bls.n	80094f6 <_free_r+0x46>
 8009500:	6811      	ldr	r1, [r2, #0]
 8009502:	1855      	adds	r5, r2, r1
 8009504:	42a5      	cmp	r5, r4
 8009506:	d10b      	bne.n	8009520 <_free_r+0x70>
 8009508:	6824      	ldr	r4, [r4, #0]
 800950a:	4421      	add	r1, r4
 800950c:	1854      	adds	r4, r2, r1
 800950e:	42a3      	cmp	r3, r4
 8009510:	6011      	str	r1, [r2, #0]
 8009512:	d1e0      	bne.n	80094d6 <_free_r+0x26>
 8009514:	681c      	ldr	r4, [r3, #0]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	6053      	str	r3, [r2, #4]
 800951a:	440c      	add	r4, r1
 800951c:	6014      	str	r4, [r2, #0]
 800951e:	e7da      	b.n	80094d6 <_free_r+0x26>
 8009520:	d902      	bls.n	8009528 <_free_r+0x78>
 8009522:	230c      	movs	r3, #12
 8009524:	6003      	str	r3, [r0, #0]
 8009526:	e7d6      	b.n	80094d6 <_free_r+0x26>
 8009528:	6825      	ldr	r5, [r4, #0]
 800952a:	1961      	adds	r1, r4, r5
 800952c:	428b      	cmp	r3, r1
 800952e:	bf04      	itt	eq
 8009530:	6819      	ldreq	r1, [r3, #0]
 8009532:	685b      	ldreq	r3, [r3, #4]
 8009534:	6063      	str	r3, [r4, #4]
 8009536:	bf04      	itt	eq
 8009538:	1949      	addeq	r1, r1, r5
 800953a:	6021      	streq	r1, [r4, #0]
 800953c:	6054      	str	r4, [r2, #4]
 800953e:	e7ca      	b.n	80094d6 <_free_r+0x26>
 8009540:	b003      	add	sp, #12
 8009542:	bd30      	pop	{r4, r5, pc}
 8009544:	240019d0 	.word	0x240019d0

08009548 <malloc>:
 8009548:	4b02      	ldr	r3, [pc, #8]	; (8009554 <malloc+0xc>)
 800954a:	4601      	mov	r1, r0
 800954c:	6818      	ldr	r0, [r3, #0]
 800954e:	f000 b823 	b.w	8009598 <_malloc_r>
 8009552:	bf00      	nop
 8009554:	24000068 	.word	0x24000068

08009558 <sbrk_aligned>:
 8009558:	b570      	push	{r4, r5, r6, lr}
 800955a:	4e0e      	ldr	r6, [pc, #56]	; (8009594 <sbrk_aligned+0x3c>)
 800955c:	460c      	mov	r4, r1
 800955e:	6831      	ldr	r1, [r6, #0]
 8009560:	4605      	mov	r5, r0
 8009562:	b911      	cbnz	r1, 800956a <sbrk_aligned+0x12>
 8009564:	f000 fe40 	bl	800a1e8 <_sbrk_r>
 8009568:	6030      	str	r0, [r6, #0]
 800956a:	4621      	mov	r1, r4
 800956c:	4628      	mov	r0, r5
 800956e:	f000 fe3b 	bl	800a1e8 <_sbrk_r>
 8009572:	1c43      	adds	r3, r0, #1
 8009574:	d00a      	beq.n	800958c <sbrk_aligned+0x34>
 8009576:	1cc4      	adds	r4, r0, #3
 8009578:	f024 0403 	bic.w	r4, r4, #3
 800957c:	42a0      	cmp	r0, r4
 800957e:	d007      	beq.n	8009590 <sbrk_aligned+0x38>
 8009580:	1a21      	subs	r1, r4, r0
 8009582:	4628      	mov	r0, r5
 8009584:	f000 fe30 	bl	800a1e8 <_sbrk_r>
 8009588:	3001      	adds	r0, #1
 800958a:	d101      	bne.n	8009590 <sbrk_aligned+0x38>
 800958c:	f04f 34ff 	mov.w	r4, #4294967295
 8009590:	4620      	mov	r0, r4
 8009592:	bd70      	pop	{r4, r5, r6, pc}
 8009594:	240019d4 	.word	0x240019d4

08009598 <_malloc_r>:
 8009598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800959c:	1ccd      	adds	r5, r1, #3
 800959e:	f025 0503 	bic.w	r5, r5, #3
 80095a2:	3508      	adds	r5, #8
 80095a4:	2d0c      	cmp	r5, #12
 80095a6:	bf38      	it	cc
 80095a8:	250c      	movcc	r5, #12
 80095aa:	2d00      	cmp	r5, #0
 80095ac:	4607      	mov	r7, r0
 80095ae:	db01      	blt.n	80095b4 <_malloc_r+0x1c>
 80095b0:	42a9      	cmp	r1, r5
 80095b2:	d905      	bls.n	80095c0 <_malloc_r+0x28>
 80095b4:	230c      	movs	r3, #12
 80095b6:	603b      	str	r3, [r7, #0]
 80095b8:	2600      	movs	r6, #0
 80095ba:	4630      	mov	r0, r6
 80095bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009694 <_malloc_r+0xfc>
 80095c4:	f000 f868 	bl	8009698 <__malloc_lock>
 80095c8:	f8d8 3000 	ldr.w	r3, [r8]
 80095cc:	461c      	mov	r4, r3
 80095ce:	bb5c      	cbnz	r4, 8009628 <_malloc_r+0x90>
 80095d0:	4629      	mov	r1, r5
 80095d2:	4638      	mov	r0, r7
 80095d4:	f7ff ffc0 	bl	8009558 <sbrk_aligned>
 80095d8:	1c43      	adds	r3, r0, #1
 80095da:	4604      	mov	r4, r0
 80095dc:	d155      	bne.n	800968a <_malloc_r+0xf2>
 80095de:	f8d8 4000 	ldr.w	r4, [r8]
 80095e2:	4626      	mov	r6, r4
 80095e4:	2e00      	cmp	r6, #0
 80095e6:	d145      	bne.n	8009674 <_malloc_r+0xdc>
 80095e8:	2c00      	cmp	r4, #0
 80095ea:	d048      	beq.n	800967e <_malloc_r+0xe6>
 80095ec:	6823      	ldr	r3, [r4, #0]
 80095ee:	4631      	mov	r1, r6
 80095f0:	4638      	mov	r0, r7
 80095f2:	eb04 0903 	add.w	r9, r4, r3
 80095f6:	f000 fdf7 	bl	800a1e8 <_sbrk_r>
 80095fa:	4581      	cmp	r9, r0
 80095fc:	d13f      	bne.n	800967e <_malloc_r+0xe6>
 80095fe:	6821      	ldr	r1, [r4, #0]
 8009600:	1a6d      	subs	r5, r5, r1
 8009602:	4629      	mov	r1, r5
 8009604:	4638      	mov	r0, r7
 8009606:	f7ff ffa7 	bl	8009558 <sbrk_aligned>
 800960a:	3001      	adds	r0, #1
 800960c:	d037      	beq.n	800967e <_malloc_r+0xe6>
 800960e:	6823      	ldr	r3, [r4, #0]
 8009610:	442b      	add	r3, r5
 8009612:	6023      	str	r3, [r4, #0]
 8009614:	f8d8 3000 	ldr.w	r3, [r8]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d038      	beq.n	800968e <_malloc_r+0xf6>
 800961c:	685a      	ldr	r2, [r3, #4]
 800961e:	42a2      	cmp	r2, r4
 8009620:	d12b      	bne.n	800967a <_malloc_r+0xe2>
 8009622:	2200      	movs	r2, #0
 8009624:	605a      	str	r2, [r3, #4]
 8009626:	e00f      	b.n	8009648 <_malloc_r+0xb0>
 8009628:	6822      	ldr	r2, [r4, #0]
 800962a:	1b52      	subs	r2, r2, r5
 800962c:	d41f      	bmi.n	800966e <_malloc_r+0xd6>
 800962e:	2a0b      	cmp	r2, #11
 8009630:	d917      	bls.n	8009662 <_malloc_r+0xca>
 8009632:	1961      	adds	r1, r4, r5
 8009634:	42a3      	cmp	r3, r4
 8009636:	6025      	str	r5, [r4, #0]
 8009638:	bf18      	it	ne
 800963a:	6059      	strne	r1, [r3, #4]
 800963c:	6863      	ldr	r3, [r4, #4]
 800963e:	bf08      	it	eq
 8009640:	f8c8 1000 	streq.w	r1, [r8]
 8009644:	5162      	str	r2, [r4, r5]
 8009646:	604b      	str	r3, [r1, #4]
 8009648:	4638      	mov	r0, r7
 800964a:	f104 060b 	add.w	r6, r4, #11
 800964e:	f000 f829 	bl	80096a4 <__malloc_unlock>
 8009652:	f026 0607 	bic.w	r6, r6, #7
 8009656:	1d23      	adds	r3, r4, #4
 8009658:	1af2      	subs	r2, r6, r3
 800965a:	d0ae      	beq.n	80095ba <_malloc_r+0x22>
 800965c:	1b9b      	subs	r3, r3, r6
 800965e:	50a3      	str	r3, [r4, r2]
 8009660:	e7ab      	b.n	80095ba <_malloc_r+0x22>
 8009662:	42a3      	cmp	r3, r4
 8009664:	6862      	ldr	r2, [r4, #4]
 8009666:	d1dd      	bne.n	8009624 <_malloc_r+0x8c>
 8009668:	f8c8 2000 	str.w	r2, [r8]
 800966c:	e7ec      	b.n	8009648 <_malloc_r+0xb0>
 800966e:	4623      	mov	r3, r4
 8009670:	6864      	ldr	r4, [r4, #4]
 8009672:	e7ac      	b.n	80095ce <_malloc_r+0x36>
 8009674:	4634      	mov	r4, r6
 8009676:	6876      	ldr	r6, [r6, #4]
 8009678:	e7b4      	b.n	80095e4 <_malloc_r+0x4c>
 800967a:	4613      	mov	r3, r2
 800967c:	e7cc      	b.n	8009618 <_malloc_r+0x80>
 800967e:	230c      	movs	r3, #12
 8009680:	603b      	str	r3, [r7, #0]
 8009682:	4638      	mov	r0, r7
 8009684:	f000 f80e 	bl	80096a4 <__malloc_unlock>
 8009688:	e797      	b.n	80095ba <_malloc_r+0x22>
 800968a:	6025      	str	r5, [r4, #0]
 800968c:	e7dc      	b.n	8009648 <_malloc_r+0xb0>
 800968e:	605b      	str	r3, [r3, #4]
 8009690:	deff      	udf	#255	; 0xff
 8009692:	bf00      	nop
 8009694:	240019d0 	.word	0x240019d0

08009698 <__malloc_lock>:
 8009698:	4801      	ldr	r0, [pc, #4]	; (80096a0 <__malloc_lock+0x8>)
 800969a:	f7ff b912 	b.w	80088c2 <__retarget_lock_acquire_recursive>
 800969e:	bf00      	nop
 80096a0:	240019cc 	.word	0x240019cc

080096a4 <__malloc_unlock>:
 80096a4:	4801      	ldr	r0, [pc, #4]	; (80096ac <__malloc_unlock+0x8>)
 80096a6:	f7ff b90d 	b.w	80088c4 <__retarget_lock_release_recursive>
 80096aa:	bf00      	nop
 80096ac:	240019cc 	.word	0x240019cc

080096b0 <_Balloc>:
 80096b0:	b570      	push	{r4, r5, r6, lr}
 80096b2:	69c6      	ldr	r6, [r0, #28]
 80096b4:	4604      	mov	r4, r0
 80096b6:	460d      	mov	r5, r1
 80096b8:	b976      	cbnz	r6, 80096d8 <_Balloc+0x28>
 80096ba:	2010      	movs	r0, #16
 80096bc:	f7ff ff44 	bl	8009548 <malloc>
 80096c0:	4602      	mov	r2, r0
 80096c2:	61e0      	str	r0, [r4, #28]
 80096c4:	b920      	cbnz	r0, 80096d0 <_Balloc+0x20>
 80096c6:	4b18      	ldr	r3, [pc, #96]	; (8009728 <_Balloc+0x78>)
 80096c8:	4818      	ldr	r0, [pc, #96]	; (800972c <_Balloc+0x7c>)
 80096ca:	216b      	movs	r1, #107	; 0x6b
 80096cc:	f000 fdaa 	bl	800a224 <__assert_func>
 80096d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80096d4:	6006      	str	r6, [r0, #0]
 80096d6:	60c6      	str	r6, [r0, #12]
 80096d8:	69e6      	ldr	r6, [r4, #28]
 80096da:	68f3      	ldr	r3, [r6, #12]
 80096dc:	b183      	cbz	r3, 8009700 <_Balloc+0x50>
 80096de:	69e3      	ldr	r3, [r4, #28]
 80096e0:	68db      	ldr	r3, [r3, #12]
 80096e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80096e6:	b9b8      	cbnz	r0, 8009718 <_Balloc+0x68>
 80096e8:	2101      	movs	r1, #1
 80096ea:	fa01 f605 	lsl.w	r6, r1, r5
 80096ee:	1d72      	adds	r2, r6, #5
 80096f0:	0092      	lsls	r2, r2, #2
 80096f2:	4620      	mov	r0, r4
 80096f4:	f000 fdb4 	bl	800a260 <_calloc_r>
 80096f8:	b160      	cbz	r0, 8009714 <_Balloc+0x64>
 80096fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80096fe:	e00e      	b.n	800971e <_Balloc+0x6e>
 8009700:	2221      	movs	r2, #33	; 0x21
 8009702:	2104      	movs	r1, #4
 8009704:	4620      	mov	r0, r4
 8009706:	f000 fdab 	bl	800a260 <_calloc_r>
 800970a:	69e3      	ldr	r3, [r4, #28]
 800970c:	60f0      	str	r0, [r6, #12]
 800970e:	68db      	ldr	r3, [r3, #12]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d1e4      	bne.n	80096de <_Balloc+0x2e>
 8009714:	2000      	movs	r0, #0
 8009716:	bd70      	pop	{r4, r5, r6, pc}
 8009718:	6802      	ldr	r2, [r0, #0]
 800971a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800971e:	2300      	movs	r3, #0
 8009720:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009724:	e7f7      	b.n	8009716 <_Balloc+0x66>
 8009726:	bf00      	nop
 8009728:	0800b871 	.word	0x0800b871
 800972c:	0800b8f1 	.word	0x0800b8f1

08009730 <_Bfree>:
 8009730:	b570      	push	{r4, r5, r6, lr}
 8009732:	69c6      	ldr	r6, [r0, #28]
 8009734:	4605      	mov	r5, r0
 8009736:	460c      	mov	r4, r1
 8009738:	b976      	cbnz	r6, 8009758 <_Bfree+0x28>
 800973a:	2010      	movs	r0, #16
 800973c:	f7ff ff04 	bl	8009548 <malloc>
 8009740:	4602      	mov	r2, r0
 8009742:	61e8      	str	r0, [r5, #28]
 8009744:	b920      	cbnz	r0, 8009750 <_Bfree+0x20>
 8009746:	4b09      	ldr	r3, [pc, #36]	; (800976c <_Bfree+0x3c>)
 8009748:	4809      	ldr	r0, [pc, #36]	; (8009770 <_Bfree+0x40>)
 800974a:	218f      	movs	r1, #143	; 0x8f
 800974c:	f000 fd6a 	bl	800a224 <__assert_func>
 8009750:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009754:	6006      	str	r6, [r0, #0]
 8009756:	60c6      	str	r6, [r0, #12]
 8009758:	b13c      	cbz	r4, 800976a <_Bfree+0x3a>
 800975a:	69eb      	ldr	r3, [r5, #28]
 800975c:	6862      	ldr	r2, [r4, #4]
 800975e:	68db      	ldr	r3, [r3, #12]
 8009760:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009764:	6021      	str	r1, [r4, #0]
 8009766:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800976a:	bd70      	pop	{r4, r5, r6, pc}
 800976c:	0800b871 	.word	0x0800b871
 8009770:	0800b8f1 	.word	0x0800b8f1

08009774 <__multadd>:
 8009774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009778:	690d      	ldr	r5, [r1, #16]
 800977a:	4607      	mov	r7, r0
 800977c:	460c      	mov	r4, r1
 800977e:	461e      	mov	r6, r3
 8009780:	f101 0c14 	add.w	ip, r1, #20
 8009784:	2000      	movs	r0, #0
 8009786:	f8dc 3000 	ldr.w	r3, [ip]
 800978a:	b299      	uxth	r1, r3
 800978c:	fb02 6101 	mla	r1, r2, r1, r6
 8009790:	0c1e      	lsrs	r6, r3, #16
 8009792:	0c0b      	lsrs	r3, r1, #16
 8009794:	fb02 3306 	mla	r3, r2, r6, r3
 8009798:	b289      	uxth	r1, r1
 800979a:	3001      	adds	r0, #1
 800979c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80097a0:	4285      	cmp	r5, r0
 80097a2:	f84c 1b04 	str.w	r1, [ip], #4
 80097a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80097aa:	dcec      	bgt.n	8009786 <__multadd+0x12>
 80097ac:	b30e      	cbz	r6, 80097f2 <__multadd+0x7e>
 80097ae:	68a3      	ldr	r3, [r4, #8]
 80097b0:	42ab      	cmp	r3, r5
 80097b2:	dc19      	bgt.n	80097e8 <__multadd+0x74>
 80097b4:	6861      	ldr	r1, [r4, #4]
 80097b6:	4638      	mov	r0, r7
 80097b8:	3101      	adds	r1, #1
 80097ba:	f7ff ff79 	bl	80096b0 <_Balloc>
 80097be:	4680      	mov	r8, r0
 80097c0:	b928      	cbnz	r0, 80097ce <__multadd+0x5a>
 80097c2:	4602      	mov	r2, r0
 80097c4:	4b0c      	ldr	r3, [pc, #48]	; (80097f8 <__multadd+0x84>)
 80097c6:	480d      	ldr	r0, [pc, #52]	; (80097fc <__multadd+0x88>)
 80097c8:	21ba      	movs	r1, #186	; 0xba
 80097ca:	f000 fd2b 	bl	800a224 <__assert_func>
 80097ce:	6922      	ldr	r2, [r4, #16]
 80097d0:	3202      	adds	r2, #2
 80097d2:	f104 010c 	add.w	r1, r4, #12
 80097d6:	0092      	lsls	r2, r2, #2
 80097d8:	300c      	adds	r0, #12
 80097da:	f000 fd15 	bl	800a208 <memcpy>
 80097de:	4621      	mov	r1, r4
 80097e0:	4638      	mov	r0, r7
 80097e2:	f7ff ffa5 	bl	8009730 <_Bfree>
 80097e6:	4644      	mov	r4, r8
 80097e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80097ec:	3501      	adds	r5, #1
 80097ee:	615e      	str	r6, [r3, #20]
 80097f0:	6125      	str	r5, [r4, #16]
 80097f2:	4620      	mov	r0, r4
 80097f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097f8:	0800b8e0 	.word	0x0800b8e0
 80097fc:	0800b8f1 	.word	0x0800b8f1

08009800 <__hi0bits>:
 8009800:	0c03      	lsrs	r3, r0, #16
 8009802:	041b      	lsls	r3, r3, #16
 8009804:	b9d3      	cbnz	r3, 800983c <__hi0bits+0x3c>
 8009806:	0400      	lsls	r0, r0, #16
 8009808:	2310      	movs	r3, #16
 800980a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800980e:	bf04      	itt	eq
 8009810:	0200      	lsleq	r0, r0, #8
 8009812:	3308      	addeq	r3, #8
 8009814:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009818:	bf04      	itt	eq
 800981a:	0100      	lsleq	r0, r0, #4
 800981c:	3304      	addeq	r3, #4
 800981e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009822:	bf04      	itt	eq
 8009824:	0080      	lsleq	r0, r0, #2
 8009826:	3302      	addeq	r3, #2
 8009828:	2800      	cmp	r0, #0
 800982a:	db05      	blt.n	8009838 <__hi0bits+0x38>
 800982c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009830:	f103 0301 	add.w	r3, r3, #1
 8009834:	bf08      	it	eq
 8009836:	2320      	moveq	r3, #32
 8009838:	4618      	mov	r0, r3
 800983a:	4770      	bx	lr
 800983c:	2300      	movs	r3, #0
 800983e:	e7e4      	b.n	800980a <__hi0bits+0xa>

08009840 <__lo0bits>:
 8009840:	6803      	ldr	r3, [r0, #0]
 8009842:	f013 0207 	ands.w	r2, r3, #7
 8009846:	d00c      	beq.n	8009862 <__lo0bits+0x22>
 8009848:	07d9      	lsls	r1, r3, #31
 800984a:	d422      	bmi.n	8009892 <__lo0bits+0x52>
 800984c:	079a      	lsls	r2, r3, #30
 800984e:	bf49      	itett	mi
 8009850:	085b      	lsrmi	r3, r3, #1
 8009852:	089b      	lsrpl	r3, r3, #2
 8009854:	6003      	strmi	r3, [r0, #0]
 8009856:	2201      	movmi	r2, #1
 8009858:	bf5c      	itt	pl
 800985a:	6003      	strpl	r3, [r0, #0]
 800985c:	2202      	movpl	r2, #2
 800985e:	4610      	mov	r0, r2
 8009860:	4770      	bx	lr
 8009862:	b299      	uxth	r1, r3
 8009864:	b909      	cbnz	r1, 800986a <__lo0bits+0x2a>
 8009866:	0c1b      	lsrs	r3, r3, #16
 8009868:	2210      	movs	r2, #16
 800986a:	b2d9      	uxtb	r1, r3
 800986c:	b909      	cbnz	r1, 8009872 <__lo0bits+0x32>
 800986e:	3208      	adds	r2, #8
 8009870:	0a1b      	lsrs	r3, r3, #8
 8009872:	0719      	lsls	r1, r3, #28
 8009874:	bf04      	itt	eq
 8009876:	091b      	lsreq	r3, r3, #4
 8009878:	3204      	addeq	r2, #4
 800987a:	0799      	lsls	r1, r3, #30
 800987c:	bf04      	itt	eq
 800987e:	089b      	lsreq	r3, r3, #2
 8009880:	3202      	addeq	r2, #2
 8009882:	07d9      	lsls	r1, r3, #31
 8009884:	d403      	bmi.n	800988e <__lo0bits+0x4e>
 8009886:	085b      	lsrs	r3, r3, #1
 8009888:	f102 0201 	add.w	r2, r2, #1
 800988c:	d003      	beq.n	8009896 <__lo0bits+0x56>
 800988e:	6003      	str	r3, [r0, #0]
 8009890:	e7e5      	b.n	800985e <__lo0bits+0x1e>
 8009892:	2200      	movs	r2, #0
 8009894:	e7e3      	b.n	800985e <__lo0bits+0x1e>
 8009896:	2220      	movs	r2, #32
 8009898:	e7e1      	b.n	800985e <__lo0bits+0x1e>
	...

0800989c <__i2b>:
 800989c:	b510      	push	{r4, lr}
 800989e:	460c      	mov	r4, r1
 80098a0:	2101      	movs	r1, #1
 80098a2:	f7ff ff05 	bl	80096b0 <_Balloc>
 80098a6:	4602      	mov	r2, r0
 80098a8:	b928      	cbnz	r0, 80098b6 <__i2b+0x1a>
 80098aa:	4b05      	ldr	r3, [pc, #20]	; (80098c0 <__i2b+0x24>)
 80098ac:	4805      	ldr	r0, [pc, #20]	; (80098c4 <__i2b+0x28>)
 80098ae:	f240 1145 	movw	r1, #325	; 0x145
 80098b2:	f000 fcb7 	bl	800a224 <__assert_func>
 80098b6:	2301      	movs	r3, #1
 80098b8:	6144      	str	r4, [r0, #20]
 80098ba:	6103      	str	r3, [r0, #16]
 80098bc:	bd10      	pop	{r4, pc}
 80098be:	bf00      	nop
 80098c0:	0800b8e0 	.word	0x0800b8e0
 80098c4:	0800b8f1 	.word	0x0800b8f1

080098c8 <__multiply>:
 80098c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098cc:	4691      	mov	r9, r2
 80098ce:	690a      	ldr	r2, [r1, #16]
 80098d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80098d4:	429a      	cmp	r2, r3
 80098d6:	bfb8      	it	lt
 80098d8:	460b      	movlt	r3, r1
 80098da:	460c      	mov	r4, r1
 80098dc:	bfbc      	itt	lt
 80098de:	464c      	movlt	r4, r9
 80098e0:	4699      	movlt	r9, r3
 80098e2:	6927      	ldr	r7, [r4, #16]
 80098e4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80098e8:	68a3      	ldr	r3, [r4, #8]
 80098ea:	6861      	ldr	r1, [r4, #4]
 80098ec:	eb07 060a 	add.w	r6, r7, sl
 80098f0:	42b3      	cmp	r3, r6
 80098f2:	b085      	sub	sp, #20
 80098f4:	bfb8      	it	lt
 80098f6:	3101      	addlt	r1, #1
 80098f8:	f7ff feda 	bl	80096b0 <_Balloc>
 80098fc:	b930      	cbnz	r0, 800990c <__multiply+0x44>
 80098fe:	4602      	mov	r2, r0
 8009900:	4b44      	ldr	r3, [pc, #272]	; (8009a14 <__multiply+0x14c>)
 8009902:	4845      	ldr	r0, [pc, #276]	; (8009a18 <__multiply+0x150>)
 8009904:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009908:	f000 fc8c 	bl	800a224 <__assert_func>
 800990c:	f100 0514 	add.w	r5, r0, #20
 8009910:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009914:	462b      	mov	r3, r5
 8009916:	2200      	movs	r2, #0
 8009918:	4543      	cmp	r3, r8
 800991a:	d321      	bcc.n	8009960 <__multiply+0x98>
 800991c:	f104 0314 	add.w	r3, r4, #20
 8009920:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009924:	f109 0314 	add.w	r3, r9, #20
 8009928:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800992c:	9202      	str	r2, [sp, #8]
 800992e:	1b3a      	subs	r2, r7, r4
 8009930:	3a15      	subs	r2, #21
 8009932:	f022 0203 	bic.w	r2, r2, #3
 8009936:	3204      	adds	r2, #4
 8009938:	f104 0115 	add.w	r1, r4, #21
 800993c:	428f      	cmp	r7, r1
 800993e:	bf38      	it	cc
 8009940:	2204      	movcc	r2, #4
 8009942:	9201      	str	r2, [sp, #4]
 8009944:	9a02      	ldr	r2, [sp, #8]
 8009946:	9303      	str	r3, [sp, #12]
 8009948:	429a      	cmp	r2, r3
 800994a:	d80c      	bhi.n	8009966 <__multiply+0x9e>
 800994c:	2e00      	cmp	r6, #0
 800994e:	dd03      	ble.n	8009958 <__multiply+0x90>
 8009950:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009954:	2b00      	cmp	r3, #0
 8009956:	d05b      	beq.n	8009a10 <__multiply+0x148>
 8009958:	6106      	str	r6, [r0, #16]
 800995a:	b005      	add	sp, #20
 800995c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009960:	f843 2b04 	str.w	r2, [r3], #4
 8009964:	e7d8      	b.n	8009918 <__multiply+0x50>
 8009966:	f8b3 a000 	ldrh.w	sl, [r3]
 800996a:	f1ba 0f00 	cmp.w	sl, #0
 800996e:	d024      	beq.n	80099ba <__multiply+0xf2>
 8009970:	f104 0e14 	add.w	lr, r4, #20
 8009974:	46a9      	mov	r9, r5
 8009976:	f04f 0c00 	mov.w	ip, #0
 800997a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800997e:	f8d9 1000 	ldr.w	r1, [r9]
 8009982:	fa1f fb82 	uxth.w	fp, r2
 8009986:	b289      	uxth	r1, r1
 8009988:	fb0a 110b 	mla	r1, sl, fp, r1
 800998c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009990:	f8d9 2000 	ldr.w	r2, [r9]
 8009994:	4461      	add	r1, ip
 8009996:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800999a:	fb0a c20b 	mla	r2, sl, fp, ip
 800999e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80099a2:	b289      	uxth	r1, r1
 80099a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80099a8:	4577      	cmp	r7, lr
 80099aa:	f849 1b04 	str.w	r1, [r9], #4
 80099ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80099b2:	d8e2      	bhi.n	800997a <__multiply+0xb2>
 80099b4:	9a01      	ldr	r2, [sp, #4]
 80099b6:	f845 c002 	str.w	ip, [r5, r2]
 80099ba:	9a03      	ldr	r2, [sp, #12]
 80099bc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80099c0:	3304      	adds	r3, #4
 80099c2:	f1b9 0f00 	cmp.w	r9, #0
 80099c6:	d021      	beq.n	8009a0c <__multiply+0x144>
 80099c8:	6829      	ldr	r1, [r5, #0]
 80099ca:	f104 0c14 	add.w	ip, r4, #20
 80099ce:	46ae      	mov	lr, r5
 80099d0:	f04f 0a00 	mov.w	sl, #0
 80099d4:	f8bc b000 	ldrh.w	fp, [ip]
 80099d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80099dc:	fb09 220b 	mla	r2, r9, fp, r2
 80099e0:	4452      	add	r2, sl
 80099e2:	b289      	uxth	r1, r1
 80099e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80099e8:	f84e 1b04 	str.w	r1, [lr], #4
 80099ec:	f85c 1b04 	ldr.w	r1, [ip], #4
 80099f0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80099f4:	f8be 1000 	ldrh.w	r1, [lr]
 80099f8:	fb09 110a 	mla	r1, r9, sl, r1
 80099fc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009a00:	4567      	cmp	r7, ip
 8009a02:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009a06:	d8e5      	bhi.n	80099d4 <__multiply+0x10c>
 8009a08:	9a01      	ldr	r2, [sp, #4]
 8009a0a:	50a9      	str	r1, [r5, r2]
 8009a0c:	3504      	adds	r5, #4
 8009a0e:	e799      	b.n	8009944 <__multiply+0x7c>
 8009a10:	3e01      	subs	r6, #1
 8009a12:	e79b      	b.n	800994c <__multiply+0x84>
 8009a14:	0800b8e0 	.word	0x0800b8e0
 8009a18:	0800b8f1 	.word	0x0800b8f1

08009a1c <__pow5mult>:
 8009a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a20:	4615      	mov	r5, r2
 8009a22:	f012 0203 	ands.w	r2, r2, #3
 8009a26:	4606      	mov	r6, r0
 8009a28:	460f      	mov	r7, r1
 8009a2a:	d007      	beq.n	8009a3c <__pow5mult+0x20>
 8009a2c:	4c25      	ldr	r4, [pc, #148]	; (8009ac4 <__pow5mult+0xa8>)
 8009a2e:	3a01      	subs	r2, #1
 8009a30:	2300      	movs	r3, #0
 8009a32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a36:	f7ff fe9d 	bl	8009774 <__multadd>
 8009a3a:	4607      	mov	r7, r0
 8009a3c:	10ad      	asrs	r5, r5, #2
 8009a3e:	d03d      	beq.n	8009abc <__pow5mult+0xa0>
 8009a40:	69f4      	ldr	r4, [r6, #28]
 8009a42:	b97c      	cbnz	r4, 8009a64 <__pow5mult+0x48>
 8009a44:	2010      	movs	r0, #16
 8009a46:	f7ff fd7f 	bl	8009548 <malloc>
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	61f0      	str	r0, [r6, #28]
 8009a4e:	b928      	cbnz	r0, 8009a5c <__pow5mult+0x40>
 8009a50:	4b1d      	ldr	r3, [pc, #116]	; (8009ac8 <__pow5mult+0xac>)
 8009a52:	481e      	ldr	r0, [pc, #120]	; (8009acc <__pow5mult+0xb0>)
 8009a54:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009a58:	f000 fbe4 	bl	800a224 <__assert_func>
 8009a5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a60:	6004      	str	r4, [r0, #0]
 8009a62:	60c4      	str	r4, [r0, #12]
 8009a64:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009a68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a6c:	b94c      	cbnz	r4, 8009a82 <__pow5mult+0x66>
 8009a6e:	f240 2171 	movw	r1, #625	; 0x271
 8009a72:	4630      	mov	r0, r6
 8009a74:	f7ff ff12 	bl	800989c <__i2b>
 8009a78:	2300      	movs	r3, #0
 8009a7a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a7e:	4604      	mov	r4, r0
 8009a80:	6003      	str	r3, [r0, #0]
 8009a82:	f04f 0900 	mov.w	r9, #0
 8009a86:	07eb      	lsls	r3, r5, #31
 8009a88:	d50a      	bpl.n	8009aa0 <__pow5mult+0x84>
 8009a8a:	4639      	mov	r1, r7
 8009a8c:	4622      	mov	r2, r4
 8009a8e:	4630      	mov	r0, r6
 8009a90:	f7ff ff1a 	bl	80098c8 <__multiply>
 8009a94:	4639      	mov	r1, r7
 8009a96:	4680      	mov	r8, r0
 8009a98:	4630      	mov	r0, r6
 8009a9a:	f7ff fe49 	bl	8009730 <_Bfree>
 8009a9e:	4647      	mov	r7, r8
 8009aa0:	106d      	asrs	r5, r5, #1
 8009aa2:	d00b      	beq.n	8009abc <__pow5mult+0xa0>
 8009aa4:	6820      	ldr	r0, [r4, #0]
 8009aa6:	b938      	cbnz	r0, 8009ab8 <__pow5mult+0x9c>
 8009aa8:	4622      	mov	r2, r4
 8009aaa:	4621      	mov	r1, r4
 8009aac:	4630      	mov	r0, r6
 8009aae:	f7ff ff0b 	bl	80098c8 <__multiply>
 8009ab2:	6020      	str	r0, [r4, #0]
 8009ab4:	f8c0 9000 	str.w	r9, [r0]
 8009ab8:	4604      	mov	r4, r0
 8009aba:	e7e4      	b.n	8009a86 <__pow5mult+0x6a>
 8009abc:	4638      	mov	r0, r7
 8009abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ac2:	bf00      	nop
 8009ac4:	0800ba40 	.word	0x0800ba40
 8009ac8:	0800b871 	.word	0x0800b871
 8009acc:	0800b8f1 	.word	0x0800b8f1

08009ad0 <__lshift>:
 8009ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ad4:	460c      	mov	r4, r1
 8009ad6:	6849      	ldr	r1, [r1, #4]
 8009ad8:	6923      	ldr	r3, [r4, #16]
 8009ada:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009ade:	68a3      	ldr	r3, [r4, #8]
 8009ae0:	4607      	mov	r7, r0
 8009ae2:	4691      	mov	r9, r2
 8009ae4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ae8:	f108 0601 	add.w	r6, r8, #1
 8009aec:	42b3      	cmp	r3, r6
 8009aee:	db0b      	blt.n	8009b08 <__lshift+0x38>
 8009af0:	4638      	mov	r0, r7
 8009af2:	f7ff fddd 	bl	80096b0 <_Balloc>
 8009af6:	4605      	mov	r5, r0
 8009af8:	b948      	cbnz	r0, 8009b0e <__lshift+0x3e>
 8009afa:	4602      	mov	r2, r0
 8009afc:	4b28      	ldr	r3, [pc, #160]	; (8009ba0 <__lshift+0xd0>)
 8009afe:	4829      	ldr	r0, [pc, #164]	; (8009ba4 <__lshift+0xd4>)
 8009b00:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009b04:	f000 fb8e 	bl	800a224 <__assert_func>
 8009b08:	3101      	adds	r1, #1
 8009b0a:	005b      	lsls	r3, r3, #1
 8009b0c:	e7ee      	b.n	8009aec <__lshift+0x1c>
 8009b0e:	2300      	movs	r3, #0
 8009b10:	f100 0114 	add.w	r1, r0, #20
 8009b14:	f100 0210 	add.w	r2, r0, #16
 8009b18:	4618      	mov	r0, r3
 8009b1a:	4553      	cmp	r3, sl
 8009b1c:	db33      	blt.n	8009b86 <__lshift+0xb6>
 8009b1e:	6920      	ldr	r0, [r4, #16]
 8009b20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b24:	f104 0314 	add.w	r3, r4, #20
 8009b28:	f019 091f 	ands.w	r9, r9, #31
 8009b2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b30:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009b34:	d02b      	beq.n	8009b8e <__lshift+0xbe>
 8009b36:	f1c9 0e20 	rsb	lr, r9, #32
 8009b3a:	468a      	mov	sl, r1
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	6818      	ldr	r0, [r3, #0]
 8009b40:	fa00 f009 	lsl.w	r0, r0, r9
 8009b44:	4310      	orrs	r0, r2
 8009b46:	f84a 0b04 	str.w	r0, [sl], #4
 8009b4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b4e:	459c      	cmp	ip, r3
 8009b50:	fa22 f20e 	lsr.w	r2, r2, lr
 8009b54:	d8f3      	bhi.n	8009b3e <__lshift+0x6e>
 8009b56:	ebac 0304 	sub.w	r3, ip, r4
 8009b5a:	3b15      	subs	r3, #21
 8009b5c:	f023 0303 	bic.w	r3, r3, #3
 8009b60:	3304      	adds	r3, #4
 8009b62:	f104 0015 	add.w	r0, r4, #21
 8009b66:	4584      	cmp	ip, r0
 8009b68:	bf38      	it	cc
 8009b6a:	2304      	movcc	r3, #4
 8009b6c:	50ca      	str	r2, [r1, r3]
 8009b6e:	b10a      	cbz	r2, 8009b74 <__lshift+0xa4>
 8009b70:	f108 0602 	add.w	r6, r8, #2
 8009b74:	3e01      	subs	r6, #1
 8009b76:	4638      	mov	r0, r7
 8009b78:	612e      	str	r6, [r5, #16]
 8009b7a:	4621      	mov	r1, r4
 8009b7c:	f7ff fdd8 	bl	8009730 <_Bfree>
 8009b80:	4628      	mov	r0, r5
 8009b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b86:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	e7c5      	b.n	8009b1a <__lshift+0x4a>
 8009b8e:	3904      	subs	r1, #4
 8009b90:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b94:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b98:	459c      	cmp	ip, r3
 8009b9a:	d8f9      	bhi.n	8009b90 <__lshift+0xc0>
 8009b9c:	e7ea      	b.n	8009b74 <__lshift+0xa4>
 8009b9e:	bf00      	nop
 8009ba0:	0800b8e0 	.word	0x0800b8e0
 8009ba4:	0800b8f1 	.word	0x0800b8f1

08009ba8 <__mcmp>:
 8009ba8:	b530      	push	{r4, r5, lr}
 8009baa:	6902      	ldr	r2, [r0, #16]
 8009bac:	690c      	ldr	r4, [r1, #16]
 8009bae:	1b12      	subs	r2, r2, r4
 8009bb0:	d10e      	bne.n	8009bd0 <__mcmp+0x28>
 8009bb2:	f100 0314 	add.w	r3, r0, #20
 8009bb6:	3114      	adds	r1, #20
 8009bb8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009bbc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009bc0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009bc4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009bc8:	42a5      	cmp	r5, r4
 8009bca:	d003      	beq.n	8009bd4 <__mcmp+0x2c>
 8009bcc:	d305      	bcc.n	8009bda <__mcmp+0x32>
 8009bce:	2201      	movs	r2, #1
 8009bd0:	4610      	mov	r0, r2
 8009bd2:	bd30      	pop	{r4, r5, pc}
 8009bd4:	4283      	cmp	r3, r0
 8009bd6:	d3f3      	bcc.n	8009bc0 <__mcmp+0x18>
 8009bd8:	e7fa      	b.n	8009bd0 <__mcmp+0x28>
 8009bda:	f04f 32ff 	mov.w	r2, #4294967295
 8009bde:	e7f7      	b.n	8009bd0 <__mcmp+0x28>

08009be0 <__mdiff>:
 8009be0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be4:	460c      	mov	r4, r1
 8009be6:	4606      	mov	r6, r0
 8009be8:	4611      	mov	r1, r2
 8009bea:	4620      	mov	r0, r4
 8009bec:	4690      	mov	r8, r2
 8009bee:	f7ff ffdb 	bl	8009ba8 <__mcmp>
 8009bf2:	1e05      	subs	r5, r0, #0
 8009bf4:	d110      	bne.n	8009c18 <__mdiff+0x38>
 8009bf6:	4629      	mov	r1, r5
 8009bf8:	4630      	mov	r0, r6
 8009bfa:	f7ff fd59 	bl	80096b0 <_Balloc>
 8009bfe:	b930      	cbnz	r0, 8009c0e <__mdiff+0x2e>
 8009c00:	4b3a      	ldr	r3, [pc, #232]	; (8009cec <__mdiff+0x10c>)
 8009c02:	4602      	mov	r2, r0
 8009c04:	f240 2137 	movw	r1, #567	; 0x237
 8009c08:	4839      	ldr	r0, [pc, #228]	; (8009cf0 <__mdiff+0x110>)
 8009c0a:	f000 fb0b 	bl	800a224 <__assert_func>
 8009c0e:	2301      	movs	r3, #1
 8009c10:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009c14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c18:	bfa4      	itt	ge
 8009c1a:	4643      	movge	r3, r8
 8009c1c:	46a0      	movge	r8, r4
 8009c1e:	4630      	mov	r0, r6
 8009c20:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009c24:	bfa6      	itte	ge
 8009c26:	461c      	movge	r4, r3
 8009c28:	2500      	movge	r5, #0
 8009c2a:	2501      	movlt	r5, #1
 8009c2c:	f7ff fd40 	bl	80096b0 <_Balloc>
 8009c30:	b920      	cbnz	r0, 8009c3c <__mdiff+0x5c>
 8009c32:	4b2e      	ldr	r3, [pc, #184]	; (8009cec <__mdiff+0x10c>)
 8009c34:	4602      	mov	r2, r0
 8009c36:	f240 2145 	movw	r1, #581	; 0x245
 8009c3a:	e7e5      	b.n	8009c08 <__mdiff+0x28>
 8009c3c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009c40:	6926      	ldr	r6, [r4, #16]
 8009c42:	60c5      	str	r5, [r0, #12]
 8009c44:	f104 0914 	add.w	r9, r4, #20
 8009c48:	f108 0514 	add.w	r5, r8, #20
 8009c4c:	f100 0e14 	add.w	lr, r0, #20
 8009c50:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009c54:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009c58:	f108 0210 	add.w	r2, r8, #16
 8009c5c:	46f2      	mov	sl, lr
 8009c5e:	2100      	movs	r1, #0
 8009c60:	f859 3b04 	ldr.w	r3, [r9], #4
 8009c64:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009c68:	fa11 f88b 	uxtah	r8, r1, fp
 8009c6c:	b299      	uxth	r1, r3
 8009c6e:	0c1b      	lsrs	r3, r3, #16
 8009c70:	eba8 0801 	sub.w	r8, r8, r1
 8009c74:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009c78:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009c7c:	fa1f f888 	uxth.w	r8, r8
 8009c80:	1419      	asrs	r1, r3, #16
 8009c82:	454e      	cmp	r6, r9
 8009c84:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009c88:	f84a 3b04 	str.w	r3, [sl], #4
 8009c8c:	d8e8      	bhi.n	8009c60 <__mdiff+0x80>
 8009c8e:	1b33      	subs	r3, r6, r4
 8009c90:	3b15      	subs	r3, #21
 8009c92:	f023 0303 	bic.w	r3, r3, #3
 8009c96:	3304      	adds	r3, #4
 8009c98:	3415      	adds	r4, #21
 8009c9a:	42a6      	cmp	r6, r4
 8009c9c:	bf38      	it	cc
 8009c9e:	2304      	movcc	r3, #4
 8009ca0:	441d      	add	r5, r3
 8009ca2:	4473      	add	r3, lr
 8009ca4:	469e      	mov	lr, r3
 8009ca6:	462e      	mov	r6, r5
 8009ca8:	4566      	cmp	r6, ip
 8009caa:	d30e      	bcc.n	8009cca <__mdiff+0xea>
 8009cac:	f10c 0203 	add.w	r2, ip, #3
 8009cb0:	1b52      	subs	r2, r2, r5
 8009cb2:	f022 0203 	bic.w	r2, r2, #3
 8009cb6:	3d03      	subs	r5, #3
 8009cb8:	45ac      	cmp	ip, r5
 8009cba:	bf38      	it	cc
 8009cbc:	2200      	movcc	r2, #0
 8009cbe:	4413      	add	r3, r2
 8009cc0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009cc4:	b17a      	cbz	r2, 8009ce6 <__mdiff+0x106>
 8009cc6:	6107      	str	r7, [r0, #16]
 8009cc8:	e7a4      	b.n	8009c14 <__mdiff+0x34>
 8009cca:	f856 8b04 	ldr.w	r8, [r6], #4
 8009cce:	fa11 f288 	uxtah	r2, r1, r8
 8009cd2:	1414      	asrs	r4, r2, #16
 8009cd4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009cd8:	b292      	uxth	r2, r2
 8009cda:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009cde:	f84e 2b04 	str.w	r2, [lr], #4
 8009ce2:	1421      	asrs	r1, r4, #16
 8009ce4:	e7e0      	b.n	8009ca8 <__mdiff+0xc8>
 8009ce6:	3f01      	subs	r7, #1
 8009ce8:	e7ea      	b.n	8009cc0 <__mdiff+0xe0>
 8009cea:	bf00      	nop
 8009cec:	0800b8e0 	.word	0x0800b8e0
 8009cf0:	0800b8f1 	.word	0x0800b8f1

08009cf4 <__d2b>:
 8009cf4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009cf8:	460f      	mov	r7, r1
 8009cfa:	2101      	movs	r1, #1
 8009cfc:	ec59 8b10 	vmov	r8, r9, d0
 8009d00:	4616      	mov	r6, r2
 8009d02:	f7ff fcd5 	bl	80096b0 <_Balloc>
 8009d06:	4604      	mov	r4, r0
 8009d08:	b930      	cbnz	r0, 8009d18 <__d2b+0x24>
 8009d0a:	4602      	mov	r2, r0
 8009d0c:	4b24      	ldr	r3, [pc, #144]	; (8009da0 <__d2b+0xac>)
 8009d0e:	4825      	ldr	r0, [pc, #148]	; (8009da4 <__d2b+0xb0>)
 8009d10:	f240 310f 	movw	r1, #783	; 0x30f
 8009d14:	f000 fa86 	bl	800a224 <__assert_func>
 8009d18:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009d1c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d20:	bb2d      	cbnz	r5, 8009d6e <__d2b+0x7a>
 8009d22:	9301      	str	r3, [sp, #4]
 8009d24:	f1b8 0300 	subs.w	r3, r8, #0
 8009d28:	d026      	beq.n	8009d78 <__d2b+0x84>
 8009d2a:	4668      	mov	r0, sp
 8009d2c:	9300      	str	r3, [sp, #0]
 8009d2e:	f7ff fd87 	bl	8009840 <__lo0bits>
 8009d32:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009d36:	b1e8      	cbz	r0, 8009d74 <__d2b+0x80>
 8009d38:	f1c0 0320 	rsb	r3, r0, #32
 8009d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8009d40:	430b      	orrs	r3, r1
 8009d42:	40c2      	lsrs	r2, r0
 8009d44:	6163      	str	r3, [r4, #20]
 8009d46:	9201      	str	r2, [sp, #4]
 8009d48:	9b01      	ldr	r3, [sp, #4]
 8009d4a:	61a3      	str	r3, [r4, #24]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	bf14      	ite	ne
 8009d50:	2202      	movne	r2, #2
 8009d52:	2201      	moveq	r2, #1
 8009d54:	6122      	str	r2, [r4, #16]
 8009d56:	b1bd      	cbz	r5, 8009d88 <__d2b+0x94>
 8009d58:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009d5c:	4405      	add	r5, r0
 8009d5e:	603d      	str	r5, [r7, #0]
 8009d60:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009d64:	6030      	str	r0, [r6, #0]
 8009d66:	4620      	mov	r0, r4
 8009d68:	b003      	add	sp, #12
 8009d6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d72:	e7d6      	b.n	8009d22 <__d2b+0x2e>
 8009d74:	6161      	str	r1, [r4, #20]
 8009d76:	e7e7      	b.n	8009d48 <__d2b+0x54>
 8009d78:	a801      	add	r0, sp, #4
 8009d7a:	f7ff fd61 	bl	8009840 <__lo0bits>
 8009d7e:	9b01      	ldr	r3, [sp, #4]
 8009d80:	6163      	str	r3, [r4, #20]
 8009d82:	3020      	adds	r0, #32
 8009d84:	2201      	movs	r2, #1
 8009d86:	e7e5      	b.n	8009d54 <__d2b+0x60>
 8009d88:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009d8c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009d90:	6038      	str	r0, [r7, #0]
 8009d92:	6918      	ldr	r0, [r3, #16]
 8009d94:	f7ff fd34 	bl	8009800 <__hi0bits>
 8009d98:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009d9c:	e7e2      	b.n	8009d64 <__d2b+0x70>
 8009d9e:	bf00      	nop
 8009da0:	0800b8e0 	.word	0x0800b8e0
 8009da4:	0800b8f1 	.word	0x0800b8f1

08009da8 <__ssputs_r>:
 8009da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dac:	688e      	ldr	r6, [r1, #8]
 8009dae:	461f      	mov	r7, r3
 8009db0:	42be      	cmp	r6, r7
 8009db2:	680b      	ldr	r3, [r1, #0]
 8009db4:	4682      	mov	sl, r0
 8009db6:	460c      	mov	r4, r1
 8009db8:	4690      	mov	r8, r2
 8009dba:	d82c      	bhi.n	8009e16 <__ssputs_r+0x6e>
 8009dbc:	898a      	ldrh	r2, [r1, #12]
 8009dbe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009dc2:	d026      	beq.n	8009e12 <__ssputs_r+0x6a>
 8009dc4:	6965      	ldr	r5, [r4, #20]
 8009dc6:	6909      	ldr	r1, [r1, #16]
 8009dc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009dcc:	eba3 0901 	sub.w	r9, r3, r1
 8009dd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009dd4:	1c7b      	adds	r3, r7, #1
 8009dd6:	444b      	add	r3, r9
 8009dd8:	106d      	asrs	r5, r5, #1
 8009dda:	429d      	cmp	r5, r3
 8009ddc:	bf38      	it	cc
 8009dde:	461d      	movcc	r5, r3
 8009de0:	0553      	lsls	r3, r2, #21
 8009de2:	d527      	bpl.n	8009e34 <__ssputs_r+0x8c>
 8009de4:	4629      	mov	r1, r5
 8009de6:	f7ff fbd7 	bl	8009598 <_malloc_r>
 8009dea:	4606      	mov	r6, r0
 8009dec:	b360      	cbz	r0, 8009e48 <__ssputs_r+0xa0>
 8009dee:	6921      	ldr	r1, [r4, #16]
 8009df0:	464a      	mov	r2, r9
 8009df2:	f000 fa09 	bl	800a208 <memcpy>
 8009df6:	89a3      	ldrh	r3, [r4, #12]
 8009df8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e00:	81a3      	strh	r3, [r4, #12]
 8009e02:	6126      	str	r6, [r4, #16]
 8009e04:	6165      	str	r5, [r4, #20]
 8009e06:	444e      	add	r6, r9
 8009e08:	eba5 0509 	sub.w	r5, r5, r9
 8009e0c:	6026      	str	r6, [r4, #0]
 8009e0e:	60a5      	str	r5, [r4, #8]
 8009e10:	463e      	mov	r6, r7
 8009e12:	42be      	cmp	r6, r7
 8009e14:	d900      	bls.n	8009e18 <__ssputs_r+0x70>
 8009e16:	463e      	mov	r6, r7
 8009e18:	6820      	ldr	r0, [r4, #0]
 8009e1a:	4632      	mov	r2, r6
 8009e1c:	4641      	mov	r1, r8
 8009e1e:	f000 f9c9 	bl	800a1b4 <memmove>
 8009e22:	68a3      	ldr	r3, [r4, #8]
 8009e24:	1b9b      	subs	r3, r3, r6
 8009e26:	60a3      	str	r3, [r4, #8]
 8009e28:	6823      	ldr	r3, [r4, #0]
 8009e2a:	4433      	add	r3, r6
 8009e2c:	6023      	str	r3, [r4, #0]
 8009e2e:	2000      	movs	r0, #0
 8009e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e34:	462a      	mov	r2, r5
 8009e36:	f000 fa3b 	bl	800a2b0 <_realloc_r>
 8009e3a:	4606      	mov	r6, r0
 8009e3c:	2800      	cmp	r0, #0
 8009e3e:	d1e0      	bne.n	8009e02 <__ssputs_r+0x5a>
 8009e40:	6921      	ldr	r1, [r4, #16]
 8009e42:	4650      	mov	r0, sl
 8009e44:	f7ff fb34 	bl	80094b0 <_free_r>
 8009e48:	230c      	movs	r3, #12
 8009e4a:	f8ca 3000 	str.w	r3, [sl]
 8009e4e:	89a3      	ldrh	r3, [r4, #12]
 8009e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e54:	81a3      	strh	r3, [r4, #12]
 8009e56:	f04f 30ff 	mov.w	r0, #4294967295
 8009e5a:	e7e9      	b.n	8009e30 <__ssputs_r+0x88>

08009e5c <_svfiprintf_r>:
 8009e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e60:	4698      	mov	r8, r3
 8009e62:	898b      	ldrh	r3, [r1, #12]
 8009e64:	061b      	lsls	r3, r3, #24
 8009e66:	b09d      	sub	sp, #116	; 0x74
 8009e68:	4607      	mov	r7, r0
 8009e6a:	460d      	mov	r5, r1
 8009e6c:	4614      	mov	r4, r2
 8009e6e:	d50e      	bpl.n	8009e8e <_svfiprintf_r+0x32>
 8009e70:	690b      	ldr	r3, [r1, #16]
 8009e72:	b963      	cbnz	r3, 8009e8e <_svfiprintf_r+0x32>
 8009e74:	2140      	movs	r1, #64	; 0x40
 8009e76:	f7ff fb8f 	bl	8009598 <_malloc_r>
 8009e7a:	6028      	str	r0, [r5, #0]
 8009e7c:	6128      	str	r0, [r5, #16]
 8009e7e:	b920      	cbnz	r0, 8009e8a <_svfiprintf_r+0x2e>
 8009e80:	230c      	movs	r3, #12
 8009e82:	603b      	str	r3, [r7, #0]
 8009e84:	f04f 30ff 	mov.w	r0, #4294967295
 8009e88:	e0d0      	b.n	800a02c <_svfiprintf_r+0x1d0>
 8009e8a:	2340      	movs	r3, #64	; 0x40
 8009e8c:	616b      	str	r3, [r5, #20]
 8009e8e:	2300      	movs	r3, #0
 8009e90:	9309      	str	r3, [sp, #36]	; 0x24
 8009e92:	2320      	movs	r3, #32
 8009e94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e98:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e9c:	2330      	movs	r3, #48	; 0x30
 8009e9e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a044 <_svfiprintf_r+0x1e8>
 8009ea2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ea6:	f04f 0901 	mov.w	r9, #1
 8009eaa:	4623      	mov	r3, r4
 8009eac:	469a      	mov	sl, r3
 8009eae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009eb2:	b10a      	cbz	r2, 8009eb8 <_svfiprintf_r+0x5c>
 8009eb4:	2a25      	cmp	r2, #37	; 0x25
 8009eb6:	d1f9      	bne.n	8009eac <_svfiprintf_r+0x50>
 8009eb8:	ebba 0b04 	subs.w	fp, sl, r4
 8009ebc:	d00b      	beq.n	8009ed6 <_svfiprintf_r+0x7a>
 8009ebe:	465b      	mov	r3, fp
 8009ec0:	4622      	mov	r2, r4
 8009ec2:	4629      	mov	r1, r5
 8009ec4:	4638      	mov	r0, r7
 8009ec6:	f7ff ff6f 	bl	8009da8 <__ssputs_r>
 8009eca:	3001      	adds	r0, #1
 8009ecc:	f000 80a9 	beq.w	800a022 <_svfiprintf_r+0x1c6>
 8009ed0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ed2:	445a      	add	r2, fp
 8009ed4:	9209      	str	r2, [sp, #36]	; 0x24
 8009ed6:	f89a 3000 	ldrb.w	r3, [sl]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	f000 80a1 	beq.w	800a022 <_svfiprintf_r+0x1c6>
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ee6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009eea:	f10a 0a01 	add.w	sl, sl, #1
 8009eee:	9304      	str	r3, [sp, #16]
 8009ef0:	9307      	str	r3, [sp, #28]
 8009ef2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ef6:	931a      	str	r3, [sp, #104]	; 0x68
 8009ef8:	4654      	mov	r4, sl
 8009efa:	2205      	movs	r2, #5
 8009efc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f00:	4850      	ldr	r0, [pc, #320]	; (800a044 <_svfiprintf_r+0x1e8>)
 8009f02:	f7f6 f9ed 	bl	80002e0 <memchr>
 8009f06:	9a04      	ldr	r2, [sp, #16]
 8009f08:	b9d8      	cbnz	r0, 8009f42 <_svfiprintf_r+0xe6>
 8009f0a:	06d0      	lsls	r0, r2, #27
 8009f0c:	bf44      	itt	mi
 8009f0e:	2320      	movmi	r3, #32
 8009f10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f14:	0711      	lsls	r1, r2, #28
 8009f16:	bf44      	itt	mi
 8009f18:	232b      	movmi	r3, #43	; 0x2b
 8009f1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f1e:	f89a 3000 	ldrb.w	r3, [sl]
 8009f22:	2b2a      	cmp	r3, #42	; 0x2a
 8009f24:	d015      	beq.n	8009f52 <_svfiprintf_r+0xf6>
 8009f26:	9a07      	ldr	r2, [sp, #28]
 8009f28:	4654      	mov	r4, sl
 8009f2a:	2000      	movs	r0, #0
 8009f2c:	f04f 0c0a 	mov.w	ip, #10
 8009f30:	4621      	mov	r1, r4
 8009f32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f36:	3b30      	subs	r3, #48	; 0x30
 8009f38:	2b09      	cmp	r3, #9
 8009f3a:	d94d      	bls.n	8009fd8 <_svfiprintf_r+0x17c>
 8009f3c:	b1b0      	cbz	r0, 8009f6c <_svfiprintf_r+0x110>
 8009f3e:	9207      	str	r2, [sp, #28]
 8009f40:	e014      	b.n	8009f6c <_svfiprintf_r+0x110>
 8009f42:	eba0 0308 	sub.w	r3, r0, r8
 8009f46:	fa09 f303 	lsl.w	r3, r9, r3
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	9304      	str	r3, [sp, #16]
 8009f4e:	46a2      	mov	sl, r4
 8009f50:	e7d2      	b.n	8009ef8 <_svfiprintf_r+0x9c>
 8009f52:	9b03      	ldr	r3, [sp, #12]
 8009f54:	1d19      	adds	r1, r3, #4
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	9103      	str	r1, [sp, #12]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	bfbb      	ittet	lt
 8009f5e:	425b      	neglt	r3, r3
 8009f60:	f042 0202 	orrlt.w	r2, r2, #2
 8009f64:	9307      	strge	r3, [sp, #28]
 8009f66:	9307      	strlt	r3, [sp, #28]
 8009f68:	bfb8      	it	lt
 8009f6a:	9204      	strlt	r2, [sp, #16]
 8009f6c:	7823      	ldrb	r3, [r4, #0]
 8009f6e:	2b2e      	cmp	r3, #46	; 0x2e
 8009f70:	d10c      	bne.n	8009f8c <_svfiprintf_r+0x130>
 8009f72:	7863      	ldrb	r3, [r4, #1]
 8009f74:	2b2a      	cmp	r3, #42	; 0x2a
 8009f76:	d134      	bne.n	8009fe2 <_svfiprintf_r+0x186>
 8009f78:	9b03      	ldr	r3, [sp, #12]
 8009f7a:	1d1a      	adds	r2, r3, #4
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	9203      	str	r2, [sp, #12]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	bfb8      	it	lt
 8009f84:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f88:	3402      	adds	r4, #2
 8009f8a:	9305      	str	r3, [sp, #20]
 8009f8c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a054 <_svfiprintf_r+0x1f8>
 8009f90:	7821      	ldrb	r1, [r4, #0]
 8009f92:	2203      	movs	r2, #3
 8009f94:	4650      	mov	r0, sl
 8009f96:	f7f6 f9a3 	bl	80002e0 <memchr>
 8009f9a:	b138      	cbz	r0, 8009fac <_svfiprintf_r+0x150>
 8009f9c:	9b04      	ldr	r3, [sp, #16]
 8009f9e:	eba0 000a 	sub.w	r0, r0, sl
 8009fa2:	2240      	movs	r2, #64	; 0x40
 8009fa4:	4082      	lsls	r2, r0
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	3401      	adds	r4, #1
 8009faa:	9304      	str	r3, [sp, #16]
 8009fac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fb0:	4825      	ldr	r0, [pc, #148]	; (800a048 <_svfiprintf_r+0x1ec>)
 8009fb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009fb6:	2206      	movs	r2, #6
 8009fb8:	f7f6 f992 	bl	80002e0 <memchr>
 8009fbc:	2800      	cmp	r0, #0
 8009fbe:	d038      	beq.n	800a032 <_svfiprintf_r+0x1d6>
 8009fc0:	4b22      	ldr	r3, [pc, #136]	; (800a04c <_svfiprintf_r+0x1f0>)
 8009fc2:	bb1b      	cbnz	r3, 800a00c <_svfiprintf_r+0x1b0>
 8009fc4:	9b03      	ldr	r3, [sp, #12]
 8009fc6:	3307      	adds	r3, #7
 8009fc8:	f023 0307 	bic.w	r3, r3, #7
 8009fcc:	3308      	adds	r3, #8
 8009fce:	9303      	str	r3, [sp, #12]
 8009fd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fd2:	4433      	add	r3, r6
 8009fd4:	9309      	str	r3, [sp, #36]	; 0x24
 8009fd6:	e768      	b.n	8009eaa <_svfiprintf_r+0x4e>
 8009fd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009fdc:	460c      	mov	r4, r1
 8009fde:	2001      	movs	r0, #1
 8009fe0:	e7a6      	b.n	8009f30 <_svfiprintf_r+0xd4>
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	3401      	adds	r4, #1
 8009fe6:	9305      	str	r3, [sp, #20]
 8009fe8:	4619      	mov	r1, r3
 8009fea:	f04f 0c0a 	mov.w	ip, #10
 8009fee:	4620      	mov	r0, r4
 8009ff0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ff4:	3a30      	subs	r2, #48	; 0x30
 8009ff6:	2a09      	cmp	r2, #9
 8009ff8:	d903      	bls.n	800a002 <_svfiprintf_r+0x1a6>
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d0c6      	beq.n	8009f8c <_svfiprintf_r+0x130>
 8009ffe:	9105      	str	r1, [sp, #20]
 800a000:	e7c4      	b.n	8009f8c <_svfiprintf_r+0x130>
 800a002:	fb0c 2101 	mla	r1, ip, r1, r2
 800a006:	4604      	mov	r4, r0
 800a008:	2301      	movs	r3, #1
 800a00a:	e7f0      	b.n	8009fee <_svfiprintf_r+0x192>
 800a00c:	ab03      	add	r3, sp, #12
 800a00e:	9300      	str	r3, [sp, #0]
 800a010:	462a      	mov	r2, r5
 800a012:	4b0f      	ldr	r3, [pc, #60]	; (800a050 <_svfiprintf_r+0x1f4>)
 800a014:	a904      	add	r1, sp, #16
 800a016:	4638      	mov	r0, r7
 800a018:	f7fd ff06 	bl	8007e28 <_printf_float>
 800a01c:	1c42      	adds	r2, r0, #1
 800a01e:	4606      	mov	r6, r0
 800a020:	d1d6      	bne.n	8009fd0 <_svfiprintf_r+0x174>
 800a022:	89ab      	ldrh	r3, [r5, #12]
 800a024:	065b      	lsls	r3, r3, #25
 800a026:	f53f af2d 	bmi.w	8009e84 <_svfiprintf_r+0x28>
 800a02a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a02c:	b01d      	add	sp, #116	; 0x74
 800a02e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a032:	ab03      	add	r3, sp, #12
 800a034:	9300      	str	r3, [sp, #0]
 800a036:	462a      	mov	r2, r5
 800a038:	4b05      	ldr	r3, [pc, #20]	; (800a050 <_svfiprintf_r+0x1f4>)
 800a03a:	a904      	add	r1, sp, #16
 800a03c:	4638      	mov	r0, r7
 800a03e:	f7fe f97b 	bl	8008338 <_printf_i>
 800a042:	e7eb      	b.n	800a01c <_svfiprintf_r+0x1c0>
 800a044:	0800ba4c 	.word	0x0800ba4c
 800a048:	0800ba56 	.word	0x0800ba56
 800a04c:	08007e29 	.word	0x08007e29
 800a050:	08009da9 	.word	0x08009da9
 800a054:	0800ba52 	.word	0x0800ba52

0800a058 <__sflush_r>:
 800a058:	898a      	ldrh	r2, [r1, #12]
 800a05a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a05e:	4605      	mov	r5, r0
 800a060:	0710      	lsls	r0, r2, #28
 800a062:	460c      	mov	r4, r1
 800a064:	d458      	bmi.n	800a118 <__sflush_r+0xc0>
 800a066:	684b      	ldr	r3, [r1, #4]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	dc05      	bgt.n	800a078 <__sflush_r+0x20>
 800a06c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a06e:	2b00      	cmp	r3, #0
 800a070:	dc02      	bgt.n	800a078 <__sflush_r+0x20>
 800a072:	2000      	movs	r0, #0
 800a074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a078:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a07a:	2e00      	cmp	r6, #0
 800a07c:	d0f9      	beq.n	800a072 <__sflush_r+0x1a>
 800a07e:	2300      	movs	r3, #0
 800a080:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a084:	682f      	ldr	r7, [r5, #0]
 800a086:	6a21      	ldr	r1, [r4, #32]
 800a088:	602b      	str	r3, [r5, #0]
 800a08a:	d032      	beq.n	800a0f2 <__sflush_r+0x9a>
 800a08c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a08e:	89a3      	ldrh	r3, [r4, #12]
 800a090:	075a      	lsls	r2, r3, #29
 800a092:	d505      	bpl.n	800a0a0 <__sflush_r+0x48>
 800a094:	6863      	ldr	r3, [r4, #4]
 800a096:	1ac0      	subs	r0, r0, r3
 800a098:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a09a:	b10b      	cbz	r3, 800a0a0 <__sflush_r+0x48>
 800a09c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a09e:	1ac0      	subs	r0, r0, r3
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0a6:	6a21      	ldr	r1, [r4, #32]
 800a0a8:	4628      	mov	r0, r5
 800a0aa:	47b0      	blx	r6
 800a0ac:	1c43      	adds	r3, r0, #1
 800a0ae:	89a3      	ldrh	r3, [r4, #12]
 800a0b0:	d106      	bne.n	800a0c0 <__sflush_r+0x68>
 800a0b2:	6829      	ldr	r1, [r5, #0]
 800a0b4:	291d      	cmp	r1, #29
 800a0b6:	d82b      	bhi.n	800a110 <__sflush_r+0xb8>
 800a0b8:	4a29      	ldr	r2, [pc, #164]	; (800a160 <__sflush_r+0x108>)
 800a0ba:	410a      	asrs	r2, r1
 800a0bc:	07d6      	lsls	r6, r2, #31
 800a0be:	d427      	bmi.n	800a110 <__sflush_r+0xb8>
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	6062      	str	r2, [r4, #4]
 800a0c4:	04d9      	lsls	r1, r3, #19
 800a0c6:	6922      	ldr	r2, [r4, #16]
 800a0c8:	6022      	str	r2, [r4, #0]
 800a0ca:	d504      	bpl.n	800a0d6 <__sflush_r+0x7e>
 800a0cc:	1c42      	adds	r2, r0, #1
 800a0ce:	d101      	bne.n	800a0d4 <__sflush_r+0x7c>
 800a0d0:	682b      	ldr	r3, [r5, #0]
 800a0d2:	b903      	cbnz	r3, 800a0d6 <__sflush_r+0x7e>
 800a0d4:	6560      	str	r0, [r4, #84]	; 0x54
 800a0d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0d8:	602f      	str	r7, [r5, #0]
 800a0da:	2900      	cmp	r1, #0
 800a0dc:	d0c9      	beq.n	800a072 <__sflush_r+0x1a>
 800a0de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0e2:	4299      	cmp	r1, r3
 800a0e4:	d002      	beq.n	800a0ec <__sflush_r+0x94>
 800a0e6:	4628      	mov	r0, r5
 800a0e8:	f7ff f9e2 	bl	80094b0 <_free_r>
 800a0ec:	2000      	movs	r0, #0
 800a0ee:	6360      	str	r0, [r4, #52]	; 0x34
 800a0f0:	e7c0      	b.n	800a074 <__sflush_r+0x1c>
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	4628      	mov	r0, r5
 800a0f6:	47b0      	blx	r6
 800a0f8:	1c41      	adds	r1, r0, #1
 800a0fa:	d1c8      	bne.n	800a08e <__sflush_r+0x36>
 800a0fc:	682b      	ldr	r3, [r5, #0]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d0c5      	beq.n	800a08e <__sflush_r+0x36>
 800a102:	2b1d      	cmp	r3, #29
 800a104:	d001      	beq.n	800a10a <__sflush_r+0xb2>
 800a106:	2b16      	cmp	r3, #22
 800a108:	d101      	bne.n	800a10e <__sflush_r+0xb6>
 800a10a:	602f      	str	r7, [r5, #0]
 800a10c:	e7b1      	b.n	800a072 <__sflush_r+0x1a>
 800a10e:	89a3      	ldrh	r3, [r4, #12]
 800a110:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a114:	81a3      	strh	r3, [r4, #12]
 800a116:	e7ad      	b.n	800a074 <__sflush_r+0x1c>
 800a118:	690f      	ldr	r7, [r1, #16]
 800a11a:	2f00      	cmp	r7, #0
 800a11c:	d0a9      	beq.n	800a072 <__sflush_r+0x1a>
 800a11e:	0793      	lsls	r3, r2, #30
 800a120:	680e      	ldr	r6, [r1, #0]
 800a122:	bf08      	it	eq
 800a124:	694b      	ldreq	r3, [r1, #20]
 800a126:	600f      	str	r7, [r1, #0]
 800a128:	bf18      	it	ne
 800a12a:	2300      	movne	r3, #0
 800a12c:	eba6 0807 	sub.w	r8, r6, r7
 800a130:	608b      	str	r3, [r1, #8]
 800a132:	f1b8 0f00 	cmp.w	r8, #0
 800a136:	dd9c      	ble.n	800a072 <__sflush_r+0x1a>
 800a138:	6a21      	ldr	r1, [r4, #32]
 800a13a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a13c:	4643      	mov	r3, r8
 800a13e:	463a      	mov	r2, r7
 800a140:	4628      	mov	r0, r5
 800a142:	47b0      	blx	r6
 800a144:	2800      	cmp	r0, #0
 800a146:	dc06      	bgt.n	800a156 <__sflush_r+0xfe>
 800a148:	89a3      	ldrh	r3, [r4, #12]
 800a14a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a14e:	81a3      	strh	r3, [r4, #12]
 800a150:	f04f 30ff 	mov.w	r0, #4294967295
 800a154:	e78e      	b.n	800a074 <__sflush_r+0x1c>
 800a156:	4407      	add	r7, r0
 800a158:	eba8 0800 	sub.w	r8, r8, r0
 800a15c:	e7e9      	b.n	800a132 <__sflush_r+0xda>
 800a15e:	bf00      	nop
 800a160:	dfbffffe 	.word	0xdfbffffe

0800a164 <_fflush_r>:
 800a164:	b538      	push	{r3, r4, r5, lr}
 800a166:	690b      	ldr	r3, [r1, #16]
 800a168:	4605      	mov	r5, r0
 800a16a:	460c      	mov	r4, r1
 800a16c:	b913      	cbnz	r3, 800a174 <_fflush_r+0x10>
 800a16e:	2500      	movs	r5, #0
 800a170:	4628      	mov	r0, r5
 800a172:	bd38      	pop	{r3, r4, r5, pc}
 800a174:	b118      	cbz	r0, 800a17e <_fflush_r+0x1a>
 800a176:	6a03      	ldr	r3, [r0, #32]
 800a178:	b90b      	cbnz	r3, 800a17e <_fflush_r+0x1a>
 800a17a:	f7fe fa8b 	bl	8008694 <__sinit>
 800a17e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d0f3      	beq.n	800a16e <_fflush_r+0xa>
 800a186:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a188:	07d0      	lsls	r0, r2, #31
 800a18a:	d404      	bmi.n	800a196 <_fflush_r+0x32>
 800a18c:	0599      	lsls	r1, r3, #22
 800a18e:	d402      	bmi.n	800a196 <_fflush_r+0x32>
 800a190:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a192:	f7fe fb96 	bl	80088c2 <__retarget_lock_acquire_recursive>
 800a196:	4628      	mov	r0, r5
 800a198:	4621      	mov	r1, r4
 800a19a:	f7ff ff5d 	bl	800a058 <__sflush_r>
 800a19e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1a0:	07da      	lsls	r2, r3, #31
 800a1a2:	4605      	mov	r5, r0
 800a1a4:	d4e4      	bmi.n	800a170 <_fflush_r+0xc>
 800a1a6:	89a3      	ldrh	r3, [r4, #12]
 800a1a8:	059b      	lsls	r3, r3, #22
 800a1aa:	d4e1      	bmi.n	800a170 <_fflush_r+0xc>
 800a1ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1ae:	f7fe fb89 	bl	80088c4 <__retarget_lock_release_recursive>
 800a1b2:	e7dd      	b.n	800a170 <_fflush_r+0xc>

0800a1b4 <memmove>:
 800a1b4:	4288      	cmp	r0, r1
 800a1b6:	b510      	push	{r4, lr}
 800a1b8:	eb01 0402 	add.w	r4, r1, r2
 800a1bc:	d902      	bls.n	800a1c4 <memmove+0x10>
 800a1be:	4284      	cmp	r4, r0
 800a1c0:	4623      	mov	r3, r4
 800a1c2:	d807      	bhi.n	800a1d4 <memmove+0x20>
 800a1c4:	1e43      	subs	r3, r0, #1
 800a1c6:	42a1      	cmp	r1, r4
 800a1c8:	d008      	beq.n	800a1dc <memmove+0x28>
 800a1ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a1ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a1d2:	e7f8      	b.n	800a1c6 <memmove+0x12>
 800a1d4:	4402      	add	r2, r0
 800a1d6:	4601      	mov	r1, r0
 800a1d8:	428a      	cmp	r2, r1
 800a1da:	d100      	bne.n	800a1de <memmove+0x2a>
 800a1dc:	bd10      	pop	{r4, pc}
 800a1de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a1e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a1e6:	e7f7      	b.n	800a1d8 <memmove+0x24>

0800a1e8 <_sbrk_r>:
 800a1e8:	b538      	push	{r3, r4, r5, lr}
 800a1ea:	4d06      	ldr	r5, [pc, #24]	; (800a204 <_sbrk_r+0x1c>)
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	4604      	mov	r4, r0
 800a1f0:	4608      	mov	r0, r1
 800a1f2:	602b      	str	r3, [r5, #0]
 800a1f4:	f7f7 fbac 	bl	8001950 <_sbrk>
 800a1f8:	1c43      	adds	r3, r0, #1
 800a1fa:	d102      	bne.n	800a202 <_sbrk_r+0x1a>
 800a1fc:	682b      	ldr	r3, [r5, #0]
 800a1fe:	b103      	cbz	r3, 800a202 <_sbrk_r+0x1a>
 800a200:	6023      	str	r3, [r4, #0]
 800a202:	bd38      	pop	{r3, r4, r5, pc}
 800a204:	240019c8 	.word	0x240019c8

0800a208 <memcpy>:
 800a208:	440a      	add	r2, r1
 800a20a:	4291      	cmp	r1, r2
 800a20c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a210:	d100      	bne.n	800a214 <memcpy+0xc>
 800a212:	4770      	bx	lr
 800a214:	b510      	push	{r4, lr}
 800a216:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a21a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a21e:	4291      	cmp	r1, r2
 800a220:	d1f9      	bne.n	800a216 <memcpy+0xe>
 800a222:	bd10      	pop	{r4, pc}

0800a224 <__assert_func>:
 800a224:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a226:	4614      	mov	r4, r2
 800a228:	461a      	mov	r2, r3
 800a22a:	4b09      	ldr	r3, [pc, #36]	; (800a250 <__assert_func+0x2c>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4605      	mov	r5, r0
 800a230:	68d8      	ldr	r0, [r3, #12]
 800a232:	b14c      	cbz	r4, 800a248 <__assert_func+0x24>
 800a234:	4b07      	ldr	r3, [pc, #28]	; (800a254 <__assert_func+0x30>)
 800a236:	9100      	str	r1, [sp, #0]
 800a238:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a23c:	4906      	ldr	r1, [pc, #24]	; (800a258 <__assert_func+0x34>)
 800a23e:	462b      	mov	r3, r5
 800a240:	f000 f872 	bl	800a328 <fiprintf>
 800a244:	f000 f882 	bl	800a34c <abort>
 800a248:	4b04      	ldr	r3, [pc, #16]	; (800a25c <__assert_func+0x38>)
 800a24a:	461c      	mov	r4, r3
 800a24c:	e7f3      	b.n	800a236 <__assert_func+0x12>
 800a24e:	bf00      	nop
 800a250:	24000068 	.word	0x24000068
 800a254:	0800ba67 	.word	0x0800ba67
 800a258:	0800ba74 	.word	0x0800ba74
 800a25c:	0800baa2 	.word	0x0800baa2

0800a260 <_calloc_r>:
 800a260:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a262:	fba1 2402 	umull	r2, r4, r1, r2
 800a266:	b94c      	cbnz	r4, 800a27c <_calloc_r+0x1c>
 800a268:	4611      	mov	r1, r2
 800a26a:	9201      	str	r2, [sp, #4]
 800a26c:	f7ff f994 	bl	8009598 <_malloc_r>
 800a270:	9a01      	ldr	r2, [sp, #4]
 800a272:	4605      	mov	r5, r0
 800a274:	b930      	cbnz	r0, 800a284 <_calloc_r+0x24>
 800a276:	4628      	mov	r0, r5
 800a278:	b003      	add	sp, #12
 800a27a:	bd30      	pop	{r4, r5, pc}
 800a27c:	220c      	movs	r2, #12
 800a27e:	6002      	str	r2, [r0, #0]
 800a280:	2500      	movs	r5, #0
 800a282:	e7f8      	b.n	800a276 <_calloc_r+0x16>
 800a284:	4621      	mov	r1, r4
 800a286:	f7fe fa9e 	bl	80087c6 <memset>
 800a28a:	e7f4      	b.n	800a276 <_calloc_r+0x16>

0800a28c <__ascii_mbtowc>:
 800a28c:	b082      	sub	sp, #8
 800a28e:	b901      	cbnz	r1, 800a292 <__ascii_mbtowc+0x6>
 800a290:	a901      	add	r1, sp, #4
 800a292:	b142      	cbz	r2, 800a2a6 <__ascii_mbtowc+0x1a>
 800a294:	b14b      	cbz	r3, 800a2aa <__ascii_mbtowc+0x1e>
 800a296:	7813      	ldrb	r3, [r2, #0]
 800a298:	600b      	str	r3, [r1, #0]
 800a29a:	7812      	ldrb	r2, [r2, #0]
 800a29c:	1e10      	subs	r0, r2, #0
 800a29e:	bf18      	it	ne
 800a2a0:	2001      	movne	r0, #1
 800a2a2:	b002      	add	sp, #8
 800a2a4:	4770      	bx	lr
 800a2a6:	4610      	mov	r0, r2
 800a2a8:	e7fb      	b.n	800a2a2 <__ascii_mbtowc+0x16>
 800a2aa:	f06f 0001 	mvn.w	r0, #1
 800a2ae:	e7f8      	b.n	800a2a2 <__ascii_mbtowc+0x16>

0800a2b0 <_realloc_r>:
 800a2b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2b4:	4680      	mov	r8, r0
 800a2b6:	4614      	mov	r4, r2
 800a2b8:	460e      	mov	r6, r1
 800a2ba:	b921      	cbnz	r1, 800a2c6 <_realloc_r+0x16>
 800a2bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2c0:	4611      	mov	r1, r2
 800a2c2:	f7ff b969 	b.w	8009598 <_malloc_r>
 800a2c6:	b92a      	cbnz	r2, 800a2d4 <_realloc_r+0x24>
 800a2c8:	f7ff f8f2 	bl	80094b0 <_free_r>
 800a2cc:	4625      	mov	r5, r4
 800a2ce:	4628      	mov	r0, r5
 800a2d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2d4:	f000 f841 	bl	800a35a <_malloc_usable_size_r>
 800a2d8:	4284      	cmp	r4, r0
 800a2da:	4607      	mov	r7, r0
 800a2dc:	d802      	bhi.n	800a2e4 <_realloc_r+0x34>
 800a2de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a2e2:	d812      	bhi.n	800a30a <_realloc_r+0x5a>
 800a2e4:	4621      	mov	r1, r4
 800a2e6:	4640      	mov	r0, r8
 800a2e8:	f7ff f956 	bl	8009598 <_malloc_r>
 800a2ec:	4605      	mov	r5, r0
 800a2ee:	2800      	cmp	r0, #0
 800a2f0:	d0ed      	beq.n	800a2ce <_realloc_r+0x1e>
 800a2f2:	42bc      	cmp	r4, r7
 800a2f4:	4622      	mov	r2, r4
 800a2f6:	4631      	mov	r1, r6
 800a2f8:	bf28      	it	cs
 800a2fa:	463a      	movcs	r2, r7
 800a2fc:	f7ff ff84 	bl	800a208 <memcpy>
 800a300:	4631      	mov	r1, r6
 800a302:	4640      	mov	r0, r8
 800a304:	f7ff f8d4 	bl	80094b0 <_free_r>
 800a308:	e7e1      	b.n	800a2ce <_realloc_r+0x1e>
 800a30a:	4635      	mov	r5, r6
 800a30c:	e7df      	b.n	800a2ce <_realloc_r+0x1e>

0800a30e <__ascii_wctomb>:
 800a30e:	b149      	cbz	r1, 800a324 <__ascii_wctomb+0x16>
 800a310:	2aff      	cmp	r2, #255	; 0xff
 800a312:	bf85      	ittet	hi
 800a314:	238a      	movhi	r3, #138	; 0x8a
 800a316:	6003      	strhi	r3, [r0, #0]
 800a318:	700a      	strbls	r2, [r1, #0]
 800a31a:	f04f 30ff 	movhi.w	r0, #4294967295
 800a31e:	bf98      	it	ls
 800a320:	2001      	movls	r0, #1
 800a322:	4770      	bx	lr
 800a324:	4608      	mov	r0, r1
 800a326:	4770      	bx	lr

0800a328 <fiprintf>:
 800a328:	b40e      	push	{r1, r2, r3}
 800a32a:	b503      	push	{r0, r1, lr}
 800a32c:	4601      	mov	r1, r0
 800a32e:	ab03      	add	r3, sp, #12
 800a330:	4805      	ldr	r0, [pc, #20]	; (800a348 <fiprintf+0x20>)
 800a332:	f853 2b04 	ldr.w	r2, [r3], #4
 800a336:	6800      	ldr	r0, [r0, #0]
 800a338:	9301      	str	r3, [sp, #4]
 800a33a:	f000 f83f 	bl	800a3bc <_vfiprintf_r>
 800a33e:	b002      	add	sp, #8
 800a340:	f85d eb04 	ldr.w	lr, [sp], #4
 800a344:	b003      	add	sp, #12
 800a346:	4770      	bx	lr
 800a348:	24000068 	.word	0x24000068

0800a34c <abort>:
 800a34c:	b508      	push	{r3, lr}
 800a34e:	2006      	movs	r0, #6
 800a350:	f000 fa0c 	bl	800a76c <raise>
 800a354:	2001      	movs	r0, #1
 800a356:	f7f7 fa83 	bl	8001860 <_exit>

0800a35a <_malloc_usable_size_r>:
 800a35a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a35e:	1f18      	subs	r0, r3, #4
 800a360:	2b00      	cmp	r3, #0
 800a362:	bfbc      	itt	lt
 800a364:	580b      	ldrlt	r3, [r1, r0]
 800a366:	18c0      	addlt	r0, r0, r3
 800a368:	4770      	bx	lr

0800a36a <__sfputc_r>:
 800a36a:	6893      	ldr	r3, [r2, #8]
 800a36c:	3b01      	subs	r3, #1
 800a36e:	2b00      	cmp	r3, #0
 800a370:	b410      	push	{r4}
 800a372:	6093      	str	r3, [r2, #8]
 800a374:	da08      	bge.n	800a388 <__sfputc_r+0x1e>
 800a376:	6994      	ldr	r4, [r2, #24]
 800a378:	42a3      	cmp	r3, r4
 800a37a:	db01      	blt.n	800a380 <__sfputc_r+0x16>
 800a37c:	290a      	cmp	r1, #10
 800a37e:	d103      	bne.n	800a388 <__sfputc_r+0x1e>
 800a380:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a384:	f000 b934 	b.w	800a5f0 <__swbuf_r>
 800a388:	6813      	ldr	r3, [r2, #0]
 800a38a:	1c58      	adds	r0, r3, #1
 800a38c:	6010      	str	r0, [r2, #0]
 800a38e:	7019      	strb	r1, [r3, #0]
 800a390:	4608      	mov	r0, r1
 800a392:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a396:	4770      	bx	lr

0800a398 <__sfputs_r>:
 800a398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a39a:	4606      	mov	r6, r0
 800a39c:	460f      	mov	r7, r1
 800a39e:	4614      	mov	r4, r2
 800a3a0:	18d5      	adds	r5, r2, r3
 800a3a2:	42ac      	cmp	r4, r5
 800a3a4:	d101      	bne.n	800a3aa <__sfputs_r+0x12>
 800a3a6:	2000      	movs	r0, #0
 800a3a8:	e007      	b.n	800a3ba <__sfputs_r+0x22>
 800a3aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3ae:	463a      	mov	r2, r7
 800a3b0:	4630      	mov	r0, r6
 800a3b2:	f7ff ffda 	bl	800a36a <__sfputc_r>
 800a3b6:	1c43      	adds	r3, r0, #1
 800a3b8:	d1f3      	bne.n	800a3a2 <__sfputs_r+0xa>
 800a3ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a3bc <_vfiprintf_r>:
 800a3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3c0:	460d      	mov	r5, r1
 800a3c2:	b09d      	sub	sp, #116	; 0x74
 800a3c4:	4614      	mov	r4, r2
 800a3c6:	4698      	mov	r8, r3
 800a3c8:	4606      	mov	r6, r0
 800a3ca:	b118      	cbz	r0, 800a3d4 <_vfiprintf_r+0x18>
 800a3cc:	6a03      	ldr	r3, [r0, #32]
 800a3ce:	b90b      	cbnz	r3, 800a3d4 <_vfiprintf_r+0x18>
 800a3d0:	f7fe f960 	bl	8008694 <__sinit>
 800a3d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3d6:	07d9      	lsls	r1, r3, #31
 800a3d8:	d405      	bmi.n	800a3e6 <_vfiprintf_r+0x2a>
 800a3da:	89ab      	ldrh	r3, [r5, #12]
 800a3dc:	059a      	lsls	r2, r3, #22
 800a3de:	d402      	bmi.n	800a3e6 <_vfiprintf_r+0x2a>
 800a3e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3e2:	f7fe fa6e 	bl	80088c2 <__retarget_lock_acquire_recursive>
 800a3e6:	89ab      	ldrh	r3, [r5, #12]
 800a3e8:	071b      	lsls	r3, r3, #28
 800a3ea:	d501      	bpl.n	800a3f0 <_vfiprintf_r+0x34>
 800a3ec:	692b      	ldr	r3, [r5, #16]
 800a3ee:	b99b      	cbnz	r3, 800a418 <_vfiprintf_r+0x5c>
 800a3f0:	4629      	mov	r1, r5
 800a3f2:	4630      	mov	r0, r6
 800a3f4:	f000 f93a 	bl	800a66c <__swsetup_r>
 800a3f8:	b170      	cbz	r0, 800a418 <_vfiprintf_r+0x5c>
 800a3fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3fc:	07dc      	lsls	r4, r3, #31
 800a3fe:	d504      	bpl.n	800a40a <_vfiprintf_r+0x4e>
 800a400:	f04f 30ff 	mov.w	r0, #4294967295
 800a404:	b01d      	add	sp, #116	; 0x74
 800a406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a40a:	89ab      	ldrh	r3, [r5, #12]
 800a40c:	0598      	lsls	r0, r3, #22
 800a40e:	d4f7      	bmi.n	800a400 <_vfiprintf_r+0x44>
 800a410:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a412:	f7fe fa57 	bl	80088c4 <__retarget_lock_release_recursive>
 800a416:	e7f3      	b.n	800a400 <_vfiprintf_r+0x44>
 800a418:	2300      	movs	r3, #0
 800a41a:	9309      	str	r3, [sp, #36]	; 0x24
 800a41c:	2320      	movs	r3, #32
 800a41e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a422:	f8cd 800c 	str.w	r8, [sp, #12]
 800a426:	2330      	movs	r3, #48	; 0x30
 800a428:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a5dc <_vfiprintf_r+0x220>
 800a42c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a430:	f04f 0901 	mov.w	r9, #1
 800a434:	4623      	mov	r3, r4
 800a436:	469a      	mov	sl, r3
 800a438:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a43c:	b10a      	cbz	r2, 800a442 <_vfiprintf_r+0x86>
 800a43e:	2a25      	cmp	r2, #37	; 0x25
 800a440:	d1f9      	bne.n	800a436 <_vfiprintf_r+0x7a>
 800a442:	ebba 0b04 	subs.w	fp, sl, r4
 800a446:	d00b      	beq.n	800a460 <_vfiprintf_r+0xa4>
 800a448:	465b      	mov	r3, fp
 800a44a:	4622      	mov	r2, r4
 800a44c:	4629      	mov	r1, r5
 800a44e:	4630      	mov	r0, r6
 800a450:	f7ff ffa2 	bl	800a398 <__sfputs_r>
 800a454:	3001      	adds	r0, #1
 800a456:	f000 80a9 	beq.w	800a5ac <_vfiprintf_r+0x1f0>
 800a45a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a45c:	445a      	add	r2, fp
 800a45e:	9209      	str	r2, [sp, #36]	; 0x24
 800a460:	f89a 3000 	ldrb.w	r3, [sl]
 800a464:	2b00      	cmp	r3, #0
 800a466:	f000 80a1 	beq.w	800a5ac <_vfiprintf_r+0x1f0>
 800a46a:	2300      	movs	r3, #0
 800a46c:	f04f 32ff 	mov.w	r2, #4294967295
 800a470:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a474:	f10a 0a01 	add.w	sl, sl, #1
 800a478:	9304      	str	r3, [sp, #16]
 800a47a:	9307      	str	r3, [sp, #28]
 800a47c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a480:	931a      	str	r3, [sp, #104]	; 0x68
 800a482:	4654      	mov	r4, sl
 800a484:	2205      	movs	r2, #5
 800a486:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a48a:	4854      	ldr	r0, [pc, #336]	; (800a5dc <_vfiprintf_r+0x220>)
 800a48c:	f7f5 ff28 	bl	80002e0 <memchr>
 800a490:	9a04      	ldr	r2, [sp, #16]
 800a492:	b9d8      	cbnz	r0, 800a4cc <_vfiprintf_r+0x110>
 800a494:	06d1      	lsls	r1, r2, #27
 800a496:	bf44      	itt	mi
 800a498:	2320      	movmi	r3, #32
 800a49a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a49e:	0713      	lsls	r3, r2, #28
 800a4a0:	bf44      	itt	mi
 800a4a2:	232b      	movmi	r3, #43	; 0x2b
 800a4a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4a8:	f89a 3000 	ldrb.w	r3, [sl]
 800a4ac:	2b2a      	cmp	r3, #42	; 0x2a
 800a4ae:	d015      	beq.n	800a4dc <_vfiprintf_r+0x120>
 800a4b0:	9a07      	ldr	r2, [sp, #28]
 800a4b2:	4654      	mov	r4, sl
 800a4b4:	2000      	movs	r0, #0
 800a4b6:	f04f 0c0a 	mov.w	ip, #10
 800a4ba:	4621      	mov	r1, r4
 800a4bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4c0:	3b30      	subs	r3, #48	; 0x30
 800a4c2:	2b09      	cmp	r3, #9
 800a4c4:	d94d      	bls.n	800a562 <_vfiprintf_r+0x1a6>
 800a4c6:	b1b0      	cbz	r0, 800a4f6 <_vfiprintf_r+0x13a>
 800a4c8:	9207      	str	r2, [sp, #28]
 800a4ca:	e014      	b.n	800a4f6 <_vfiprintf_r+0x13a>
 800a4cc:	eba0 0308 	sub.w	r3, r0, r8
 800a4d0:	fa09 f303 	lsl.w	r3, r9, r3
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	9304      	str	r3, [sp, #16]
 800a4d8:	46a2      	mov	sl, r4
 800a4da:	e7d2      	b.n	800a482 <_vfiprintf_r+0xc6>
 800a4dc:	9b03      	ldr	r3, [sp, #12]
 800a4de:	1d19      	adds	r1, r3, #4
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	9103      	str	r1, [sp, #12]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	bfbb      	ittet	lt
 800a4e8:	425b      	neglt	r3, r3
 800a4ea:	f042 0202 	orrlt.w	r2, r2, #2
 800a4ee:	9307      	strge	r3, [sp, #28]
 800a4f0:	9307      	strlt	r3, [sp, #28]
 800a4f2:	bfb8      	it	lt
 800a4f4:	9204      	strlt	r2, [sp, #16]
 800a4f6:	7823      	ldrb	r3, [r4, #0]
 800a4f8:	2b2e      	cmp	r3, #46	; 0x2e
 800a4fa:	d10c      	bne.n	800a516 <_vfiprintf_r+0x15a>
 800a4fc:	7863      	ldrb	r3, [r4, #1]
 800a4fe:	2b2a      	cmp	r3, #42	; 0x2a
 800a500:	d134      	bne.n	800a56c <_vfiprintf_r+0x1b0>
 800a502:	9b03      	ldr	r3, [sp, #12]
 800a504:	1d1a      	adds	r2, r3, #4
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	9203      	str	r2, [sp, #12]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	bfb8      	it	lt
 800a50e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a512:	3402      	adds	r4, #2
 800a514:	9305      	str	r3, [sp, #20]
 800a516:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a5ec <_vfiprintf_r+0x230>
 800a51a:	7821      	ldrb	r1, [r4, #0]
 800a51c:	2203      	movs	r2, #3
 800a51e:	4650      	mov	r0, sl
 800a520:	f7f5 fede 	bl	80002e0 <memchr>
 800a524:	b138      	cbz	r0, 800a536 <_vfiprintf_r+0x17a>
 800a526:	9b04      	ldr	r3, [sp, #16]
 800a528:	eba0 000a 	sub.w	r0, r0, sl
 800a52c:	2240      	movs	r2, #64	; 0x40
 800a52e:	4082      	lsls	r2, r0
 800a530:	4313      	orrs	r3, r2
 800a532:	3401      	adds	r4, #1
 800a534:	9304      	str	r3, [sp, #16]
 800a536:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a53a:	4829      	ldr	r0, [pc, #164]	; (800a5e0 <_vfiprintf_r+0x224>)
 800a53c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a540:	2206      	movs	r2, #6
 800a542:	f7f5 fecd 	bl	80002e0 <memchr>
 800a546:	2800      	cmp	r0, #0
 800a548:	d03f      	beq.n	800a5ca <_vfiprintf_r+0x20e>
 800a54a:	4b26      	ldr	r3, [pc, #152]	; (800a5e4 <_vfiprintf_r+0x228>)
 800a54c:	bb1b      	cbnz	r3, 800a596 <_vfiprintf_r+0x1da>
 800a54e:	9b03      	ldr	r3, [sp, #12]
 800a550:	3307      	adds	r3, #7
 800a552:	f023 0307 	bic.w	r3, r3, #7
 800a556:	3308      	adds	r3, #8
 800a558:	9303      	str	r3, [sp, #12]
 800a55a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a55c:	443b      	add	r3, r7
 800a55e:	9309      	str	r3, [sp, #36]	; 0x24
 800a560:	e768      	b.n	800a434 <_vfiprintf_r+0x78>
 800a562:	fb0c 3202 	mla	r2, ip, r2, r3
 800a566:	460c      	mov	r4, r1
 800a568:	2001      	movs	r0, #1
 800a56a:	e7a6      	b.n	800a4ba <_vfiprintf_r+0xfe>
 800a56c:	2300      	movs	r3, #0
 800a56e:	3401      	adds	r4, #1
 800a570:	9305      	str	r3, [sp, #20]
 800a572:	4619      	mov	r1, r3
 800a574:	f04f 0c0a 	mov.w	ip, #10
 800a578:	4620      	mov	r0, r4
 800a57a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a57e:	3a30      	subs	r2, #48	; 0x30
 800a580:	2a09      	cmp	r2, #9
 800a582:	d903      	bls.n	800a58c <_vfiprintf_r+0x1d0>
 800a584:	2b00      	cmp	r3, #0
 800a586:	d0c6      	beq.n	800a516 <_vfiprintf_r+0x15a>
 800a588:	9105      	str	r1, [sp, #20]
 800a58a:	e7c4      	b.n	800a516 <_vfiprintf_r+0x15a>
 800a58c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a590:	4604      	mov	r4, r0
 800a592:	2301      	movs	r3, #1
 800a594:	e7f0      	b.n	800a578 <_vfiprintf_r+0x1bc>
 800a596:	ab03      	add	r3, sp, #12
 800a598:	9300      	str	r3, [sp, #0]
 800a59a:	462a      	mov	r2, r5
 800a59c:	4b12      	ldr	r3, [pc, #72]	; (800a5e8 <_vfiprintf_r+0x22c>)
 800a59e:	a904      	add	r1, sp, #16
 800a5a0:	4630      	mov	r0, r6
 800a5a2:	f7fd fc41 	bl	8007e28 <_printf_float>
 800a5a6:	4607      	mov	r7, r0
 800a5a8:	1c78      	adds	r0, r7, #1
 800a5aa:	d1d6      	bne.n	800a55a <_vfiprintf_r+0x19e>
 800a5ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5ae:	07d9      	lsls	r1, r3, #31
 800a5b0:	d405      	bmi.n	800a5be <_vfiprintf_r+0x202>
 800a5b2:	89ab      	ldrh	r3, [r5, #12]
 800a5b4:	059a      	lsls	r2, r3, #22
 800a5b6:	d402      	bmi.n	800a5be <_vfiprintf_r+0x202>
 800a5b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5ba:	f7fe f983 	bl	80088c4 <__retarget_lock_release_recursive>
 800a5be:	89ab      	ldrh	r3, [r5, #12]
 800a5c0:	065b      	lsls	r3, r3, #25
 800a5c2:	f53f af1d 	bmi.w	800a400 <_vfiprintf_r+0x44>
 800a5c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5c8:	e71c      	b.n	800a404 <_vfiprintf_r+0x48>
 800a5ca:	ab03      	add	r3, sp, #12
 800a5cc:	9300      	str	r3, [sp, #0]
 800a5ce:	462a      	mov	r2, r5
 800a5d0:	4b05      	ldr	r3, [pc, #20]	; (800a5e8 <_vfiprintf_r+0x22c>)
 800a5d2:	a904      	add	r1, sp, #16
 800a5d4:	4630      	mov	r0, r6
 800a5d6:	f7fd feaf 	bl	8008338 <_printf_i>
 800a5da:	e7e4      	b.n	800a5a6 <_vfiprintf_r+0x1ea>
 800a5dc:	0800ba4c 	.word	0x0800ba4c
 800a5e0:	0800ba56 	.word	0x0800ba56
 800a5e4:	08007e29 	.word	0x08007e29
 800a5e8:	0800a399 	.word	0x0800a399
 800a5ec:	0800ba52 	.word	0x0800ba52

0800a5f0 <__swbuf_r>:
 800a5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5f2:	460e      	mov	r6, r1
 800a5f4:	4614      	mov	r4, r2
 800a5f6:	4605      	mov	r5, r0
 800a5f8:	b118      	cbz	r0, 800a602 <__swbuf_r+0x12>
 800a5fa:	6a03      	ldr	r3, [r0, #32]
 800a5fc:	b90b      	cbnz	r3, 800a602 <__swbuf_r+0x12>
 800a5fe:	f7fe f849 	bl	8008694 <__sinit>
 800a602:	69a3      	ldr	r3, [r4, #24]
 800a604:	60a3      	str	r3, [r4, #8]
 800a606:	89a3      	ldrh	r3, [r4, #12]
 800a608:	071a      	lsls	r2, r3, #28
 800a60a:	d525      	bpl.n	800a658 <__swbuf_r+0x68>
 800a60c:	6923      	ldr	r3, [r4, #16]
 800a60e:	b31b      	cbz	r3, 800a658 <__swbuf_r+0x68>
 800a610:	6823      	ldr	r3, [r4, #0]
 800a612:	6922      	ldr	r2, [r4, #16]
 800a614:	1a98      	subs	r0, r3, r2
 800a616:	6963      	ldr	r3, [r4, #20]
 800a618:	b2f6      	uxtb	r6, r6
 800a61a:	4283      	cmp	r3, r0
 800a61c:	4637      	mov	r7, r6
 800a61e:	dc04      	bgt.n	800a62a <__swbuf_r+0x3a>
 800a620:	4621      	mov	r1, r4
 800a622:	4628      	mov	r0, r5
 800a624:	f7ff fd9e 	bl	800a164 <_fflush_r>
 800a628:	b9e0      	cbnz	r0, 800a664 <__swbuf_r+0x74>
 800a62a:	68a3      	ldr	r3, [r4, #8]
 800a62c:	3b01      	subs	r3, #1
 800a62e:	60a3      	str	r3, [r4, #8]
 800a630:	6823      	ldr	r3, [r4, #0]
 800a632:	1c5a      	adds	r2, r3, #1
 800a634:	6022      	str	r2, [r4, #0]
 800a636:	701e      	strb	r6, [r3, #0]
 800a638:	6962      	ldr	r2, [r4, #20]
 800a63a:	1c43      	adds	r3, r0, #1
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d004      	beq.n	800a64a <__swbuf_r+0x5a>
 800a640:	89a3      	ldrh	r3, [r4, #12]
 800a642:	07db      	lsls	r3, r3, #31
 800a644:	d506      	bpl.n	800a654 <__swbuf_r+0x64>
 800a646:	2e0a      	cmp	r6, #10
 800a648:	d104      	bne.n	800a654 <__swbuf_r+0x64>
 800a64a:	4621      	mov	r1, r4
 800a64c:	4628      	mov	r0, r5
 800a64e:	f7ff fd89 	bl	800a164 <_fflush_r>
 800a652:	b938      	cbnz	r0, 800a664 <__swbuf_r+0x74>
 800a654:	4638      	mov	r0, r7
 800a656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a658:	4621      	mov	r1, r4
 800a65a:	4628      	mov	r0, r5
 800a65c:	f000 f806 	bl	800a66c <__swsetup_r>
 800a660:	2800      	cmp	r0, #0
 800a662:	d0d5      	beq.n	800a610 <__swbuf_r+0x20>
 800a664:	f04f 37ff 	mov.w	r7, #4294967295
 800a668:	e7f4      	b.n	800a654 <__swbuf_r+0x64>
	...

0800a66c <__swsetup_r>:
 800a66c:	b538      	push	{r3, r4, r5, lr}
 800a66e:	4b2a      	ldr	r3, [pc, #168]	; (800a718 <__swsetup_r+0xac>)
 800a670:	4605      	mov	r5, r0
 800a672:	6818      	ldr	r0, [r3, #0]
 800a674:	460c      	mov	r4, r1
 800a676:	b118      	cbz	r0, 800a680 <__swsetup_r+0x14>
 800a678:	6a03      	ldr	r3, [r0, #32]
 800a67a:	b90b      	cbnz	r3, 800a680 <__swsetup_r+0x14>
 800a67c:	f7fe f80a 	bl	8008694 <__sinit>
 800a680:	89a3      	ldrh	r3, [r4, #12]
 800a682:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a686:	0718      	lsls	r0, r3, #28
 800a688:	d422      	bmi.n	800a6d0 <__swsetup_r+0x64>
 800a68a:	06d9      	lsls	r1, r3, #27
 800a68c:	d407      	bmi.n	800a69e <__swsetup_r+0x32>
 800a68e:	2309      	movs	r3, #9
 800a690:	602b      	str	r3, [r5, #0]
 800a692:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a696:	81a3      	strh	r3, [r4, #12]
 800a698:	f04f 30ff 	mov.w	r0, #4294967295
 800a69c:	e034      	b.n	800a708 <__swsetup_r+0x9c>
 800a69e:	0758      	lsls	r0, r3, #29
 800a6a0:	d512      	bpl.n	800a6c8 <__swsetup_r+0x5c>
 800a6a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6a4:	b141      	cbz	r1, 800a6b8 <__swsetup_r+0x4c>
 800a6a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6aa:	4299      	cmp	r1, r3
 800a6ac:	d002      	beq.n	800a6b4 <__swsetup_r+0x48>
 800a6ae:	4628      	mov	r0, r5
 800a6b0:	f7fe fefe 	bl	80094b0 <_free_r>
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	6363      	str	r3, [r4, #52]	; 0x34
 800a6b8:	89a3      	ldrh	r3, [r4, #12]
 800a6ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a6be:	81a3      	strh	r3, [r4, #12]
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	6063      	str	r3, [r4, #4]
 800a6c4:	6923      	ldr	r3, [r4, #16]
 800a6c6:	6023      	str	r3, [r4, #0]
 800a6c8:	89a3      	ldrh	r3, [r4, #12]
 800a6ca:	f043 0308 	orr.w	r3, r3, #8
 800a6ce:	81a3      	strh	r3, [r4, #12]
 800a6d0:	6923      	ldr	r3, [r4, #16]
 800a6d2:	b94b      	cbnz	r3, 800a6e8 <__swsetup_r+0x7c>
 800a6d4:	89a3      	ldrh	r3, [r4, #12]
 800a6d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a6da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6de:	d003      	beq.n	800a6e8 <__swsetup_r+0x7c>
 800a6e0:	4621      	mov	r1, r4
 800a6e2:	4628      	mov	r0, r5
 800a6e4:	f000 f884 	bl	800a7f0 <__smakebuf_r>
 800a6e8:	89a0      	ldrh	r0, [r4, #12]
 800a6ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6ee:	f010 0301 	ands.w	r3, r0, #1
 800a6f2:	d00a      	beq.n	800a70a <__swsetup_r+0x9e>
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	60a3      	str	r3, [r4, #8]
 800a6f8:	6963      	ldr	r3, [r4, #20]
 800a6fa:	425b      	negs	r3, r3
 800a6fc:	61a3      	str	r3, [r4, #24]
 800a6fe:	6923      	ldr	r3, [r4, #16]
 800a700:	b943      	cbnz	r3, 800a714 <__swsetup_r+0xa8>
 800a702:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a706:	d1c4      	bne.n	800a692 <__swsetup_r+0x26>
 800a708:	bd38      	pop	{r3, r4, r5, pc}
 800a70a:	0781      	lsls	r1, r0, #30
 800a70c:	bf58      	it	pl
 800a70e:	6963      	ldrpl	r3, [r4, #20]
 800a710:	60a3      	str	r3, [r4, #8]
 800a712:	e7f4      	b.n	800a6fe <__swsetup_r+0x92>
 800a714:	2000      	movs	r0, #0
 800a716:	e7f7      	b.n	800a708 <__swsetup_r+0x9c>
 800a718:	24000068 	.word	0x24000068

0800a71c <_raise_r>:
 800a71c:	291f      	cmp	r1, #31
 800a71e:	b538      	push	{r3, r4, r5, lr}
 800a720:	4604      	mov	r4, r0
 800a722:	460d      	mov	r5, r1
 800a724:	d904      	bls.n	800a730 <_raise_r+0x14>
 800a726:	2316      	movs	r3, #22
 800a728:	6003      	str	r3, [r0, #0]
 800a72a:	f04f 30ff 	mov.w	r0, #4294967295
 800a72e:	bd38      	pop	{r3, r4, r5, pc}
 800a730:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a732:	b112      	cbz	r2, 800a73a <_raise_r+0x1e>
 800a734:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a738:	b94b      	cbnz	r3, 800a74e <_raise_r+0x32>
 800a73a:	4620      	mov	r0, r4
 800a73c:	f000 f830 	bl	800a7a0 <_getpid_r>
 800a740:	462a      	mov	r2, r5
 800a742:	4601      	mov	r1, r0
 800a744:	4620      	mov	r0, r4
 800a746:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a74a:	f000 b817 	b.w	800a77c <_kill_r>
 800a74e:	2b01      	cmp	r3, #1
 800a750:	d00a      	beq.n	800a768 <_raise_r+0x4c>
 800a752:	1c59      	adds	r1, r3, #1
 800a754:	d103      	bne.n	800a75e <_raise_r+0x42>
 800a756:	2316      	movs	r3, #22
 800a758:	6003      	str	r3, [r0, #0]
 800a75a:	2001      	movs	r0, #1
 800a75c:	e7e7      	b.n	800a72e <_raise_r+0x12>
 800a75e:	2400      	movs	r4, #0
 800a760:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a764:	4628      	mov	r0, r5
 800a766:	4798      	blx	r3
 800a768:	2000      	movs	r0, #0
 800a76a:	e7e0      	b.n	800a72e <_raise_r+0x12>

0800a76c <raise>:
 800a76c:	4b02      	ldr	r3, [pc, #8]	; (800a778 <raise+0xc>)
 800a76e:	4601      	mov	r1, r0
 800a770:	6818      	ldr	r0, [r3, #0]
 800a772:	f7ff bfd3 	b.w	800a71c <_raise_r>
 800a776:	bf00      	nop
 800a778:	24000068 	.word	0x24000068

0800a77c <_kill_r>:
 800a77c:	b538      	push	{r3, r4, r5, lr}
 800a77e:	4d07      	ldr	r5, [pc, #28]	; (800a79c <_kill_r+0x20>)
 800a780:	2300      	movs	r3, #0
 800a782:	4604      	mov	r4, r0
 800a784:	4608      	mov	r0, r1
 800a786:	4611      	mov	r1, r2
 800a788:	602b      	str	r3, [r5, #0]
 800a78a:	f7f7 f859 	bl	8001840 <_kill>
 800a78e:	1c43      	adds	r3, r0, #1
 800a790:	d102      	bne.n	800a798 <_kill_r+0x1c>
 800a792:	682b      	ldr	r3, [r5, #0]
 800a794:	b103      	cbz	r3, 800a798 <_kill_r+0x1c>
 800a796:	6023      	str	r3, [r4, #0]
 800a798:	bd38      	pop	{r3, r4, r5, pc}
 800a79a:	bf00      	nop
 800a79c:	240019c8 	.word	0x240019c8

0800a7a0 <_getpid_r>:
 800a7a0:	f7f7 b846 	b.w	8001830 <_getpid>

0800a7a4 <__swhatbuf_r>:
 800a7a4:	b570      	push	{r4, r5, r6, lr}
 800a7a6:	460c      	mov	r4, r1
 800a7a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7ac:	2900      	cmp	r1, #0
 800a7ae:	b096      	sub	sp, #88	; 0x58
 800a7b0:	4615      	mov	r5, r2
 800a7b2:	461e      	mov	r6, r3
 800a7b4:	da0d      	bge.n	800a7d2 <__swhatbuf_r+0x2e>
 800a7b6:	89a3      	ldrh	r3, [r4, #12]
 800a7b8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a7bc:	f04f 0100 	mov.w	r1, #0
 800a7c0:	bf0c      	ite	eq
 800a7c2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a7c6:	2340      	movne	r3, #64	; 0x40
 800a7c8:	2000      	movs	r0, #0
 800a7ca:	6031      	str	r1, [r6, #0]
 800a7cc:	602b      	str	r3, [r5, #0]
 800a7ce:	b016      	add	sp, #88	; 0x58
 800a7d0:	bd70      	pop	{r4, r5, r6, pc}
 800a7d2:	466a      	mov	r2, sp
 800a7d4:	f000 f848 	bl	800a868 <_fstat_r>
 800a7d8:	2800      	cmp	r0, #0
 800a7da:	dbec      	blt.n	800a7b6 <__swhatbuf_r+0x12>
 800a7dc:	9901      	ldr	r1, [sp, #4]
 800a7de:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a7e2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a7e6:	4259      	negs	r1, r3
 800a7e8:	4159      	adcs	r1, r3
 800a7ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7ee:	e7eb      	b.n	800a7c8 <__swhatbuf_r+0x24>

0800a7f0 <__smakebuf_r>:
 800a7f0:	898b      	ldrh	r3, [r1, #12]
 800a7f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a7f4:	079d      	lsls	r5, r3, #30
 800a7f6:	4606      	mov	r6, r0
 800a7f8:	460c      	mov	r4, r1
 800a7fa:	d507      	bpl.n	800a80c <__smakebuf_r+0x1c>
 800a7fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a800:	6023      	str	r3, [r4, #0]
 800a802:	6123      	str	r3, [r4, #16]
 800a804:	2301      	movs	r3, #1
 800a806:	6163      	str	r3, [r4, #20]
 800a808:	b002      	add	sp, #8
 800a80a:	bd70      	pop	{r4, r5, r6, pc}
 800a80c:	ab01      	add	r3, sp, #4
 800a80e:	466a      	mov	r2, sp
 800a810:	f7ff ffc8 	bl	800a7a4 <__swhatbuf_r>
 800a814:	9900      	ldr	r1, [sp, #0]
 800a816:	4605      	mov	r5, r0
 800a818:	4630      	mov	r0, r6
 800a81a:	f7fe febd 	bl	8009598 <_malloc_r>
 800a81e:	b948      	cbnz	r0, 800a834 <__smakebuf_r+0x44>
 800a820:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a824:	059a      	lsls	r2, r3, #22
 800a826:	d4ef      	bmi.n	800a808 <__smakebuf_r+0x18>
 800a828:	f023 0303 	bic.w	r3, r3, #3
 800a82c:	f043 0302 	orr.w	r3, r3, #2
 800a830:	81a3      	strh	r3, [r4, #12]
 800a832:	e7e3      	b.n	800a7fc <__smakebuf_r+0xc>
 800a834:	89a3      	ldrh	r3, [r4, #12]
 800a836:	6020      	str	r0, [r4, #0]
 800a838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a83c:	81a3      	strh	r3, [r4, #12]
 800a83e:	9b00      	ldr	r3, [sp, #0]
 800a840:	6163      	str	r3, [r4, #20]
 800a842:	9b01      	ldr	r3, [sp, #4]
 800a844:	6120      	str	r0, [r4, #16]
 800a846:	b15b      	cbz	r3, 800a860 <__smakebuf_r+0x70>
 800a848:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a84c:	4630      	mov	r0, r6
 800a84e:	f000 f81d 	bl	800a88c <_isatty_r>
 800a852:	b128      	cbz	r0, 800a860 <__smakebuf_r+0x70>
 800a854:	89a3      	ldrh	r3, [r4, #12]
 800a856:	f023 0303 	bic.w	r3, r3, #3
 800a85a:	f043 0301 	orr.w	r3, r3, #1
 800a85e:	81a3      	strh	r3, [r4, #12]
 800a860:	89a3      	ldrh	r3, [r4, #12]
 800a862:	431d      	orrs	r5, r3
 800a864:	81a5      	strh	r5, [r4, #12]
 800a866:	e7cf      	b.n	800a808 <__smakebuf_r+0x18>

0800a868 <_fstat_r>:
 800a868:	b538      	push	{r3, r4, r5, lr}
 800a86a:	4d07      	ldr	r5, [pc, #28]	; (800a888 <_fstat_r+0x20>)
 800a86c:	2300      	movs	r3, #0
 800a86e:	4604      	mov	r4, r0
 800a870:	4608      	mov	r0, r1
 800a872:	4611      	mov	r1, r2
 800a874:	602b      	str	r3, [r5, #0]
 800a876:	f7f7 f842 	bl	80018fe <_fstat>
 800a87a:	1c43      	adds	r3, r0, #1
 800a87c:	d102      	bne.n	800a884 <_fstat_r+0x1c>
 800a87e:	682b      	ldr	r3, [r5, #0]
 800a880:	b103      	cbz	r3, 800a884 <_fstat_r+0x1c>
 800a882:	6023      	str	r3, [r4, #0]
 800a884:	bd38      	pop	{r3, r4, r5, pc}
 800a886:	bf00      	nop
 800a888:	240019c8 	.word	0x240019c8

0800a88c <_isatty_r>:
 800a88c:	b538      	push	{r3, r4, r5, lr}
 800a88e:	4d06      	ldr	r5, [pc, #24]	; (800a8a8 <_isatty_r+0x1c>)
 800a890:	2300      	movs	r3, #0
 800a892:	4604      	mov	r4, r0
 800a894:	4608      	mov	r0, r1
 800a896:	602b      	str	r3, [r5, #0]
 800a898:	f7f7 f841 	bl	800191e <_isatty>
 800a89c:	1c43      	adds	r3, r0, #1
 800a89e:	d102      	bne.n	800a8a6 <_isatty_r+0x1a>
 800a8a0:	682b      	ldr	r3, [r5, #0]
 800a8a2:	b103      	cbz	r3, 800a8a6 <_isatty_r+0x1a>
 800a8a4:	6023      	str	r3, [r4, #0]
 800a8a6:	bd38      	pop	{r3, r4, r5, pc}
 800a8a8:	240019c8 	.word	0x240019c8
 800a8ac:	00000000 	.word	0x00000000

0800a8b0 <cexp>:
 800a8b0:	b510      	push	{r4, lr}
 800a8b2:	ed2d 8b06 	vpush	{d8-d10}
 800a8b6:	eeb0 ab40 	vmov.f64	d10, d0
 800a8ba:	eeb0 9b41 	vmov.f64	d9, d1
 800a8be:	f000 f832 	bl	800a926 <creal>
 800a8c2:	eeb0 1b49 	vmov.f64	d1, d9
 800a8c6:	eeb0 8b40 	vmov.f64	d8, d0
 800a8ca:	eeb0 0b4a 	vmov.f64	d0, d10
 800a8ce:	f000 f827 	bl	800a920 <cimag>
 800a8d2:	eeb0 ab40 	vmov.f64	d10, d0
 800a8d6:	eeb0 0b48 	vmov.f64	d0, d8
 800a8da:	f000 f8bd 	bl	800aa58 <exp>
 800a8de:	eeb0 9b40 	vmov.f64	d9, d0
 800a8e2:	eeb0 0b4a 	vmov.f64	d0, d10
 800a8e6:	f000 f86b 	bl	800a9c0 <sin>
 800a8ea:	ee20 8b09 	vmul.f64	d8, d0, d9
 800a8ee:	eeb0 0b4a 	vmov.f64	d0, d10
 800a8f2:	f000 f819 	bl	800a928 <cos>
 800a8f6:	eeb0 1b48 	vmov.f64	d1, d8
 800a8fa:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800a918 <cexp+0x68>
 800a8fe:	eeb0 6b40 	vmov.f64	d6, d0
 800a902:	ee28 7b07 	vmul.f64	d7, d8, d7
 800a906:	eea6 7b09 	vfma.f64	d7, d6, d9
 800a90a:	ecbd 8b06 	vpop	{d8-d10}
 800a90e:	eeb0 0b47 	vmov.f64	d0, d7
 800a912:	bd10      	pop	{r4, pc}
 800a914:	f3af 8000 	nop.w
	...

0800a920 <cimag>:
 800a920:	eeb0 0b41 	vmov.f64	d0, d1
 800a924:	4770      	bx	lr

0800a926 <creal>:
 800a926:	4770      	bx	lr

0800a928 <cos>:
 800a928:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a92a:	eeb0 7b40 	vmov.f64	d7, d0
 800a92e:	ee17 3a90 	vmov	r3, s15
 800a932:	4a21      	ldr	r2, [pc, #132]	; (800a9b8 <cos+0x90>)
 800a934:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a938:	4293      	cmp	r3, r2
 800a93a:	dc06      	bgt.n	800a94a <cos+0x22>
 800a93c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800a9b0 <cos+0x88>
 800a940:	b005      	add	sp, #20
 800a942:	f85d eb04 	ldr.w	lr, [sp], #4
 800a946:	f000 b9a7 	b.w	800ac98 <__kernel_cos>
 800a94a:	4a1c      	ldr	r2, [pc, #112]	; (800a9bc <cos+0x94>)
 800a94c:	4293      	cmp	r3, r2
 800a94e:	dd04      	ble.n	800a95a <cos+0x32>
 800a950:	ee30 0b40 	vsub.f64	d0, d0, d0
 800a954:	b005      	add	sp, #20
 800a956:	f85d fb04 	ldr.w	pc, [sp], #4
 800a95a:	4668      	mov	r0, sp
 800a95c:	f000 fa60 	bl	800ae20 <__ieee754_rem_pio2>
 800a960:	f000 0003 	and.w	r0, r0, #3
 800a964:	2801      	cmp	r0, #1
 800a966:	d009      	beq.n	800a97c <cos+0x54>
 800a968:	2802      	cmp	r0, #2
 800a96a:	d010      	beq.n	800a98e <cos+0x66>
 800a96c:	b9b0      	cbnz	r0, 800a99c <cos+0x74>
 800a96e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a972:	ed9d 0b00 	vldr	d0, [sp]
 800a976:	f000 f98f 	bl	800ac98 <__kernel_cos>
 800a97a:	e7eb      	b.n	800a954 <cos+0x2c>
 800a97c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a980:	ed9d 0b00 	vldr	d0, [sp]
 800a984:	f000 f9f4 	bl	800ad70 <__kernel_sin>
 800a988:	eeb1 0b40 	vneg.f64	d0, d0
 800a98c:	e7e2      	b.n	800a954 <cos+0x2c>
 800a98e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a992:	ed9d 0b00 	vldr	d0, [sp]
 800a996:	f000 f97f 	bl	800ac98 <__kernel_cos>
 800a99a:	e7f5      	b.n	800a988 <cos+0x60>
 800a99c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a9a0:	ed9d 0b00 	vldr	d0, [sp]
 800a9a4:	2001      	movs	r0, #1
 800a9a6:	f000 f9e3 	bl	800ad70 <__kernel_sin>
 800a9aa:	e7d3      	b.n	800a954 <cos+0x2c>
 800a9ac:	f3af 8000 	nop.w
	...
 800a9b8:	3fe921fb 	.word	0x3fe921fb
 800a9bc:	7fefffff 	.word	0x7fefffff

0800a9c0 <sin>:
 800a9c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a9c2:	eeb0 7b40 	vmov.f64	d7, d0
 800a9c6:	ee17 3a90 	vmov	r3, s15
 800a9ca:	4a21      	ldr	r2, [pc, #132]	; (800aa50 <sin+0x90>)
 800a9cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	dc07      	bgt.n	800a9e4 <sin+0x24>
 800a9d4:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800aa48 <sin+0x88>
 800a9d8:	2000      	movs	r0, #0
 800a9da:	b005      	add	sp, #20
 800a9dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9e0:	f000 b9c6 	b.w	800ad70 <__kernel_sin>
 800a9e4:	4a1b      	ldr	r2, [pc, #108]	; (800aa54 <sin+0x94>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	dd04      	ble.n	800a9f4 <sin+0x34>
 800a9ea:	ee30 0b40 	vsub.f64	d0, d0, d0
 800a9ee:	b005      	add	sp, #20
 800a9f0:	f85d fb04 	ldr.w	pc, [sp], #4
 800a9f4:	4668      	mov	r0, sp
 800a9f6:	f000 fa13 	bl	800ae20 <__ieee754_rem_pio2>
 800a9fa:	f000 0003 	and.w	r0, r0, #3
 800a9fe:	2801      	cmp	r0, #1
 800aa00:	d00a      	beq.n	800aa18 <sin+0x58>
 800aa02:	2802      	cmp	r0, #2
 800aa04:	d00f      	beq.n	800aa26 <sin+0x66>
 800aa06:	b9c0      	cbnz	r0, 800aa3a <sin+0x7a>
 800aa08:	ed9d 1b02 	vldr	d1, [sp, #8]
 800aa0c:	ed9d 0b00 	vldr	d0, [sp]
 800aa10:	2001      	movs	r0, #1
 800aa12:	f000 f9ad 	bl	800ad70 <__kernel_sin>
 800aa16:	e7ea      	b.n	800a9ee <sin+0x2e>
 800aa18:	ed9d 1b02 	vldr	d1, [sp, #8]
 800aa1c:	ed9d 0b00 	vldr	d0, [sp]
 800aa20:	f000 f93a 	bl	800ac98 <__kernel_cos>
 800aa24:	e7e3      	b.n	800a9ee <sin+0x2e>
 800aa26:	ed9d 1b02 	vldr	d1, [sp, #8]
 800aa2a:	ed9d 0b00 	vldr	d0, [sp]
 800aa2e:	2001      	movs	r0, #1
 800aa30:	f000 f99e 	bl	800ad70 <__kernel_sin>
 800aa34:	eeb1 0b40 	vneg.f64	d0, d0
 800aa38:	e7d9      	b.n	800a9ee <sin+0x2e>
 800aa3a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800aa3e:	ed9d 0b00 	vldr	d0, [sp]
 800aa42:	f000 f929 	bl	800ac98 <__kernel_cos>
 800aa46:	e7f5      	b.n	800aa34 <sin+0x74>
	...
 800aa50:	3fe921fb 	.word	0x3fe921fb
 800aa54:	7fefffff 	.word	0x7fefffff

0800aa58 <exp>:
 800aa58:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 800aa5a:	ee10 3a90 	vmov	r3, s1
 800aa5e:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 800aa62:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800aa66:	18a2      	adds	r2, r4, r2
 800aa68:	2a3e      	cmp	r2, #62	; 0x3e
 800aa6a:	ee10 1a10 	vmov	r1, s0
 800aa6e:	d922      	bls.n	800aab6 <exp+0x5e>
 800aa70:	2a00      	cmp	r2, #0
 800aa72:	da06      	bge.n	800aa82 <exp+0x2a>
 800aa74:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800aa78:	ee30 0b07 	vadd.f64	d0, d0, d7
 800aa7c:	b004      	add	sp, #16
 800aa7e:	bcf0      	pop	{r4, r5, r6, r7}
 800aa80:	4770      	bx	lr
 800aa82:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
 800aa86:	f04f 0000 	mov.w	r0, #0
 800aa8a:	d913      	bls.n	800aab4 <exp+0x5c>
 800aa8c:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 800aa90:	bf08      	it	eq
 800aa92:	4281      	cmpeq	r1, r0
 800aa94:	f000 80a0 	beq.w	800abd8 <exp+0x180>
 800aa98:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800aa9c:	4294      	cmp	r4, r2
 800aa9e:	d0e9      	beq.n	800aa74 <exp+0x1c>
 800aaa0:	4283      	cmp	r3, r0
 800aaa2:	da03      	bge.n	800aaac <exp+0x54>
 800aaa4:	b004      	add	sp, #16
 800aaa6:	bcf0      	pop	{r4, r5, r6, r7}
 800aaa8:	f000 b8c6 	b.w	800ac38 <__math_uflow>
 800aaac:	b004      	add	sp, #16
 800aaae:	bcf0      	pop	{r4, r5, r6, r7}
 800aab0:	f000 b8ca 	b.w	800ac48 <__math_oflow>
 800aab4:	4604      	mov	r4, r0
 800aab6:	4950      	ldr	r1, [pc, #320]	; (800abf8 <exp+0x1a0>)
 800aab8:	ed91 6b02 	vldr	d6, [r1, #8]
 800aabc:	ed91 5b00 	vldr	d5, [r1]
 800aac0:	eeb0 7b46 	vmov.f64	d7, d6
 800aac4:	eea5 7b00 	vfma.f64	d7, d5, d0
 800aac8:	ee17 5a10 	vmov	r5, s14
 800aacc:	ee37 7b46 	vsub.f64	d7, d7, d6
 800aad0:	ed91 6b04 	vldr	d6, [r1, #16]
 800aad4:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 800aad8:	eea6 0b07 	vfma.f64	d0, d6, d7
 800aadc:	ed91 6b06 	vldr	d6, [r1, #24]
 800aae0:	18d8      	adds	r0, r3, r3
 800aae2:	f100 030f 	add.w	r3, r0, #15
 800aae6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800aaea:	eea6 0b07 	vfma.f64	d0, d6, d7
 800aaee:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
 800aaf2:	ee20 7b00 	vmul.f64	d7, d0, d0
 800aaf6:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
 800aafa:	ed91 4b08 	vldr	d4, [r1, #32]
 800aafe:	ee30 6b06 	vadd.f64	d6, d0, d6
 800ab02:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800ab06:	eea3 4b00 	vfma.f64	d4, d3, d0
 800ab0a:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
 800ab0e:	eea4 6b07 	vfma.f64	d6, d4, d7
 800ab12:	ee27 7b07 	vmul.f64	d7, d7, d7
 800ab16:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
 800ab1a:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
 800ab1e:	f8d2 c004 	ldr.w	ip, [r2, #4]
 800ab22:	eea3 4b00 	vfma.f64	d4, d3, d0
 800ab26:	2600      	movs	r6, #0
 800ab28:	19f2      	adds	r2, r6, r7
 800ab2a:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
 800ab2e:	eea7 6b04 	vfma.f64	d6, d7, d4
 800ab32:	2c00      	cmp	r4, #0
 800ab34:	d14b      	bne.n	800abce <exp+0x176>
 800ab36:	42b5      	cmp	r5, r6
 800ab38:	db10      	blt.n	800ab5c <exp+0x104>
 800ab3a:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 800ab3e:	ed9f 7b28 	vldr	d7, [pc, #160]	; 800abe0 <exp+0x188>
 800ab42:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 800ab46:	4610      	mov	r0, r2
 800ab48:	ec41 0b10 	vmov	d0, r0, r1
 800ab4c:	eea6 0b00 	vfma.f64	d0, d6, d0
 800ab50:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ab54:	b004      	add	sp, #16
 800ab56:	bcf0      	pop	{r4, r5, r6, r7}
 800ab58:	f000 b88a 	b.w	800ac70 <__math_check_oflow>
 800ab5c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800ab60:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 800ab64:	4610      	mov	r0, r2
 800ab66:	ec41 0b17 	vmov	d7, r0, r1
 800ab6a:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800ab6e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ab72:	ee37 5b06 	vadd.f64	d5, d7, d6
 800ab76:	eeb4 5bc4 	vcmpe.f64	d5, d4
 800ab7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab7e:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800abe8 <exp+0x190>
 800ab82:	d51e      	bpl.n	800abc2 <exp+0x16a>
 800ab84:	ee35 3b04 	vadd.f64	d3, d5, d4
 800ab88:	ee37 7b45 	vsub.f64	d7, d7, d5
 800ab8c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ab90:	ee34 6b43 	vsub.f64	d6, d4, d3
 800ab94:	ee36 6b05 	vadd.f64	d6, d6, d5
 800ab98:	ee36 6b07 	vadd.f64	d6, d6, d7
 800ab9c:	ee36 6b03 	vadd.f64	d6, d6, d3
 800aba0:	ee36 5b44 	vsub.f64	d5, d6, d4
 800aba4:	eeb5 5b40 	vcmp.f64	d5, #0.0
 800aba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abac:	d101      	bne.n	800abb2 <exp+0x15a>
 800abae:	ed9f 5b10 	vldr	d5, [pc, #64]	; 800abf0 <exp+0x198>
 800abb2:	ed8d 0b00 	vstr	d0, [sp]
 800abb6:	ed9d 7b00 	vldr	d7, [sp]
 800abba:	ee27 7b00 	vmul.f64	d7, d7, d0
 800abbe:	ed8d 7b02 	vstr	d7, [sp, #8]
 800abc2:	ee25 0b00 	vmul.f64	d0, d5, d0
 800abc6:	b004      	add	sp, #16
 800abc8:	bcf0      	pop	{r4, r5, r6, r7}
 800abca:	f000 b845 	b.w	800ac58 <__math_check_uflow>
 800abce:	ec43 2b10 	vmov	d0, r2, r3
 800abd2:	eea6 0b00 	vfma.f64	d0, d6, d0
 800abd6:	e751      	b.n	800aa7c <exp+0x24>
 800abd8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 800abf0 <exp+0x198>
 800abdc:	e74e      	b.n	800aa7c <exp+0x24>
 800abde:	bf00      	nop
 800abe0:	00000000 	.word	0x00000000
 800abe4:	7f000000 	.word	0x7f000000
 800abe8:	00000000 	.word	0x00000000
 800abec:	00100000 	.word	0x00100000
	...
 800abf8:	0800bba8 	.word	0x0800bba8

0800abfc <with_errno>:
 800abfc:	b513      	push	{r0, r1, r4, lr}
 800abfe:	4604      	mov	r4, r0
 800ac00:	ed8d 0b00 	vstr	d0, [sp]
 800ac04:	f7fd fe32 	bl	800886c <__errno>
 800ac08:	ed9d 0b00 	vldr	d0, [sp]
 800ac0c:	6004      	str	r4, [r0, #0]
 800ac0e:	b002      	add	sp, #8
 800ac10:	bd10      	pop	{r4, pc}

0800ac12 <xflow>:
 800ac12:	b082      	sub	sp, #8
 800ac14:	b158      	cbz	r0, 800ac2e <xflow+0x1c>
 800ac16:	eeb1 7b40 	vneg.f64	d7, d0
 800ac1a:	ed8d 7b00 	vstr	d7, [sp]
 800ac1e:	ed9d 7b00 	vldr	d7, [sp]
 800ac22:	2022      	movs	r0, #34	; 0x22
 800ac24:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ac28:	b002      	add	sp, #8
 800ac2a:	f7ff bfe7 	b.w	800abfc <with_errno>
 800ac2e:	eeb0 7b40 	vmov.f64	d7, d0
 800ac32:	e7f2      	b.n	800ac1a <xflow+0x8>
 800ac34:	0000      	movs	r0, r0
	...

0800ac38 <__math_uflow>:
 800ac38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ac40 <__math_uflow+0x8>
 800ac3c:	f7ff bfe9 	b.w	800ac12 <xflow>
 800ac40:	00000000 	.word	0x00000000
 800ac44:	10000000 	.word	0x10000000

0800ac48 <__math_oflow>:
 800ac48:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ac50 <__math_oflow+0x8>
 800ac4c:	f7ff bfe1 	b.w	800ac12 <xflow>
 800ac50:	00000000 	.word	0x00000000
 800ac54:	70000000 	.word	0x70000000

0800ac58 <__math_check_uflow>:
 800ac58:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800ac5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac60:	d102      	bne.n	800ac68 <__math_check_uflow+0x10>
 800ac62:	2022      	movs	r0, #34	; 0x22
 800ac64:	f7ff bfca 	b.w	800abfc <with_errno>
 800ac68:	4770      	bx	lr
 800ac6a:	0000      	movs	r0, r0
 800ac6c:	0000      	movs	r0, r0
	...

0800ac70 <__math_check_oflow>:
 800ac70:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800ac90 <__math_check_oflow+0x20>
 800ac74:	eeb0 7bc0 	vabs.f64	d7, d0
 800ac78:	eeb4 7b46 	vcmp.f64	d7, d6
 800ac7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac80:	dd02      	ble.n	800ac88 <__math_check_oflow+0x18>
 800ac82:	2022      	movs	r0, #34	; 0x22
 800ac84:	f7ff bfba 	b.w	800abfc <with_errno>
 800ac88:	4770      	bx	lr
 800ac8a:	bf00      	nop
 800ac8c:	f3af 8000 	nop.w
 800ac90:	ffffffff 	.word	0xffffffff
 800ac94:	7fefffff 	.word	0x7fefffff

0800ac98 <__kernel_cos>:
 800ac98:	ee10 1a90 	vmov	r1, s1
 800ac9c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800aca0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800aca4:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800aca8:	da05      	bge.n	800acb6 <__kernel_cos+0x1e>
 800acaa:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800acae:	ee17 3a90 	vmov	r3, s15
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d03d      	beq.n	800ad32 <__kernel_cos+0x9a>
 800acb6:	ee20 5b00 	vmul.f64	d5, d0, d0
 800acba:	ee21 1b40 	vnmul.f64	d1, d1, d0
 800acbe:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 800ad38 <__kernel_cos+0xa0>
 800acc2:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 800ad40 <__kernel_cos+0xa8>
 800acc6:	eea5 4b07 	vfma.f64	d4, d5, d7
 800acca:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800ad48 <__kernel_cos+0xb0>
 800acce:	eea4 7b05 	vfma.f64	d7, d4, d5
 800acd2:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 800ad50 <__kernel_cos+0xb8>
 800acd6:	eea7 4b05 	vfma.f64	d4, d7, d5
 800acda:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800ad58 <__kernel_cos+0xc0>
 800acde:	4b22      	ldr	r3, [pc, #136]	; (800ad68 <__kernel_cos+0xd0>)
 800ace0:	eea4 7b05 	vfma.f64	d7, d4, d5
 800ace4:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 800ad60 <__kernel_cos+0xc8>
 800ace8:	4299      	cmp	r1, r3
 800acea:	eea7 4b05 	vfma.f64	d4, d7, d5
 800acee:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800acf2:	ee24 4b05 	vmul.f64	d4, d4, d5
 800acf6:	ee25 7b07 	vmul.f64	d7, d5, d7
 800acfa:	eea5 1b04 	vfma.f64	d1, d5, d4
 800acfe:	dc04      	bgt.n	800ad0a <__kernel_cos+0x72>
 800ad00:	ee37 7b41 	vsub.f64	d7, d7, d1
 800ad04:	ee36 0b47 	vsub.f64	d0, d6, d7
 800ad08:	4770      	bx	lr
 800ad0a:	4b18      	ldr	r3, [pc, #96]	; (800ad6c <__kernel_cos+0xd4>)
 800ad0c:	4299      	cmp	r1, r3
 800ad0e:	dc0d      	bgt.n	800ad2c <__kernel_cos+0x94>
 800ad10:	2200      	movs	r2, #0
 800ad12:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800ad16:	ec43 2b15 	vmov	d5, r2, r3
 800ad1a:	ee36 0b45 	vsub.f64	d0, d6, d5
 800ad1e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800ad22:	ee37 7b41 	vsub.f64	d7, d7, d1
 800ad26:	ee30 0b47 	vsub.f64	d0, d0, d7
 800ad2a:	4770      	bx	lr
 800ad2c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800ad30:	e7f3      	b.n	800ad1a <__kernel_cos+0x82>
 800ad32:	eeb0 0b46 	vmov.f64	d0, d6
 800ad36:	4770      	bx	lr
 800ad38:	be8838d4 	.word	0xbe8838d4
 800ad3c:	bda8fae9 	.word	0xbda8fae9
 800ad40:	bdb4b1c4 	.word	0xbdb4b1c4
 800ad44:	3e21ee9e 	.word	0x3e21ee9e
 800ad48:	809c52ad 	.word	0x809c52ad
 800ad4c:	be927e4f 	.word	0xbe927e4f
 800ad50:	19cb1590 	.word	0x19cb1590
 800ad54:	3efa01a0 	.word	0x3efa01a0
 800ad58:	16c15177 	.word	0x16c15177
 800ad5c:	bf56c16c 	.word	0xbf56c16c
 800ad60:	5555554c 	.word	0x5555554c
 800ad64:	3fa55555 	.word	0x3fa55555
 800ad68:	3fd33332 	.word	0x3fd33332
 800ad6c:	3fe90000 	.word	0x3fe90000

0800ad70 <__kernel_sin>:
 800ad70:	ee10 3a90 	vmov	r3, s1
 800ad74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ad78:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ad7c:	da04      	bge.n	800ad88 <__kernel_sin+0x18>
 800ad7e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800ad82:	ee17 3a90 	vmov	r3, s15
 800ad86:	b35b      	cbz	r3, 800ade0 <__kernel_sin+0x70>
 800ad88:	ee20 6b00 	vmul.f64	d6, d0, d0
 800ad8c:	ee20 5b06 	vmul.f64	d5, d0, d6
 800ad90:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800ade8 <__kernel_sin+0x78>
 800ad94:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800adf0 <__kernel_sin+0x80>
 800ad98:	eea6 4b07 	vfma.f64	d4, d6, d7
 800ad9c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800adf8 <__kernel_sin+0x88>
 800ada0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800ada4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800ae00 <__kernel_sin+0x90>
 800ada8:	eea7 4b06 	vfma.f64	d4, d7, d6
 800adac:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800ae08 <__kernel_sin+0x98>
 800adb0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800adb4:	b930      	cbnz	r0, 800adc4 <__kernel_sin+0x54>
 800adb6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800ae10 <__kernel_sin+0xa0>
 800adba:	eea6 4b07 	vfma.f64	d4, d6, d7
 800adbe:	eea4 0b05 	vfma.f64	d0, d4, d5
 800adc2:	4770      	bx	lr
 800adc4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800adc8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800adcc:	eea1 7b04 	vfma.f64	d7, d1, d4
 800add0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800add4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800ae18 <__kernel_sin+0xa8>
 800add8:	eea5 1b07 	vfma.f64	d1, d5, d7
 800addc:	ee30 0b41 	vsub.f64	d0, d0, d1
 800ade0:	4770      	bx	lr
 800ade2:	bf00      	nop
 800ade4:	f3af 8000 	nop.w
 800ade8:	5acfd57c 	.word	0x5acfd57c
 800adec:	3de5d93a 	.word	0x3de5d93a
 800adf0:	8a2b9ceb 	.word	0x8a2b9ceb
 800adf4:	be5ae5e6 	.word	0xbe5ae5e6
 800adf8:	57b1fe7d 	.word	0x57b1fe7d
 800adfc:	3ec71de3 	.word	0x3ec71de3
 800ae00:	19c161d5 	.word	0x19c161d5
 800ae04:	bf2a01a0 	.word	0xbf2a01a0
 800ae08:	1110f8a6 	.word	0x1110f8a6
 800ae0c:	3f811111 	.word	0x3f811111
 800ae10:	55555549 	.word	0x55555549
 800ae14:	bfc55555 	.word	0xbfc55555
 800ae18:	55555549 	.word	0x55555549
 800ae1c:	3fc55555 	.word	0x3fc55555

0800ae20 <__ieee754_rem_pio2>:
 800ae20:	b570      	push	{r4, r5, r6, lr}
 800ae22:	eeb0 7b40 	vmov.f64	d7, d0
 800ae26:	ee17 5a90 	vmov	r5, s15
 800ae2a:	4b99      	ldr	r3, [pc, #612]	; (800b090 <__ieee754_rem_pio2+0x270>)
 800ae2c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ae30:	429e      	cmp	r6, r3
 800ae32:	b088      	sub	sp, #32
 800ae34:	4604      	mov	r4, r0
 800ae36:	dc07      	bgt.n	800ae48 <__ieee754_rem_pio2+0x28>
 800ae38:	2200      	movs	r2, #0
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	ed84 0b00 	vstr	d0, [r4]
 800ae40:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ae44:	2000      	movs	r0, #0
 800ae46:	e01b      	b.n	800ae80 <__ieee754_rem_pio2+0x60>
 800ae48:	4b92      	ldr	r3, [pc, #584]	; (800b094 <__ieee754_rem_pio2+0x274>)
 800ae4a:	429e      	cmp	r6, r3
 800ae4c:	dc3b      	bgt.n	800aec6 <__ieee754_rem_pio2+0xa6>
 800ae4e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800ae52:	2d00      	cmp	r5, #0
 800ae54:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 800b050 <__ieee754_rem_pio2+0x230>
 800ae58:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800ae5c:	dd19      	ble.n	800ae92 <__ieee754_rem_pio2+0x72>
 800ae5e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800ae62:	429e      	cmp	r6, r3
 800ae64:	d00e      	beq.n	800ae84 <__ieee754_rem_pio2+0x64>
 800ae66:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800b058 <__ieee754_rem_pio2+0x238>
 800ae6a:	ee37 5b46 	vsub.f64	d5, d7, d6
 800ae6e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800ae72:	ed84 5b00 	vstr	d5, [r4]
 800ae76:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ae7a:	ed84 7b02 	vstr	d7, [r4, #8]
 800ae7e:	2001      	movs	r0, #1
 800ae80:	b008      	add	sp, #32
 800ae82:	bd70      	pop	{r4, r5, r6, pc}
 800ae84:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800b060 <__ieee754_rem_pio2+0x240>
 800ae88:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ae8c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800b068 <__ieee754_rem_pio2+0x248>
 800ae90:	e7eb      	b.n	800ae6a <__ieee754_rem_pio2+0x4a>
 800ae92:	429e      	cmp	r6, r3
 800ae94:	ee30 7b06 	vadd.f64	d7, d0, d6
 800ae98:	d00e      	beq.n	800aeb8 <__ieee754_rem_pio2+0x98>
 800ae9a:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 800b058 <__ieee754_rem_pio2+0x238>
 800ae9e:	ee37 5b06 	vadd.f64	d5, d7, d6
 800aea2:	ee37 7b45 	vsub.f64	d7, d7, d5
 800aea6:	ed84 5b00 	vstr	d5, [r4]
 800aeaa:	ee37 7b06 	vadd.f64	d7, d7, d6
 800aeae:	f04f 30ff 	mov.w	r0, #4294967295
 800aeb2:	ed84 7b02 	vstr	d7, [r4, #8]
 800aeb6:	e7e3      	b.n	800ae80 <__ieee754_rem_pio2+0x60>
 800aeb8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800b060 <__ieee754_rem_pio2+0x240>
 800aebc:	ee37 7b06 	vadd.f64	d7, d7, d6
 800aec0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800b068 <__ieee754_rem_pio2+0x248>
 800aec4:	e7eb      	b.n	800ae9e <__ieee754_rem_pio2+0x7e>
 800aec6:	4b74      	ldr	r3, [pc, #464]	; (800b098 <__ieee754_rem_pio2+0x278>)
 800aec8:	429e      	cmp	r6, r3
 800aeca:	dc70      	bgt.n	800afae <__ieee754_rem_pio2+0x18e>
 800aecc:	f000 f8ec 	bl	800b0a8 <fabs>
 800aed0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800aed4:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800b070 <__ieee754_rem_pio2+0x250>
 800aed8:	eea0 7b06 	vfma.f64	d7, d0, d6
 800aedc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800aee0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800aee4:	ee17 0a90 	vmov	r0, s15
 800aee8:	eeb1 4b45 	vneg.f64	d4, d5
 800aeec:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800b050 <__ieee754_rem_pio2+0x230>
 800aef0:	eea5 0b47 	vfms.f64	d0, d5, d7
 800aef4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800b058 <__ieee754_rem_pio2+0x238>
 800aef8:	281f      	cmp	r0, #31
 800aefa:	ee25 7b07 	vmul.f64	d7, d5, d7
 800aefe:	ee30 6b47 	vsub.f64	d6, d0, d7
 800af02:	dc08      	bgt.n	800af16 <__ieee754_rem_pio2+0xf6>
 800af04:	4b65      	ldr	r3, [pc, #404]	; (800b09c <__ieee754_rem_pio2+0x27c>)
 800af06:	1e42      	subs	r2, r0, #1
 800af08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af0c:	42b3      	cmp	r3, r6
 800af0e:	d002      	beq.n	800af16 <__ieee754_rem_pio2+0xf6>
 800af10:	ed84 6b00 	vstr	d6, [r4]
 800af14:	e024      	b.n	800af60 <__ieee754_rem_pio2+0x140>
 800af16:	ee16 3a90 	vmov	r3, s13
 800af1a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800af1e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800af22:	2b10      	cmp	r3, #16
 800af24:	ea4f 5226 	mov.w	r2, r6, asr #20
 800af28:	ddf2      	ble.n	800af10 <__ieee754_rem_pio2+0xf0>
 800af2a:	eeb0 6b40 	vmov.f64	d6, d0
 800af2e:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 800b060 <__ieee754_rem_pio2+0x240>
 800af32:	eea4 6b03 	vfma.f64	d6, d4, d3
 800af36:	ee30 7b46 	vsub.f64	d7, d0, d6
 800af3a:	eea4 7b03 	vfma.f64	d7, d4, d3
 800af3e:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 800b068 <__ieee754_rem_pio2+0x248>
 800af42:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800af46:	ee36 3b47 	vsub.f64	d3, d6, d7
 800af4a:	ee13 3a90 	vmov	r3, s7
 800af4e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800af52:	1ad3      	subs	r3, r2, r3
 800af54:	2b31      	cmp	r3, #49	; 0x31
 800af56:	dc17      	bgt.n	800af88 <__ieee754_rem_pio2+0x168>
 800af58:	eeb0 0b46 	vmov.f64	d0, d6
 800af5c:	ed84 3b00 	vstr	d3, [r4]
 800af60:	ed94 6b00 	vldr	d6, [r4]
 800af64:	2d00      	cmp	r5, #0
 800af66:	ee30 0b46 	vsub.f64	d0, d0, d6
 800af6a:	ee30 0b47 	vsub.f64	d0, d0, d7
 800af6e:	ed84 0b02 	vstr	d0, [r4, #8]
 800af72:	da85      	bge.n	800ae80 <__ieee754_rem_pio2+0x60>
 800af74:	eeb1 6b46 	vneg.f64	d6, d6
 800af78:	eeb1 0b40 	vneg.f64	d0, d0
 800af7c:	ed84 6b00 	vstr	d6, [r4]
 800af80:	ed84 0b02 	vstr	d0, [r4, #8]
 800af84:	4240      	negs	r0, r0
 800af86:	e77b      	b.n	800ae80 <__ieee754_rem_pio2+0x60>
 800af88:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 800b078 <__ieee754_rem_pio2+0x258>
 800af8c:	eeb0 0b46 	vmov.f64	d0, d6
 800af90:	eea4 0b07 	vfma.f64	d0, d4, d7
 800af94:	ee36 6b40 	vsub.f64	d6, d6, d0
 800af98:	eea4 6b07 	vfma.f64	d6, d4, d7
 800af9c:	ed9f 4b38 	vldr	d4, [pc, #224]	; 800b080 <__ieee754_rem_pio2+0x260>
 800afa0:	eeb0 7b46 	vmov.f64	d7, d6
 800afa4:	ee95 7b04 	vfnms.f64	d7, d5, d4
 800afa8:	ee30 6b47 	vsub.f64	d6, d0, d7
 800afac:	e7b0      	b.n	800af10 <__ieee754_rem_pio2+0xf0>
 800afae:	4b3c      	ldr	r3, [pc, #240]	; (800b0a0 <__ieee754_rem_pio2+0x280>)
 800afb0:	429e      	cmp	r6, r3
 800afb2:	dd06      	ble.n	800afc2 <__ieee754_rem_pio2+0x1a2>
 800afb4:	ee30 7b40 	vsub.f64	d7, d0, d0
 800afb8:	ed80 7b02 	vstr	d7, [r0, #8]
 800afbc:	ed80 7b00 	vstr	d7, [r0]
 800afc0:	e740      	b.n	800ae44 <__ieee754_rem_pio2+0x24>
 800afc2:	1532      	asrs	r2, r6, #20
 800afc4:	ee10 0a10 	vmov	r0, s0
 800afc8:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800afcc:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800afd0:	ec41 0b17 	vmov	d7, r0, r1
 800afd4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800afd8:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 800b088 <__ieee754_rem_pio2+0x268>
 800afdc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800afe0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800afe4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800afe8:	ee27 7b05 	vmul.f64	d7, d7, d5
 800afec:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800aff0:	a808      	add	r0, sp, #32
 800aff2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800aff6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800affa:	ed8d 6b04 	vstr	d6, [sp, #16]
 800affe:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b002:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b006:	2103      	movs	r1, #3
 800b008:	ed30 7b02 	vldmdb	r0!, {d7}
 800b00c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b014:	460b      	mov	r3, r1
 800b016:	f101 31ff 	add.w	r1, r1, #4294967295
 800b01a:	d0f5      	beq.n	800b008 <__ieee754_rem_pio2+0x1e8>
 800b01c:	4921      	ldr	r1, [pc, #132]	; (800b0a4 <__ieee754_rem_pio2+0x284>)
 800b01e:	9101      	str	r1, [sp, #4]
 800b020:	2102      	movs	r1, #2
 800b022:	9100      	str	r1, [sp, #0]
 800b024:	a802      	add	r0, sp, #8
 800b026:	4621      	mov	r1, r4
 800b028:	f000 f84a 	bl	800b0c0 <__kernel_rem_pio2>
 800b02c:	2d00      	cmp	r5, #0
 800b02e:	f6bf af27 	bge.w	800ae80 <__ieee754_rem_pio2+0x60>
 800b032:	ed94 7b00 	vldr	d7, [r4]
 800b036:	eeb1 7b47 	vneg.f64	d7, d7
 800b03a:	ed84 7b00 	vstr	d7, [r4]
 800b03e:	ed94 7b02 	vldr	d7, [r4, #8]
 800b042:	eeb1 7b47 	vneg.f64	d7, d7
 800b046:	ed84 7b02 	vstr	d7, [r4, #8]
 800b04a:	e79b      	b.n	800af84 <__ieee754_rem_pio2+0x164>
 800b04c:	f3af 8000 	nop.w
 800b050:	54400000 	.word	0x54400000
 800b054:	3ff921fb 	.word	0x3ff921fb
 800b058:	1a626331 	.word	0x1a626331
 800b05c:	3dd0b461 	.word	0x3dd0b461
 800b060:	1a600000 	.word	0x1a600000
 800b064:	3dd0b461 	.word	0x3dd0b461
 800b068:	2e037073 	.word	0x2e037073
 800b06c:	3ba3198a 	.word	0x3ba3198a
 800b070:	6dc9c883 	.word	0x6dc9c883
 800b074:	3fe45f30 	.word	0x3fe45f30
 800b078:	2e000000 	.word	0x2e000000
 800b07c:	3ba3198a 	.word	0x3ba3198a
 800b080:	252049c1 	.word	0x252049c1
 800b084:	397b839a 	.word	0x397b839a
 800b088:	00000000 	.word	0x00000000
 800b08c:	41700000 	.word	0x41700000
 800b090:	3fe921fb 	.word	0x3fe921fb
 800b094:	4002d97b 	.word	0x4002d97b
 800b098:	413921fb 	.word	0x413921fb
 800b09c:	0800c418 	.word	0x0800c418
 800b0a0:	7fefffff 	.word	0x7fefffff
 800b0a4:	0800c498 	.word	0x0800c498

0800b0a8 <fabs>:
 800b0a8:	ec51 0b10 	vmov	r0, r1, d0
 800b0ac:	ee10 2a10 	vmov	r2, s0
 800b0b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b0b4:	ec43 2b10 	vmov	d0, r2, r3
 800b0b8:	4770      	bx	lr
 800b0ba:	0000      	movs	r0, r0
 800b0bc:	0000      	movs	r0, r0
	...

0800b0c0 <__kernel_rem_pio2>:
 800b0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0c4:	ed2d 8b06 	vpush	{d8-d10}
 800b0c8:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800b0cc:	460f      	mov	r7, r1
 800b0ce:	9002      	str	r0, [sp, #8]
 800b0d0:	49c3      	ldr	r1, [pc, #780]	; (800b3e0 <__kernel_rem_pio2+0x320>)
 800b0d2:	98a2      	ldr	r0, [sp, #648]	; 0x288
 800b0d4:	9301      	str	r3, [sp, #4]
 800b0d6:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 800b0da:	9901      	ldr	r1, [sp, #4]
 800b0dc:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800b0de:	f112 0f14 	cmn.w	r2, #20
 800b0e2:	bfa8      	it	ge
 800b0e4:	1ed0      	subge	r0, r2, #3
 800b0e6:	f101 3aff 	add.w	sl, r1, #4294967295
 800b0ea:	bfaa      	itet	ge
 800b0ec:	2418      	movge	r4, #24
 800b0ee:	2000      	movlt	r0, #0
 800b0f0:	fb90 f0f4 	sdivge	r0, r0, r4
 800b0f4:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 800b3c8 <__kernel_rem_pio2+0x308>
 800b0f8:	f06f 0417 	mvn.w	r4, #23
 800b0fc:	fb00 4404 	mla	r4, r0, r4, r4
 800b100:	eba0 060a 	sub.w	r6, r0, sl
 800b104:	4414      	add	r4, r2
 800b106:	eb09 0c0a 	add.w	ip, r9, sl
 800b10a:	ad1a      	add	r5, sp, #104	; 0x68
 800b10c:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 800b110:	2200      	movs	r2, #0
 800b112:	4562      	cmp	r2, ip
 800b114:	dd10      	ble.n	800b138 <__kernel_rem_pio2+0x78>
 800b116:	9a01      	ldr	r2, [sp, #4]
 800b118:	a91a      	add	r1, sp, #104	; 0x68
 800b11a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800b11e:	f50d 78d4 	add.w	r8, sp, #424	; 0x1a8
 800b122:	f04f 0c00 	mov.w	ip, #0
 800b126:	45cc      	cmp	ip, r9
 800b128:	dc26      	bgt.n	800b178 <__kernel_rem_pio2+0xb8>
 800b12a:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 800b3c8 <__kernel_rem_pio2+0x308>
 800b12e:	f8dd e008 	ldr.w	lr, [sp, #8]
 800b132:	4616      	mov	r6, r2
 800b134:	2500      	movs	r5, #0
 800b136:	e015      	b.n	800b164 <__kernel_rem_pio2+0xa4>
 800b138:	42d6      	cmn	r6, r2
 800b13a:	d409      	bmi.n	800b150 <__kernel_rem_pio2+0x90>
 800b13c:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 800b140:	ee07 1a90 	vmov	s15, r1
 800b144:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b148:	eca5 7b02 	vstmia	r5!, {d7}
 800b14c:	3201      	adds	r2, #1
 800b14e:	e7e0      	b.n	800b112 <__kernel_rem_pio2+0x52>
 800b150:	eeb0 7b46 	vmov.f64	d7, d6
 800b154:	e7f8      	b.n	800b148 <__kernel_rem_pio2+0x88>
 800b156:	ecbe 5b02 	vldmia	lr!, {d5}
 800b15a:	ed96 6b00 	vldr	d6, [r6]
 800b15e:	3501      	adds	r5, #1
 800b160:	eea5 7b06 	vfma.f64	d7, d5, d6
 800b164:	4555      	cmp	r5, sl
 800b166:	f1a6 0608 	sub.w	r6, r6, #8
 800b16a:	ddf4      	ble.n	800b156 <__kernel_rem_pio2+0x96>
 800b16c:	eca8 7b02 	vstmia	r8!, {d7}
 800b170:	f10c 0c01 	add.w	ip, ip, #1
 800b174:	3208      	adds	r2, #8
 800b176:	e7d6      	b.n	800b126 <__kernel_rem_pio2+0x66>
 800b178:	aa06      	add	r2, sp, #24
 800b17a:	ed9f 9b95 	vldr	d9, [pc, #596]	; 800b3d0 <__kernel_rem_pio2+0x310>
 800b17e:	ed9f ab96 	vldr	d10, [pc, #600]	; 800b3d8 <__kernel_rem_pio2+0x318>
 800b182:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800b186:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800b18a:	9204      	str	r2, [sp, #16]
 800b18c:	9303      	str	r3, [sp, #12]
 800b18e:	464d      	mov	r5, r9
 800b190:	00eb      	lsls	r3, r5, #3
 800b192:	9305      	str	r3, [sp, #20]
 800b194:	ab92      	add	r3, sp, #584	; 0x248
 800b196:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800b19a:	f10d 0b18 	add.w	fp, sp, #24
 800b19e:	ab6a      	add	r3, sp, #424	; 0x1a8
 800b1a0:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 800b1a4:	465e      	mov	r6, fp
 800b1a6:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800b1aa:	4628      	mov	r0, r5
 800b1ac:	2800      	cmp	r0, #0
 800b1ae:	f1a2 0208 	sub.w	r2, r2, #8
 800b1b2:	dc48      	bgt.n	800b246 <__kernel_rem_pio2+0x186>
 800b1b4:	4620      	mov	r0, r4
 800b1b6:	f000 fa17 	bl	800b5e8 <scalbn>
 800b1ba:	eeb0 8b40 	vmov.f64	d8, d0
 800b1be:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800b1c2:	ee28 0b00 	vmul.f64	d0, d8, d0
 800b1c6:	f000 fa8f 	bl	800b6e8 <floor>
 800b1ca:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800b1ce:	eea0 8b47 	vfms.f64	d8, d0, d7
 800b1d2:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800b1d6:	2c00      	cmp	r4, #0
 800b1d8:	ee17 8a90 	vmov	r8, s15
 800b1dc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b1e0:	ee38 8b47 	vsub.f64	d8, d8, d7
 800b1e4:	dd41      	ble.n	800b26a <__kernel_rem_pio2+0x1aa>
 800b1e6:	1e68      	subs	r0, r5, #1
 800b1e8:	ab06      	add	r3, sp, #24
 800b1ea:	f1c4 0c18 	rsb	ip, r4, #24
 800b1ee:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800b1f2:	fa46 f20c 	asr.w	r2, r6, ip
 800b1f6:	4490      	add	r8, r2
 800b1f8:	fa02 f20c 	lsl.w	r2, r2, ip
 800b1fc:	1ab6      	subs	r6, r6, r2
 800b1fe:	f1c4 0217 	rsb	r2, r4, #23
 800b202:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 800b206:	4116      	asrs	r6, r2
 800b208:	2e00      	cmp	r6, #0
 800b20a:	dd3d      	ble.n	800b288 <__kernel_rem_pio2+0x1c8>
 800b20c:	f04f 0c00 	mov.w	ip, #0
 800b210:	f108 0801 	add.w	r8, r8, #1
 800b214:	4660      	mov	r0, ip
 800b216:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800b21a:	4565      	cmp	r5, ip
 800b21c:	dc6a      	bgt.n	800b2f4 <__kernel_rem_pio2+0x234>
 800b21e:	2c00      	cmp	r4, #0
 800b220:	dd04      	ble.n	800b22c <__kernel_rem_pio2+0x16c>
 800b222:	2c01      	cmp	r4, #1
 800b224:	d07b      	beq.n	800b31e <__kernel_rem_pio2+0x25e>
 800b226:	2c02      	cmp	r4, #2
 800b228:	f000 8083 	beq.w	800b332 <__kernel_rem_pio2+0x272>
 800b22c:	2e02      	cmp	r6, #2
 800b22e:	d12b      	bne.n	800b288 <__kernel_rem_pio2+0x1c8>
 800b230:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800b234:	ee30 8b48 	vsub.f64	d8, d0, d8
 800b238:	b330      	cbz	r0, 800b288 <__kernel_rem_pio2+0x1c8>
 800b23a:	4620      	mov	r0, r4
 800b23c:	f000 f9d4 	bl	800b5e8 <scalbn>
 800b240:	ee38 8b40 	vsub.f64	d8, d8, d0
 800b244:	e020      	b.n	800b288 <__kernel_rem_pio2+0x1c8>
 800b246:	ee20 7b09 	vmul.f64	d7, d0, d9
 800b24a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800b24e:	3801      	subs	r0, #1
 800b250:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800b254:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800b258:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800b25c:	eca6 0a01 	vstmia	r6!, {s0}
 800b260:	ed92 0b00 	vldr	d0, [r2]
 800b264:	ee37 0b00 	vadd.f64	d0, d7, d0
 800b268:	e7a0      	b.n	800b1ac <__kernel_rem_pio2+0xec>
 800b26a:	d105      	bne.n	800b278 <__kernel_rem_pio2+0x1b8>
 800b26c:	1e6a      	subs	r2, r5, #1
 800b26e:	ab06      	add	r3, sp, #24
 800b270:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800b274:	15f6      	asrs	r6, r6, #23
 800b276:	e7c7      	b.n	800b208 <__kernel_rem_pio2+0x148>
 800b278:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800b27c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b284:	da34      	bge.n	800b2f0 <__kernel_rem_pio2+0x230>
 800b286:	2600      	movs	r6, #0
 800b288:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b28c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b290:	f040 80aa 	bne.w	800b3e8 <__kernel_rem_pio2+0x328>
 800b294:	f105 3bff 	add.w	fp, r5, #4294967295
 800b298:	4658      	mov	r0, fp
 800b29a:	2200      	movs	r2, #0
 800b29c:	4548      	cmp	r0, r9
 800b29e:	da50      	bge.n	800b342 <__kernel_rem_pio2+0x282>
 800b2a0:	2a00      	cmp	r2, #0
 800b2a2:	d06b      	beq.n	800b37c <__kernel_rem_pio2+0x2bc>
 800b2a4:	ab06      	add	r3, sp, #24
 800b2a6:	3c18      	subs	r4, #24
 800b2a8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	f000 8087 	beq.w	800b3c0 <__kernel_rem_pio2+0x300>
 800b2b2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800b2b6:	4620      	mov	r0, r4
 800b2b8:	f000 f996 	bl	800b5e8 <scalbn>
 800b2bc:	ed9f 6b44 	vldr	d6, [pc, #272]	; 800b3d0 <__kernel_rem_pio2+0x310>
 800b2c0:	f10b 0201 	add.w	r2, fp, #1
 800b2c4:	a96a      	add	r1, sp, #424	; 0x1a8
 800b2c6:	00d3      	lsls	r3, r2, #3
 800b2c8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800b2cc:	465a      	mov	r2, fp
 800b2ce:	2a00      	cmp	r2, #0
 800b2d0:	f280 80b8 	bge.w	800b444 <__kernel_rem_pio2+0x384>
 800b2d4:	465a      	mov	r2, fp
 800b2d6:	2a00      	cmp	r2, #0
 800b2d8:	f2c0 80d6 	blt.w	800b488 <__kernel_rem_pio2+0x3c8>
 800b2dc:	a96a      	add	r1, sp, #424	; 0x1a8
 800b2de:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 800b2e2:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800b3c8 <__kernel_rem_pio2+0x308>
 800b2e6:	4d3f      	ldr	r5, [pc, #252]	; (800b3e4 <__kernel_rem_pio2+0x324>)
 800b2e8:	2000      	movs	r0, #0
 800b2ea:	ebab 0102 	sub.w	r1, fp, r2
 800b2ee:	e0c0      	b.n	800b472 <__kernel_rem_pio2+0x3b2>
 800b2f0:	2602      	movs	r6, #2
 800b2f2:	e78b      	b.n	800b20c <__kernel_rem_pio2+0x14c>
 800b2f4:	f8db 2000 	ldr.w	r2, [fp]
 800b2f8:	b958      	cbnz	r0, 800b312 <__kernel_rem_pio2+0x252>
 800b2fa:	b122      	cbz	r2, 800b306 <__kernel_rem_pio2+0x246>
 800b2fc:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800b300:	f8cb 2000 	str.w	r2, [fp]
 800b304:	2201      	movs	r2, #1
 800b306:	f10c 0c01 	add.w	ip, ip, #1
 800b30a:	f10b 0b04 	add.w	fp, fp, #4
 800b30e:	4610      	mov	r0, r2
 800b310:	e783      	b.n	800b21a <__kernel_rem_pio2+0x15a>
 800b312:	ebae 0202 	sub.w	r2, lr, r2
 800b316:	f8cb 2000 	str.w	r2, [fp]
 800b31a:	4602      	mov	r2, r0
 800b31c:	e7f3      	b.n	800b306 <__kernel_rem_pio2+0x246>
 800b31e:	f105 3cff 	add.w	ip, r5, #4294967295
 800b322:	ab06      	add	r3, sp, #24
 800b324:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800b328:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800b32c:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 800b330:	e77c      	b.n	800b22c <__kernel_rem_pio2+0x16c>
 800b332:	f105 3cff 	add.w	ip, r5, #4294967295
 800b336:	ab06      	add	r3, sp, #24
 800b338:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800b33c:	f3c2 0215 	ubfx	r2, r2, #0, #22
 800b340:	e7f4      	b.n	800b32c <__kernel_rem_pio2+0x26c>
 800b342:	ab06      	add	r3, sp, #24
 800b344:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800b348:	3801      	subs	r0, #1
 800b34a:	431a      	orrs	r2, r3
 800b34c:	e7a6      	b.n	800b29c <__kernel_rem_pio2+0x1dc>
 800b34e:	3201      	adds	r2, #1
 800b350:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800b354:	2e00      	cmp	r6, #0
 800b356:	d0fa      	beq.n	800b34e <__kernel_rem_pio2+0x28e>
 800b358:	9b05      	ldr	r3, [sp, #20]
 800b35a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b35e:	eb0d 0003 	add.w	r0, sp, r3
 800b362:	9b01      	ldr	r3, [sp, #4]
 800b364:	18ee      	adds	r6, r5, r3
 800b366:	ab1a      	add	r3, sp, #104	; 0x68
 800b368:	f105 0c01 	add.w	ip, r5, #1
 800b36c:	3898      	subs	r0, #152	; 0x98
 800b36e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b372:	442a      	add	r2, r5
 800b374:	4562      	cmp	r2, ip
 800b376:	da04      	bge.n	800b382 <__kernel_rem_pio2+0x2c2>
 800b378:	4615      	mov	r5, r2
 800b37a:	e709      	b.n	800b190 <__kernel_rem_pio2+0xd0>
 800b37c:	9804      	ldr	r0, [sp, #16]
 800b37e:	2201      	movs	r2, #1
 800b380:	e7e6      	b.n	800b350 <__kernel_rem_pio2+0x290>
 800b382:	9b03      	ldr	r3, [sp, #12]
 800b384:	f8dd e008 	ldr.w	lr, [sp, #8]
 800b388:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800b38c:	9305      	str	r3, [sp, #20]
 800b38e:	ee07 3a90 	vmov	s15, r3
 800b392:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b396:	2500      	movs	r5, #0
 800b398:	eca6 7b02 	vstmia	r6!, {d7}
 800b39c:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 800b3c8 <__kernel_rem_pio2+0x308>
 800b3a0:	46b0      	mov	r8, r6
 800b3a2:	4555      	cmp	r5, sl
 800b3a4:	dd04      	ble.n	800b3b0 <__kernel_rem_pio2+0x2f0>
 800b3a6:	eca0 7b02 	vstmia	r0!, {d7}
 800b3aa:	f10c 0c01 	add.w	ip, ip, #1
 800b3ae:	e7e1      	b.n	800b374 <__kernel_rem_pio2+0x2b4>
 800b3b0:	ecbe 5b02 	vldmia	lr!, {d5}
 800b3b4:	ed38 6b02 	vldmdb	r8!, {d6}
 800b3b8:	3501      	adds	r5, #1
 800b3ba:	eea5 7b06 	vfma.f64	d7, d5, d6
 800b3be:	e7f0      	b.n	800b3a2 <__kernel_rem_pio2+0x2e2>
 800b3c0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b3c4:	e76e      	b.n	800b2a4 <__kernel_rem_pio2+0x1e4>
 800b3c6:	bf00      	nop
	...
 800b3d4:	3e700000 	.word	0x3e700000
 800b3d8:	00000000 	.word	0x00000000
 800b3dc:	41700000 	.word	0x41700000
 800b3e0:	0800c5e0 	.word	0x0800c5e0
 800b3e4:	0800c5a0 	.word	0x0800c5a0
 800b3e8:	4260      	negs	r0, r4
 800b3ea:	eeb0 0b48 	vmov.f64	d0, d8
 800b3ee:	f000 f8fb 	bl	800b5e8 <scalbn>
 800b3f2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800b5d0 <__kernel_rem_pio2+0x510>
 800b3f6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800b3fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3fe:	db18      	blt.n	800b432 <__kernel_rem_pio2+0x372>
 800b400:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800b5d8 <__kernel_rem_pio2+0x518>
 800b404:	ee20 7b07 	vmul.f64	d7, d0, d7
 800b408:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800b40c:	aa06      	add	r2, sp, #24
 800b40e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800b412:	eea5 0b46 	vfms.f64	d0, d5, d6
 800b416:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800b41a:	f105 0b01 	add.w	fp, r5, #1
 800b41e:	ee10 3a10 	vmov	r3, s0
 800b422:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800b426:	ee17 3a10 	vmov	r3, s14
 800b42a:	3418      	adds	r4, #24
 800b42c:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 800b430:	e73f      	b.n	800b2b2 <__kernel_rem_pio2+0x1f2>
 800b432:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800b436:	aa06      	add	r2, sp, #24
 800b438:	ee10 3a10 	vmov	r3, s0
 800b43c:	46ab      	mov	fp, r5
 800b43e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800b442:	e736      	b.n	800b2b2 <__kernel_rem_pio2+0x1f2>
 800b444:	a806      	add	r0, sp, #24
 800b446:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800b44a:	9001      	str	r0, [sp, #4]
 800b44c:	ee07 0a90 	vmov	s15, r0
 800b450:	3a01      	subs	r2, #1
 800b452:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b456:	ee27 7b00 	vmul.f64	d7, d7, d0
 800b45a:	ee20 0b06 	vmul.f64	d0, d0, d6
 800b45e:	ed21 7b02 	vstmdb	r1!, {d7}
 800b462:	e734      	b.n	800b2ce <__kernel_rem_pio2+0x20e>
 800b464:	ecb5 5b02 	vldmia	r5!, {d5}
 800b468:	ecb4 6b02 	vldmia	r4!, {d6}
 800b46c:	3001      	adds	r0, #1
 800b46e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800b472:	4548      	cmp	r0, r9
 800b474:	dc01      	bgt.n	800b47a <__kernel_rem_pio2+0x3ba>
 800b476:	4288      	cmp	r0, r1
 800b478:	ddf4      	ble.n	800b464 <__kernel_rem_pio2+0x3a4>
 800b47a:	a842      	add	r0, sp, #264	; 0x108
 800b47c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800b480:	ed81 7b00 	vstr	d7, [r1]
 800b484:	3a01      	subs	r2, #1
 800b486:	e726      	b.n	800b2d6 <__kernel_rem_pio2+0x216>
 800b488:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800b48a:	2a02      	cmp	r2, #2
 800b48c:	dc0a      	bgt.n	800b4a4 <__kernel_rem_pio2+0x3e4>
 800b48e:	2a00      	cmp	r2, #0
 800b490:	dc2e      	bgt.n	800b4f0 <__kernel_rem_pio2+0x430>
 800b492:	d047      	beq.n	800b524 <__kernel_rem_pio2+0x464>
 800b494:	f008 0007 	and.w	r0, r8, #7
 800b498:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800b49c:	ecbd 8b06 	vpop	{d8-d10}
 800b4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4a4:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800b4a6:	2a03      	cmp	r2, #3
 800b4a8:	d1f4      	bne.n	800b494 <__kernel_rem_pio2+0x3d4>
 800b4aa:	a942      	add	r1, sp, #264	; 0x108
 800b4ac:	f1a3 0208 	sub.w	r2, r3, #8
 800b4b0:	440a      	add	r2, r1
 800b4b2:	4611      	mov	r1, r2
 800b4b4:	4658      	mov	r0, fp
 800b4b6:	2800      	cmp	r0, #0
 800b4b8:	f1a1 0108 	sub.w	r1, r1, #8
 800b4bc:	dc55      	bgt.n	800b56a <__kernel_rem_pio2+0x4aa>
 800b4be:	4659      	mov	r1, fp
 800b4c0:	2901      	cmp	r1, #1
 800b4c2:	f1a2 0208 	sub.w	r2, r2, #8
 800b4c6:	dc60      	bgt.n	800b58a <__kernel_rem_pio2+0x4ca>
 800b4c8:	ed9f 7b45 	vldr	d7, [pc, #276]	; 800b5e0 <__kernel_rem_pio2+0x520>
 800b4cc:	aa42      	add	r2, sp, #264	; 0x108
 800b4ce:	4413      	add	r3, r2
 800b4d0:	f1bb 0f01 	cmp.w	fp, #1
 800b4d4:	dc69      	bgt.n	800b5aa <__kernel_rem_pio2+0x4ea>
 800b4d6:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800b4da:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800b4de:	2e00      	cmp	r6, #0
 800b4e0:	d16a      	bne.n	800b5b8 <__kernel_rem_pio2+0x4f8>
 800b4e2:	ed87 5b00 	vstr	d5, [r7]
 800b4e6:	ed87 6b02 	vstr	d6, [r7, #8]
 800b4ea:	ed87 7b04 	vstr	d7, [r7, #16]
 800b4ee:	e7d1      	b.n	800b494 <__kernel_rem_pio2+0x3d4>
 800b4f0:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800b5e0 <__kernel_rem_pio2+0x520>
 800b4f4:	aa42      	add	r2, sp, #264	; 0x108
 800b4f6:	4413      	add	r3, r2
 800b4f8:	465a      	mov	r2, fp
 800b4fa:	2a00      	cmp	r2, #0
 800b4fc:	da26      	bge.n	800b54c <__kernel_rem_pio2+0x48c>
 800b4fe:	b35e      	cbz	r6, 800b558 <__kernel_rem_pio2+0x498>
 800b500:	eeb1 7b46 	vneg.f64	d7, d6
 800b504:	ed87 7b00 	vstr	d7, [r7]
 800b508:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800b50c:	aa44      	add	r2, sp, #272	; 0x110
 800b50e:	2301      	movs	r3, #1
 800b510:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b514:	459b      	cmp	fp, r3
 800b516:	da22      	bge.n	800b55e <__kernel_rem_pio2+0x49e>
 800b518:	b10e      	cbz	r6, 800b51e <__kernel_rem_pio2+0x45e>
 800b51a:	eeb1 7b47 	vneg.f64	d7, d7
 800b51e:	ed87 7b02 	vstr	d7, [r7, #8]
 800b522:	e7b7      	b.n	800b494 <__kernel_rem_pio2+0x3d4>
 800b524:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800b5e0 <__kernel_rem_pio2+0x520>
 800b528:	aa42      	add	r2, sp, #264	; 0x108
 800b52a:	4413      	add	r3, r2
 800b52c:	f1bb 0f00 	cmp.w	fp, #0
 800b530:	da05      	bge.n	800b53e <__kernel_rem_pio2+0x47e>
 800b532:	b10e      	cbz	r6, 800b538 <__kernel_rem_pio2+0x478>
 800b534:	eeb1 7b47 	vneg.f64	d7, d7
 800b538:	ed87 7b00 	vstr	d7, [r7]
 800b53c:	e7aa      	b.n	800b494 <__kernel_rem_pio2+0x3d4>
 800b53e:	ed33 6b02 	vldmdb	r3!, {d6}
 800b542:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b546:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b54a:	e7ef      	b.n	800b52c <__kernel_rem_pio2+0x46c>
 800b54c:	ed33 7b02 	vldmdb	r3!, {d7}
 800b550:	3a01      	subs	r2, #1
 800b552:	ee36 6b07 	vadd.f64	d6, d6, d7
 800b556:	e7d0      	b.n	800b4fa <__kernel_rem_pio2+0x43a>
 800b558:	eeb0 7b46 	vmov.f64	d7, d6
 800b55c:	e7d2      	b.n	800b504 <__kernel_rem_pio2+0x444>
 800b55e:	ecb2 6b02 	vldmia	r2!, {d6}
 800b562:	3301      	adds	r3, #1
 800b564:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b568:	e7d4      	b.n	800b514 <__kernel_rem_pio2+0x454>
 800b56a:	ed91 7b00 	vldr	d7, [r1]
 800b56e:	ed91 5b02 	vldr	d5, [r1, #8]
 800b572:	3801      	subs	r0, #1
 800b574:	ee37 6b05 	vadd.f64	d6, d7, d5
 800b578:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b57c:	ed81 6b00 	vstr	d6, [r1]
 800b580:	ee37 7b05 	vadd.f64	d7, d7, d5
 800b584:	ed81 7b02 	vstr	d7, [r1, #8]
 800b588:	e795      	b.n	800b4b6 <__kernel_rem_pio2+0x3f6>
 800b58a:	ed92 7b00 	vldr	d7, [r2]
 800b58e:	ed92 5b02 	vldr	d5, [r2, #8]
 800b592:	3901      	subs	r1, #1
 800b594:	ee37 6b05 	vadd.f64	d6, d7, d5
 800b598:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b59c:	ed82 6b00 	vstr	d6, [r2]
 800b5a0:	ee37 7b05 	vadd.f64	d7, d7, d5
 800b5a4:	ed82 7b02 	vstr	d7, [r2, #8]
 800b5a8:	e78a      	b.n	800b4c0 <__kernel_rem_pio2+0x400>
 800b5aa:	ed33 6b02 	vldmdb	r3!, {d6}
 800b5ae:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b5b2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b5b6:	e78b      	b.n	800b4d0 <__kernel_rem_pio2+0x410>
 800b5b8:	eeb1 5b45 	vneg.f64	d5, d5
 800b5bc:	eeb1 6b46 	vneg.f64	d6, d6
 800b5c0:	ed87 5b00 	vstr	d5, [r7]
 800b5c4:	eeb1 7b47 	vneg.f64	d7, d7
 800b5c8:	ed87 6b02 	vstr	d6, [r7, #8]
 800b5cc:	e78d      	b.n	800b4ea <__kernel_rem_pio2+0x42a>
 800b5ce:	bf00      	nop
 800b5d0:	00000000 	.word	0x00000000
 800b5d4:	41700000 	.word	0x41700000
 800b5d8:	00000000 	.word	0x00000000
 800b5dc:	3e700000 	.word	0x3e700000
	...

0800b5e8 <scalbn>:
 800b5e8:	ee10 1a90 	vmov	r1, s1
 800b5ec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b5f0:	b98b      	cbnz	r3, 800b616 <scalbn+0x2e>
 800b5f2:	ee10 3a10 	vmov	r3, s0
 800b5f6:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b5fa:	4319      	orrs	r1, r3
 800b5fc:	d00a      	beq.n	800b614 <scalbn+0x2c>
 800b5fe:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 800b6b0 <scalbn+0xc8>
 800b602:	4b37      	ldr	r3, [pc, #220]	; (800b6e0 <scalbn+0xf8>)
 800b604:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b608:	4298      	cmp	r0, r3
 800b60a:	da0b      	bge.n	800b624 <scalbn+0x3c>
 800b60c:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 800b6b8 <scalbn+0xd0>
 800b610:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b614:	4770      	bx	lr
 800b616:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800b61a:	4293      	cmp	r3, r2
 800b61c:	d107      	bne.n	800b62e <scalbn+0x46>
 800b61e:	ee30 0b00 	vadd.f64	d0, d0, d0
 800b622:	4770      	bx	lr
 800b624:	ee10 1a90 	vmov	r1, s1
 800b628:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b62c:	3b36      	subs	r3, #54	; 0x36
 800b62e:	f24c 3250 	movw	r2, #50000	; 0xc350
 800b632:	4290      	cmp	r0, r2
 800b634:	dd0d      	ble.n	800b652 <scalbn+0x6a>
 800b636:	ed9f 7b22 	vldr	d7, [pc, #136]	; 800b6c0 <scalbn+0xd8>
 800b63a:	ee10 3a90 	vmov	r3, s1
 800b63e:	eeb0 6b47 	vmov.f64	d6, d7
 800b642:	ed9f 5b21 	vldr	d5, [pc, #132]	; 800b6c8 <scalbn+0xe0>
 800b646:	2b00      	cmp	r3, #0
 800b648:	fe27 7b05 	vselge.f64	d7, d7, d5
 800b64c:	ee27 0b06 	vmul.f64	d0, d7, d6
 800b650:	4770      	bx	lr
 800b652:	4418      	add	r0, r3
 800b654:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800b658:	4298      	cmp	r0, r3
 800b65a:	dcec      	bgt.n	800b636 <scalbn+0x4e>
 800b65c:	2800      	cmp	r0, #0
 800b65e:	dd0a      	ble.n	800b676 <scalbn+0x8e>
 800b660:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800b664:	ec53 2b10 	vmov	r2, r3, d0
 800b668:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800b66c:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800b670:	ec43 2b10 	vmov	d0, r2, r3
 800b674:	4770      	bx	lr
 800b676:	f110 0f35 	cmn.w	r0, #53	; 0x35
 800b67a:	da09      	bge.n	800b690 <scalbn+0xa8>
 800b67c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800b6b8 <scalbn+0xd0>
 800b680:	ee10 3a90 	vmov	r3, s1
 800b684:	eeb0 6b47 	vmov.f64	d6, d7
 800b688:	ed9f 5b11 	vldr	d5, [pc, #68]	; 800b6d0 <scalbn+0xe8>
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	e7db      	b.n	800b648 <scalbn+0x60>
 800b690:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800b694:	ec53 2b10 	vmov	r2, r3, d0
 800b698:	3036      	adds	r0, #54	; 0x36
 800b69a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800b69e:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800b6a2:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800b6d8 <scalbn+0xf0>
 800b6a6:	ec43 2b10 	vmov	d0, r2, r3
 800b6aa:	e7b1      	b.n	800b610 <scalbn+0x28>
 800b6ac:	f3af 8000 	nop.w
 800b6b0:	00000000 	.word	0x00000000
 800b6b4:	43500000 	.word	0x43500000
 800b6b8:	c2f8f359 	.word	0xc2f8f359
 800b6bc:	01a56e1f 	.word	0x01a56e1f
 800b6c0:	8800759c 	.word	0x8800759c
 800b6c4:	7e37e43c 	.word	0x7e37e43c
 800b6c8:	8800759c 	.word	0x8800759c
 800b6cc:	fe37e43c 	.word	0xfe37e43c
 800b6d0:	c2f8f359 	.word	0xc2f8f359
 800b6d4:	81a56e1f 	.word	0x81a56e1f
 800b6d8:	00000000 	.word	0x00000000
 800b6dc:	3c900000 	.word	0x3c900000
 800b6e0:	ffff3cb0 	.word	0xffff3cb0
 800b6e4:	00000000 	.word	0x00000000

0800b6e8 <floor>:
 800b6e8:	ee10 1a90 	vmov	r1, s1
 800b6ec:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b6f0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800b6f4:	2b13      	cmp	r3, #19
 800b6f6:	b530      	push	{r4, r5, lr}
 800b6f8:	ee10 0a10 	vmov	r0, s0
 800b6fc:	ee10 5a10 	vmov	r5, s0
 800b700:	dc31      	bgt.n	800b766 <floor+0x7e>
 800b702:	2b00      	cmp	r3, #0
 800b704:	da15      	bge.n	800b732 <floor+0x4a>
 800b706:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800b7c8 <floor+0xe0>
 800b70a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800b70e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b716:	dd07      	ble.n	800b728 <floor+0x40>
 800b718:	2900      	cmp	r1, #0
 800b71a:	da4e      	bge.n	800b7ba <floor+0xd2>
 800b71c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b720:	4308      	orrs	r0, r1
 800b722:	d04d      	beq.n	800b7c0 <floor+0xd8>
 800b724:	492a      	ldr	r1, [pc, #168]	; (800b7d0 <floor+0xe8>)
 800b726:	2000      	movs	r0, #0
 800b728:	460b      	mov	r3, r1
 800b72a:	4602      	mov	r2, r0
 800b72c:	ec43 2b10 	vmov	d0, r2, r3
 800b730:	e020      	b.n	800b774 <floor+0x8c>
 800b732:	4a28      	ldr	r2, [pc, #160]	; (800b7d4 <floor+0xec>)
 800b734:	411a      	asrs	r2, r3
 800b736:	ea01 0402 	and.w	r4, r1, r2
 800b73a:	4304      	orrs	r4, r0
 800b73c:	d01a      	beq.n	800b774 <floor+0x8c>
 800b73e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 800b7c8 <floor+0xe0>
 800b742:	ee30 0b07 	vadd.f64	d0, d0, d7
 800b746:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b74a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b74e:	ddeb      	ble.n	800b728 <floor+0x40>
 800b750:	2900      	cmp	r1, #0
 800b752:	bfbe      	ittt	lt
 800b754:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800b758:	fa40 f303 	asrlt.w	r3, r0, r3
 800b75c:	18c9      	addlt	r1, r1, r3
 800b75e:	ea21 0102 	bic.w	r1, r1, r2
 800b762:	2000      	movs	r0, #0
 800b764:	e7e0      	b.n	800b728 <floor+0x40>
 800b766:	2b33      	cmp	r3, #51	; 0x33
 800b768:	dd05      	ble.n	800b776 <floor+0x8e>
 800b76a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b76e:	d101      	bne.n	800b774 <floor+0x8c>
 800b770:	ee30 0b00 	vadd.f64	d0, d0, d0
 800b774:	bd30      	pop	{r4, r5, pc}
 800b776:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800b77a:	f04f 32ff 	mov.w	r2, #4294967295
 800b77e:	40e2      	lsrs	r2, r4
 800b780:	4210      	tst	r0, r2
 800b782:	d0f7      	beq.n	800b774 <floor+0x8c>
 800b784:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800b7c8 <floor+0xe0>
 800b788:	ee30 0b07 	vadd.f64	d0, d0, d7
 800b78c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b794:	ddc8      	ble.n	800b728 <floor+0x40>
 800b796:	2900      	cmp	r1, #0
 800b798:	da02      	bge.n	800b7a0 <floor+0xb8>
 800b79a:	2b14      	cmp	r3, #20
 800b79c:	d103      	bne.n	800b7a6 <floor+0xbe>
 800b79e:	3101      	adds	r1, #1
 800b7a0:	ea20 0002 	bic.w	r0, r0, r2
 800b7a4:	e7c0      	b.n	800b728 <floor+0x40>
 800b7a6:	2401      	movs	r4, #1
 800b7a8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b7ac:	fa04 f303 	lsl.w	r3, r4, r3
 800b7b0:	4418      	add	r0, r3
 800b7b2:	4285      	cmp	r5, r0
 800b7b4:	bf88      	it	hi
 800b7b6:	1909      	addhi	r1, r1, r4
 800b7b8:	e7f2      	b.n	800b7a0 <floor+0xb8>
 800b7ba:	2000      	movs	r0, #0
 800b7bc:	4601      	mov	r1, r0
 800b7be:	e7b3      	b.n	800b728 <floor+0x40>
 800b7c0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800b7c4:	e7b0      	b.n	800b728 <floor+0x40>
 800b7c6:	bf00      	nop
 800b7c8:	8800759c 	.word	0x8800759c
 800b7cc:	7e37e43c 	.word	0x7e37e43c
 800b7d0:	bff00000 	.word	0xbff00000
 800b7d4:	000fffff 	.word	0x000fffff

0800b7d8 <_init>:
 800b7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7da:	bf00      	nop
 800b7dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7de:	bc08      	pop	{r3}
 800b7e0:	469e      	mov	lr, r3
 800b7e2:	4770      	bx	lr

0800b7e4 <_fini>:
 800b7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7e6:	bf00      	nop
 800b7e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7ea:	bc08      	pop	{r3}
 800b7ec:	469e      	mov	lr, r3
 800b7ee:	4770      	bx	lr
