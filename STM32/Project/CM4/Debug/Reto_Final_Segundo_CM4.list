
Reto_Final_Segundo_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069cc  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c6c  08106c64  08106c64  00016c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  081078d0  081078d0  000178d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  081078d4  081078d4  000178d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000034  10000000  081078d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000006c0  10000034  0810790c  00020034  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  100006f4  0810790c  000206f4  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017e95  00000000  00000000  000200a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000284b  00000000  00000000  00037f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001518  00000000  00000000  0003a788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000107f  00000000  00000000  0003bca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003adf0  00000000  00000000  0003cd1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001812f  00000000  00000000  00077b0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018d45d  00000000  00000000  0008fc3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00005bf8  00000000  00000000  0021d09c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000061  00000000  00000000  00222c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000034 	.word	0x10000034
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08106c4c 	.word	0x08106c4c

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000038 	.word	0x10000038
 81002d4:	08106c4c 	.word	0x08106c4c

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b09      	ldr	r3, [pc, #36]	; (8100304 <SystemInit+0x2c>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81002e2:	4a08      	ldr	r2, [pc, #32]	; (8100304 <SystemInit+0x2c>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b05      	ldr	r3, [pc, #20]	; (8100304 <SystemInit+0x2c>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a04      	ldr	r2, [pc, #16]	; (8100304 <SystemInit+0x2c>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81002f8:	bf00      	nop
 81002fa:	46bd      	mov	sp, r7
 81002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100300:	4770      	bx	lr
 8100302:	bf00      	nop
 8100304:	e000ed00 	.word	0xe000ed00

08100308 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8100308:	b480      	push	{r7}
 810030a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 810030c:	bf00      	nop
 810030e:	46bd      	mov	sp, r7
 8100310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100314:	4770      	bx	lr
	...

08100318 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8100318:	b580      	push	{r7, lr}
 810031a:	b086      	sub	sp, #24
 810031c:	af04      	add	r7, sp, #16
 810031e:	4603      	mov	r3, r0
 8100320:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8100322:	f04f 33ff 	mov.w	r3, #4294967295
 8100326:	9302      	str	r3, [sp, #8]
 8100328:	2301      	movs	r3, #1
 810032a:	9301      	str	r3, [sp, #4]
 810032c:	1dfb      	adds	r3, r7, #7
 810032e:	9300      	str	r3, [sp, #0]
 8100330:	2301      	movs	r3, #1
 8100332:	2200      	movs	r2, #0
 8100334:	2178      	movs	r1, #120	; 0x78
 8100336:	4803      	ldr	r0, [pc, #12]	; (8100344 <ssd1306_WriteCommand+0x2c>)
 8100338:	f003 f88c 	bl	8103454 <HAL_I2C_Mem_Write>
}
 810033c:	bf00      	nop
 810033e:	3708      	adds	r7, #8
 8100340:	46bd      	mov	sp, r7
 8100342:	bd80      	pop	{r7, pc}
 8100344:	100004f8 	.word	0x100004f8

08100348 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8100348:	b580      	push	{r7, lr}
 810034a:	b086      	sub	sp, #24
 810034c:	af04      	add	r7, sp, #16
 810034e:	6078      	str	r0, [r7, #4]
 8100350:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8100352:	683b      	ldr	r3, [r7, #0]
 8100354:	b29b      	uxth	r3, r3
 8100356:	f04f 32ff 	mov.w	r2, #4294967295
 810035a:	9202      	str	r2, [sp, #8]
 810035c:	9301      	str	r3, [sp, #4]
 810035e:	687b      	ldr	r3, [r7, #4]
 8100360:	9300      	str	r3, [sp, #0]
 8100362:	2301      	movs	r3, #1
 8100364:	2240      	movs	r2, #64	; 0x40
 8100366:	2178      	movs	r1, #120	; 0x78
 8100368:	4803      	ldr	r0, [pc, #12]	; (8100378 <ssd1306_WriteData+0x30>)
 810036a:	f003 f873 	bl	8103454 <HAL_I2C_Mem_Write>
}
 810036e:	bf00      	nop
 8100370:	3708      	adds	r7, #8
 8100372:	46bd      	mov	sp, r7
 8100374:	bd80      	pop	{r7, pc}
 8100376:	bf00      	nop
 8100378:	100004f8 	.word	0x100004f8

0810037c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 810037c:	b580      	push	{r7, lr}
 810037e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8100380:	f7ff ffc2 	bl	8100308 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8100384:	2064      	movs	r0, #100	; 0x64
 8100386:	f001 fa93 	bl	81018b0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 810038a:	2000      	movs	r0, #0
 810038c:	f000 f96e 	bl	810066c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8100390:	2020      	movs	r0, #32
 8100392:	f7ff ffc1 	bl	8100318 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8100396:	2000      	movs	r0, #0
 8100398:	f7ff ffbe 	bl	8100318 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 810039c:	20b0      	movs	r0, #176	; 0xb0
 810039e:	f7ff ffbb 	bl	8100318 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 81003a2:	20c8      	movs	r0, #200	; 0xc8
 81003a4:	f7ff ffb8 	bl	8100318 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 81003a8:	2000      	movs	r0, #0
 81003aa:	f7ff ffb5 	bl	8100318 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 81003ae:	2010      	movs	r0, #16
 81003b0:	f7ff ffb2 	bl	8100318 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 81003b4:	2040      	movs	r0, #64	; 0x40
 81003b6:	f7ff ffaf 	bl	8100318 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 81003ba:	20ff      	movs	r0, #255	; 0xff
 81003bc:	f000 f943 	bl	8100646 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 81003c0:	20a1      	movs	r0, #161	; 0xa1
 81003c2:	f7ff ffa9 	bl	8100318 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 81003c6:	20a6      	movs	r0, #166	; 0xa6
 81003c8:	f7ff ffa6 	bl	8100318 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 81003cc:	20a8      	movs	r0, #168	; 0xa8
 81003ce:	f7ff ffa3 	bl	8100318 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 81003d2:	203f      	movs	r0, #63	; 0x3f
 81003d4:	f7ff ffa0 	bl	8100318 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 81003d8:	20a4      	movs	r0, #164	; 0xa4
 81003da:	f7ff ff9d 	bl	8100318 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 81003de:	20d3      	movs	r0, #211	; 0xd3
 81003e0:	f7ff ff9a 	bl	8100318 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 81003e4:	2000      	movs	r0, #0
 81003e6:	f7ff ff97 	bl	8100318 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 81003ea:	20d5      	movs	r0, #213	; 0xd5
 81003ec:	f7ff ff94 	bl	8100318 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 81003f0:	20f0      	movs	r0, #240	; 0xf0
 81003f2:	f7ff ff91 	bl	8100318 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 81003f6:	20d9      	movs	r0, #217	; 0xd9
 81003f8:	f7ff ff8e 	bl	8100318 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 81003fc:	2022      	movs	r0, #34	; 0x22
 81003fe:	f7ff ff8b 	bl	8100318 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8100402:	20da      	movs	r0, #218	; 0xda
 8100404:	f7ff ff88 	bl	8100318 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8100408:	2012      	movs	r0, #18
 810040a:	f7ff ff85 	bl	8100318 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 810040e:	20db      	movs	r0, #219	; 0xdb
 8100410:	f7ff ff82 	bl	8100318 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8100414:	2020      	movs	r0, #32
 8100416:	f7ff ff7f 	bl	8100318 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 810041a:	208d      	movs	r0, #141	; 0x8d
 810041c:	f7ff ff7c 	bl	8100318 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8100420:	2014      	movs	r0, #20
 8100422:	f7ff ff79 	bl	8100318 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8100426:	2001      	movs	r0, #1
 8100428:	f000 f920 	bl	810066c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 810042c:	2000      	movs	r0, #0
 810042e:	f000 f80f 	bl	8100450 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8100432:	f000 f831 	bl	8100498 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8100436:	4b05      	ldr	r3, [pc, #20]	; (810044c <ssd1306_Init+0xd0>)
 8100438:	2200      	movs	r2, #0
 810043a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 810043c:	4b03      	ldr	r3, [pc, #12]	; (810044c <ssd1306_Init+0xd0>)
 810043e:	2200      	movs	r2, #0
 8100440:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8100442:	4b02      	ldr	r3, [pc, #8]	; (810044c <ssd1306_Init+0xd0>)
 8100444:	2201      	movs	r2, #1
 8100446:	711a      	strb	r2, [r3, #4]
}
 8100448:	bf00      	nop
 810044a:	bd80      	pop	{r7, pc}
 810044c:	10000450 	.word	0x10000450

08100450 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8100450:	b480      	push	{r7}
 8100452:	b085      	sub	sp, #20
 8100454:	af00      	add	r7, sp, #0
 8100456:	4603      	mov	r3, r0
 8100458:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 810045a:	2300      	movs	r3, #0
 810045c:	60fb      	str	r3, [r7, #12]
 810045e:	e00d      	b.n	810047c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8100460:	79fb      	ldrb	r3, [r7, #7]
 8100462:	2b00      	cmp	r3, #0
 8100464:	d101      	bne.n	810046a <ssd1306_Fill+0x1a>
 8100466:	2100      	movs	r1, #0
 8100468:	e000      	b.n	810046c <ssd1306_Fill+0x1c>
 810046a:	21ff      	movs	r1, #255	; 0xff
 810046c:	4a09      	ldr	r2, [pc, #36]	; (8100494 <ssd1306_Fill+0x44>)
 810046e:	68fb      	ldr	r3, [r7, #12]
 8100470:	4413      	add	r3, r2
 8100472:	460a      	mov	r2, r1
 8100474:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8100476:	68fb      	ldr	r3, [r7, #12]
 8100478:	3301      	adds	r3, #1
 810047a:	60fb      	str	r3, [r7, #12]
 810047c:	68fb      	ldr	r3, [r7, #12]
 810047e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8100482:	d3ed      	bcc.n	8100460 <ssd1306_Fill+0x10>
    }
}
 8100484:	bf00      	nop
 8100486:	bf00      	nop
 8100488:	3714      	adds	r7, #20
 810048a:	46bd      	mov	sp, r7
 810048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100490:	4770      	bx	lr
 8100492:	bf00      	nop
 8100494:	10000050 	.word	0x10000050

08100498 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8100498:	b580      	push	{r7, lr}
 810049a:	b082      	sub	sp, #8
 810049c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 810049e:	2300      	movs	r3, #0
 81004a0:	71fb      	strb	r3, [r7, #7]
 81004a2:	e016      	b.n	81004d2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 81004a4:	79fb      	ldrb	r3, [r7, #7]
 81004a6:	3b50      	subs	r3, #80	; 0x50
 81004a8:	b2db      	uxtb	r3, r3
 81004aa:	4618      	mov	r0, r3
 81004ac:	f7ff ff34 	bl	8100318 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 81004b0:	2000      	movs	r0, #0
 81004b2:	f7ff ff31 	bl	8100318 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 81004b6:	2010      	movs	r0, #16
 81004b8:	f7ff ff2e 	bl	8100318 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 81004bc:	79fb      	ldrb	r3, [r7, #7]
 81004be:	01db      	lsls	r3, r3, #7
 81004c0:	4a08      	ldr	r2, [pc, #32]	; (81004e4 <ssd1306_UpdateScreen+0x4c>)
 81004c2:	4413      	add	r3, r2
 81004c4:	2180      	movs	r1, #128	; 0x80
 81004c6:	4618      	mov	r0, r3
 81004c8:	f7ff ff3e 	bl	8100348 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 81004cc:	79fb      	ldrb	r3, [r7, #7]
 81004ce:	3301      	adds	r3, #1
 81004d0:	71fb      	strb	r3, [r7, #7]
 81004d2:	79fb      	ldrb	r3, [r7, #7]
 81004d4:	2b07      	cmp	r3, #7
 81004d6:	d9e5      	bls.n	81004a4 <ssd1306_UpdateScreen+0xc>
    }
}
 81004d8:	bf00      	nop
 81004da:	bf00      	nop
 81004dc:	3708      	adds	r7, #8
 81004de:	46bd      	mov	sp, r7
 81004e0:	bd80      	pop	{r7, pc}
 81004e2:	bf00      	nop
 81004e4:	10000050 	.word	0x10000050

081004e8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 81004e8:	b480      	push	{r7}
 81004ea:	b083      	sub	sp, #12
 81004ec:	af00      	add	r7, sp, #0
 81004ee:	4603      	mov	r3, r0
 81004f0:	71fb      	strb	r3, [r7, #7]
 81004f2:	460b      	mov	r3, r1
 81004f4:	71bb      	strb	r3, [r7, #6]
 81004f6:	4613      	mov	r3, r2
 81004f8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 81004fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 81004fe:	2b00      	cmp	r3, #0
 8100500:	db3d      	blt.n	810057e <ssd1306_DrawPixel+0x96>
 8100502:	79bb      	ldrb	r3, [r7, #6]
 8100504:	2b3f      	cmp	r3, #63	; 0x3f
 8100506:	d83a      	bhi.n	810057e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8100508:	797b      	ldrb	r3, [r7, #5]
 810050a:	2b01      	cmp	r3, #1
 810050c:	d11a      	bne.n	8100544 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 810050e:	79fa      	ldrb	r2, [r7, #7]
 8100510:	79bb      	ldrb	r3, [r7, #6]
 8100512:	08db      	lsrs	r3, r3, #3
 8100514:	b2d8      	uxtb	r0, r3
 8100516:	4603      	mov	r3, r0
 8100518:	01db      	lsls	r3, r3, #7
 810051a:	4413      	add	r3, r2
 810051c:	4a1b      	ldr	r2, [pc, #108]	; (810058c <ssd1306_DrawPixel+0xa4>)
 810051e:	5cd3      	ldrb	r3, [r2, r3]
 8100520:	b25a      	sxtb	r2, r3
 8100522:	79bb      	ldrb	r3, [r7, #6]
 8100524:	f003 0307 	and.w	r3, r3, #7
 8100528:	2101      	movs	r1, #1
 810052a:	fa01 f303 	lsl.w	r3, r1, r3
 810052e:	b25b      	sxtb	r3, r3
 8100530:	4313      	orrs	r3, r2
 8100532:	b259      	sxtb	r1, r3
 8100534:	79fa      	ldrb	r2, [r7, #7]
 8100536:	4603      	mov	r3, r0
 8100538:	01db      	lsls	r3, r3, #7
 810053a:	4413      	add	r3, r2
 810053c:	b2c9      	uxtb	r1, r1
 810053e:	4a13      	ldr	r2, [pc, #76]	; (810058c <ssd1306_DrawPixel+0xa4>)
 8100540:	54d1      	strb	r1, [r2, r3]
 8100542:	e01d      	b.n	8100580 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8100544:	79fa      	ldrb	r2, [r7, #7]
 8100546:	79bb      	ldrb	r3, [r7, #6]
 8100548:	08db      	lsrs	r3, r3, #3
 810054a:	b2d8      	uxtb	r0, r3
 810054c:	4603      	mov	r3, r0
 810054e:	01db      	lsls	r3, r3, #7
 8100550:	4413      	add	r3, r2
 8100552:	4a0e      	ldr	r2, [pc, #56]	; (810058c <ssd1306_DrawPixel+0xa4>)
 8100554:	5cd3      	ldrb	r3, [r2, r3]
 8100556:	b25a      	sxtb	r2, r3
 8100558:	79bb      	ldrb	r3, [r7, #6]
 810055a:	f003 0307 	and.w	r3, r3, #7
 810055e:	2101      	movs	r1, #1
 8100560:	fa01 f303 	lsl.w	r3, r1, r3
 8100564:	b25b      	sxtb	r3, r3
 8100566:	43db      	mvns	r3, r3
 8100568:	b25b      	sxtb	r3, r3
 810056a:	4013      	ands	r3, r2
 810056c:	b259      	sxtb	r1, r3
 810056e:	79fa      	ldrb	r2, [r7, #7]
 8100570:	4603      	mov	r3, r0
 8100572:	01db      	lsls	r3, r3, #7
 8100574:	4413      	add	r3, r2
 8100576:	b2c9      	uxtb	r1, r1
 8100578:	4a04      	ldr	r2, [pc, #16]	; (810058c <ssd1306_DrawPixel+0xa4>)
 810057a:	54d1      	strb	r1, [r2, r3]
 810057c:	e000      	b.n	8100580 <ssd1306_DrawPixel+0x98>
        return;
 810057e:	bf00      	nop
    }
}
 8100580:	370c      	adds	r7, #12
 8100582:	46bd      	mov	sp, r7
 8100584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100588:	4770      	bx	lr
 810058a:	bf00      	nop
 810058c:	10000050 	.word	0x10000050

08100590 <ssd1306_DrawBitmap>:
    }
    return;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8100590:	b580      	push	{r7, lr}
 8100592:	b084      	sub	sp, #16
 8100594:	af00      	add	r7, sp, #0
 8100596:	603a      	str	r2, [r7, #0]
 8100598:	461a      	mov	r2, r3
 810059a:	4603      	mov	r3, r0
 810059c:	71fb      	strb	r3, [r7, #7]
 810059e:	460b      	mov	r3, r1
 81005a0:	71bb      	strb	r3, [r7, #6]
 81005a2:	4613      	mov	r3, r2
 81005a4:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 81005a6:	797b      	ldrb	r3, [r7, #5]
 81005a8:	3307      	adds	r3, #7
 81005aa:	2b00      	cmp	r3, #0
 81005ac:	da00      	bge.n	81005b0 <ssd1306_DrawBitmap+0x20>
 81005ae:	3307      	adds	r3, #7
 81005b0:	10db      	asrs	r3, r3, #3
 81005b2:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 81005b4:	2300      	movs	r3, #0
 81005b6:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 81005b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 81005bc:	2b00      	cmp	r3, #0
 81005be:	db3e      	blt.n	810063e <ssd1306_DrawBitmap+0xae>
 81005c0:	79bb      	ldrb	r3, [r7, #6]
 81005c2:	2b3f      	cmp	r3, #63	; 0x3f
 81005c4:	d83b      	bhi.n	810063e <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 81005c6:	2300      	movs	r3, #0
 81005c8:	73bb      	strb	r3, [r7, #14]
 81005ca:	e033      	b.n	8100634 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 81005cc:	2300      	movs	r3, #0
 81005ce:	737b      	strb	r3, [r7, #13]
 81005d0:	e026      	b.n	8100620 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 81005d2:	7b7b      	ldrb	r3, [r7, #13]
 81005d4:	f003 0307 	and.w	r3, r3, #7
 81005d8:	2b00      	cmp	r3, #0
 81005da:	d003      	beq.n	81005e4 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 81005dc:	7bfb      	ldrb	r3, [r7, #15]
 81005de:	005b      	lsls	r3, r3, #1
 81005e0:	73fb      	strb	r3, [r7, #15]
 81005e2:	e00d      	b.n	8100600 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 81005e4:	7bbb      	ldrb	r3, [r7, #14]
 81005e6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 81005ea:	fb02 f303 	mul.w	r3, r2, r3
 81005ee:	7b7a      	ldrb	r2, [r7, #13]
 81005f0:	08d2      	lsrs	r2, r2, #3
 81005f2:	b2d2      	uxtb	r2, r2
 81005f4:	4413      	add	r3, r2
 81005f6:	461a      	mov	r2, r3
 81005f8:	683b      	ldr	r3, [r7, #0]
 81005fa:	4413      	add	r3, r2
 81005fc:	781b      	ldrb	r3, [r3, #0]
 81005fe:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8100600:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8100604:	2b00      	cmp	r3, #0
 8100606:	da08      	bge.n	810061a <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8100608:	79fa      	ldrb	r2, [r7, #7]
 810060a:	7b7b      	ldrb	r3, [r7, #13]
 810060c:	4413      	add	r3, r2
 810060e:	b2db      	uxtb	r3, r3
 8100610:	7f3a      	ldrb	r2, [r7, #28]
 8100612:	79b9      	ldrb	r1, [r7, #6]
 8100614:	4618      	mov	r0, r3
 8100616:	f7ff ff67 	bl	81004e8 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 810061a:	7b7b      	ldrb	r3, [r7, #13]
 810061c:	3301      	adds	r3, #1
 810061e:	737b      	strb	r3, [r7, #13]
 8100620:	7b7a      	ldrb	r2, [r7, #13]
 8100622:	797b      	ldrb	r3, [r7, #5]
 8100624:	429a      	cmp	r2, r3
 8100626:	d3d4      	bcc.n	81005d2 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8100628:	7bbb      	ldrb	r3, [r7, #14]
 810062a:	3301      	adds	r3, #1
 810062c:	73bb      	strb	r3, [r7, #14]
 810062e:	79bb      	ldrb	r3, [r7, #6]
 8100630:	3301      	adds	r3, #1
 8100632:	71bb      	strb	r3, [r7, #6]
 8100634:	7bba      	ldrb	r2, [r7, #14]
 8100636:	7e3b      	ldrb	r3, [r7, #24]
 8100638:	429a      	cmp	r2, r3
 810063a:	d3c7      	bcc.n	81005cc <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 810063c:	e000      	b.n	8100640 <ssd1306_DrawBitmap+0xb0>
        return;
 810063e:	bf00      	nop
}
 8100640:	3710      	adds	r7, #16
 8100642:	46bd      	mov	sp, r7
 8100644:	bd80      	pop	{r7, pc}

08100646 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8100646:	b580      	push	{r7, lr}
 8100648:	b084      	sub	sp, #16
 810064a:	af00      	add	r7, sp, #0
 810064c:	4603      	mov	r3, r0
 810064e:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8100650:	2381      	movs	r3, #129	; 0x81
 8100652:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8100654:	7bfb      	ldrb	r3, [r7, #15]
 8100656:	4618      	mov	r0, r3
 8100658:	f7ff fe5e 	bl	8100318 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 810065c:	79fb      	ldrb	r3, [r7, #7]
 810065e:	4618      	mov	r0, r3
 8100660:	f7ff fe5a 	bl	8100318 <ssd1306_WriteCommand>
}
 8100664:	bf00      	nop
 8100666:	3710      	adds	r7, #16
 8100668:	46bd      	mov	sp, r7
 810066a:	bd80      	pop	{r7, pc}

0810066c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 810066c:	b580      	push	{r7, lr}
 810066e:	b084      	sub	sp, #16
 8100670:	af00      	add	r7, sp, #0
 8100672:	4603      	mov	r3, r0
 8100674:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8100676:	79fb      	ldrb	r3, [r7, #7]
 8100678:	2b00      	cmp	r3, #0
 810067a:	d005      	beq.n	8100688 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 810067c:	23af      	movs	r3, #175	; 0xaf
 810067e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8100680:	4b08      	ldr	r3, [pc, #32]	; (81006a4 <ssd1306_SetDisplayOn+0x38>)
 8100682:	2201      	movs	r2, #1
 8100684:	715a      	strb	r2, [r3, #5]
 8100686:	e004      	b.n	8100692 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8100688:	23ae      	movs	r3, #174	; 0xae
 810068a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 810068c:	4b05      	ldr	r3, [pc, #20]	; (81006a4 <ssd1306_SetDisplayOn+0x38>)
 810068e:	2200      	movs	r2, #0
 8100690:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8100692:	7bfb      	ldrb	r3, [r7, #15]
 8100694:	4618      	mov	r0, r3
 8100696:	f7ff fe3f 	bl	8100318 <ssd1306_WriteCommand>
}
 810069a:	bf00      	nop
 810069c:	3710      	adds	r7, #16
 810069e:	46bd      	mov	sp, r7
 81006a0:	bd80      	pop	{r7, pc}
 81006a2:	bf00      	nop
 81006a4:	10000450 	.word	0x10000450

081006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81006a8:	b580      	push	{r7, lr}
 81006aa:	b082      	sub	sp, #8
 81006ac:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81006ae:	4b3a      	ldr	r3, [pc, #232]	; (8100798 <main+0xf0>)
 81006b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81006b4:	4a38      	ldr	r2, [pc, #224]	; (8100798 <main+0xf0>)
 81006b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81006ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81006be:	4b36      	ldr	r3, [pc, #216]	; (8100798 <main+0xf0>)
 81006c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81006c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81006c8:	607b      	str	r3, [r7, #4]
 81006ca:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81006cc:	2001      	movs	r0, #1
 81006ce:	f002 fe05 	bl	81032dc <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81006d2:	f003 fcb7 	bl	8104044 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81006d6:	2201      	movs	r2, #1
 81006d8:	2102      	movs	r1, #2
 81006da:	2000      	movs	r0, #0
 81006dc:	f003 fc38 	bl	8103f50 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81006e0:	4b2e      	ldr	r3, [pc, #184]	; (810079c <main+0xf4>)
 81006e2:	681b      	ldr	r3, [r3, #0]
 81006e4:	091b      	lsrs	r3, r3, #4
 81006e6:	f003 030f 	and.w	r3, r3, #15
 81006ea:	2b07      	cmp	r3, #7
 81006ec:	d108      	bne.n	8100700 <main+0x58>
 81006ee:	4b2c      	ldr	r3, [pc, #176]	; (81007a0 <main+0xf8>)
 81006f0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 81006f4:	4a2a      	ldr	r2, [pc, #168]	; (81007a0 <main+0xf8>)
 81006f6:	f043 0301 	orr.w	r3, r3, #1
 81006fa:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 81006fe:	e007      	b.n	8100710 <main+0x68>
 8100700:	4b27      	ldr	r3, [pc, #156]	; (81007a0 <main+0xf8>)
 8100702:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100706:	4a26      	ldr	r2, [pc, #152]	; (81007a0 <main+0xf8>)
 8100708:	f043 0301 	orr.w	r3, r3, #1
 810070c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100710:	f001 f81a 	bl	8101748 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100714:	f000 fa40 	bl	8100b98 <MX_GPIO_Init>
  MX_I2C4_Init();
 8100718:	f000 f964 	bl	81009e4 <MX_I2C4_Init>
  MX_TIM3_Init();
 810071c:	f000 f9a2 	bl	8100a64 <MX_TIM3_Init>
  MX_TIM7_Init();
 8100720:	f000 fa04 	bl	8100b2c <MX_TIM7_Init>
  MX_FDCAN1_Init();
 8100724:	f000 f84c 	bl	81007c0 <MX_FDCAN1_Init>
  MX_I2C1_Init();
 8100728:	f000 f91c 	bl	8100964 <MX_I2C1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 810072c:	2100      	movs	r1, #0
 810072e:	481d      	ldr	r0, [pc, #116]	; (81007a4 <main+0xfc>)
 8100730:	f005 faa6 	bl	8105c80 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8100734:	2104      	movs	r1, #4
 8100736:	481b      	ldr	r0, [pc, #108]	; (81007a4 <main+0xfc>)
 8100738:	f005 faa2 	bl	8105c80 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim7);
 810073c:	481a      	ldr	r0, [pc, #104]	; (81007a8 <main+0x100>)
 810073e:	f005 f9cf 	bl	8105ae0 <HAL_TIM_Base_Start_IT>
  AS5600_init();
 8100742:	f000 fc07 	bl	8100f54 <AS5600_init>
  AS5600_read_angle();
 8100746:	f000 fc21 	bl	8100f8c <AS5600_read_angle>
  referencia = (uint16_t)(angle* 360.0f/4096.0f);
 810074a:	4b18      	ldr	r3, [pc, #96]	; (81007ac <main+0x104>)
 810074c:	881b      	ldrh	r3, [r3, #0]
 810074e:	ee07 3a90 	vmov	s15, r3
 8100752:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8100756:	ed9f 7a16 	vldr	s14, [pc, #88]	; 81007b0 <main+0x108>
 810075a:	ee27 7a87 	vmul.f32	s14, s15, s14
 810075e:	eddf 6a15 	vldr	s13, [pc, #84]	; 81007b4 <main+0x10c>
 8100762:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8100766:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810076a:	ee17 3a90 	vmov	r3, s15
 810076e:	b29a      	uxth	r2, r3
 8100770:	4b11      	ldr	r3, [pc, #68]	; (81007b8 <main+0x110>)
 8100772:	801a      	strh	r2, [r3, #0]
  errorAnterior = referencia;
 8100774:	4b10      	ldr	r3, [pc, #64]	; (81007b8 <main+0x110>)
 8100776:	881b      	ldrh	r3, [r3, #0]
 8100778:	b21a      	sxth	r2, r3
 810077a:	4b10      	ldr	r3, [pc, #64]	; (81007bc <main+0x114>)
 810077c:	801a      	strh	r2, [r3, #0]


  ssd1306_Init();
 810077e:	f7ff fdfd 	bl	810037c <ssd1306_Init>
  updateOLED();
 8100782:	f000 fcd9 	bl	8101138 <updateOLED>
  HAL_NVIC_SetPriority(HSEM2_IRQn, 10, 0);
 8100786:	2200      	movs	r2, #0
 8100788:	210a      	movs	r1, #10
 810078a:	207e      	movs	r0, #126	; 0x7e
 810078c:	f001 f98f 	bl	8101aae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 8100790:	207e      	movs	r0, #126	; 0x7e
 8100792:	f001 f9a6 	bl	8101ae2 <HAL_NVIC_EnableIRQ>
  while (1)
 8100796:	e7fe      	b.n	8100796 <main+0xee>
 8100798:	58024400 	.word	0x58024400
 810079c:	e000ed00 	.word	0xe000ed00
 81007a0:	58026400 	.word	0x58026400
 81007a4:	100005a0 	.word	0x100005a0
 81007a8:	100005ec 	.word	0x100005ec
 81007ac:	10000638 	.word	0x10000638
 81007b0:	43b40000 	.word	0x43b40000
 81007b4:	45800000 	.word	0x45800000
 81007b8:	1000063c 	.word	0x1000063c
 81007bc:	10000640 	.word	0x10000640

081007c0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 81007c0:	b580      	push	{r7, lr}
 81007c2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 81007c4:	4b62      	ldr	r3, [pc, #392]	; (8100950 <MX_FDCAN1_Init+0x190>)
 81007c6:	4a63      	ldr	r2, [pc, #396]	; (8100954 <MX_FDCAN1_Init+0x194>)
 81007c8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 81007ca:	4b61      	ldr	r3, [pc, #388]	; (8100950 <MX_FDCAN1_Init+0x190>)
 81007cc:	2200      	movs	r2, #0
 81007ce:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 81007d0:	4b5f      	ldr	r3, [pc, #380]	; (8100950 <MX_FDCAN1_Init+0x190>)
 81007d2:	2200      	movs	r2, #0
 81007d4:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 81007d6:	4b5e      	ldr	r3, [pc, #376]	; (8100950 <MX_FDCAN1_Init+0x190>)
 81007d8:	2201      	movs	r2, #1
 81007da:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 81007dc:	4b5c      	ldr	r3, [pc, #368]	; (8100950 <MX_FDCAN1_Init+0x190>)
 81007de:	2201      	movs	r2, #1
 81007e0:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 81007e2:	4b5b      	ldr	r3, [pc, #364]	; (8100950 <MX_FDCAN1_Init+0x190>)
 81007e4:	2201      	movs	r2, #1
 81007e6:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 81007e8:	4b59      	ldr	r3, [pc, #356]	; (8100950 <MX_FDCAN1_Init+0x190>)
 81007ea:	2205      	movs	r2, #5
 81007ec:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 81007ee:	4b58      	ldr	r3, [pc, #352]	; (8100950 <MX_FDCAN1_Init+0x190>)
 81007f0:	2208      	movs	r2, #8
 81007f2:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 0x1F;
 81007f4:	4b56      	ldr	r3, [pc, #344]	; (8100950 <MX_FDCAN1_Init+0x190>)
 81007f6:	221f      	movs	r2, #31
 81007f8:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 81007fa:	4b55      	ldr	r3, [pc, #340]	; (8100950 <MX_FDCAN1_Init+0x190>)
 81007fc:	2208      	movs	r2, #8
 81007fe:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8100800:	4b53      	ldr	r3, [pc, #332]	; (8100950 <MX_FDCAN1_Init+0x190>)
 8100802:	2201      	movs	r2, #1
 8100804:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8100806:	4b52      	ldr	r3, [pc, #328]	; (8100950 <MX_FDCAN1_Init+0x190>)
 8100808:	2201      	movs	r2, #1
 810080a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 810080c:	4b50      	ldr	r3, [pc, #320]	; (8100950 <MX_FDCAN1_Init+0x190>)
 810080e:	2201      	movs	r2, #1
 8100810:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8100812:	4b4f      	ldr	r3, [pc, #316]	; (8100950 <MX_FDCAN1_Init+0x190>)
 8100814:	2201      	movs	r2, #1
 8100816:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8100818:	4b4d      	ldr	r3, [pc, #308]	; (8100950 <MX_FDCAN1_Init+0x190>)
 810081a:	2200      	movs	r2, #0
 810081c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 810081e:	4b4c      	ldr	r3, [pc, #304]	; (8100950 <MX_FDCAN1_Init+0x190>)
 8100820:	2201      	movs	r2, #1
 8100822:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8100824:	4b4a      	ldr	r3, [pc, #296]	; (8100950 <MX_FDCAN1_Init+0x190>)
 8100826:	2200      	movs	r2, #0
 8100828:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 810082a:	4b49      	ldr	r3, [pc, #292]	; (8100950 <MX_FDCAN1_Init+0x190>)
 810082c:	2201      	movs	r2, #1
 810082e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8100830:	4b47      	ldr	r3, [pc, #284]	; (8100950 <MX_FDCAN1_Init+0x190>)
 8100832:	2204      	movs	r2, #4
 8100834:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8100836:	4b46      	ldr	r3, [pc, #280]	; (8100950 <MX_FDCAN1_Init+0x190>)
 8100838:	2200      	movs	r2, #0
 810083a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 810083c:	4b44      	ldr	r3, [pc, #272]	; (8100950 <MX_FDCAN1_Init+0x190>)
 810083e:	2204      	movs	r2, #4
 8100840:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8100842:	4b43      	ldr	r3, [pc, #268]	; (8100950 <MX_FDCAN1_Init+0x190>)
 8100844:	2200      	movs	r2, #0
 8100846:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8100848:	4b41      	ldr	r3, [pc, #260]	; (8100950 <MX_FDCAN1_Init+0x190>)
 810084a:	2204      	movs	r2, #4
 810084c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 810084e:	4b40      	ldr	r3, [pc, #256]	; (8100950 <MX_FDCAN1_Init+0x190>)
 8100850:	2200      	movs	r2, #0
 8100852:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8100854:	4b3e      	ldr	r3, [pc, #248]	; (8100950 <MX_FDCAN1_Init+0x190>)
 8100856:	2200      	movs	r2, #0
 8100858:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 810085a:	4b3d      	ldr	r3, [pc, #244]	; (8100950 <MX_FDCAN1_Init+0x190>)
 810085c:	2201      	movs	r2, #1
 810085e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8100860:	4b3b      	ldr	r3, [pc, #236]	; (8100950 <MX_FDCAN1_Init+0x190>)
 8100862:	2200      	movs	r2, #0
 8100864:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8100866:	4b3a      	ldr	r3, [pc, #232]	; (8100950 <MX_FDCAN1_Init+0x190>)
 8100868:	2204      	movs	r2, #4
 810086a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 810086c:	4838      	ldr	r0, [pc, #224]	; (8100950 <MX_FDCAN1_Init+0x190>)
 810086e:	f001 f967 	bl	8101b40 <HAL_FDCAN_Init>
 8100872:	4603      	mov	r3, r0
 8100874:	2b00      	cmp	r3, #0
 8100876:	d001      	beq.n	810087c <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8100878:	f000 fcf0 	bl	810125c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
    sFilterConfig.IdType = FDCAN_STANDARD_ID;
 810087c:	4b36      	ldr	r3, [pc, #216]	; (8100958 <MX_FDCAN1_Init+0x198>)
 810087e:	2200      	movs	r2, #0
 8100880:	601a      	str	r2, [r3, #0]
    sFilterConfig.FilterIndex = 0;
 8100882:	4b35      	ldr	r3, [pc, #212]	; (8100958 <MX_FDCAN1_Init+0x198>)
 8100884:	2200      	movs	r2, #0
 8100886:	605a      	str	r2, [r3, #4]
    sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8100888:	4b33      	ldr	r3, [pc, #204]	; (8100958 <MX_FDCAN1_Init+0x198>)
 810088a:	2202      	movs	r2, #2
 810088c:	609a      	str	r2, [r3, #8]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 810088e:	4b32      	ldr	r3, [pc, #200]	; (8100958 <MX_FDCAN1_Init+0x198>)
 8100890:	2201      	movs	r2, #1
 8100892:	60da      	str	r2, [r3, #12]
    sFilterConfig.FilterID1 = 0x321;
 8100894:	4b30      	ldr	r3, [pc, #192]	; (8100958 <MX_FDCAN1_Init+0x198>)
 8100896:	f240 3221 	movw	r2, #801	; 0x321
 810089a:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterID2 = 0x7FF;
 810089c:	4b2e      	ldr	r3, [pc, #184]	; (8100958 <MX_FDCAN1_Init+0x198>)
 810089e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 81008a2:	615a      	str	r2, [r3, #20]

    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK){
 81008a4:	492c      	ldr	r1, [pc, #176]	; (8100958 <MX_FDCAN1_Init+0x198>)
 81008a6:	482a      	ldr	r0, [pc, #168]	; (8100950 <MX_FDCAN1_Init+0x190>)
 81008a8:	f001 fb28 	bl	8101efc <HAL_FDCAN_ConfigFilter>
 81008ac:	4603      	mov	r3, r0
 81008ae:	2b00      	cmp	r3, #0
 81008b0:	d001      	beq.n	81008b6 <MX_FDCAN1_Init+0xf6>
        /* Filter configuration Error */
  	  Error_Handler();
 81008b2:	f000 fcd3 	bl	810125c <Error_Handler>
    }

    if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK){
 81008b6:	4826      	ldr	r0, [pc, #152]	; (8100950 <MX_FDCAN1_Init+0x190>)
 81008b8:	f001 fb96 	bl	8101fe8 <HAL_FDCAN_Start>
 81008bc:	4603      	mov	r3, r0
 81008be:	2b00      	cmp	r3, #0
 81008c0:	d001      	beq.n	81008c6 <MX_FDCAN1_Init+0x106>
        /* Filter configuration Error */
  	  Error_Handler();
 81008c2:	f000 fccb 	bl	810125c <Error_Handler>
    }


    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK){
 81008c6:	2200      	movs	r2, #0
 81008c8:	2101      	movs	r1, #1
 81008ca:	4821      	ldr	r0, [pc, #132]	; (8100950 <MX_FDCAN1_Init+0x190>)
 81008cc:	f001 fd80 	bl	81023d0 <HAL_FDCAN_ActivateNotification>
 81008d0:	4603      	mov	r3, r0
 81008d2:	2b00      	cmp	r3, #0
 81008d4:	d001      	beq.n	81008da <MX_FDCAN1_Init+0x11a>
        /* Filter configuration Error */
  	  Error_Handler();
 81008d6:	f000 fcc1 	bl	810125c <Error_Handler>

    }


    TxHeader.Identifier = 0xFF;
 81008da:	4b20      	ldr	r3, [pc, #128]	; (810095c <MX_FDCAN1_Init+0x19c>)
 81008dc:	22ff      	movs	r2, #255	; 0xff
 81008de:	601a      	str	r2, [r3, #0]
    TxHeader.IdType = FDCAN_STANDARD_ID;
 81008e0:	4b1e      	ldr	r3, [pc, #120]	; (810095c <MX_FDCAN1_Init+0x19c>)
 81008e2:	2200      	movs	r2, #0
 81008e4:	605a      	str	r2, [r3, #4]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 81008e6:	4b1d      	ldr	r3, [pc, #116]	; (810095c <MX_FDCAN1_Init+0x19c>)
 81008e8:	2200      	movs	r2, #0
 81008ea:	609a      	str	r2, [r3, #8]
    TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 81008ec:	4b1b      	ldr	r3, [pc, #108]	; (810095c <MX_FDCAN1_Init+0x19c>)
 81008ee:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 81008f2:	60da      	str	r2, [r3, #12]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 81008f4:	4b19      	ldr	r3, [pc, #100]	; (810095c <MX_FDCAN1_Init+0x19c>)
 81008f6:	2200      	movs	r2, #0
 81008f8:	611a      	str	r2, [r3, #16]
    TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 81008fa:	4b18      	ldr	r3, [pc, #96]	; (810095c <MX_FDCAN1_Init+0x19c>)
 81008fc:	2200      	movs	r2, #0
 81008fe:	615a      	str	r2, [r3, #20]
    TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8100900:	4b16      	ldr	r3, [pc, #88]	; (810095c <MX_FDCAN1_Init+0x19c>)
 8100902:	2200      	movs	r2, #0
 8100904:	619a      	str	r2, [r3, #24]
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8100906:	4b15      	ldr	r3, [pc, #84]	; (810095c <MX_FDCAN1_Init+0x19c>)
 8100908:	2200      	movs	r2, #0
 810090a:	61da      	str	r2, [r3, #28]
    TxHeader.MessageMarker = 0;
 810090c:	4b13      	ldr	r3, [pc, #76]	; (810095c <MX_FDCAN1_Init+0x19c>)
 810090e:	2200      	movs	r2, #0
 8100910:	621a      	str	r2, [r3, #32]

    TxHeader2.Identifier = 0xAA;
 8100912:	4b13      	ldr	r3, [pc, #76]	; (8100960 <MX_FDCAN1_Init+0x1a0>)
 8100914:	22aa      	movs	r2, #170	; 0xaa
 8100916:	601a      	str	r2, [r3, #0]
    TxHeader2.IdType = FDCAN_STANDARD_ID;
 8100918:	4b11      	ldr	r3, [pc, #68]	; (8100960 <MX_FDCAN1_Init+0x1a0>)
 810091a:	2200      	movs	r2, #0
 810091c:	605a      	str	r2, [r3, #4]
    TxHeader2.TxFrameType = FDCAN_DATA_FRAME;
 810091e:	4b10      	ldr	r3, [pc, #64]	; (8100960 <MX_FDCAN1_Init+0x1a0>)
 8100920:	2200      	movs	r2, #0
 8100922:	609a      	str	r2, [r3, #8]
    TxHeader2.DataLength = FDCAN_DLC_BYTES_8;
 8100924:	4b0e      	ldr	r3, [pc, #56]	; (8100960 <MX_FDCAN1_Init+0x1a0>)
 8100926:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 810092a:	60da      	str	r2, [r3, #12]
    TxHeader2.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 810092c:	4b0c      	ldr	r3, [pc, #48]	; (8100960 <MX_FDCAN1_Init+0x1a0>)
 810092e:	2200      	movs	r2, #0
 8100930:	611a      	str	r2, [r3, #16]
    TxHeader2.BitRateSwitch = FDCAN_BRS_OFF;
 8100932:	4b0b      	ldr	r3, [pc, #44]	; (8100960 <MX_FDCAN1_Init+0x1a0>)
 8100934:	2200      	movs	r2, #0
 8100936:	615a      	str	r2, [r3, #20]
    TxHeader2.FDFormat = FDCAN_CLASSIC_CAN;
 8100938:	4b09      	ldr	r3, [pc, #36]	; (8100960 <MX_FDCAN1_Init+0x1a0>)
 810093a:	2200      	movs	r2, #0
 810093c:	619a      	str	r2, [r3, #24]
    TxHeader2.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 810093e:	4b08      	ldr	r3, [pc, #32]	; (8100960 <MX_FDCAN1_Init+0x1a0>)
 8100940:	2200      	movs	r2, #0
 8100942:	61da      	str	r2, [r3, #28]
    TxHeader2.MessageMarker = 0;
 8100944:	4b06      	ldr	r3, [pc, #24]	; (8100960 <MX_FDCAN1_Init+0x1a0>)
 8100946:	2200      	movs	r2, #0
 8100948:	621a      	str	r2, [r3, #32]
  /* USER CODE END FDCAN1_Init 2 */

}
 810094a:	bf00      	nop
 810094c:	bd80      	pop	{r7, pc}
 810094e:	bf00      	nop
 8100950:	10000458 	.word	0x10000458
 8100954:	4000a000 	.word	0x4000a000
 8100958:	100006c4 	.word	0x100006c4
 810095c:	1000067c 	.word	0x1000067c
 8100960:	100006a0 	.word	0x100006a0

08100964 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8100964:	b580      	push	{r7, lr}
 8100966:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8100968:	4b1b      	ldr	r3, [pc, #108]	; (81009d8 <MX_I2C1_Init+0x74>)
 810096a:	4a1c      	ldr	r2, [pc, #112]	; (81009dc <MX_I2C1_Init+0x78>)
 810096c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00909FCE;
 810096e:	4b1a      	ldr	r3, [pc, #104]	; (81009d8 <MX_I2C1_Init+0x74>)
 8100970:	4a1b      	ldr	r2, [pc, #108]	; (81009e0 <MX_I2C1_Init+0x7c>)
 8100972:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8100974:	4b18      	ldr	r3, [pc, #96]	; (81009d8 <MX_I2C1_Init+0x74>)
 8100976:	2200      	movs	r2, #0
 8100978:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 810097a:	4b17      	ldr	r3, [pc, #92]	; (81009d8 <MX_I2C1_Init+0x74>)
 810097c:	2201      	movs	r2, #1
 810097e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8100980:	4b15      	ldr	r3, [pc, #84]	; (81009d8 <MX_I2C1_Init+0x74>)
 8100982:	2200      	movs	r2, #0
 8100984:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8100986:	4b14      	ldr	r3, [pc, #80]	; (81009d8 <MX_I2C1_Init+0x74>)
 8100988:	2200      	movs	r2, #0
 810098a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 810098c:	4b12      	ldr	r3, [pc, #72]	; (81009d8 <MX_I2C1_Init+0x74>)
 810098e:	2200      	movs	r2, #0
 8100990:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8100992:	4b11      	ldr	r3, [pc, #68]	; (81009d8 <MX_I2C1_Init+0x74>)
 8100994:	2200      	movs	r2, #0
 8100996:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8100998:	4b0f      	ldr	r3, [pc, #60]	; (81009d8 <MX_I2C1_Init+0x74>)
 810099a:	2200      	movs	r2, #0
 810099c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 810099e:	480e      	ldr	r0, [pc, #56]	; (81009d8 <MX_I2C1_Init+0x74>)
 81009a0:	f002 fcc8 	bl	8103334 <HAL_I2C_Init>
 81009a4:	4603      	mov	r3, r0
 81009a6:	2b00      	cmp	r3, #0
 81009a8:	d001      	beq.n	81009ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 81009aa:	f000 fc57 	bl	810125c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 81009ae:	2100      	movs	r1, #0
 81009b0:	4809      	ldr	r0, [pc, #36]	; (81009d8 <MX_I2C1_Init+0x74>)
 81009b2:	f003 fa35 	bl	8103e20 <HAL_I2CEx_ConfigAnalogFilter>
 81009b6:	4603      	mov	r3, r0
 81009b8:	2b00      	cmp	r3, #0
 81009ba:	d001      	beq.n	81009c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 81009bc:	f000 fc4e 	bl	810125c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 81009c0:	2100      	movs	r1, #0
 81009c2:	4805      	ldr	r0, [pc, #20]	; (81009d8 <MX_I2C1_Init+0x74>)
 81009c4:	f003 fa77 	bl	8103eb6 <HAL_I2CEx_ConfigDigitalFilter>
 81009c8:	4603      	mov	r3, r0
 81009ca:	2b00      	cmp	r3, #0
 81009cc:	d001      	beq.n	81009d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 81009ce:	f000 fc45 	bl	810125c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 81009d2:	bf00      	nop
 81009d4:	bd80      	pop	{r7, pc}
 81009d6:	bf00      	nop
 81009d8:	100004f8 	.word	0x100004f8
 81009dc:	40005400 	.word	0x40005400
 81009e0:	00909fce 	.word	0x00909fce

081009e4 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 81009e4:	b580      	push	{r7, lr}
 81009e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 81009e8:	4b1b      	ldr	r3, [pc, #108]	; (8100a58 <MX_I2C4_Init+0x74>)
 81009ea:	4a1c      	ldr	r2, [pc, #112]	; (8100a5c <MX_I2C4_Init+0x78>)
 81009ec:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00909FCE;
 81009ee:	4b1a      	ldr	r3, [pc, #104]	; (8100a58 <MX_I2C4_Init+0x74>)
 81009f0:	4a1b      	ldr	r2, [pc, #108]	; (8100a60 <MX_I2C4_Init+0x7c>)
 81009f2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 81009f4:	4b18      	ldr	r3, [pc, #96]	; (8100a58 <MX_I2C4_Init+0x74>)
 81009f6:	2200      	movs	r2, #0
 81009f8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 81009fa:	4b17      	ldr	r3, [pc, #92]	; (8100a58 <MX_I2C4_Init+0x74>)
 81009fc:	2201      	movs	r2, #1
 81009fe:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8100a00:	4b15      	ldr	r3, [pc, #84]	; (8100a58 <MX_I2C4_Init+0x74>)
 8100a02:	2200      	movs	r2, #0
 8100a04:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8100a06:	4b14      	ldr	r3, [pc, #80]	; (8100a58 <MX_I2C4_Init+0x74>)
 8100a08:	2200      	movs	r2, #0
 8100a0a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8100a0c:	4b12      	ldr	r3, [pc, #72]	; (8100a58 <MX_I2C4_Init+0x74>)
 8100a0e:	2200      	movs	r2, #0
 8100a10:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8100a12:	4b11      	ldr	r3, [pc, #68]	; (8100a58 <MX_I2C4_Init+0x74>)
 8100a14:	2200      	movs	r2, #0
 8100a16:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8100a18:	4b0f      	ldr	r3, [pc, #60]	; (8100a58 <MX_I2C4_Init+0x74>)
 8100a1a:	2200      	movs	r2, #0
 8100a1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8100a1e:	480e      	ldr	r0, [pc, #56]	; (8100a58 <MX_I2C4_Init+0x74>)
 8100a20:	f002 fc88 	bl	8103334 <HAL_I2C_Init>
 8100a24:	4603      	mov	r3, r0
 8100a26:	2b00      	cmp	r3, #0
 8100a28:	d001      	beq.n	8100a2e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8100a2a:	f000 fc17 	bl	810125c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8100a2e:	2100      	movs	r1, #0
 8100a30:	4809      	ldr	r0, [pc, #36]	; (8100a58 <MX_I2C4_Init+0x74>)
 8100a32:	f003 f9f5 	bl	8103e20 <HAL_I2CEx_ConfigAnalogFilter>
 8100a36:	4603      	mov	r3, r0
 8100a38:	2b00      	cmp	r3, #0
 8100a3a:	d001      	beq.n	8100a40 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8100a3c:	f000 fc0e 	bl	810125c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8100a40:	2100      	movs	r1, #0
 8100a42:	4805      	ldr	r0, [pc, #20]	; (8100a58 <MX_I2C4_Init+0x74>)
 8100a44:	f003 fa37 	bl	8103eb6 <HAL_I2CEx_ConfigDigitalFilter>
 8100a48:	4603      	mov	r3, r0
 8100a4a:	2b00      	cmp	r3, #0
 8100a4c:	d001      	beq.n	8100a52 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8100a4e:	f000 fc05 	bl	810125c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8100a52:	bf00      	nop
 8100a54:	bd80      	pop	{r7, pc}
 8100a56:	bf00      	nop
 8100a58:	1000054c 	.word	0x1000054c
 8100a5c:	58001c00 	.word	0x58001c00
 8100a60:	00909fce 	.word	0x00909fce

08100a64 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8100a64:	b580      	push	{r7, lr}
 8100a66:	b08a      	sub	sp, #40	; 0x28
 8100a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8100a6a:	f107 031c 	add.w	r3, r7, #28
 8100a6e:	2200      	movs	r2, #0
 8100a70:	601a      	str	r2, [r3, #0]
 8100a72:	605a      	str	r2, [r3, #4]
 8100a74:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8100a76:	463b      	mov	r3, r7
 8100a78:	2200      	movs	r2, #0
 8100a7a:	601a      	str	r2, [r3, #0]
 8100a7c:	605a      	str	r2, [r3, #4]
 8100a7e:	609a      	str	r2, [r3, #8]
 8100a80:	60da      	str	r2, [r3, #12]
 8100a82:	611a      	str	r2, [r3, #16]
 8100a84:	615a      	str	r2, [r3, #20]
 8100a86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8100a88:	4b26      	ldr	r3, [pc, #152]	; (8100b24 <MX_TIM3_Init+0xc0>)
 8100a8a:	4a27      	ldr	r2, [pc, #156]	; (8100b28 <MX_TIM3_Init+0xc4>)
 8100a8c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 74;
 8100a8e:	4b25      	ldr	r3, [pc, #148]	; (8100b24 <MX_TIM3_Init+0xc0>)
 8100a90:	224a      	movs	r2, #74	; 0x4a
 8100a92:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100a94:	4b23      	ldr	r3, [pc, #140]	; (8100b24 <MX_TIM3_Init+0xc0>)
 8100a96:	2200      	movs	r2, #0
 8100a98:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8100a9a:	4b22      	ldr	r3, [pc, #136]	; (8100b24 <MX_TIM3_Init+0xc0>)
 8100a9c:	2264      	movs	r2, #100	; 0x64
 8100a9e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8100aa0:	4b20      	ldr	r3, [pc, #128]	; (8100b24 <MX_TIM3_Init+0xc0>)
 8100aa2:	2200      	movs	r2, #0
 8100aa4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8100aa6:	4b1f      	ldr	r3, [pc, #124]	; (8100b24 <MX_TIM3_Init+0xc0>)
 8100aa8:	2200      	movs	r2, #0
 8100aaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8100aac:	481d      	ldr	r0, [pc, #116]	; (8100b24 <MX_TIM3_Init+0xc0>)
 8100aae:	f005 f88f 	bl	8105bd0 <HAL_TIM_PWM_Init>
 8100ab2:	4603      	mov	r3, r0
 8100ab4:	2b00      	cmp	r3, #0
 8100ab6:	d001      	beq.n	8100abc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8100ab8:	f000 fbd0 	bl	810125c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8100abc:	2300      	movs	r3, #0
 8100abe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8100ac0:	2300      	movs	r3, #0
 8100ac2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8100ac4:	f107 031c 	add.w	r3, r7, #28
 8100ac8:	4619      	mov	r1, r3
 8100aca:	4816      	ldr	r0, [pc, #88]	; (8100b24 <MX_TIM3_Init+0xc0>)
 8100acc:	f005 ffd8 	bl	8106a80 <HAL_TIMEx_MasterConfigSynchronization>
 8100ad0:	4603      	mov	r3, r0
 8100ad2:	2b00      	cmp	r3, #0
 8100ad4:	d001      	beq.n	8100ada <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8100ad6:	f000 fbc1 	bl	810125c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8100ada:	2360      	movs	r3, #96	; 0x60
 8100adc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8100ade:	2300      	movs	r3, #0
 8100ae0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8100ae2:	2300      	movs	r3, #0
 8100ae4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8100ae6:	2300      	movs	r3, #0
 8100ae8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8100aea:	463b      	mov	r3, r7
 8100aec:	2200      	movs	r2, #0
 8100aee:	4619      	mov	r1, r3
 8100af0:	480c      	ldr	r0, [pc, #48]	; (8100b24 <MX_TIM3_Init+0xc0>)
 8100af2:	f005 faf3 	bl	81060dc <HAL_TIM_PWM_ConfigChannel>
 8100af6:	4603      	mov	r3, r0
 8100af8:	2b00      	cmp	r3, #0
 8100afa:	d001      	beq.n	8100b00 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8100afc:	f000 fbae 	bl	810125c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8100b00:	463b      	mov	r3, r7
 8100b02:	2204      	movs	r2, #4
 8100b04:	4619      	mov	r1, r3
 8100b06:	4807      	ldr	r0, [pc, #28]	; (8100b24 <MX_TIM3_Init+0xc0>)
 8100b08:	f005 fae8 	bl	81060dc <HAL_TIM_PWM_ConfigChannel>
 8100b0c:	4603      	mov	r3, r0
 8100b0e:	2b00      	cmp	r3, #0
 8100b10:	d001      	beq.n	8100b16 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8100b12:	f000 fba3 	bl	810125c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8100b16:	4803      	ldr	r0, [pc, #12]	; (8100b24 <MX_TIM3_Init+0xc0>)
 8100b18:	f000 fd3c 	bl	8101594 <HAL_TIM_MspPostInit>

}
 8100b1c:	bf00      	nop
 8100b1e:	3728      	adds	r7, #40	; 0x28
 8100b20:	46bd      	mov	sp, r7
 8100b22:	bd80      	pop	{r7, pc}
 8100b24:	100005a0 	.word	0x100005a0
 8100b28:	40000400 	.word	0x40000400

08100b2c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8100b2c:	b580      	push	{r7, lr}
 8100b2e:	b084      	sub	sp, #16
 8100b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8100b32:	1d3b      	adds	r3, r7, #4
 8100b34:	2200      	movs	r2, #0
 8100b36:	601a      	str	r2, [r3, #0]
 8100b38:	605a      	str	r2, [r3, #4]
 8100b3a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8100b3c:	4b14      	ldr	r3, [pc, #80]	; (8100b90 <MX_TIM7_Init+0x64>)
 8100b3e:	4a15      	ldr	r2, [pc, #84]	; (8100b94 <MX_TIM7_Init+0x68>)
 8100b40:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7499;
 8100b42:	4b13      	ldr	r3, [pc, #76]	; (8100b90 <MX_TIM7_Init+0x64>)
 8100b44:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8100b48:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100b4a:	4b11      	ldr	r3, [pc, #68]	; (8100b90 <MX_TIM7_Init+0x64>)
 8100b4c:	2200      	movs	r2, #0
 8100b4e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 250;
 8100b50:	4b0f      	ldr	r3, [pc, #60]	; (8100b90 <MX_TIM7_Init+0x64>)
 8100b52:	22fa      	movs	r2, #250	; 0xfa
 8100b54:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8100b56:	4b0e      	ldr	r3, [pc, #56]	; (8100b90 <MX_TIM7_Init+0x64>)
 8100b58:	2200      	movs	r2, #0
 8100b5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8100b5c:	480c      	ldr	r0, [pc, #48]	; (8100b90 <MX_TIM7_Init+0x64>)
 8100b5e:	f004 ff67 	bl	8105a30 <HAL_TIM_Base_Init>
 8100b62:	4603      	mov	r3, r0
 8100b64:	2b00      	cmp	r3, #0
 8100b66:	d001      	beq.n	8100b6c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8100b68:	f000 fb78 	bl	810125c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8100b6c:	2300      	movs	r3, #0
 8100b6e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8100b70:	2300      	movs	r3, #0
 8100b72:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8100b74:	1d3b      	adds	r3, r7, #4
 8100b76:	4619      	mov	r1, r3
 8100b78:	4805      	ldr	r0, [pc, #20]	; (8100b90 <MX_TIM7_Init+0x64>)
 8100b7a:	f005 ff81 	bl	8106a80 <HAL_TIMEx_MasterConfigSynchronization>
 8100b7e:	4603      	mov	r3, r0
 8100b80:	2b00      	cmp	r3, #0
 8100b82:	d001      	beq.n	8100b88 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8100b84:	f000 fb6a 	bl	810125c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8100b88:	bf00      	nop
 8100b8a:	3710      	adds	r7, #16
 8100b8c:	46bd      	mov	sp, r7
 8100b8e:	bd80      	pop	{r7, pc}
 8100b90:	100005ec 	.word	0x100005ec
 8100b94:	40001400 	.word	0x40001400

08100b98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100b98:	b580      	push	{r7, lr}
 8100b9a:	b08c      	sub	sp, #48	; 0x30
 8100b9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100b9e:	f107 031c 	add.w	r3, r7, #28
 8100ba2:	2200      	movs	r2, #0
 8100ba4:	601a      	str	r2, [r3, #0]
 8100ba6:	605a      	str	r2, [r3, #4]
 8100ba8:	609a      	str	r2, [r3, #8]
 8100baa:	60da      	str	r2, [r3, #12]
 8100bac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8100bae:	4b58      	ldr	r3, [pc, #352]	; (8100d10 <MX_GPIO_Init+0x178>)
 8100bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100bb4:	4a56      	ldr	r2, [pc, #344]	; (8100d10 <MX_GPIO_Init+0x178>)
 8100bb6:	f043 0310 	orr.w	r3, r3, #16
 8100bba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100bbe:	4b54      	ldr	r3, [pc, #336]	; (8100d10 <MX_GPIO_Init+0x178>)
 8100bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100bc4:	f003 0310 	and.w	r3, r3, #16
 8100bc8:	61bb      	str	r3, [r7, #24]
 8100bca:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100bcc:	4b50      	ldr	r3, [pc, #320]	; (8100d10 <MX_GPIO_Init+0x178>)
 8100bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100bd2:	4a4f      	ldr	r2, [pc, #316]	; (8100d10 <MX_GPIO_Init+0x178>)
 8100bd4:	f043 0301 	orr.w	r3, r3, #1
 8100bd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100bdc:	4b4c      	ldr	r3, [pc, #304]	; (8100d10 <MX_GPIO_Init+0x178>)
 8100bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100be2:	f003 0301 	and.w	r3, r3, #1
 8100be6:	617b      	str	r3, [r7, #20]
 8100be8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100bea:	4b49      	ldr	r3, [pc, #292]	; (8100d10 <MX_GPIO_Init+0x178>)
 8100bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100bf0:	4a47      	ldr	r2, [pc, #284]	; (8100d10 <MX_GPIO_Init+0x178>)
 8100bf2:	f043 0302 	orr.w	r3, r3, #2
 8100bf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100bfa:	4b45      	ldr	r3, [pc, #276]	; (8100d10 <MX_GPIO_Init+0x178>)
 8100bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c00:	f003 0302 	and.w	r3, r3, #2
 8100c04:	613b      	str	r3, [r7, #16]
 8100c06:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8100c08:	4b41      	ldr	r3, [pc, #260]	; (8100d10 <MX_GPIO_Init+0x178>)
 8100c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c0e:	4a40      	ldr	r2, [pc, #256]	; (8100d10 <MX_GPIO_Init+0x178>)
 8100c10:	f043 0320 	orr.w	r3, r3, #32
 8100c14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100c18:	4b3d      	ldr	r3, [pc, #244]	; (8100d10 <MX_GPIO_Init+0x178>)
 8100c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c1e:	f003 0320 	and.w	r3, r3, #32
 8100c22:	60fb      	str	r3, [r7, #12]
 8100c24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8100c26:	4b3a      	ldr	r3, [pc, #232]	; (8100d10 <MX_GPIO_Init+0x178>)
 8100c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c2c:	4a38      	ldr	r2, [pc, #224]	; (8100d10 <MX_GPIO_Init+0x178>)
 8100c2e:	f043 0308 	orr.w	r3, r3, #8
 8100c32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100c36:	4b36      	ldr	r3, [pc, #216]	; (8100d10 <MX_GPIO_Init+0x178>)
 8100c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c3c:	f003 0308 	and.w	r3, r3, #8
 8100c40:	60bb      	str	r3, [r7, #8]
 8100c42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8100c44:	4b32      	ldr	r3, [pc, #200]	; (8100d10 <MX_GPIO_Init+0x178>)
 8100c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c4a:	4a31      	ldr	r2, [pc, #196]	; (8100d10 <MX_GPIO_Init+0x178>)
 8100c4c:	f043 0304 	orr.w	r3, r3, #4
 8100c50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100c54:	4b2e      	ldr	r3, [pc, #184]	; (8100d10 <MX_GPIO_Init+0x178>)
 8100c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c5a:	f003 0304 	and.w	r3, r3, #4
 8100c5e:	607b      	str	r3, [r7, #4]
 8100c60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8100c62:	2200      	movs	r2, #0
 8100c64:	f244 0101 	movw	r1, #16385	; 0x4001
 8100c68:	482a      	ldr	r0, [pc, #168]	; (8100d14 <MX_GPIO_Init+0x17c>)
 8100c6a:	f002 fae9 	bl	8103240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8100c6e:	2200      	movs	r2, #0
 8100c70:	2102      	movs	r1, #2
 8100c72:	4829      	ldr	r0, [pc, #164]	; (8100d18 <MX_GPIO_Init+0x180>)
 8100c74:	f002 fae4 	bl	8103240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DOWN_Pin */
  GPIO_InitStruct.Pin = DOWN_Pin;
 8100c78:	2304      	movs	r3, #4
 8100c7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8100c7c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8100c80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100c82:	2300      	movs	r3, #0
 8100c84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DOWN_GPIO_Port, &GPIO_InitStruct);
 8100c86:	f107 031c 	add.w	r3, r7, #28
 8100c8a:	4619      	mov	r1, r3
 8100c8c:	4822      	ldr	r0, [pc, #136]	; (8100d18 <MX_GPIO_Init+0x180>)
 8100c8e:	f002 f927 	bl	8102ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8100c92:	f244 0301 	movw	r3, #16385	; 0x4001
 8100c96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100c98:	2301      	movs	r3, #1
 8100c9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8100c9c:	2301      	movs	r3, #1
 8100c9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8100ca0:	2302      	movs	r3, #2
 8100ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8100ca4:	f107 031c 	add.w	r3, r7, #28
 8100ca8:	4619      	mov	r1, r3
 8100caa:	481a      	ldr	r0, [pc, #104]	; (8100d14 <MX_GPIO_Init+0x17c>)
 8100cac:	f002 f918 	bl	8102ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : UP_Pin */
  GPIO_InitStruct.Pin = UP_Pin;
 8100cb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8100cb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8100cb6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8100cba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100cbc:	2300      	movs	r3, #0
 8100cbe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UP_GPIO_Port, &GPIO_InitStruct);
 8100cc0:	f107 031c 	add.w	r3, r7, #28
 8100cc4:	4619      	mov	r1, r3
 8100cc6:	4815      	ldr	r0, [pc, #84]	; (8100d1c <MX_GPIO_Init+0x184>)
 8100cc8:	f002 f90a 	bl	8102ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8100ccc:	2302      	movs	r3, #2
 8100cce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100cd0:	2301      	movs	r3, #1
 8100cd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8100cd4:	2301      	movs	r3, #1
 8100cd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8100cd8:	2302      	movs	r3, #2
 8100cda:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8100cdc:	f107 031c 	add.w	r3, r7, #28
 8100ce0:	4619      	mov	r1, r3
 8100ce2:	480d      	ldr	r0, [pc, #52]	; (8100d18 <MX_GPIO_Init+0x180>)
 8100ce4:	f002 f8fc 	bl	8102ee0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8100ce8:	2200      	movs	r2, #0
 8100cea:	2100      	movs	r1, #0
 8100cec:	2008      	movs	r0, #8
 8100cee:	f000 fede 	bl	8101aae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8100cf2:	2008      	movs	r0, #8
 8100cf4:	f000 fef5 	bl	8101ae2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8100cf8:	2200      	movs	r2, #0
 8100cfa:	2100      	movs	r1, #0
 8100cfc:	2028      	movs	r0, #40	; 0x28
 8100cfe:	f000 fed6 	bl	8101aae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8100d02:	2028      	movs	r0, #40	; 0x28
 8100d04:	f000 feed 	bl	8101ae2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8100d08:	bf00      	nop
 8100d0a:	3730      	adds	r7, #48	; 0x30
 8100d0c:	46bd      	mov	sp, r7
 8100d0e:	bd80      	pop	{r7, pc}
 8100d10:	58024400 	.word	0x58024400
 8100d14:	58020400 	.word	0x58020400
 8100d18:	58021000 	.word	0x58021000
 8100d1c:	58020c00 	.word	0x58020c00

08100d20 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
//INTERRUPCIÓN DE TIMERS
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8100d20:	b580      	push	{r7, lr}
 8100d22:	b084      	sub	sp, #16
 8100d24:	af00      	add	r7, sp, #0
 8100d26:	6078      	str	r0, [r7, #4]
	if(htim == &htim7){
 8100d28:	687b      	ldr	r3, [r7, #4]
 8100d2a:	4a76      	ldr	r2, [pc, #472]	; (8100f04 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8100d2c:	4293      	cmp	r3, r2
 8100d2e:	f040 80e4 	bne.w	8100efa <HAL_TIM_PeriodElapsedCallback+0x1da>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8100d32:	2101      	movs	r1, #1
 8100d34:	4874      	ldr	r0, [pc, #464]	; (8100f08 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8100d36:	f002 fa9c 	bl	8103272 <HAL_GPIO_TogglePin>
		AS5600_read_angle();
 8100d3a:	f000 f927 	bl	8100f8c <AS5600_read_angle>
		angleDegrees = (uint16_t)(angle* 360.0f/4096.0f);
 8100d3e:	4b73      	ldr	r3, [pc, #460]	; (8100f0c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8100d40:	881b      	ldrh	r3, [r3, #0]
 8100d42:	ee07 3a90 	vmov	s15, r3
 8100d46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8100d4a:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8100f10 <HAL_TIM_PeriodElapsedCallback+0x1f0>
 8100d4e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8100d52:	eddf 6a70 	vldr	s13, [pc, #448]	; 8100f14 <HAL_TIM_PeriodElapsedCallback+0x1f4>
 8100d56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8100d5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8100d5e:	ee17 3a90 	vmov	r3, s15
 8100d62:	b29a      	uxth	r2, r3
 8100d64:	4b6c      	ldr	r3, [pc, #432]	; (8100f18 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8100d66:	801a      	strh	r2, [r3, #0]
		if(referencia < 5){
			referencia = 5;
		}*/


		if((angleDegrees >  300) && (angleDegrees < 360)){
 8100d68:	4b6b      	ldr	r3, [pc, #428]	; (8100f18 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8100d6a:	881b      	ldrh	r3, [r3, #0]
 8100d6c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8100d70:	d907      	bls.n	8100d82 <HAL_TIM_PeriodElapsedCallback+0x62>
 8100d72:	4b69      	ldr	r3, [pc, #420]	; (8100f18 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8100d74:	881b      	ldrh	r3, [r3, #0]
 8100d76:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8100d7a:	d202      	bcs.n	8100d82 <HAL_TIM_PeriodElapsedCallback+0x62>
			angleDegrees = 0;
 8100d7c:	4b66      	ldr	r3, [pc, #408]	; (8100f18 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8100d7e:	2200      	movs	r2, #0
 8100d80:	801a      	strh	r2, [r3, #0]
		if((angleDegrees >  72) && (angleDegrees < 90)){
			angleDegrees = 72;
		}*/


		errorActual = referencia - angleDegrees;
 8100d82:	4b66      	ldr	r3, [pc, #408]	; (8100f1c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8100d84:	881a      	ldrh	r2, [r3, #0]
 8100d86:	4b64      	ldr	r3, [pc, #400]	; (8100f18 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8100d88:	881b      	ldrh	r3, [r3, #0]
 8100d8a:	1ad3      	subs	r3, r2, r3
 8100d8c:	b29b      	uxth	r3, r3
 8100d8e:	b21a      	sxth	r2, r3
 8100d90:	4b63      	ldr	r3, [pc, #396]	; (8100f20 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8100d92:	801a      	strh	r2, [r3, #0]
		errorActual = (errorActual*20)/72;
 8100d94:	4b62      	ldr	r3, [pc, #392]	; (8100f20 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8100d96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8100d9a:	461a      	mov	r2, r3
 8100d9c:	4613      	mov	r3, r2
 8100d9e:	009b      	lsls	r3, r3, #2
 8100da0:	4413      	add	r3, r2
 8100da2:	009b      	lsls	r3, r3, #2
 8100da4:	4a5f      	ldr	r2, [pc, #380]	; (8100f24 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8100da6:	fb82 1203 	smull	r1, r2, r2, r3
 8100daa:	1112      	asrs	r2, r2, #4
 8100dac:	17db      	asrs	r3, r3, #31
 8100dae:	1ad3      	subs	r3, r2, r3
 8100db0:	b21a      	sxth	r2, r3
 8100db2:	4b5b      	ldr	r3, [pc, #364]	; (8100f20 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8100db4:	801a      	strh	r2, [r3, #0]

		Gn = (Kp*errorActual)+((Kd/Ts)*(errorActual-errorAnterior))+((Ki*Ts)*(errorActual+errorAnterior));
 8100db6:	4b5a      	ldr	r3, [pc, #360]	; (8100f20 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8100db8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8100dbc:	ee07 3a90 	vmov	s15, r3
 8100dc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8100dc4:	4b58      	ldr	r3, [pc, #352]	; (8100f28 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8100dc6:	edd3 7a00 	vldr	s15, [r3]
 8100dca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8100dce:	4b57      	ldr	r3, [pc, #348]	; (8100f2c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8100dd0:	ed93 6a00 	vldr	s12, [r3]
 8100dd4:	4b56      	ldr	r3, [pc, #344]	; (8100f30 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8100dd6:	edd3 7a00 	vldr	s15, [r3]
 8100dda:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8100dde:	4b50      	ldr	r3, [pc, #320]	; (8100f20 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8100de0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8100de4:	461a      	mov	r2, r3
 8100de6:	4b53      	ldr	r3, [pc, #332]	; (8100f34 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8100de8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8100dec:	1ad3      	subs	r3, r2, r3
 8100dee:	ee07 3a90 	vmov	s15, r3
 8100df2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8100df6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8100dfa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8100dfe:	4b4e      	ldr	r3, [pc, #312]	; (8100f38 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8100e00:	edd3 6a00 	vldr	s13, [r3]
 8100e04:	4b4a      	ldr	r3, [pc, #296]	; (8100f30 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8100e06:	edd3 7a00 	vldr	s15, [r3]
 8100e0a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8100e0e:	4b44      	ldr	r3, [pc, #272]	; (8100f20 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8100e10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8100e14:	461a      	mov	r2, r3
 8100e16:	4b47      	ldr	r3, [pc, #284]	; (8100f34 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8100e18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8100e1c:	4413      	add	r3, r2
 8100e1e:	ee07 3a90 	vmov	s15, r3
 8100e22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8100e26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8100e2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8100e2e:	4b43      	ldr	r3, [pc, #268]	; (8100f3c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8100e30:	edc3 7a00 	vstr	s15, [r3]

		//Gn = (Kp*errorActual)+((Ki*Ts)*(errorActual+errorAnterior));

		if(errorActual < 0){
 8100e34:	4b3a      	ldr	r3, [pc, #232]	; (8100f20 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8100e36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8100e3a:	2b00      	cmp	r3, #0
 8100e3c:	da2c      	bge.n	8100e98 <HAL_TIM_PeriodElapsedCallback+0x178>
			  uint8_t valPWM = __HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_1);
 8100e3e:	4b40      	ldr	r3, [pc, #256]	; (8100f40 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8100e40:	681b      	ldr	r3, [r3, #0]
 8100e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8100e44:	73bb      	strb	r3, [r7, #14]
			  CicloUtil = (uint8_t)(((Gn/(-72))*20)+valPWM);
 8100e46:	4b3d      	ldr	r3, [pc, #244]	; (8100f3c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8100e48:	ed93 7a00 	vldr	s14, [r3]
 8100e4c:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8100f44 <HAL_TIM_PeriodElapsedCallback+0x224>
 8100e50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8100e54:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8100e58:	ee27 7a87 	vmul.f32	s14, s15, s14
 8100e5c:	7bbb      	ldrb	r3, [r7, #14]
 8100e5e:	ee07 3a90 	vmov	s15, r3
 8100e62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8100e66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8100e6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8100e6e:	edc7 7a00 	vstr	s15, [r7]
 8100e72:	783b      	ldrb	r3, [r7, #0]
 8100e74:	b2da      	uxtb	r2, r3
 8100e76:	4b34      	ldr	r3, [pc, #208]	; (8100f48 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8100e78:	701a      	strb	r2, [r3, #0]
		        if(CicloUtil > 20){
 8100e7a:	4b33      	ldr	r3, [pc, #204]	; (8100f48 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8100e7c:	781b      	ldrb	r3, [r3, #0]
 8100e7e:	2b14      	cmp	r3, #20
 8100e80:	d902      	bls.n	8100e88 <HAL_TIM_PeriodElapsedCallback+0x168>
		        	CicloUtil = 20;
 8100e82:	4b31      	ldr	r3, [pc, #196]	; (8100f48 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8100e84:	2214      	movs	r2, #20
 8100e86:	701a      	strb	r2, [r3, #0]
		        }
			  TIM3->CCR2 = 0;
 8100e88:	4b30      	ldr	r3, [pc, #192]	; (8100f4c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8100e8a:	2200      	movs	r2, #0
 8100e8c:	639a      	str	r2, [r3, #56]	; 0x38
			  TIM3->CCR1 = CicloUtil;
 8100e8e:	4b2e      	ldr	r3, [pc, #184]	; (8100f48 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8100e90:	781a      	ldrb	r2, [r3, #0]
 8100e92:	4b2e      	ldr	r3, [pc, #184]	; (8100f4c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8100e94:	635a      	str	r2, [r3, #52]	; 0x34
 8100e96:	e02b      	b.n	8100ef0 <HAL_TIM_PeriodElapsedCallback+0x1d0>
		}else{
			uint8_t valPWM2 = __HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_2);
 8100e98:	4b29      	ldr	r3, [pc, #164]	; (8100f40 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8100e9a:	681b      	ldr	r3, [r3, #0]
 8100e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8100e9e:	73fb      	strb	r3, [r7, #15]
			CicloUtil = (uint8_t)(((Gn/(72))*20)+valPWM2);
 8100ea0:	4b26      	ldr	r3, [pc, #152]	; (8100f3c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8100ea2:	ed93 7a00 	vldr	s14, [r3]
 8100ea6:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8100f50 <HAL_TIM_PeriodElapsedCallback+0x230>
 8100eaa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8100eae:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8100eb2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8100eb6:	7bfb      	ldrb	r3, [r7, #15]
 8100eb8:	ee07 3a90 	vmov	s15, r3
 8100ebc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8100ec0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8100ec4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8100ec8:	edc7 7a00 	vstr	s15, [r7]
 8100ecc:	783b      	ldrb	r3, [r7, #0]
 8100ece:	b2da      	uxtb	r2, r3
 8100ed0:	4b1d      	ldr	r3, [pc, #116]	; (8100f48 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8100ed2:	701a      	strb	r2, [r3, #0]
	        if(CicloUtil > 20){
 8100ed4:	4b1c      	ldr	r3, [pc, #112]	; (8100f48 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8100ed6:	781b      	ldrb	r3, [r3, #0]
 8100ed8:	2b14      	cmp	r3, #20
 8100eda:	d902      	bls.n	8100ee2 <HAL_TIM_PeriodElapsedCallback+0x1c2>
	        	CicloUtil = 20;
 8100edc:	4b1a      	ldr	r3, [pc, #104]	; (8100f48 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8100ede:	2214      	movs	r2, #20
 8100ee0:	701a      	strb	r2, [r3, #0]
	        }
			TIM3->CCR2 = CicloUtil;
 8100ee2:	4b19      	ldr	r3, [pc, #100]	; (8100f48 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8100ee4:	781a      	ldrb	r2, [r3, #0]
 8100ee6:	4b19      	ldr	r3, [pc, #100]	; (8100f4c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8100ee8:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3->CCR1 = 0;
 8100eea:	4b18      	ldr	r3, [pc, #96]	; (8100f4c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8100eec:	2200      	movs	r2, #0
 8100eee:	635a      	str	r2, [r3, #52]	; 0x34

		//bufferMAT[0] = (uint8_t)referencia;
		//bufferMAT[1] = (uint8_t)angleDegrees;

		//len = sprintf(buffer, "%u \t %u \n\r", referencia, angleDegrees);
		errorAnterior = errorActual;
 8100ef0:	4b0b      	ldr	r3, [pc, #44]	; (8100f20 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8100ef2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8100ef6:	4b0f      	ldr	r3, [pc, #60]	; (8100f34 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8100ef8:	801a      	strh	r2, [r3, #0]

		//HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);

		//HAL_UART_Transmit(&huart3, (uint8_t *) bufferMAT, len, 100);
	}
}
 8100efa:	bf00      	nop
 8100efc:	3710      	adds	r7, #16
 8100efe:	46bd      	mov	sp, r7
 8100f00:	bd80      	pop	{r7, pc}
 8100f02:	bf00      	nop
 8100f04:	100005ec 	.word	0x100005ec
 8100f08:	58020400 	.word	0x58020400
 8100f0c:	10000638 	.word	0x10000638
 8100f10:	43b40000 	.word	0x43b40000
 8100f14:	45800000 	.word	0x45800000
 8100f18:	1000063a 	.word	0x1000063a
 8100f1c:	1000063c 	.word	0x1000063c
 8100f20:	1000063e 	.word	0x1000063e
 8100f24:	38e38e39 	.word	0x38e38e39
 8100f28:	1000000c 	.word	0x1000000c
 8100f2c:	10000014 	.word	0x10000014
 8100f30:	10000008 	.word	0x10000008
 8100f34:	10000640 	.word	0x10000640
 8100f38:	10000010 	.word	0x10000010
 8100f3c:	10000644 	.word	0x10000644
 8100f40:	100005a0 	.word	0x100005a0
 8100f44:	c2900000 	.word	0xc2900000
 8100f48:	10000648 	.word	0x10000648
 8100f4c:	40000400 	.word	0x40000400
 8100f50:	42900000 	.word	0x42900000

08100f54 <AS5600_init>:


//FUNCIONES DE ENCODER
void AS5600_init(void){
 8100f54:	b580      	push	{r7, lr}
 8100f56:	b086      	sub	sp, #24
 8100f58:	af04      	add	r7, sp, #16
	uint8_t statusReg = 0;
 8100f5a:	2300      	movs	r3, #0
 8100f5c:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status;

	status = HAL_I2C_Mem_Read(&hi2c4, AS5600_ADDRESS, STATUS, 1, &statusReg, 1, 100);
 8100f5e:	2364      	movs	r3, #100	; 0x64
 8100f60:	9302      	str	r3, [sp, #8]
 8100f62:	2301      	movs	r3, #1
 8100f64:	9301      	str	r3, [sp, #4]
 8100f66:	1dbb      	adds	r3, r7, #6
 8100f68:	9300      	str	r3, [sp, #0]
 8100f6a:	2301      	movs	r3, #1
 8100f6c:	220b      	movs	r2, #11
 8100f6e:	216c      	movs	r1, #108	; 0x6c
 8100f70:	4805      	ldr	r0, [pc, #20]	; (8100f88 <AS5600_init+0x34>)
 8100f72:	f002 fb83 	bl	810367c <HAL_I2C_Mem_Read>
 8100f76:	4603      	mov	r3, r0
 8100f78:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(50);
 8100f7a:	2032      	movs	r0, #50	; 0x32
 8100f7c:	f000 fc98 	bl	81018b0 <HAL_Delay>

	//Faltaría lo de checar el status
}
 8100f80:	bf00      	nop
 8100f82:	3708      	adds	r7, #8
 8100f84:	46bd      	mov	sp, r7
 8100f86:	bd80      	pop	{r7, pc}
 8100f88:	1000054c 	.word	0x1000054c

08100f8c <AS5600_read_angle>:

void AS5600_read_angle(void){
 8100f8c:	b580      	push	{r7, lr}
 8100f8e:	b086      	sub	sp, #24
 8100f90:	af04      	add	r7, sp, #16
	uint8_t data[2] = {0};
 8100f92:	2300      	movs	r3, #0
 8100f94:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c4, AS5600_ADDRESS, ANGLE_H, 1, data, 2, 100);
 8100f96:	2364      	movs	r3, #100	; 0x64
 8100f98:	9302      	str	r3, [sp, #8]
 8100f9a:	2302      	movs	r3, #2
 8100f9c:	9301      	str	r3, [sp, #4]
 8100f9e:	1d3b      	adds	r3, r7, #4
 8100fa0:	9300      	str	r3, [sp, #0]
 8100fa2:	2301      	movs	r3, #1
 8100fa4:	220e      	movs	r2, #14
 8100fa6:	216c      	movs	r1, #108	; 0x6c
 8100fa8:	4808      	ldr	r0, [pc, #32]	; (8100fcc <AS5600_read_angle+0x40>)
 8100faa:	f002 fb67 	bl	810367c <HAL_I2C_Mem_Read>
	angle = ((uint16_t)data[0]<<8) | data[1];
 8100fae:	793b      	ldrb	r3, [r7, #4]
 8100fb0:	021b      	lsls	r3, r3, #8
 8100fb2:	b21a      	sxth	r2, r3
 8100fb4:	797b      	ldrb	r3, [r7, #5]
 8100fb6:	b21b      	sxth	r3, r3
 8100fb8:	4313      	orrs	r3, r2
 8100fba:	b21b      	sxth	r3, r3
 8100fbc:	b29a      	uxth	r2, r3
 8100fbe:	4b04      	ldr	r3, [pc, #16]	; (8100fd0 <AS5600_read_angle+0x44>)
 8100fc0:	801a      	strh	r2, [r3, #0]

}
 8100fc2:	bf00      	nop
 8100fc4:	3708      	adds	r7, #8
 8100fc6:	46bd      	mov	sp, r7
 8100fc8:	bd80      	pop	{r7, pc}
 8100fca:	bf00      	nop
 8100fcc:	1000054c 	.word	0x1000054c
 8100fd0:	10000638 	.word	0x10000638

08100fd4 <HAL_GPIO_EXTI_Callback>:


//INTERRUPCIONES EXTERNAS
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8100fd4:	b580      	push	{r7, lr}
 8100fd6:	b082      	sub	sp, #8
 8100fd8:	af00      	add	r7, sp, #0
 8100fda:	4603      	mov	r3, r0
 8100fdc:	80fb      	strh	r3, [r7, #6]
	current_time = HAL_GetTick();
 8100fde:	f000 fc5b 	bl	8101898 <HAL_GetTick>
 8100fe2:	4603      	mov	r3, r0
 8100fe4:	4a25      	ldr	r2, [pc, #148]	; (810107c <HAL_GPIO_EXTI_Callback+0xa8>)
 8100fe6:	6013      	str	r3, [r2, #0]
	if(GPIO_Pin == UP_Pin){
 8100fe8:	88fb      	ldrh	r3, [r7, #6]
 8100fea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8100fee:	d11b      	bne.n	8101028 <HAL_GPIO_EXTI_Callback+0x54>
		if((current_time - last_int_time)>debounce){
 8100ff0:	4b22      	ldr	r3, [pc, #136]	; (810107c <HAL_GPIO_EXTI_Callback+0xa8>)
 8100ff2:	681a      	ldr	r2, [r3, #0]
 8100ff4:	4b22      	ldr	r3, [pc, #136]	; (8101080 <HAL_GPIO_EXTI_Callback+0xac>)
 8100ff6:	681b      	ldr	r3, [r3, #0]
 8100ff8:	1ad3      	subs	r3, r2, r3
 8100ffa:	4a22      	ldr	r2, [pc, #136]	; (8101084 <HAL_GPIO_EXTI_Callback+0xb0>)
 8100ffc:	7812      	ldrb	r2, [r2, #0]
 8100ffe:	4293      	cmp	r3, r2
 8101000:	d931      	bls.n	8101066 <HAL_GPIO_EXTI_Callback+0x92>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8101002:	2102      	movs	r1, #2
 8101004:	4820      	ldr	r0, [pc, #128]	; (8101088 <HAL_GPIO_EXTI_Callback+0xb4>)
 8101006:	f002 f934 	bl	8103272 <HAL_GPIO_TogglePin>
			if(referencia >= 90){
 810100a:	4b20      	ldr	r3, [pc, #128]	; (810108c <HAL_GPIO_EXTI_Callback+0xb8>)
 810100c:	881b      	ldrh	r3, [r3, #0]
 810100e:	2b59      	cmp	r3, #89	; 0x59
 8101010:	d903      	bls.n	810101a <HAL_GPIO_EXTI_Callback+0x46>
				referencia = 95;
 8101012:	4b1e      	ldr	r3, [pc, #120]	; (810108c <HAL_GPIO_EXTI_Callback+0xb8>)
 8101014:	225f      	movs	r2, #95	; 0x5f
 8101016:	801a      	strh	r2, [r3, #0]
 8101018:	e025      	b.n	8101066 <HAL_GPIO_EXTI_Callback+0x92>
			}else{
				referencia += 4;
 810101a:	4b1c      	ldr	r3, [pc, #112]	; (810108c <HAL_GPIO_EXTI_Callback+0xb8>)
 810101c:	881b      	ldrh	r3, [r3, #0]
 810101e:	3304      	adds	r3, #4
 8101020:	b29a      	uxth	r2, r3
 8101022:	4b1a      	ldr	r3, [pc, #104]	; (810108c <HAL_GPIO_EXTI_Callback+0xb8>)
 8101024:	801a      	strh	r2, [r3, #0]
 8101026:	e01e      	b.n	8101066 <HAL_GPIO_EXTI_Callback+0x92>
			}
		}

	}else if(GPIO_Pin == DOWN_Pin){
 8101028:	88fb      	ldrh	r3, [r7, #6]
 810102a:	2b04      	cmp	r3, #4
 810102c:	d11b      	bne.n	8101066 <HAL_GPIO_EXTI_Callback+0x92>
		if((current_time - last_int_time)>debounce){
 810102e:	4b13      	ldr	r3, [pc, #76]	; (810107c <HAL_GPIO_EXTI_Callback+0xa8>)
 8101030:	681a      	ldr	r2, [r3, #0]
 8101032:	4b13      	ldr	r3, [pc, #76]	; (8101080 <HAL_GPIO_EXTI_Callback+0xac>)
 8101034:	681b      	ldr	r3, [r3, #0]
 8101036:	1ad3      	subs	r3, r2, r3
 8101038:	4a12      	ldr	r2, [pc, #72]	; (8101084 <HAL_GPIO_EXTI_Callback+0xb0>)
 810103a:	7812      	ldrb	r2, [r2, #0]
 810103c:	4293      	cmp	r3, r2
 810103e:	d912      	bls.n	8101066 <HAL_GPIO_EXTI_Callback+0x92>
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8101040:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8101044:	4812      	ldr	r0, [pc, #72]	; (8101090 <HAL_GPIO_EXTI_Callback+0xbc>)
 8101046:	f002 f914 	bl	8103272 <HAL_GPIO_TogglePin>
			if(referencia <= 35){
 810104a:	4b10      	ldr	r3, [pc, #64]	; (810108c <HAL_GPIO_EXTI_Callback+0xb8>)
 810104c:	881b      	ldrh	r3, [r3, #0]
 810104e:	2b23      	cmp	r3, #35	; 0x23
 8101050:	d803      	bhi.n	810105a <HAL_GPIO_EXTI_Callback+0x86>
				referencia = 30;
 8101052:	4b0e      	ldr	r3, [pc, #56]	; (810108c <HAL_GPIO_EXTI_Callback+0xb8>)
 8101054:	221e      	movs	r2, #30
 8101056:	801a      	strh	r2, [r3, #0]
 8101058:	e005      	b.n	8101066 <HAL_GPIO_EXTI_Callback+0x92>
			}else{
				referencia -= 4;
 810105a:	4b0c      	ldr	r3, [pc, #48]	; (810108c <HAL_GPIO_EXTI_Callback+0xb8>)
 810105c:	881b      	ldrh	r3, [r3, #0]
 810105e:	3b04      	subs	r3, #4
 8101060:	b29a      	uxth	r2, r3
 8101062:	4b0a      	ldr	r3, [pc, #40]	; (810108c <HAL_GPIO_EXTI_Callback+0xb8>)
 8101064:	801a      	strh	r2, [r3, #0]
			}
		}

	}

	last_int_time = current_time;
 8101066:	4b05      	ldr	r3, [pc, #20]	; (810107c <HAL_GPIO_EXTI_Callback+0xa8>)
 8101068:	681b      	ldr	r3, [r3, #0]
 810106a:	4a05      	ldr	r2, [pc, #20]	; (8101080 <HAL_GPIO_EXTI_Callback+0xac>)
 810106c:	6013      	str	r3, [r2, #0]
	updateOLED();
 810106e:	f000 f863 	bl	8101138 <updateOLED>
}
 8101072:	bf00      	nop
 8101074:	3708      	adds	r7, #8
 8101076:	46bd      	mov	sp, r7
 8101078:	bd80      	pop	{r7, pc}
 810107a:	bf00      	nop
 810107c:	10000650 	.word	0x10000650
 8101080:	1000064c 	.word	0x1000064c
 8101084:	10000018 	.word	0x10000018
 8101088:	58021000 	.word	0x58021000
 810108c:	1000063c 	.word	0x1000063c
 8101090:	58020400 	.word	0x58020400

08101094 <HAL_FDCAN_RxFifo0Callback>:

//INTERRUPCIÓN DE CAN
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 8101094:	b580      	push	{r7, lr}
 8101096:	b082      	sub	sp, #8
 8101098:	af00      	add	r7, sp, #0
 810109a:	6078      	str	r0, [r7, #4]
 810109c:	6039      	str	r1, [r7, #0]

	if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK){
 810109e:	4b1f      	ldr	r3, [pc, #124]	; (810111c <HAL_FDCAN_RxFifo0Callback+0x88>)
 81010a0:	4a1f      	ldr	r2, [pc, #124]	; (8101120 <HAL_FDCAN_RxFifo0Callback+0x8c>)
 81010a2:	2140      	movs	r1, #64	; 0x40
 81010a4:	481f      	ldr	r0, [pc, #124]	; (8101124 <HAL_FDCAN_RxFifo0Callback+0x90>)
 81010a6:	f001 f825 	bl	81020f4 <HAL_FDCAN_GetRxMessage>
 81010aa:	4603      	mov	r3, r0
 81010ac:	2b00      	cmp	r3, #0
 81010ae:	d002      	beq.n	81010b6 <HAL_FDCAN_RxFifo0Callback+0x22>
	    Error_Handler();
 81010b0:	f000 f8d4 	bl	810125c <Error_Handler>
					  //HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
					  Error_Handler();
				  }
		  }
	}
}
 81010b4:	e02d      	b.n	8101112 <HAL_FDCAN_RxFifo0Callback+0x7e>
		 if (RxHeader.Identifier == 0x43) {
 81010b6:	4b1a      	ldr	r3, [pc, #104]	; (8101120 <HAL_FDCAN_RxFifo0Callback+0x8c>)
 81010b8:	681b      	ldr	r3, [r3, #0]
 81010ba:	2b43      	cmp	r3, #67	; 0x43
 81010bc:	d104      	bne.n	81010c8 <HAL_FDCAN_RxFifo0Callback+0x34>
			  referencia = 90;
 81010be:	4b1a      	ldr	r3, [pc, #104]	; (8101128 <HAL_FDCAN_RxFifo0Callback+0x94>)
 81010c0:	225a      	movs	r2, #90	; 0x5a
 81010c2:	801a      	strh	r2, [r3, #0]
			  updateOLED();
 81010c4:	f000 f838 	bl	8101138 <updateOLED>
		  if (RxHeader.Identifier == 0x11) {
 81010c8:	4b15      	ldr	r3, [pc, #84]	; (8101120 <HAL_FDCAN_RxFifo0Callback+0x8c>)
 81010ca:	681b      	ldr	r3, [r3, #0]
 81010cc:	2b11      	cmp	r3, #17
 81010ce:	d104      	bne.n	81010da <HAL_FDCAN_RxFifo0Callback+0x46>
			  referencia = 60;
 81010d0:	4b15      	ldr	r3, [pc, #84]	; (8101128 <HAL_FDCAN_RxFifo0Callback+0x94>)
 81010d2:	223c      	movs	r2, #60	; 0x3c
 81010d4:	801a      	strh	r2, [r3, #0]
			  updateOLED();
 81010d6:	f000 f82f 	bl	8101138 <updateOLED>
		  if (RxHeader.Identifier == 0x65) {
 81010da:	4b11      	ldr	r3, [pc, #68]	; (8101120 <HAL_FDCAN_RxFifo0Callback+0x8c>)
 81010dc:	681b      	ldr	r3, [r3, #0]
 81010de:	2b65      	cmp	r3, #101	; 0x65
 81010e0:	d104      	bne.n	81010ec <HAL_FDCAN_RxFifo0Callback+0x58>
			  referencia = 30;
 81010e2:	4b11      	ldr	r3, [pc, #68]	; (8101128 <HAL_FDCAN_RxFifo0Callback+0x94>)
 81010e4:	221e      	movs	r2, #30
 81010e6:	801a      	strh	r2, [r3, #0]
			  updateOLED();
 81010e8:	f000 f826 	bl	8101138 <updateOLED>
		  if (RxHeader.Identifier == 0x50) {
 81010ec:	4b0c      	ldr	r3, [pc, #48]	; (8101120 <HAL_FDCAN_RxFifo0Callback+0x8c>)
 81010ee:	681b      	ldr	r3, [r3, #0]
 81010f0:	2b50      	cmp	r3, #80	; 0x50
 81010f2:	d10e      	bne.n	8101112 <HAL_FDCAN_RxFifo0Callback+0x7e>
			  TxData2[0] = (uint8_t)angleDegrees;
 81010f4:	4b0d      	ldr	r3, [pc, #52]	; (810112c <HAL_FDCAN_RxFifo0Callback+0x98>)
 81010f6:	881b      	ldrh	r3, [r3, #0]
 81010f8:	b2da      	uxtb	r2, r3
 81010fa:	4b0d      	ldr	r3, [pc, #52]	; (8101130 <HAL_FDCAN_RxFifo0Callback+0x9c>)
 81010fc:	701a      	strb	r2, [r3, #0]
			  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader2, TxData2) != HAL_OK)
 81010fe:	4a0c      	ldr	r2, [pc, #48]	; (8101130 <HAL_FDCAN_RxFifo0Callback+0x9c>)
 8101100:	490c      	ldr	r1, [pc, #48]	; (8101134 <HAL_FDCAN_RxFifo0Callback+0xa0>)
 8101102:	4808      	ldr	r0, [pc, #32]	; (8101124 <HAL_FDCAN_RxFifo0Callback+0x90>)
 8101104:	f000 ff9b 	bl	810203e <HAL_FDCAN_AddMessageToTxFifoQ>
 8101108:	4603      	mov	r3, r0
 810110a:	2b00      	cmp	r3, #0
 810110c:	d001      	beq.n	8101112 <HAL_FDCAN_RxFifo0Callback+0x7e>
					  Error_Handler();
 810110e:	f000 f8a5 	bl	810125c <Error_Handler>
}
 8101112:	bf00      	nop
 8101114:	3708      	adds	r7, #8
 8101116:	46bd      	mov	sp, r7
 8101118:	bd80      	pop	{r7, pc}
 810111a:	bf00      	nop
 810111c:	100006e4 	.word	0x100006e4
 8101120:	10000654 	.word	0x10000654
 8101124:	10000458 	.word	0x10000458
 8101128:	1000063c 	.word	0x1000063c
 810112c:	1000063a 	.word	0x1000063a
 8101130:	10000024 	.word	0x10000024
 8101134:	100006a0 	.word	0x100006a0

08101138 <updateOLED>:

void updateOLED(){
 8101138:	b580      	push	{r7, lr}
 810113a:	b082      	sub	sp, #8
 810113c:	af02      	add	r7, sp, #8
	if((referencia >= 30)&&(referencia < 50)){
 810113e:	4b21      	ldr	r3, [pc, #132]	; (81011c4 <updateOLED+0x8c>)
 8101140:	881b      	ldrh	r3, [r3, #0]
 8101142:	2b1d      	cmp	r3, #29
 8101144:	d913      	bls.n	810116e <updateOLED+0x36>
 8101146:	4b1f      	ldr	r3, [pc, #124]	; (81011c4 <updateOLED+0x8c>)
 8101148:	881b      	ldrh	r3, [r3, #0]
 810114a:	2b31      	cmp	r3, #49	; 0x31
 810114c:	d80f      	bhi.n	810116e <updateOLED+0x36>
		ssd1306_Fill(Black);
 810114e:	2000      	movs	r0, #0
 8101150:	f7ff f97e 	bl	8100450 <ssd1306_Fill>
		ssd1306_DrawBitmap(0, 0, pos2, 128, 64, White);
 8101154:	2301      	movs	r3, #1
 8101156:	9301      	str	r3, [sp, #4]
 8101158:	2340      	movs	r3, #64	; 0x40
 810115a:	9300      	str	r3, [sp, #0]
 810115c:	2380      	movs	r3, #128	; 0x80
 810115e:	4a1a      	ldr	r2, [pc, #104]	; (81011c8 <updateOLED+0x90>)
 8101160:	2100      	movs	r1, #0
 8101162:	2000      	movs	r0, #0
 8101164:	f7ff fa14 	bl	8100590 <ssd1306_DrawBitmap>
		ssd1306_UpdateScreen();
 8101168:	f7ff f996 	bl	8100498 <ssd1306_UpdateScreen>
 810116c:	e027      	b.n	81011be <updateOLED+0x86>
	}else if((referencia >= 50)&&(referencia < 70)){
 810116e:	4b15      	ldr	r3, [pc, #84]	; (81011c4 <updateOLED+0x8c>)
 8101170:	881b      	ldrh	r3, [r3, #0]
 8101172:	2b31      	cmp	r3, #49	; 0x31
 8101174:	d913      	bls.n	810119e <updateOLED+0x66>
 8101176:	4b13      	ldr	r3, [pc, #76]	; (81011c4 <updateOLED+0x8c>)
 8101178:	881b      	ldrh	r3, [r3, #0]
 810117a:	2b45      	cmp	r3, #69	; 0x45
 810117c:	d80f      	bhi.n	810119e <updateOLED+0x66>
		ssd1306_Fill(Black);
 810117e:	2000      	movs	r0, #0
 8101180:	f7ff f966 	bl	8100450 <ssd1306_Fill>
		ssd1306_DrawBitmap(0, 0, pos1, 128, 64, White);
 8101184:	2301      	movs	r3, #1
 8101186:	9301      	str	r3, [sp, #4]
 8101188:	2340      	movs	r3, #64	; 0x40
 810118a:	9300      	str	r3, [sp, #0]
 810118c:	2380      	movs	r3, #128	; 0x80
 810118e:	4a0f      	ldr	r2, [pc, #60]	; (81011cc <updateOLED+0x94>)
 8101190:	2100      	movs	r1, #0
 8101192:	2000      	movs	r0, #0
 8101194:	f7ff f9fc 	bl	8100590 <ssd1306_DrawBitmap>
		ssd1306_UpdateScreen();
 8101198:	f7ff f97e 	bl	8100498 <ssd1306_UpdateScreen>
 810119c:	e00f      	b.n	81011be <updateOLED+0x86>
	}else{
		ssd1306_Fill(Black);
 810119e:	2000      	movs	r0, #0
 81011a0:	f7ff f956 	bl	8100450 <ssd1306_Fill>
		ssd1306_DrawBitmap(0, 0, pos0, 128, 64, White);
 81011a4:	2301      	movs	r3, #1
 81011a6:	9301      	str	r3, [sp, #4]
 81011a8:	2340      	movs	r3, #64	; 0x40
 81011aa:	9300      	str	r3, [sp, #0]
 81011ac:	2380      	movs	r3, #128	; 0x80
 81011ae:	4a08      	ldr	r2, [pc, #32]	; (81011d0 <updateOLED+0x98>)
 81011b0:	2100      	movs	r1, #0
 81011b2:	2000      	movs	r0, #0
 81011b4:	f7ff f9ec 	bl	8100590 <ssd1306_DrawBitmap>
		ssd1306_UpdateScreen();
 81011b8:	f7ff f96e 	bl	8100498 <ssd1306_UpdateScreen>
	}
}
 81011bc:	bf00      	nop
 81011be:	bf00      	nop
 81011c0:	46bd      	mov	sp, r7
 81011c2:	bd80      	pop	{r7, pc}
 81011c4:	1000063c 	.word	0x1000063c
 81011c8:	081074c0 	.word	0x081074c0
 81011cc:	081070c0 	.word	0x081070c0
 81011d0:	08106cc0 	.word	0x08106cc0

081011d4 <HAL_HSEM_FreeCallback>:

void HAL_HSEM_FreeCallback(uint32_t SemMask){
 81011d4:	b580      	push	{r7, lr}
 81011d6:	b082      	sub	sp, #8
 81011d8:	af00      	add	r7, sp, #0
 81011da:	6078      	str	r0, [r7, #4]
	// EVALUACIÓN DE ALERTA (MANDAR CAN)
	if(xfr_ptr->alerta == 1){
 81011dc:	4b1a      	ldr	r3, [pc, #104]	; (8101248 <HAL_HSEM_FreeCallback+0x74>)
 81011de:	781b      	ldrb	r3, [r3, #0]
 81011e0:	b2db      	uxtb	r3, r3
 81011e2:	2b01      	cmp	r3, #1
 81011e4:	d109      	bne.n	81011fa <HAL_HSEM_FreeCallback+0x26>
	  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK)
 81011e6:	4a19      	ldr	r2, [pc, #100]	; (810124c <HAL_HSEM_FreeCallback+0x78>)
 81011e8:	4919      	ldr	r1, [pc, #100]	; (8101250 <HAL_HSEM_FreeCallback+0x7c>)
 81011ea:	481a      	ldr	r0, [pc, #104]	; (8101254 <HAL_HSEM_FreeCallback+0x80>)
 81011ec:	f000 ff27 	bl	810203e <HAL_FDCAN_AddMessageToTxFifoQ>
 81011f0:	4603      	mov	r3, r0
 81011f2:	2b00      	cmp	r3, #0
 81011f4:	d001      	beq.n	81011fa <HAL_HSEM_FreeCallback+0x26>
		  {
			  Error_Handler();
 81011f6:	f000 f831 	bl	810125c <Error_Handler>
		  }
	}
	tiempoDeError++;
 81011fa:	4b17      	ldr	r3, [pc, #92]	; (8101258 <HAL_HSEM_FreeCallback+0x84>)
 81011fc:	781b      	ldrb	r3, [r3, #0]
 81011fe:	3301      	adds	r3, #1
 8101200:	b2da      	uxtb	r2, r3
 8101202:	4b15      	ldr	r3, [pc, #84]	; (8101258 <HAL_HSEM_FreeCallback+0x84>)
 8101204:	701a      	strb	r2, [r3, #0]
	if((tiempoDeError > 5)&&xfr_ptr->alerta == 1){
 8101206:	4b14      	ldr	r3, [pc, #80]	; (8101258 <HAL_HSEM_FreeCallback+0x84>)
 8101208:	781b      	ldrb	r3, [r3, #0]
 810120a:	2b05      	cmp	r3, #5
 810120c:	d914      	bls.n	8101238 <HAL_HSEM_FreeCallback+0x64>
 810120e:	4b0e      	ldr	r3, [pc, #56]	; (8101248 <HAL_HSEM_FreeCallback+0x74>)
 8101210:	781b      	ldrb	r3, [r3, #0]
 8101212:	b2db      	uxtb	r3, r3
 8101214:	2b01      	cmp	r3, #1
 8101216:	d10f      	bne.n	8101238 <HAL_HSEM_FreeCallback+0x64>
	   tiempoDeError=0;
 8101218:	4b0f      	ldr	r3, [pc, #60]	; (8101258 <HAL_HSEM_FreeCallback+0x84>)
 810121a:	2200      	movs	r2, #0
 810121c:	701a      	strb	r2, [r3, #0]
	   if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK)
 810121e:	4a0b      	ldr	r2, [pc, #44]	; (810124c <HAL_HSEM_FreeCallback+0x78>)
 8101220:	490b      	ldr	r1, [pc, #44]	; (8101250 <HAL_HSEM_FreeCallback+0x7c>)
 8101222:	480c      	ldr	r0, [pc, #48]	; (8101254 <HAL_HSEM_FreeCallback+0x80>)
 8101224:	f000 ff0b 	bl	810203e <HAL_FDCAN_AddMessageToTxFifoQ>
 8101228:	4603      	mov	r3, r0
 810122a:	2b00      	cmp	r3, #0
 810122c:	d001      	beq.n	8101232 <HAL_HSEM_FreeCallback+0x5e>
		  {
			  Error_Handler();
 810122e:	f000 f815 	bl	810125c <Error_Handler>
		  }
	   xfr_ptr->alerta = 0;
 8101232:	4b05      	ldr	r3, [pc, #20]	; (8101248 <HAL_HSEM_FreeCallback+0x74>)
 8101234:	2200      	movs	r2, #0
 8101236:	701a      	strb	r2, [r3, #0]

	}
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101238:	2001      	movs	r0, #1
 810123a:	f002 f84f 	bl	81032dc <HAL_HSEM_ActivateNotification>


}
 810123e:	bf00      	nop
 8101240:	3708      	adds	r7, #8
 8101242:	46bd      	mov	sp, r7
 8101244:	bd80      	pop	{r7, pc}
 8101246:	bf00      	nop
 8101248:	38001000 	.word	0x38001000
 810124c:	1000001c 	.word	0x1000001c
 8101250:	1000067c 	.word	0x1000067c
 8101254:	10000458 	.word	0x10000458
 8101258:	100006ec 	.word	0x100006ec

0810125c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 810125c:	b480      	push	{r7}
 810125e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101260:	b672      	cpsid	i
}
 8101262:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8101264:	e7fe      	b.n	8101264 <Error_Handler+0x8>
	...

08101268 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101268:	b580      	push	{r7, lr}
 810126a:	b082      	sub	sp, #8
 810126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810126e:	4b0d      	ldr	r3, [pc, #52]	; (81012a4 <HAL_MspInit+0x3c>)
 8101270:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101274:	4a0b      	ldr	r2, [pc, #44]	; (81012a4 <HAL_MspInit+0x3c>)
 8101276:	f043 0302 	orr.w	r3, r3, #2
 810127a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810127e:	4b09      	ldr	r3, [pc, #36]	; (81012a4 <HAL_MspInit+0x3c>)
 8101280:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101284:	f003 0302 	and.w	r3, r3, #2
 8101288:	607b      	str	r3, [r7, #4]
 810128a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 0, 0);
 810128c:	2200      	movs	r2, #0
 810128e:	2100      	movs	r1, #0
 8101290:	207e      	movs	r0, #126	; 0x7e
 8101292:	f000 fc0c 	bl	8101aae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 8101296:	207e      	movs	r0, #126	; 0x7e
 8101298:	f000 fc23 	bl	8101ae2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 810129c:	bf00      	nop
 810129e:	3708      	adds	r7, #8
 81012a0:	46bd      	mov	sp, r7
 81012a2:	bd80      	pop	{r7, pc}
 81012a4:	58024400 	.word	0x58024400

081012a8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 81012a8:	b580      	push	{r7, lr}
 81012aa:	b0ba      	sub	sp, #232	; 0xe8
 81012ac:	af00      	add	r7, sp, #0
 81012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81012b0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81012b4:	2200      	movs	r2, #0
 81012b6:	601a      	str	r2, [r3, #0]
 81012b8:	605a      	str	r2, [r3, #4]
 81012ba:	609a      	str	r2, [r3, #8]
 81012bc:	60da      	str	r2, [r3, #12]
 81012be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81012c0:	f107 0310 	add.w	r3, r7, #16
 81012c4:	22c0      	movs	r2, #192	; 0xc0
 81012c6:	2100      	movs	r1, #0
 81012c8:	4618      	mov	r0, r3
 81012ca:	f005 fc85 	bl	8106bd8 <memset>
  if(hfdcan->Instance==FDCAN1)
 81012ce:	687b      	ldr	r3, [r7, #4]
 81012d0:	681b      	ldr	r3, [r3, #0]
 81012d2:	4a2b      	ldr	r2, [pc, #172]	; (8101380 <HAL_FDCAN_MspInit+0xd8>)
 81012d4:	4293      	cmp	r3, r2
 81012d6:	d14e      	bne.n	8101376 <HAL_FDCAN_MspInit+0xce>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 81012d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 81012dc:	f04f 0300 	mov.w	r3, #0
 81012e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 81012e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 81012e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81012ec:	f107 0310 	add.w	r3, r7, #16
 81012f0:	4618      	mov	r0, r3
 81012f2:	f003 f82f 	bl	8104354 <HAL_RCCEx_PeriphCLKConfig>
 81012f6:	4603      	mov	r3, r0
 81012f8:	2b00      	cmp	r3, #0
 81012fa:	d001      	beq.n	8101300 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 81012fc:	f7ff ffae 	bl	810125c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8101300:	4b20      	ldr	r3, [pc, #128]	; (8101384 <HAL_FDCAN_MspInit+0xdc>)
 8101302:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8101306:	4a1f      	ldr	r2, [pc, #124]	; (8101384 <HAL_FDCAN_MspInit+0xdc>)
 8101308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810130c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8101310:	4b1c      	ldr	r3, [pc, #112]	; (8101384 <HAL_FDCAN_MspInit+0xdc>)
 8101312:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8101316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810131a:	60fb      	str	r3, [r7, #12]
 810131c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 810131e:	4b19      	ldr	r3, [pc, #100]	; (8101384 <HAL_FDCAN_MspInit+0xdc>)
 8101320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101324:	4a17      	ldr	r2, [pc, #92]	; (8101384 <HAL_FDCAN_MspInit+0xdc>)
 8101326:	f043 0308 	orr.w	r3, r3, #8
 810132a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810132e:	4b15      	ldr	r3, [pc, #84]	; (8101384 <HAL_FDCAN_MspInit+0xdc>)
 8101330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101334:	f003 0308 	and.w	r3, r3, #8
 8101338:	60bb      	str	r3, [r7, #8]
 810133a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 810133c:	2303      	movs	r3, #3
 810133e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101342:	2302      	movs	r3, #2
 8101344:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101348:	2300      	movs	r3, #0
 810134a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810134e:	2300      	movs	r3, #0
 8101350:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8101354:	2309      	movs	r3, #9
 8101356:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 810135a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 810135e:	4619      	mov	r1, r3
 8101360:	4809      	ldr	r0, [pc, #36]	; (8101388 <HAL_FDCAN_MspInit+0xe0>)
 8101362:	f001 fdbd 	bl	8102ee0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8101366:	2200      	movs	r2, #0
 8101368:	2100      	movs	r1, #0
 810136a:	2013      	movs	r0, #19
 810136c:	f000 fb9f 	bl	8101aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8101370:	2013      	movs	r0, #19
 8101372:	f000 fbb6 	bl	8101ae2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8101376:	bf00      	nop
 8101378:	37e8      	adds	r7, #232	; 0xe8
 810137a:	46bd      	mov	sp, r7
 810137c:	bd80      	pop	{r7, pc}
 810137e:	bf00      	nop
 8101380:	4000a000 	.word	0x4000a000
 8101384:	58024400 	.word	0x58024400
 8101388:	58020c00 	.word	0x58020c00

0810138c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 810138c:	b580      	push	{r7, lr}
 810138e:	b0bc      	sub	sp, #240	; 0xf0
 8101390:	af00      	add	r7, sp, #0
 8101392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101394:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8101398:	2200      	movs	r2, #0
 810139a:	601a      	str	r2, [r3, #0]
 810139c:	605a      	str	r2, [r3, #4]
 810139e:	609a      	str	r2, [r3, #8]
 81013a0:	60da      	str	r2, [r3, #12]
 81013a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81013a4:	f107 0318 	add.w	r3, r7, #24
 81013a8:	22c0      	movs	r2, #192	; 0xc0
 81013aa:	2100      	movs	r1, #0
 81013ac:	4618      	mov	r0, r3
 81013ae:	f005 fc13 	bl	8106bd8 <memset>
  if(hi2c->Instance==I2C1)
 81013b2:	687b      	ldr	r3, [r7, #4]
 81013b4:	681b      	ldr	r3, [r3, #0]
 81013b6:	4a4d      	ldr	r2, [pc, #308]	; (81014ec <HAL_I2C_MspInit+0x160>)
 81013b8:	4293      	cmp	r3, r2
 81013ba:	d146      	bne.n	810144a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 81013bc:	f04f 0208 	mov.w	r2, #8
 81013c0:	f04f 0300 	mov.w	r3, #0
 81013c4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 81013c8:	2300      	movs	r3, #0
 81013ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81013ce:	f107 0318 	add.w	r3, r7, #24
 81013d2:	4618      	mov	r0, r3
 81013d4:	f002 ffbe 	bl	8104354 <HAL_RCCEx_PeriphCLKConfig>
 81013d8:	4603      	mov	r3, r0
 81013da:	2b00      	cmp	r3, #0
 81013dc:	d001      	beq.n	81013e2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 81013de:	f7ff ff3d 	bl	810125c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81013e2:	4b43      	ldr	r3, [pc, #268]	; (81014f0 <HAL_I2C_MspInit+0x164>)
 81013e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013e8:	4a41      	ldr	r2, [pc, #260]	; (81014f0 <HAL_I2C_MspInit+0x164>)
 81013ea:	f043 0302 	orr.w	r3, r3, #2
 81013ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81013f2:	4b3f      	ldr	r3, [pc, #252]	; (81014f0 <HAL_I2C_MspInit+0x164>)
 81013f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013f8:	f003 0302 	and.w	r3, r3, #2
 81013fc:	617b      	str	r3, [r7, #20]
 81013fe:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8101400:	23c0      	movs	r3, #192	; 0xc0
 8101402:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8101406:	2312      	movs	r3, #18
 8101408:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810140c:	2300      	movs	r3, #0
 810140e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101412:	2300      	movs	r3, #0
 8101414:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8101418:	2304      	movs	r3, #4
 810141a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 810141e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8101422:	4619      	mov	r1, r3
 8101424:	4833      	ldr	r0, [pc, #204]	; (81014f4 <HAL_I2C_MspInit+0x168>)
 8101426:	f001 fd5b 	bl	8102ee0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 810142a:	4b31      	ldr	r3, [pc, #196]	; (81014f0 <HAL_I2C_MspInit+0x164>)
 810142c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101430:	4a2f      	ldr	r2, [pc, #188]	; (81014f0 <HAL_I2C_MspInit+0x164>)
 8101432:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8101436:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810143a:	4b2d      	ldr	r3, [pc, #180]	; (81014f0 <HAL_I2C_MspInit+0x164>)
 810143c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101440:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101444:	613b      	str	r3, [r7, #16]
 8101446:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8101448:	e04b      	b.n	81014e2 <HAL_I2C_MspInit+0x156>
  else if(hi2c->Instance==I2C4)
 810144a:	687b      	ldr	r3, [r7, #4]
 810144c:	681b      	ldr	r3, [r3, #0]
 810144e:	4a2a      	ldr	r2, [pc, #168]	; (81014f8 <HAL_I2C_MspInit+0x16c>)
 8101450:	4293      	cmp	r3, r2
 8101452:	d146      	bne.n	81014e2 <HAL_I2C_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8101454:	f04f 0210 	mov.w	r2, #16
 8101458:	f04f 0300 	mov.w	r3, #0
 810145c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8101460:	2300      	movs	r3, #0
 8101462:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101466:	f107 0318 	add.w	r3, r7, #24
 810146a:	4618      	mov	r0, r3
 810146c:	f002 ff72 	bl	8104354 <HAL_RCCEx_PeriphCLKConfig>
 8101470:	4603      	mov	r3, r0
 8101472:	2b00      	cmp	r3, #0
 8101474:	d001      	beq.n	810147a <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8101476:	f7ff fef1 	bl	810125c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 810147a:	4b1d      	ldr	r3, [pc, #116]	; (81014f0 <HAL_I2C_MspInit+0x164>)
 810147c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101480:	4a1b      	ldr	r2, [pc, #108]	; (81014f0 <HAL_I2C_MspInit+0x164>)
 8101482:	f043 0320 	orr.w	r3, r3, #32
 8101486:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810148a:	4b19      	ldr	r3, [pc, #100]	; (81014f0 <HAL_I2C_MspInit+0x164>)
 810148c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101490:	f003 0320 	and.w	r3, r3, #32
 8101494:	60fb      	str	r3, [r7, #12]
 8101496:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8101498:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 810149c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 81014a0:	2312      	movs	r3, #18
 81014a2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81014a6:	2300      	movs	r3, #0
 81014a8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81014ac:	2300      	movs	r3, #0
 81014ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 81014b2:	2304      	movs	r3, #4
 81014b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 81014b8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 81014bc:	4619      	mov	r1, r3
 81014be:	480f      	ldr	r0, [pc, #60]	; (81014fc <HAL_I2C_MspInit+0x170>)
 81014c0:	f001 fd0e 	bl	8102ee0 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 81014c4:	4b0a      	ldr	r3, [pc, #40]	; (81014f0 <HAL_I2C_MspInit+0x164>)
 81014c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81014ca:	4a09      	ldr	r2, [pc, #36]	; (81014f0 <HAL_I2C_MspInit+0x164>)
 81014cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 81014d0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81014d4:	4b06      	ldr	r3, [pc, #24]	; (81014f0 <HAL_I2C_MspInit+0x164>)
 81014d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81014da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81014de:	60bb      	str	r3, [r7, #8]
 81014e0:	68bb      	ldr	r3, [r7, #8]
}
 81014e2:	bf00      	nop
 81014e4:	37f0      	adds	r7, #240	; 0xf0
 81014e6:	46bd      	mov	sp, r7
 81014e8:	bd80      	pop	{r7, pc}
 81014ea:	bf00      	nop
 81014ec:	40005400 	.word	0x40005400
 81014f0:	58024400 	.word	0x58024400
 81014f4:	58020400 	.word	0x58020400
 81014f8:	58001c00 	.word	0x58001c00
 81014fc:	58021400 	.word	0x58021400

08101500 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8101500:	b480      	push	{r7}
 8101502:	b085      	sub	sp, #20
 8101504:	af00      	add	r7, sp, #0
 8101506:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8101508:	687b      	ldr	r3, [r7, #4]
 810150a:	681b      	ldr	r3, [r3, #0]
 810150c:	4a0b      	ldr	r2, [pc, #44]	; (810153c <HAL_TIM_PWM_MspInit+0x3c>)
 810150e:	4293      	cmp	r3, r2
 8101510:	d10e      	bne.n	8101530 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8101512:	4b0b      	ldr	r3, [pc, #44]	; (8101540 <HAL_TIM_PWM_MspInit+0x40>)
 8101514:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101518:	4a09      	ldr	r2, [pc, #36]	; (8101540 <HAL_TIM_PWM_MspInit+0x40>)
 810151a:	f043 0302 	orr.w	r3, r3, #2
 810151e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101522:	4b07      	ldr	r3, [pc, #28]	; (8101540 <HAL_TIM_PWM_MspInit+0x40>)
 8101524:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101528:	f003 0302 	and.w	r3, r3, #2
 810152c:	60fb      	str	r3, [r7, #12]
 810152e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8101530:	bf00      	nop
 8101532:	3714      	adds	r7, #20
 8101534:	46bd      	mov	sp, r7
 8101536:	f85d 7b04 	ldr.w	r7, [sp], #4
 810153a:	4770      	bx	lr
 810153c:	40000400 	.word	0x40000400
 8101540:	58024400 	.word	0x58024400

08101544 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8101544:	b580      	push	{r7, lr}
 8101546:	b084      	sub	sp, #16
 8101548:	af00      	add	r7, sp, #0
 810154a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 810154c:	687b      	ldr	r3, [r7, #4]
 810154e:	681b      	ldr	r3, [r3, #0]
 8101550:	4a0e      	ldr	r2, [pc, #56]	; (810158c <HAL_TIM_Base_MspInit+0x48>)
 8101552:	4293      	cmp	r3, r2
 8101554:	d116      	bne.n	8101584 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8101556:	4b0e      	ldr	r3, [pc, #56]	; (8101590 <HAL_TIM_Base_MspInit+0x4c>)
 8101558:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810155c:	4a0c      	ldr	r2, [pc, #48]	; (8101590 <HAL_TIM_Base_MspInit+0x4c>)
 810155e:	f043 0320 	orr.w	r3, r3, #32
 8101562:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101566:	4b0a      	ldr	r3, [pc, #40]	; (8101590 <HAL_TIM_Base_MspInit+0x4c>)
 8101568:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810156c:	f003 0320 	and.w	r3, r3, #32
 8101570:	60fb      	str	r3, [r7, #12]
 8101572:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8101574:	2200      	movs	r2, #0
 8101576:	2100      	movs	r1, #0
 8101578:	2037      	movs	r0, #55	; 0x37
 810157a:	f000 fa98 	bl	8101aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 810157e:	2037      	movs	r0, #55	; 0x37
 8101580:	f000 faaf 	bl	8101ae2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8101584:	bf00      	nop
 8101586:	3710      	adds	r7, #16
 8101588:	46bd      	mov	sp, r7
 810158a:	bd80      	pop	{r7, pc}
 810158c:	40001400 	.word	0x40001400
 8101590:	58024400 	.word	0x58024400

08101594 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8101594:	b580      	push	{r7, lr}
 8101596:	b08a      	sub	sp, #40	; 0x28
 8101598:	af00      	add	r7, sp, #0
 810159a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810159c:	f107 0314 	add.w	r3, r7, #20
 81015a0:	2200      	movs	r2, #0
 81015a2:	601a      	str	r2, [r3, #0]
 81015a4:	605a      	str	r2, [r3, #4]
 81015a6:	609a      	str	r2, [r3, #8]
 81015a8:	60da      	str	r2, [r3, #12]
 81015aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 81015ac:	687b      	ldr	r3, [r7, #4]
 81015ae:	681b      	ldr	r3, [r3, #0]
 81015b0:	4a22      	ldr	r2, [pc, #136]	; (810163c <HAL_TIM_MspPostInit+0xa8>)
 81015b2:	4293      	cmp	r3, r2
 81015b4:	d13d      	bne.n	8101632 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 81015b6:	4b22      	ldr	r3, [pc, #136]	; (8101640 <HAL_TIM_MspPostInit+0xac>)
 81015b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81015bc:	4a20      	ldr	r2, [pc, #128]	; (8101640 <HAL_TIM_MspPostInit+0xac>)
 81015be:	f043 0301 	orr.w	r3, r3, #1
 81015c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81015c6:	4b1e      	ldr	r3, [pc, #120]	; (8101640 <HAL_TIM_MspPostInit+0xac>)
 81015c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81015cc:	f003 0301 	and.w	r3, r3, #1
 81015d0:	613b      	str	r3, [r7, #16]
 81015d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 81015d4:	4b1a      	ldr	r3, [pc, #104]	; (8101640 <HAL_TIM_MspPostInit+0xac>)
 81015d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81015da:	4a19      	ldr	r2, [pc, #100]	; (8101640 <HAL_TIM_MspPostInit+0xac>)
 81015dc:	f043 0304 	orr.w	r3, r3, #4
 81015e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81015e4:	4b16      	ldr	r3, [pc, #88]	; (8101640 <HAL_TIM_MspPostInit+0xac>)
 81015e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81015ea:	f003 0304 	and.w	r3, r3, #4
 81015ee:	60fb      	str	r3, [r7, #12]
 81015f0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 81015f2:	2340      	movs	r3, #64	; 0x40
 81015f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81015f6:	2302      	movs	r3, #2
 81015f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81015fa:	2300      	movs	r3, #0
 81015fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81015fe:	2300      	movs	r3, #0
 8101600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8101602:	2302      	movs	r3, #2
 8101604:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101606:	f107 0314 	add.w	r3, r7, #20
 810160a:	4619      	mov	r1, r3
 810160c:	480d      	ldr	r0, [pc, #52]	; (8101644 <HAL_TIM_MspPostInit+0xb0>)
 810160e:	f001 fc67 	bl	8102ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8101612:	2380      	movs	r3, #128	; 0x80
 8101614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101616:	2302      	movs	r3, #2
 8101618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810161a:	2300      	movs	r3, #0
 810161c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810161e:	2300      	movs	r3, #0
 8101620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8101622:	2302      	movs	r3, #2
 8101624:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101626:	f107 0314 	add.w	r3, r7, #20
 810162a:	4619      	mov	r1, r3
 810162c:	4806      	ldr	r0, [pc, #24]	; (8101648 <HAL_TIM_MspPostInit+0xb4>)
 810162e:	f001 fc57 	bl	8102ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8101632:	bf00      	nop
 8101634:	3728      	adds	r7, #40	; 0x28
 8101636:	46bd      	mov	sp, r7
 8101638:	bd80      	pop	{r7, pc}
 810163a:	bf00      	nop
 810163c:	40000400 	.word	0x40000400
 8101640:	58024400 	.word	0x58024400
 8101644:	58020000 	.word	0x58020000
 8101648:	58020800 	.word	0x58020800

0810164c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 810164c:	b480      	push	{r7}
 810164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101650:	e7fe      	b.n	8101650 <NMI_Handler+0x4>

08101652 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101652:	b480      	push	{r7}
 8101654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101656:	e7fe      	b.n	8101656 <HardFault_Handler+0x4>

08101658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101658:	b480      	push	{r7}
 810165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 810165c:	e7fe      	b.n	810165c <MemManage_Handler+0x4>

0810165e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810165e:	b480      	push	{r7}
 8101660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101662:	e7fe      	b.n	8101662 <BusFault_Handler+0x4>

08101664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101664:	b480      	push	{r7}
 8101666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101668:	e7fe      	b.n	8101668 <UsageFault_Handler+0x4>

0810166a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810166a:	b480      	push	{r7}
 810166c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810166e:	bf00      	nop
 8101670:	46bd      	mov	sp, r7
 8101672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101676:	4770      	bx	lr

08101678 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101678:	b480      	push	{r7}
 810167a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810167c:	bf00      	nop
 810167e:	46bd      	mov	sp, r7
 8101680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101684:	4770      	bx	lr

08101686 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101686:	b480      	push	{r7}
 8101688:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 810168a:	bf00      	nop
 810168c:	46bd      	mov	sp, r7
 810168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101692:	4770      	bx	lr

08101694 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101694:	b580      	push	{r7, lr}
 8101696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101698:	f000 f8ea 	bl	8101870 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 810169c:	bf00      	nop
 810169e:	bd80      	pop	{r7, pc}

081016a0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 81016a0:	b580      	push	{r7, lr}
 81016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 81016a4:	2004      	movs	r0, #4
 81016a6:	f001 fdfe 	bl	81032a6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 81016aa:	bf00      	nop
 81016ac:	bd80      	pop	{r7, pc}
	...

081016b0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 81016b0:	b580      	push	{r7, lr}
 81016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 81016b4:	4802      	ldr	r0, [pc, #8]	; (81016c0 <FDCAN1_IT0_IRQHandler+0x10>)
 81016b6:	f000 ff05 	bl	81024c4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 81016ba:	bf00      	nop
 81016bc:	bd80      	pop	{r7, pc}
 81016be:	bf00      	nop
 81016c0:	10000458 	.word	0x10000458

081016c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 81016c4:	b580      	push	{r7, lr}
 81016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 81016c8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 81016cc:	f001 fdeb 	bl	81032a6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 81016d0:	bf00      	nop
 81016d2:	bd80      	pop	{r7, pc}

081016d4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 81016d4:	b580      	push	{r7, lr}
 81016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 81016d8:	4802      	ldr	r0, [pc, #8]	; (81016e4 <TIM7_IRQHandler+0x10>)
 81016da:	f004 fbdf 	bl	8105e9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 81016de:	bf00      	nop
 81016e0:	bd80      	pop	{r7, pc}
 81016e2:	bf00      	nop
 81016e4:	100005ec 	.word	0x100005ec

081016e8 <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 81016e8:	b580      	push	{r7, lr}
 81016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 81016ec:	f001 fe08 	bl	8103300 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 81016f0:	bf00      	nop
 81016f2:	bd80      	pop	{r7, pc}

081016f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81016f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 810172c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81016f8:	f7fe fdee 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81016fc:	480c      	ldr	r0, [pc, #48]	; (8101730 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81016fe:	490d      	ldr	r1, [pc, #52]	; (8101734 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101700:	4a0d      	ldr	r2, [pc, #52]	; (8101738 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101704:	e002      	b.n	810170c <LoopCopyDataInit>

08101706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8101706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810170a:	3304      	adds	r3, #4

0810170c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 810170c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 810170e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101710:	d3f9      	bcc.n	8101706 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101712:	4a0a      	ldr	r2, [pc, #40]	; (810173c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101714:	4c0a      	ldr	r4, [pc, #40]	; (8101740 <LoopFillZerobss+0x22>)
  movs r3, #0
 8101716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101718:	e001      	b.n	810171e <LoopFillZerobss>

0810171a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810171a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 810171c:	3204      	adds	r2, #4

0810171e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810171e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101720:	d3fb      	bcc.n	810171a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101722:	f005 fa61 	bl	8106be8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101726:	f7fe ffbf 	bl	81006a8 <main>
  bx  lr
 810172a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 810172c:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101730:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101734:	10000034 	.word	0x10000034
  ldr r2, =_sidata
 8101738:	081078d8 	.word	0x081078d8
  ldr r2, =_sbss
 810173c:	10000034 	.word	0x10000034
  ldr r4, =_ebss
 8101740:	100006f4 	.word	0x100006f4

08101744 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101744:	e7fe      	b.n	8101744 <ADC3_IRQHandler>
	...

08101748 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101748:	b580      	push	{r7, lr}
 810174a:	b082      	sub	sp, #8
 810174c:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810174e:	4b28      	ldr	r3, [pc, #160]	; (81017f0 <HAL_Init+0xa8>)
 8101750:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101754:	4a26      	ldr	r2, [pc, #152]	; (81017f0 <HAL_Init+0xa8>)
 8101756:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 810175a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810175e:	4b24      	ldr	r3, [pc, #144]	; (81017f0 <HAL_Init+0xa8>)
 8101760:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101764:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101768:	603b      	str	r3, [r7, #0]
 810176a:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 810176c:	4b21      	ldr	r3, [pc, #132]	; (81017f4 <HAL_Init+0xac>)
 810176e:	681b      	ldr	r3, [r3, #0]
 8101770:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8101774:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101778:	4a1e      	ldr	r2, [pc, #120]	; (81017f4 <HAL_Init+0xac>)
 810177a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 810177e:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101780:	4b1c      	ldr	r3, [pc, #112]	; (81017f4 <HAL_Init+0xac>)
 8101782:	681b      	ldr	r3, [r3, #0]
 8101784:	4a1b      	ldr	r2, [pc, #108]	; (81017f4 <HAL_Init+0xac>)
 8101786:	f043 0301 	orr.w	r3, r3, #1
 810178a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 810178c:	2003      	movs	r0, #3
 810178e:	f000 f983 	bl	8101a98 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101792:	f002 fc65 	bl	8104060 <HAL_RCC_GetSysClockFreq>
 8101796:	4602      	mov	r2, r0
 8101798:	4b15      	ldr	r3, [pc, #84]	; (81017f0 <HAL_Init+0xa8>)
 810179a:	699b      	ldr	r3, [r3, #24]
 810179c:	0a1b      	lsrs	r3, r3, #8
 810179e:	f003 030f 	and.w	r3, r3, #15
 81017a2:	4915      	ldr	r1, [pc, #84]	; (81017f8 <HAL_Init+0xb0>)
 81017a4:	5ccb      	ldrb	r3, [r1, r3]
 81017a6:	f003 031f 	and.w	r3, r3, #31
 81017aa:	fa22 f303 	lsr.w	r3, r2, r3
 81017ae:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81017b0:	4b0f      	ldr	r3, [pc, #60]	; (81017f0 <HAL_Init+0xa8>)
 81017b2:	699b      	ldr	r3, [r3, #24]
 81017b4:	f003 030f 	and.w	r3, r3, #15
 81017b8:	4a0f      	ldr	r2, [pc, #60]	; (81017f8 <HAL_Init+0xb0>)
 81017ba:	5cd3      	ldrb	r3, [r2, r3]
 81017bc:	f003 031f 	and.w	r3, r3, #31
 81017c0:	687a      	ldr	r2, [r7, #4]
 81017c2:	fa22 f303 	lsr.w	r3, r2, r3
 81017c6:	4a0d      	ldr	r2, [pc, #52]	; (81017fc <HAL_Init+0xb4>)
 81017c8:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81017ca:	4b0c      	ldr	r3, [pc, #48]	; (81017fc <HAL_Init+0xb4>)
 81017cc:	681b      	ldr	r3, [r3, #0]
 81017ce:	4a0c      	ldr	r2, [pc, #48]	; (8101800 <HAL_Init+0xb8>)
 81017d0:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81017d2:	2000      	movs	r0, #0
 81017d4:	f000 f816 	bl	8101804 <HAL_InitTick>
 81017d8:	4603      	mov	r3, r0
 81017da:	2b00      	cmp	r3, #0
 81017dc:	d001      	beq.n	81017e2 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81017de:	2301      	movs	r3, #1
 81017e0:	e002      	b.n	81017e8 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81017e2:	f7ff fd41 	bl	8101268 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81017e6:	2300      	movs	r3, #0
}
 81017e8:	4618      	mov	r0, r3
 81017ea:	3708      	adds	r7, #8
 81017ec:	46bd      	mov	sp, r7
 81017ee:	bd80      	pop	{r7, pc}
 81017f0:	58024400 	.word	0x58024400
 81017f4:	40024400 	.word	0x40024400
 81017f8:	08106cb0 	.word	0x08106cb0
 81017fc:	10000004 	.word	0x10000004
 8101800:	10000000 	.word	0x10000000

08101804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101804:	b580      	push	{r7, lr}
 8101806:	b082      	sub	sp, #8
 8101808:	af00      	add	r7, sp, #0
 810180a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 810180c:	4b15      	ldr	r3, [pc, #84]	; (8101864 <HAL_InitTick+0x60>)
 810180e:	781b      	ldrb	r3, [r3, #0]
 8101810:	2b00      	cmp	r3, #0
 8101812:	d101      	bne.n	8101818 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101814:	2301      	movs	r3, #1
 8101816:	e021      	b.n	810185c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101818:	4b13      	ldr	r3, [pc, #76]	; (8101868 <HAL_InitTick+0x64>)
 810181a:	681a      	ldr	r2, [r3, #0]
 810181c:	4b11      	ldr	r3, [pc, #68]	; (8101864 <HAL_InitTick+0x60>)
 810181e:	781b      	ldrb	r3, [r3, #0]
 8101820:	4619      	mov	r1, r3
 8101822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101826:	fbb3 f3f1 	udiv	r3, r3, r1
 810182a:	fbb2 f3f3 	udiv	r3, r2, r3
 810182e:	4618      	mov	r0, r3
 8101830:	f000 f965 	bl	8101afe <HAL_SYSTICK_Config>
 8101834:	4603      	mov	r3, r0
 8101836:	2b00      	cmp	r3, #0
 8101838:	d001      	beq.n	810183e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 810183a:	2301      	movs	r3, #1
 810183c:	e00e      	b.n	810185c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810183e:	687b      	ldr	r3, [r7, #4]
 8101840:	2b0f      	cmp	r3, #15
 8101842:	d80a      	bhi.n	810185a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101844:	2200      	movs	r2, #0
 8101846:	6879      	ldr	r1, [r7, #4]
 8101848:	f04f 30ff 	mov.w	r0, #4294967295
 810184c:	f000 f92f 	bl	8101aae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8101850:	4a06      	ldr	r2, [pc, #24]	; (810186c <HAL_InitTick+0x68>)
 8101852:	687b      	ldr	r3, [r7, #4]
 8101854:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8101856:	2300      	movs	r3, #0
 8101858:	e000      	b.n	810185c <HAL_InitTick+0x58>
    return HAL_ERROR;
 810185a:	2301      	movs	r3, #1
}
 810185c:	4618      	mov	r0, r3
 810185e:	3708      	adds	r7, #8
 8101860:	46bd      	mov	sp, r7
 8101862:	bd80      	pop	{r7, pc}
 8101864:	10000030 	.word	0x10000030
 8101868:	10000000 	.word	0x10000000
 810186c:	1000002c 	.word	0x1000002c

08101870 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101870:	b480      	push	{r7}
 8101872:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101874:	4b06      	ldr	r3, [pc, #24]	; (8101890 <HAL_IncTick+0x20>)
 8101876:	781b      	ldrb	r3, [r3, #0]
 8101878:	461a      	mov	r2, r3
 810187a:	4b06      	ldr	r3, [pc, #24]	; (8101894 <HAL_IncTick+0x24>)
 810187c:	681b      	ldr	r3, [r3, #0]
 810187e:	4413      	add	r3, r2
 8101880:	4a04      	ldr	r2, [pc, #16]	; (8101894 <HAL_IncTick+0x24>)
 8101882:	6013      	str	r3, [r2, #0]
}
 8101884:	bf00      	nop
 8101886:	46bd      	mov	sp, r7
 8101888:	f85d 7b04 	ldr.w	r7, [sp], #4
 810188c:	4770      	bx	lr
 810188e:	bf00      	nop
 8101890:	10000030 	.word	0x10000030
 8101894:	100006f0 	.word	0x100006f0

08101898 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101898:	b480      	push	{r7}
 810189a:	af00      	add	r7, sp, #0
  return uwTick;
 810189c:	4b03      	ldr	r3, [pc, #12]	; (81018ac <HAL_GetTick+0x14>)
 810189e:	681b      	ldr	r3, [r3, #0]
}
 81018a0:	4618      	mov	r0, r3
 81018a2:	46bd      	mov	sp, r7
 81018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018a8:	4770      	bx	lr
 81018aa:	bf00      	nop
 81018ac:	100006f0 	.word	0x100006f0

081018b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 81018b0:	b580      	push	{r7, lr}
 81018b2:	b084      	sub	sp, #16
 81018b4:	af00      	add	r7, sp, #0
 81018b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 81018b8:	f7ff ffee 	bl	8101898 <HAL_GetTick>
 81018bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 81018be:	687b      	ldr	r3, [r7, #4]
 81018c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 81018c2:	68fb      	ldr	r3, [r7, #12]
 81018c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81018c8:	d005      	beq.n	81018d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 81018ca:	4b0a      	ldr	r3, [pc, #40]	; (81018f4 <HAL_Delay+0x44>)
 81018cc:	781b      	ldrb	r3, [r3, #0]
 81018ce:	461a      	mov	r2, r3
 81018d0:	68fb      	ldr	r3, [r7, #12]
 81018d2:	4413      	add	r3, r2
 81018d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 81018d6:	bf00      	nop
 81018d8:	f7ff ffde 	bl	8101898 <HAL_GetTick>
 81018dc:	4602      	mov	r2, r0
 81018de:	68bb      	ldr	r3, [r7, #8]
 81018e0:	1ad3      	subs	r3, r2, r3
 81018e2:	68fa      	ldr	r2, [r7, #12]
 81018e4:	429a      	cmp	r2, r3
 81018e6:	d8f7      	bhi.n	81018d8 <HAL_Delay+0x28>
  {
  }
}
 81018e8:	bf00      	nop
 81018ea:	bf00      	nop
 81018ec:	3710      	adds	r7, #16
 81018ee:	46bd      	mov	sp, r7
 81018f0:	bd80      	pop	{r7, pc}
 81018f2:	bf00      	nop
 81018f4:	10000030 	.word	0x10000030

081018f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81018f8:	b480      	push	{r7}
 81018fa:	b085      	sub	sp, #20
 81018fc:	af00      	add	r7, sp, #0
 81018fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101900:	687b      	ldr	r3, [r7, #4]
 8101902:	f003 0307 	and.w	r3, r3, #7
 8101906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101908:	4b0c      	ldr	r3, [pc, #48]	; (810193c <__NVIC_SetPriorityGrouping+0x44>)
 810190a:	68db      	ldr	r3, [r3, #12]
 810190c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810190e:	68ba      	ldr	r2, [r7, #8]
 8101910:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8101914:	4013      	ands	r3, r2
 8101916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101918:	68fb      	ldr	r3, [r7, #12]
 810191a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 810191c:	68bb      	ldr	r3, [r7, #8]
 810191e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101920:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8101924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810192a:	4a04      	ldr	r2, [pc, #16]	; (810193c <__NVIC_SetPriorityGrouping+0x44>)
 810192c:	68bb      	ldr	r3, [r7, #8]
 810192e:	60d3      	str	r3, [r2, #12]
}
 8101930:	bf00      	nop
 8101932:	3714      	adds	r7, #20
 8101934:	46bd      	mov	sp, r7
 8101936:	f85d 7b04 	ldr.w	r7, [sp], #4
 810193a:	4770      	bx	lr
 810193c:	e000ed00 	.word	0xe000ed00

08101940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101940:	b480      	push	{r7}
 8101942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101944:	4b04      	ldr	r3, [pc, #16]	; (8101958 <__NVIC_GetPriorityGrouping+0x18>)
 8101946:	68db      	ldr	r3, [r3, #12]
 8101948:	0a1b      	lsrs	r3, r3, #8
 810194a:	f003 0307 	and.w	r3, r3, #7
}
 810194e:	4618      	mov	r0, r3
 8101950:	46bd      	mov	sp, r7
 8101952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101956:	4770      	bx	lr
 8101958:	e000ed00 	.word	0xe000ed00

0810195c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810195c:	b480      	push	{r7}
 810195e:	b083      	sub	sp, #12
 8101960:	af00      	add	r7, sp, #0
 8101962:	4603      	mov	r3, r0
 8101964:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101966:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810196a:	2b00      	cmp	r3, #0
 810196c:	db0b      	blt.n	8101986 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810196e:	88fb      	ldrh	r3, [r7, #6]
 8101970:	f003 021f 	and.w	r2, r3, #31
 8101974:	4907      	ldr	r1, [pc, #28]	; (8101994 <__NVIC_EnableIRQ+0x38>)
 8101976:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810197a:	095b      	lsrs	r3, r3, #5
 810197c:	2001      	movs	r0, #1
 810197e:	fa00 f202 	lsl.w	r2, r0, r2
 8101982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8101986:	bf00      	nop
 8101988:	370c      	adds	r7, #12
 810198a:	46bd      	mov	sp, r7
 810198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101990:	4770      	bx	lr
 8101992:	bf00      	nop
 8101994:	e000e100 	.word	0xe000e100

08101998 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101998:	b480      	push	{r7}
 810199a:	b083      	sub	sp, #12
 810199c:	af00      	add	r7, sp, #0
 810199e:	4603      	mov	r3, r0
 81019a0:	6039      	str	r1, [r7, #0]
 81019a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81019a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81019a8:	2b00      	cmp	r3, #0
 81019aa:	db0a      	blt.n	81019c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81019ac:	683b      	ldr	r3, [r7, #0]
 81019ae:	b2da      	uxtb	r2, r3
 81019b0:	490c      	ldr	r1, [pc, #48]	; (81019e4 <__NVIC_SetPriority+0x4c>)
 81019b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81019b6:	0112      	lsls	r2, r2, #4
 81019b8:	b2d2      	uxtb	r2, r2
 81019ba:	440b      	add	r3, r1
 81019bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81019c0:	e00a      	b.n	81019d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81019c2:	683b      	ldr	r3, [r7, #0]
 81019c4:	b2da      	uxtb	r2, r3
 81019c6:	4908      	ldr	r1, [pc, #32]	; (81019e8 <__NVIC_SetPriority+0x50>)
 81019c8:	88fb      	ldrh	r3, [r7, #6]
 81019ca:	f003 030f 	and.w	r3, r3, #15
 81019ce:	3b04      	subs	r3, #4
 81019d0:	0112      	lsls	r2, r2, #4
 81019d2:	b2d2      	uxtb	r2, r2
 81019d4:	440b      	add	r3, r1
 81019d6:	761a      	strb	r2, [r3, #24]
}
 81019d8:	bf00      	nop
 81019da:	370c      	adds	r7, #12
 81019dc:	46bd      	mov	sp, r7
 81019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019e2:	4770      	bx	lr
 81019e4:	e000e100 	.word	0xe000e100
 81019e8:	e000ed00 	.word	0xe000ed00

081019ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81019ec:	b480      	push	{r7}
 81019ee:	b089      	sub	sp, #36	; 0x24
 81019f0:	af00      	add	r7, sp, #0
 81019f2:	60f8      	str	r0, [r7, #12]
 81019f4:	60b9      	str	r1, [r7, #8]
 81019f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81019f8:	68fb      	ldr	r3, [r7, #12]
 81019fa:	f003 0307 	and.w	r3, r3, #7
 81019fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101a00:	69fb      	ldr	r3, [r7, #28]
 8101a02:	f1c3 0307 	rsb	r3, r3, #7
 8101a06:	2b04      	cmp	r3, #4
 8101a08:	bf28      	it	cs
 8101a0a:	2304      	movcs	r3, #4
 8101a0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101a0e:	69fb      	ldr	r3, [r7, #28]
 8101a10:	3304      	adds	r3, #4
 8101a12:	2b06      	cmp	r3, #6
 8101a14:	d902      	bls.n	8101a1c <NVIC_EncodePriority+0x30>
 8101a16:	69fb      	ldr	r3, [r7, #28]
 8101a18:	3b03      	subs	r3, #3
 8101a1a:	e000      	b.n	8101a1e <NVIC_EncodePriority+0x32>
 8101a1c:	2300      	movs	r3, #0
 8101a1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101a20:	f04f 32ff 	mov.w	r2, #4294967295
 8101a24:	69bb      	ldr	r3, [r7, #24]
 8101a26:	fa02 f303 	lsl.w	r3, r2, r3
 8101a2a:	43da      	mvns	r2, r3
 8101a2c:	68bb      	ldr	r3, [r7, #8]
 8101a2e:	401a      	ands	r2, r3
 8101a30:	697b      	ldr	r3, [r7, #20]
 8101a32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101a34:	f04f 31ff 	mov.w	r1, #4294967295
 8101a38:	697b      	ldr	r3, [r7, #20]
 8101a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8101a3e:	43d9      	mvns	r1, r3
 8101a40:	687b      	ldr	r3, [r7, #4]
 8101a42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101a44:	4313      	orrs	r3, r2
         );
}
 8101a46:	4618      	mov	r0, r3
 8101a48:	3724      	adds	r7, #36	; 0x24
 8101a4a:	46bd      	mov	sp, r7
 8101a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a50:	4770      	bx	lr
	...

08101a54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101a54:	b580      	push	{r7, lr}
 8101a56:	b082      	sub	sp, #8
 8101a58:	af00      	add	r7, sp, #0
 8101a5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8101a5c:	687b      	ldr	r3, [r7, #4]
 8101a5e:	3b01      	subs	r3, #1
 8101a60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8101a64:	d301      	bcc.n	8101a6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8101a66:	2301      	movs	r3, #1
 8101a68:	e00f      	b.n	8101a8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8101a6a:	4a0a      	ldr	r2, [pc, #40]	; (8101a94 <SysTick_Config+0x40>)
 8101a6c:	687b      	ldr	r3, [r7, #4]
 8101a6e:	3b01      	subs	r3, #1
 8101a70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8101a72:	210f      	movs	r1, #15
 8101a74:	f04f 30ff 	mov.w	r0, #4294967295
 8101a78:	f7ff ff8e 	bl	8101998 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8101a7c:	4b05      	ldr	r3, [pc, #20]	; (8101a94 <SysTick_Config+0x40>)
 8101a7e:	2200      	movs	r2, #0
 8101a80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8101a82:	4b04      	ldr	r3, [pc, #16]	; (8101a94 <SysTick_Config+0x40>)
 8101a84:	2207      	movs	r2, #7
 8101a86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8101a88:	2300      	movs	r3, #0
}
 8101a8a:	4618      	mov	r0, r3
 8101a8c:	3708      	adds	r7, #8
 8101a8e:	46bd      	mov	sp, r7
 8101a90:	bd80      	pop	{r7, pc}
 8101a92:	bf00      	nop
 8101a94:	e000e010 	.word	0xe000e010

08101a98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101a98:	b580      	push	{r7, lr}
 8101a9a:	b082      	sub	sp, #8
 8101a9c:	af00      	add	r7, sp, #0
 8101a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101aa0:	6878      	ldr	r0, [r7, #4]
 8101aa2:	f7ff ff29 	bl	81018f8 <__NVIC_SetPriorityGrouping>
}
 8101aa6:	bf00      	nop
 8101aa8:	3708      	adds	r7, #8
 8101aaa:	46bd      	mov	sp, r7
 8101aac:	bd80      	pop	{r7, pc}

08101aae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101aae:	b580      	push	{r7, lr}
 8101ab0:	b086      	sub	sp, #24
 8101ab2:	af00      	add	r7, sp, #0
 8101ab4:	4603      	mov	r3, r0
 8101ab6:	60b9      	str	r1, [r7, #8]
 8101ab8:	607a      	str	r2, [r7, #4]
 8101aba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101abc:	f7ff ff40 	bl	8101940 <__NVIC_GetPriorityGrouping>
 8101ac0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101ac2:	687a      	ldr	r2, [r7, #4]
 8101ac4:	68b9      	ldr	r1, [r7, #8]
 8101ac6:	6978      	ldr	r0, [r7, #20]
 8101ac8:	f7ff ff90 	bl	81019ec <NVIC_EncodePriority>
 8101acc:	4602      	mov	r2, r0
 8101ace:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8101ad2:	4611      	mov	r1, r2
 8101ad4:	4618      	mov	r0, r3
 8101ad6:	f7ff ff5f 	bl	8101998 <__NVIC_SetPriority>
}
 8101ada:	bf00      	nop
 8101adc:	3718      	adds	r7, #24
 8101ade:	46bd      	mov	sp, r7
 8101ae0:	bd80      	pop	{r7, pc}

08101ae2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101ae2:	b580      	push	{r7, lr}
 8101ae4:	b082      	sub	sp, #8
 8101ae6:	af00      	add	r7, sp, #0
 8101ae8:	4603      	mov	r3, r0
 8101aea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8101aec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101af0:	4618      	mov	r0, r3
 8101af2:	f7ff ff33 	bl	810195c <__NVIC_EnableIRQ>
}
 8101af6:	bf00      	nop
 8101af8:	3708      	adds	r7, #8
 8101afa:	46bd      	mov	sp, r7
 8101afc:	bd80      	pop	{r7, pc}

08101afe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8101afe:	b580      	push	{r7, lr}
 8101b00:	b082      	sub	sp, #8
 8101b02:	af00      	add	r7, sp, #0
 8101b04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8101b06:	6878      	ldr	r0, [r7, #4]
 8101b08:	f7ff ffa4 	bl	8101a54 <SysTick_Config>
 8101b0c:	4603      	mov	r3, r0
}
 8101b0e:	4618      	mov	r0, r3
 8101b10:	3708      	adds	r7, #8
 8101b12:	46bd      	mov	sp, r7
 8101b14:	bd80      	pop	{r7, pc}
	...

08101b18 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101b18:	b480      	push	{r7}
 8101b1a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101b1c:	4b07      	ldr	r3, [pc, #28]	; (8101b3c <HAL_GetCurrentCPUID+0x24>)
 8101b1e:	681b      	ldr	r3, [r3, #0]
 8101b20:	091b      	lsrs	r3, r3, #4
 8101b22:	f003 030f 	and.w	r3, r3, #15
 8101b26:	2b07      	cmp	r3, #7
 8101b28:	d101      	bne.n	8101b2e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8101b2a:	2303      	movs	r3, #3
 8101b2c:	e000      	b.n	8101b30 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8101b2e:	2301      	movs	r3, #1
  }
}
 8101b30:	4618      	mov	r0, r3
 8101b32:	46bd      	mov	sp, r7
 8101b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b38:	4770      	bx	lr
 8101b3a:	bf00      	nop
 8101b3c:	e000ed00 	.word	0xe000ed00

08101b40 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8101b40:	b580      	push	{r7, lr}
 8101b42:	b098      	sub	sp, #96	; 0x60
 8101b44:	af00      	add	r7, sp, #0
 8101b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8101b48:	4a84      	ldr	r2, [pc, #528]	; (8101d5c <HAL_FDCAN_Init+0x21c>)
 8101b4a:	f107 030c 	add.w	r3, r7, #12
 8101b4e:	4611      	mov	r1, r2
 8101b50:	224c      	movs	r2, #76	; 0x4c
 8101b52:	4618      	mov	r0, r3
 8101b54:	f005 f86c 	bl	8106c30 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8101b58:	687b      	ldr	r3, [r7, #4]
 8101b5a:	2b00      	cmp	r3, #0
 8101b5c:	d101      	bne.n	8101b62 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8101b5e:	2301      	movs	r3, #1
 8101b60:	e1c6      	b.n	8101ef0 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8101b62:	687b      	ldr	r3, [r7, #4]
 8101b64:	681b      	ldr	r3, [r3, #0]
 8101b66:	4a7e      	ldr	r2, [pc, #504]	; (8101d60 <HAL_FDCAN_Init+0x220>)
 8101b68:	4293      	cmp	r3, r2
 8101b6a:	d106      	bne.n	8101b7a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8101b6c:	687b      	ldr	r3, [r7, #4]
 8101b6e:	681b      	ldr	r3, [r3, #0]
 8101b70:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8101b74:	461a      	mov	r2, r3
 8101b76:	687b      	ldr	r3, [r7, #4]
 8101b78:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8101b7a:	687b      	ldr	r3, [r7, #4]
 8101b7c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8101b80:	b2db      	uxtb	r3, r3
 8101b82:	2b00      	cmp	r3, #0
 8101b84:	d106      	bne.n	8101b94 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8101b86:	687b      	ldr	r3, [r7, #4]
 8101b88:	2200      	movs	r2, #0
 8101b8a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8101b8e:	6878      	ldr	r0, [r7, #4]
 8101b90:	f7ff fb8a 	bl	81012a8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8101b94:	687b      	ldr	r3, [r7, #4]
 8101b96:	681b      	ldr	r3, [r3, #0]
 8101b98:	699a      	ldr	r2, [r3, #24]
 8101b9a:	687b      	ldr	r3, [r7, #4]
 8101b9c:	681b      	ldr	r3, [r3, #0]
 8101b9e:	f022 0210 	bic.w	r2, r2, #16
 8101ba2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8101ba4:	f7ff fe78 	bl	8101898 <HAL_GetTick>
 8101ba8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8101baa:	e014      	b.n	8101bd6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8101bac:	f7ff fe74 	bl	8101898 <HAL_GetTick>
 8101bb0:	4602      	mov	r2, r0
 8101bb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8101bb4:	1ad3      	subs	r3, r2, r3
 8101bb6:	2b0a      	cmp	r3, #10
 8101bb8:	d90d      	bls.n	8101bd6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8101bba:	687b      	ldr	r3, [r7, #4]
 8101bbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8101bc0:	f043 0201 	orr.w	r2, r3, #1
 8101bc4:	687b      	ldr	r3, [r7, #4]
 8101bc6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8101bca:	687b      	ldr	r3, [r7, #4]
 8101bcc:	2203      	movs	r2, #3
 8101bce:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8101bd2:	2301      	movs	r3, #1
 8101bd4:	e18c      	b.n	8101ef0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8101bd6:	687b      	ldr	r3, [r7, #4]
 8101bd8:	681b      	ldr	r3, [r3, #0]
 8101bda:	699b      	ldr	r3, [r3, #24]
 8101bdc:	f003 0308 	and.w	r3, r3, #8
 8101be0:	2b08      	cmp	r3, #8
 8101be2:	d0e3      	beq.n	8101bac <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8101be4:	687b      	ldr	r3, [r7, #4]
 8101be6:	681b      	ldr	r3, [r3, #0]
 8101be8:	699a      	ldr	r2, [r3, #24]
 8101bea:	687b      	ldr	r3, [r7, #4]
 8101bec:	681b      	ldr	r3, [r3, #0]
 8101bee:	f042 0201 	orr.w	r2, r2, #1
 8101bf2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8101bf4:	f7ff fe50 	bl	8101898 <HAL_GetTick>
 8101bf8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8101bfa:	e014      	b.n	8101c26 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8101bfc:	f7ff fe4c 	bl	8101898 <HAL_GetTick>
 8101c00:	4602      	mov	r2, r0
 8101c02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8101c04:	1ad3      	subs	r3, r2, r3
 8101c06:	2b0a      	cmp	r3, #10
 8101c08:	d90d      	bls.n	8101c26 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8101c0a:	687b      	ldr	r3, [r7, #4]
 8101c0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8101c10:	f043 0201 	orr.w	r2, r3, #1
 8101c14:	687b      	ldr	r3, [r7, #4]
 8101c16:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8101c1a:	687b      	ldr	r3, [r7, #4]
 8101c1c:	2203      	movs	r2, #3
 8101c1e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8101c22:	2301      	movs	r3, #1
 8101c24:	e164      	b.n	8101ef0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8101c26:	687b      	ldr	r3, [r7, #4]
 8101c28:	681b      	ldr	r3, [r3, #0]
 8101c2a:	699b      	ldr	r3, [r3, #24]
 8101c2c:	f003 0301 	and.w	r3, r3, #1
 8101c30:	2b00      	cmp	r3, #0
 8101c32:	d0e3      	beq.n	8101bfc <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8101c34:	687b      	ldr	r3, [r7, #4]
 8101c36:	681b      	ldr	r3, [r3, #0]
 8101c38:	699a      	ldr	r2, [r3, #24]
 8101c3a:	687b      	ldr	r3, [r7, #4]
 8101c3c:	681b      	ldr	r3, [r3, #0]
 8101c3e:	f042 0202 	orr.w	r2, r2, #2
 8101c42:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8101c44:	687b      	ldr	r3, [r7, #4]
 8101c46:	7c1b      	ldrb	r3, [r3, #16]
 8101c48:	2b01      	cmp	r3, #1
 8101c4a:	d108      	bne.n	8101c5e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8101c4c:	687b      	ldr	r3, [r7, #4]
 8101c4e:	681b      	ldr	r3, [r3, #0]
 8101c50:	699a      	ldr	r2, [r3, #24]
 8101c52:	687b      	ldr	r3, [r7, #4]
 8101c54:	681b      	ldr	r3, [r3, #0]
 8101c56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8101c5a:	619a      	str	r2, [r3, #24]
 8101c5c:	e007      	b.n	8101c6e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8101c5e:	687b      	ldr	r3, [r7, #4]
 8101c60:	681b      	ldr	r3, [r3, #0]
 8101c62:	699a      	ldr	r2, [r3, #24]
 8101c64:	687b      	ldr	r3, [r7, #4]
 8101c66:	681b      	ldr	r3, [r3, #0]
 8101c68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8101c6c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8101c6e:	687b      	ldr	r3, [r7, #4]
 8101c70:	7c5b      	ldrb	r3, [r3, #17]
 8101c72:	2b01      	cmp	r3, #1
 8101c74:	d108      	bne.n	8101c88 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8101c76:	687b      	ldr	r3, [r7, #4]
 8101c78:	681b      	ldr	r3, [r3, #0]
 8101c7a:	699a      	ldr	r2, [r3, #24]
 8101c7c:	687b      	ldr	r3, [r7, #4]
 8101c7e:	681b      	ldr	r3, [r3, #0]
 8101c80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8101c84:	619a      	str	r2, [r3, #24]
 8101c86:	e007      	b.n	8101c98 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8101c88:	687b      	ldr	r3, [r7, #4]
 8101c8a:	681b      	ldr	r3, [r3, #0]
 8101c8c:	699a      	ldr	r2, [r3, #24]
 8101c8e:	687b      	ldr	r3, [r7, #4]
 8101c90:	681b      	ldr	r3, [r3, #0]
 8101c92:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8101c96:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8101c98:	687b      	ldr	r3, [r7, #4]
 8101c9a:	7c9b      	ldrb	r3, [r3, #18]
 8101c9c:	2b01      	cmp	r3, #1
 8101c9e:	d108      	bne.n	8101cb2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8101ca0:	687b      	ldr	r3, [r7, #4]
 8101ca2:	681b      	ldr	r3, [r3, #0]
 8101ca4:	699a      	ldr	r2, [r3, #24]
 8101ca6:	687b      	ldr	r3, [r7, #4]
 8101ca8:	681b      	ldr	r3, [r3, #0]
 8101caa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8101cae:	619a      	str	r2, [r3, #24]
 8101cb0:	e007      	b.n	8101cc2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8101cb2:	687b      	ldr	r3, [r7, #4]
 8101cb4:	681b      	ldr	r3, [r3, #0]
 8101cb6:	699a      	ldr	r2, [r3, #24]
 8101cb8:	687b      	ldr	r3, [r7, #4]
 8101cba:	681b      	ldr	r3, [r3, #0]
 8101cbc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8101cc0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8101cc2:	687b      	ldr	r3, [r7, #4]
 8101cc4:	681b      	ldr	r3, [r3, #0]
 8101cc6:	699b      	ldr	r3, [r3, #24]
 8101cc8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8101ccc:	687b      	ldr	r3, [r7, #4]
 8101cce:	689a      	ldr	r2, [r3, #8]
 8101cd0:	687b      	ldr	r3, [r7, #4]
 8101cd2:	681b      	ldr	r3, [r3, #0]
 8101cd4:	430a      	orrs	r2, r1
 8101cd6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8101cd8:	687b      	ldr	r3, [r7, #4]
 8101cda:	681b      	ldr	r3, [r3, #0]
 8101cdc:	699a      	ldr	r2, [r3, #24]
 8101cde:	687b      	ldr	r3, [r7, #4]
 8101ce0:	681b      	ldr	r3, [r3, #0]
 8101ce2:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8101ce6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8101ce8:	687b      	ldr	r3, [r7, #4]
 8101cea:	681b      	ldr	r3, [r3, #0]
 8101cec:	691a      	ldr	r2, [r3, #16]
 8101cee:	687b      	ldr	r3, [r7, #4]
 8101cf0:	681b      	ldr	r3, [r3, #0]
 8101cf2:	f022 0210 	bic.w	r2, r2, #16
 8101cf6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8101cf8:	687b      	ldr	r3, [r7, #4]
 8101cfa:	68db      	ldr	r3, [r3, #12]
 8101cfc:	2b01      	cmp	r3, #1
 8101cfe:	d108      	bne.n	8101d12 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8101d00:	687b      	ldr	r3, [r7, #4]
 8101d02:	681b      	ldr	r3, [r3, #0]
 8101d04:	699a      	ldr	r2, [r3, #24]
 8101d06:	687b      	ldr	r3, [r7, #4]
 8101d08:	681b      	ldr	r3, [r3, #0]
 8101d0a:	f042 0204 	orr.w	r2, r2, #4
 8101d0e:	619a      	str	r2, [r3, #24]
 8101d10:	e030      	b.n	8101d74 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8101d12:	687b      	ldr	r3, [r7, #4]
 8101d14:	68db      	ldr	r3, [r3, #12]
 8101d16:	2b00      	cmp	r3, #0
 8101d18:	d02c      	beq.n	8101d74 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8101d1a:	687b      	ldr	r3, [r7, #4]
 8101d1c:	68db      	ldr	r3, [r3, #12]
 8101d1e:	2b02      	cmp	r3, #2
 8101d20:	d020      	beq.n	8101d64 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8101d22:	687b      	ldr	r3, [r7, #4]
 8101d24:	681b      	ldr	r3, [r3, #0]
 8101d26:	699a      	ldr	r2, [r3, #24]
 8101d28:	687b      	ldr	r3, [r7, #4]
 8101d2a:	681b      	ldr	r3, [r3, #0]
 8101d2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8101d30:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8101d32:	687b      	ldr	r3, [r7, #4]
 8101d34:	681b      	ldr	r3, [r3, #0]
 8101d36:	691a      	ldr	r2, [r3, #16]
 8101d38:	687b      	ldr	r3, [r7, #4]
 8101d3a:	681b      	ldr	r3, [r3, #0]
 8101d3c:	f042 0210 	orr.w	r2, r2, #16
 8101d40:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8101d42:	687b      	ldr	r3, [r7, #4]
 8101d44:	68db      	ldr	r3, [r3, #12]
 8101d46:	2b03      	cmp	r3, #3
 8101d48:	d114      	bne.n	8101d74 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8101d4a:	687b      	ldr	r3, [r7, #4]
 8101d4c:	681b      	ldr	r3, [r3, #0]
 8101d4e:	699a      	ldr	r2, [r3, #24]
 8101d50:	687b      	ldr	r3, [r7, #4]
 8101d52:	681b      	ldr	r3, [r3, #0]
 8101d54:	f042 0220 	orr.w	r2, r2, #32
 8101d58:	619a      	str	r2, [r3, #24]
 8101d5a:	e00b      	b.n	8101d74 <HAL_FDCAN_Init+0x234>
 8101d5c:	08106c64 	.word	0x08106c64
 8101d60:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8101d64:	687b      	ldr	r3, [r7, #4]
 8101d66:	681b      	ldr	r3, [r3, #0]
 8101d68:	699a      	ldr	r2, [r3, #24]
 8101d6a:	687b      	ldr	r3, [r7, #4]
 8101d6c:	681b      	ldr	r3, [r3, #0]
 8101d6e:	f042 0220 	orr.w	r2, r2, #32
 8101d72:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8101d74:	687b      	ldr	r3, [r7, #4]
 8101d76:	699b      	ldr	r3, [r3, #24]
 8101d78:	3b01      	subs	r3, #1
 8101d7a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8101d7c:	687b      	ldr	r3, [r7, #4]
 8101d7e:	69db      	ldr	r3, [r3, #28]
 8101d80:	3b01      	subs	r3, #1
 8101d82:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8101d84:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8101d86:	687b      	ldr	r3, [r7, #4]
 8101d88:	6a1b      	ldr	r3, [r3, #32]
 8101d8a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8101d8c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8101d90:	687b      	ldr	r3, [r7, #4]
 8101d92:	695b      	ldr	r3, [r3, #20]
 8101d94:	3b01      	subs	r3, #1
 8101d96:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8101d98:	687b      	ldr	r3, [r7, #4]
 8101d9a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8101d9c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8101d9e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8101da0:	687b      	ldr	r3, [r7, #4]
 8101da2:	689b      	ldr	r3, [r3, #8]
 8101da4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8101da8:	d115      	bne.n	8101dd6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8101daa:	687b      	ldr	r3, [r7, #4]
 8101dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101dae:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8101db0:	687b      	ldr	r3, [r7, #4]
 8101db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101db4:	3b01      	subs	r3, #1
 8101db6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8101db8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8101dba:	687b      	ldr	r3, [r7, #4]
 8101dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101dbe:	3b01      	subs	r3, #1
 8101dc0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8101dc2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8101dc6:	687b      	ldr	r3, [r7, #4]
 8101dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101dca:	3b01      	subs	r3, #1
 8101dcc:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8101dce:	687b      	ldr	r3, [r7, #4]
 8101dd0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8101dd2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8101dd4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8101dd6:	687b      	ldr	r3, [r7, #4]
 8101dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101dda:	2b00      	cmp	r3, #0
 8101ddc:	d00a      	beq.n	8101df4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8101dde:	687b      	ldr	r3, [r7, #4]
 8101de0:	681b      	ldr	r3, [r3, #0]
 8101de2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8101de6:	687b      	ldr	r3, [r7, #4]
 8101de8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8101dea:	687b      	ldr	r3, [r7, #4]
 8101dec:	681b      	ldr	r3, [r3, #0]
 8101dee:	430a      	orrs	r2, r1
 8101df0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8101df4:	687b      	ldr	r3, [r7, #4]
 8101df6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8101df8:	687b      	ldr	r3, [r7, #4]
 8101dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101dfc:	4413      	add	r3, r2
 8101dfe:	2b00      	cmp	r3, #0
 8101e00:	d011      	beq.n	8101e26 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8101e02:	687b      	ldr	r3, [r7, #4]
 8101e04:	681b      	ldr	r3, [r3, #0]
 8101e06:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8101e0a:	f023 0107 	bic.w	r1, r3, #7
 8101e0e:	687b      	ldr	r3, [r7, #4]
 8101e10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8101e12:	009b      	lsls	r3, r3, #2
 8101e14:	3360      	adds	r3, #96	; 0x60
 8101e16:	443b      	add	r3, r7
 8101e18:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8101e1c:	687b      	ldr	r3, [r7, #4]
 8101e1e:	681b      	ldr	r3, [r3, #0]
 8101e20:	430a      	orrs	r2, r1
 8101e22:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8101e26:	687b      	ldr	r3, [r7, #4]
 8101e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8101e2a:	2b00      	cmp	r3, #0
 8101e2c:	d011      	beq.n	8101e52 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8101e2e:	687b      	ldr	r3, [r7, #4]
 8101e30:	681b      	ldr	r3, [r3, #0]
 8101e32:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8101e36:	f023 0107 	bic.w	r1, r3, #7
 8101e3a:	687b      	ldr	r3, [r7, #4]
 8101e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8101e3e:	009b      	lsls	r3, r3, #2
 8101e40:	3360      	adds	r3, #96	; 0x60
 8101e42:	443b      	add	r3, r7
 8101e44:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8101e48:	687b      	ldr	r3, [r7, #4]
 8101e4a:	681b      	ldr	r3, [r3, #0]
 8101e4c:	430a      	orrs	r2, r1
 8101e4e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8101e52:	687b      	ldr	r3, [r7, #4]
 8101e54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8101e56:	2b00      	cmp	r3, #0
 8101e58:	d012      	beq.n	8101e80 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8101e5a:	687b      	ldr	r3, [r7, #4]
 8101e5c:	681b      	ldr	r3, [r3, #0]
 8101e5e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8101e62:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8101e66:	687b      	ldr	r3, [r7, #4]
 8101e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8101e6a:	009b      	lsls	r3, r3, #2
 8101e6c:	3360      	adds	r3, #96	; 0x60
 8101e6e:	443b      	add	r3, r7
 8101e70:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8101e74:	011a      	lsls	r2, r3, #4
 8101e76:	687b      	ldr	r3, [r7, #4]
 8101e78:	681b      	ldr	r3, [r3, #0]
 8101e7a:	430a      	orrs	r2, r1
 8101e7c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8101e80:	687b      	ldr	r3, [r7, #4]
 8101e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101e84:	2b00      	cmp	r3, #0
 8101e86:	d012      	beq.n	8101eae <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8101e88:	687b      	ldr	r3, [r7, #4]
 8101e8a:	681b      	ldr	r3, [r3, #0]
 8101e8c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8101e90:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8101e94:	687b      	ldr	r3, [r7, #4]
 8101e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101e98:	009b      	lsls	r3, r3, #2
 8101e9a:	3360      	adds	r3, #96	; 0x60
 8101e9c:	443b      	add	r3, r7
 8101e9e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8101ea2:	021a      	lsls	r2, r3, #8
 8101ea4:	687b      	ldr	r3, [r7, #4]
 8101ea6:	681b      	ldr	r3, [r3, #0]
 8101ea8:	430a      	orrs	r2, r1
 8101eaa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8101eae:	687b      	ldr	r3, [r7, #4]
 8101eb0:	681b      	ldr	r3, [r3, #0]
 8101eb2:	4a11      	ldr	r2, [pc, #68]	; (8101ef8 <HAL_FDCAN_Init+0x3b8>)
 8101eb4:	4293      	cmp	r3, r2
 8101eb6:	d107      	bne.n	8101ec8 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8101eb8:	687b      	ldr	r3, [r7, #4]
 8101eba:	685b      	ldr	r3, [r3, #4]
 8101ebc:	689a      	ldr	r2, [r3, #8]
 8101ebe:	687b      	ldr	r3, [r7, #4]
 8101ec0:	685b      	ldr	r3, [r3, #4]
 8101ec2:	f022 0203 	bic.w	r2, r2, #3
 8101ec6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8101ec8:	687b      	ldr	r3, [r7, #4]
 8101eca:	2200      	movs	r2, #0
 8101ecc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8101ed0:	687b      	ldr	r3, [r7, #4]
 8101ed2:	2200      	movs	r2, #0
 8101ed4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8101ed8:	687b      	ldr	r3, [r7, #4]
 8101eda:	2201      	movs	r2, #1
 8101edc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8101ee0:	6878      	ldr	r0, [r7, #4]
 8101ee2:	f000 fdef 	bl	8102ac4 <FDCAN_CalcultateRamBlockAddresses>
 8101ee6:	4603      	mov	r3, r0
 8101ee8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8101eec:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8101ef0:	4618      	mov	r0, r3
 8101ef2:	3760      	adds	r7, #96	; 0x60
 8101ef4:	46bd      	mov	sp, r7
 8101ef6:	bd80      	pop	{r7, pc}
 8101ef8:	4000a000 	.word	0x4000a000

08101efc <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8101efc:	b480      	push	{r7}
 8101efe:	b087      	sub	sp, #28
 8101f00:	af00      	add	r7, sp, #0
 8101f02:	6078      	str	r0, [r7, #4]
 8101f04:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8101f06:	687b      	ldr	r3, [r7, #4]
 8101f08:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8101f0c:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8101f0e:	7bfb      	ldrb	r3, [r7, #15]
 8101f10:	2b01      	cmp	r3, #1
 8101f12:	d002      	beq.n	8101f1a <HAL_FDCAN_ConfigFilter+0x1e>
 8101f14:	7bfb      	ldrb	r3, [r7, #15]
 8101f16:	2b02      	cmp	r3, #2
 8101f18:	d157      	bne.n	8101fca <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8101f1a:	683b      	ldr	r3, [r7, #0]
 8101f1c:	681b      	ldr	r3, [r3, #0]
 8101f1e:	2b00      	cmp	r3, #0
 8101f20:	d12b      	bne.n	8101f7a <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8101f22:	683b      	ldr	r3, [r7, #0]
 8101f24:	68db      	ldr	r3, [r3, #12]
 8101f26:	2b07      	cmp	r3, #7
 8101f28:	d10d      	bne.n	8101f46 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8101f2a:	683b      	ldr	r3, [r7, #0]
 8101f2c:	691b      	ldr	r3, [r3, #16]
 8101f2e:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8101f30:	683b      	ldr	r3, [r7, #0]
 8101f32:	69db      	ldr	r3, [r3, #28]
 8101f34:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8101f36:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8101f38:	683b      	ldr	r3, [r7, #0]
 8101f3a:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8101f3c:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8101f3e:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8101f42:	617b      	str	r3, [r7, #20]
 8101f44:	e00e      	b.n	8101f64 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8101f46:	683b      	ldr	r3, [r7, #0]
 8101f48:	689b      	ldr	r3, [r3, #8]
 8101f4a:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8101f4c:	683b      	ldr	r3, [r7, #0]
 8101f4e:	68db      	ldr	r3, [r3, #12]
 8101f50:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8101f52:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8101f54:	683b      	ldr	r3, [r7, #0]
 8101f56:	691b      	ldr	r3, [r3, #16]
 8101f58:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8101f5a:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8101f5c:	683b      	ldr	r3, [r7, #0]
 8101f5e:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8101f60:	4313      	orrs	r3, r2
 8101f62:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8101f64:	687b      	ldr	r3, [r7, #4]
 8101f66:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8101f68:	683b      	ldr	r3, [r7, #0]
 8101f6a:	685b      	ldr	r3, [r3, #4]
 8101f6c:	009b      	lsls	r3, r3, #2
 8101f6e:	4413      	add	r3, r2
 8101f70:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8101f72:	68bb      	ldr	r3, [r7, #8]
 8101f74:	697a      	ldr	r2, [r7, #20]
 8101f76:	601a      	str	r2, [r3, #0]
 8101f78:	e025      	b.n	8101fc6 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8101f7a:	683b      	ldr	r3, [r7, #0]
 8101f7c:	68db      	ldr	r3, [r3, #12]
 8101f7e:	075a      	lsls	r2, r3, #29
 8101f80:	683b      	ldr	r3, [r7, #0]
 8101f82:	691b      	ldr	r3, [r3, #16]
 8101f84:	4313      	orrs	r3, r2
 8101f86:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8101f88:	683b      	ldr	r3, [r7, #0]
 8101f8a:	68db      	ldr	r3, [r3, #12]
 8101f8c:	2b07      	cmp	r3, #7
 8101f8e:	d103      	bne.n	8101f98 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8101f90:	683b      	ldr	r3, [r7, #0]
 8101f92:	699b      	ldr	r3, [r3, #24]
 8101f94:	613b      	str	r3, [r7, #16]
 8101f96:	e006      	b.n	8101fa6 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8101f98:	683b      	ldr	r3, [r7, #0]
 8101f9a:	689b      	ldr	r3, [r3, #8]
 8101f9c:	079a      	lsls	r2, r3, #30
 8101f9e:	683b      	ldr	r3, [r7, #0]
 8101fa0:	695b      	ldr	r3, [r3, #20]
 8101fa2:	4313      	orrs	r3, r2
 8101fa4:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8101fa6:	687b      	ldr	r3, [r7, #4]
 8101fa8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8101faa:	683b      	ldr	r3, [r7, #0]
 8101fac:	685b      	ldr	r3, [r3, #4]
 8101fae:	00db      	lsls	r3, r3, #3
 8101fb0:	4413      	add	r3, r2
 8101fb2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8101fb4:	68bb      	ldr	r3, [r7, #8]
 8101fb6:	697a      	ldr	r2, [r7, #20]
 8101fb8:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8101fba:	68bb      	ldr	r3, [r7, #8]
 8101fbc:	3304      	adds	r3, #4
 8101fbe:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8101fc0:	68bb      	ldr	r3, [r7, #8]
 8101fc2:	693a      	ldr	r2, [r7, #16]
 8101fc4:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8101fc6:	2300      	movs	r3, #0
 8101fc8:	e008      	b.n	8101fdc <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8101fca:	687b      	ldr	r3, [r7, #4]
 8101fcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8101fd0:	f043 0202 	orr.w	r2, r3, #2
 8101fd4:	687b      	ldr	r3, [r7, #4]
 8101fd6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8101fda:	2301      	movs	r3, #1
  }
}
 8101fdc:	4618      	mov	r0, r3
 8101fde:	371c      	adds	r7, #28
 8101fe0:	46bd      	mov	sp, r7
 8101fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fe6:	4770      	bx	lr

08101fe8 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8101fe8:	b480      	push	{r7}
 8101fea:	b083      	sub	sp, #12
 8101fec:	af00      	add	r7, sp, #0
 8101fee:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8101ff0:	687b      	ldr	r3, [r7, #4]
 8101ff2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8101ff6:	b2db      	uxtb	r3, r3
 8101ff8:	2b01      	cmp	r3, #1
 8101ffa:	d111      	bne.n	8102020 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8101ffc:	687b      	ldr	r3, [r7, #4]
 8101ffe:	2202      	movs	r2, #2
 8102000:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8102004:	687b      	ldr	r3, [r7, #4]
 8102006:	681b      	ldr	r3, [r3, #0]
 8102008:	699a      	ldr	r2, [r3, #24]
 810200a:	687b      	ldr	r3, [r7, #4]
 810200c:	681b      	ldr	r3, [r3, #0]
 810200e:	f022 0201 	bic.w	r2, r2, #1
 8102012:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8102014:	687b      	ldr	r3, [r7, #4]
 8102016:	2200      	movs	r2, #0
 8102018:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 810201c:	2300      	movs	r3, #0
 810201e:	e008      	b.n	8102032 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8102020:	687b      	ldr	r3, [r7, #4]
 8102022:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8102026:	f043 0204 	orr.w	r2, r3, #4
 810202a:	687b      	ldr	r3, [r7, #4]
 810202c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8102030:	2301      	movs	r3, #1
  }
}
 8102032:	4618      	mov	r0, r3
 8102034:	370c      	adds	r7, #12
 8102036:	46bd      	mov	sp, r7
 8102038:	f85d 7b04 	ldr.w	r7, [sp], #4
 810203c:	4770      	bx	lr

0810203e <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 810203e:	b580      	push	{r7, lr}
 8102040:	b086      	sub	sp, #24
 8102042:	af00      	add	r7, sp, #0
 8102044:	60f8      	str	r0, [r7, #12]
 8102046:	60b9      	str	r1, [r7, #8]
 8102048:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 810204a:	68fb      	ldr	r3, [r7, #12]
 810204c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8102050:	b2db      	uxtb	r3, r3
 8102052:	2b02      	cmp	r3, #2
 8102054:	d141      	bne.n	81020da <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8102056:	68fb      	ldr	r3, [r7, #12]
 8102058:	681b      	ldr	r3, [r3, #0]
 810205a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 810205e:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8102062:	2b00      	cmp	r3, #0
 8102064:	d109      	bne.n	810207a <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8102066:	68fb      	ldr	r3, [r7, #12]
 8102068:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810206c:	f043 0220 	orr.w	r2, r3, #32
 8102070:	68fb      	ldr	r3, [r7, #12]
 8102072:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8102076:	2301      	movs	r3, #1
 8102078:	e038      	b.n	81020ec <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 810207a:	68fb      	ldr	r3, [r7, #12]
 810207c:	681b      	ldr	r3, [r3, #0]
 810207e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8102082:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8102086:	2b00      	cmp	r3, #0
 8102088:	d009      	beq.n	810209e <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 810208a:	68fb      	ldr	r3, [r7, #12]
 810208c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8102090:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8102094:	68fb      	ldr	r3, [r7, #12]
 8102096:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 810209a:	2301      	movs	r3, #1
 810209c:	e026      	b.n	81020ec <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 810209e:	68fb      	ldr	r3, [r7, #12]
 81020a0:	681b      	ldr	r3, [r3, #0]
 81020a2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 81020a6:	0c1b      	lsrs	r3, r3, #16
 81020a8:	f003 031f 	and.w	r3, r3, #31
 81020ac:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 81020ae:	697b      	ldr	r3, [r7, #20]
 81020b0:	687a      	ldr	r2, [r7, #4]
 81020b2:	68b9      	ldr	r1, [r7, #8]
 81020b4:	68f8      	ldr	r0, [r7, #12]
 81020b6:	f000 fe95 	bl	8102de4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 81020ba:	68fb      	ldr	r3, [r7, #12]
 81020bc:	681b      	ldr	r3, [r3, #0]
 81020be:	2101      	movs	r1, #1
 81020c0:	697a      	ldr	r2, [r7, #20]
 81020c2:	fa01 f202 	lsl.w	r2, r1, r2
 81020c6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 81020ca:	2201      	movs	r2, #1
 81020cc:	697b      	ldr	r3, [r7, #20]
 81020ce:	409a      	lsls	r2, r3
 81020d0:	68fb      	ldr	r3, [r7, #12]
 81020d2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 81020d6:	2300      	movs	r3, #0
 81020d8:	e008      	b.n	81020ec <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 81020da:	68fb      	ldr	r3, [r7, #12]
 81020dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81020e0:	f043 0208 	orr.w	r2, r3, #8
 81020e4:	68fb      	ldr	r3, [r7, #12]
 81020e6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 81020ea:	2301      	movs	r3, #1
  }
}
 81020ec:	4618      	mov	r0, r3
 81020ee:	3718      	adds	r7, #24
 81020f0:	46bd      	mov	sp, r7
 81020f2:	bd80      	pop	{r7, pc}

081020f4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 81020f4:	b480      	push	{r7}
 81020f6:	b08b      	sub	sp, #44	; 0x2c
 81020f8:	af00      	add	r7, sp, #0
 81020fa:	60f8      	str	r0, [r7, #12]
 81020fc:	60b9      	str	r1, [r7, #8]
 81020fe:	607a      	str	r2, [r7, #4]
 8102100:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8102102:	2300      	movs	r3, #0
 8102104:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8102106:	68fb      	ldr	r3, [r7, #12]
 8102108:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 810210c:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 810210e:	7efb      	ldrb	r3, [r7, #27]
 8102110:	2b02      	cmp	r3, #2
 8102112:	f040 814b 	bne.w	81023ac <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8102116:	68bb      	ldr	r3, [r7, #8]
 8102118:	2b40      	cmp	r3, #64	; 0x40
 810211a:	d14d      	bne.n	81021b8 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 810211c:	68fb      	ldr	r3, [r7, #12]
 810211e:	681b      	ldr	r3, [r3, #0]
 8102120:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8102124:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8102128:	2b00      	cmp	r3, #0
 810212a:	d109      	bne.n	8102140 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 810212c:	68fb      	ldr	r3, [r7, #12]
 810212e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8102132:	f043 0220 	orr.w	r2, r3, #32
 8102136:	68fb      	ldr	r3, [r7, #12]
 8102138:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 810213c:	2301      	movs	r3, #1
 810213e:	e13e      	b.n	81023be <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8102140:	68fb      	ldr	r3, [r7, #12]
 8102142:	681b      	ldr	r3, [r3, #0]
 8102144:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8102148:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810214c:	2b00      	cmp	r3, #0
 810214e:	d109      	bne.n	8102164 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8102150:	68fb      	ldr	r3, [r7, #12]
 8102152:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8102156:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810215a:	68fb      	ldr	r3, [r7, #12]
 810215c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8102160:	2301      	movs	r3, #1
 8102162:	e12c      	b.n	81023be <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8102164:	68fb      	ldr	r3, [r7, #12]
 8102166:	681b      	ldr	r3, [r3, #0]
 8102168:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 810216c:	0e1b      	lsrs	r3, r3, #24
 810216e:	f003 0301 	and.w	r3, r3, #1
 8102172:	2b01      	cmp	r3, #1
 8102174:	d10b      	bne.n	810218e <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8102176:	68fb      	ldr	r3, [r7, #12]
 8102178:	681b      	ldr	r3, [r3, #0]
 810217a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810217e:	0fdb      	lsrs	r3, r3, #31
 8102180:	f003 0301 	and.w	r3, r3, #1
 8102184:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8102188:	d101      	bne.n	810218e <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 810218a:	2301      	movs	r3, #1
 810218c:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 810218e:	68fb      	ldr	r3, [r7, #12]
 8102190:	681b      	ldr	r3, [r3, #0]
 8102192:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8102196:	0a1b      	lsrs	r3, r3, #8
 8102198:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810219c:	69fa      	ldr	r2, [r7, #28]
 810219e:	4413      	add	r3, r2
 81021a0:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 81021a2:	68fb      	ldr	r3, [r7, #12]
 81021a4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 81021a6:	68fb      	ldr	r3, [r7, #12]
 81021a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81021aa:	69f9      	ldr	r1, [r7, #28]
 81021ac:	fb01 f303 	mul.w	r3, r1, r3
 81021b0:	009b      	lsls	r3, r3, #2
 81021b2:	4413      	add	r3, r2
 81021b4:	627b      	str	r3, [r7, #36]	; 0x24
 81021b6:	e069      	b.n	810228c <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 81021b8:	68bb      	ldr	r3, [r7, #8]
 81021ba:	2b41      	cmp	r3, #65	; 0x41
 81021bc:	d14d      	bne.n	810225a <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 81021be:	68fb      	ldr	r3, [r7, #12]
 81021c0:	681b      	ldr	r3, [r3, #0]
 81021c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81021c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 81021ca:	2b00      	cmp	r3, #0
 81021cc:	d109      	bne.n	81021e2 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 81021ce:	68fb      	ldr	r3, [r7, #12]
 81021d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81021d4:	f043 0220 	orr.w	r2, r3, #32
 81021d8:	68fb      	ldr	r3, [r7, #12]
 81021da:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 81021de:	2301      	movs	r3, #1
 81021e0:	e0ed      	b.n	81023be <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 81021e2:	68fb      	ldr	r3, [r7, #12]
 81021e4:	681b      	ldr	r3, [r3, #0]
 81021e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81021ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81021ee:	2b00      	cmp	r3, #0
 81021f0:	d109      	bne.n	8102206 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 81021f2:	68fb      	ldr	r3, [r7, #12]
 81021f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81021f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81021fc:	68fb      	ldr	r3, [r7, #12]
 81021fe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8102202:	2301      	movs	r3, #1
 8102204:	e0db      	b.n	81023be <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8102206:	68fb      	ldr	r3, [r7, #12]
 8102208:	681b      	ldr	r3, [r3, #0]
 810220a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810220e:	0e1b      	lsrs	r3, r3, #24
 8102210:	f003 0301 	and.w	r3, r3, #1
 8102214:	2b01      	cmp	r3, #1
 8102216:	d10b      	bne.n	8102230 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8102218:	68fb      	ldr	r3, [r7, #12]
 810221a:	681b      	ldr	r3, [r3, #0]
 810221c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8102220:	0fdb      	lsrs	r3, r3, #31
 8102222:	f003 0301 	and.w	r3, r3, #1
 8102226:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 810222a:	d101      	bne.n	8102230 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 810222c:	2301      	movs	r3, #1
 810222e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8102230:	68fb      	ldr	r3, [r7, #12]
 8102232:	681b      	ldr	r3, [r3, #0]
 8102234:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8102238:	0a1b      	lsrs	r3, r3, #8
 810223a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810223e:	69fa      	ldr	r2, [r7, #28]
 8102240:	4413      	add	r3, r2
 8102242:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8102244:	68fb      	ldr	r3, [r7, #12]
 8102246:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8102248:	68fb      	ldr	r3, [r7, #12]
 810224a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810224c:	69f9      	ldr	r1, [r7, #28]
 810224e:	fb01 f303 	mul.w	r3, r1, r3
 8102252:	009b      	lsls	r3, r3, #2
 8102254:	4413      	add	r3, r2
 8102256:	627b      	str	r3, [r7, #36]	; 0x24
 8102258:	e018      	b.n	810228c <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 810225a:	68fb      	ldr	r3, [r7, #12]
 810225c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810225e:	68ba      	ldr	r2, [r7, #8]
 8102260:	429a      	cmp	r2, r3
 8102262:	d309      	bcc.n	8102278 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8102264:	68fb      	ldr	r3, [r7, #12]
 8102266:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810226a:	f043 0220 	orr.w	r2, r3, #32
 810226e:	68fb      	ldr	r3, [r7, #12]
 8102270:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8102274:	2301      	movs	r3, #1
 8102276:	e0a2      	b.n	81023be <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8102278:	68fb      	ldr	r3, [r7, #12]
 810227a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 810227c:	68fb      	ldr	r3, [r7, #12]
 810227e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102280:	68b9      	ldr	r1, [r7, #8]
 8102282:	fb01 f303 	mul.w	r3, r1, r3
 8102286:	009b      	lsls	r3, r3, #2
 8102288:	4413      	add	r3, r2
 810228a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 810228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810228e:	681b      	ldr	r3, [r3, #0]
 8102290:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8102294:	687b      	ldr	r3, [r7, #4]
 8102296:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8102298:	687b      	ldr	r3, [r7, #4]
 810229a:	685b      	ldr	r3, [r3, #4]
 810229c:	2b00      	cmp	r3, #0
 810229e:	d107      	bne.n	81022b0 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 81022a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81022a2:	681b      	ldr	r3, [r3, #0]
 81022a4:	0c9b      	lsrs	r3, r3, #18
 81022a6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 81022aa:	687b      	ldr	r3, [r7, #4]
 81022ac:	601a      	str	r2, [r3, #0]
 81022ae:	e005      	b.n	81022bc <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 81022b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81022b2:	681b      	ldr	r3, [r3, #0]
 81022b4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 81022b8:	687b      	ldr	r3, [r7, #4]
 81022ba:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 81022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81022be:	681b      	ldr	r3, [r3, #0]
 81022c0:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 81022c4:	687b      	ldr	r3, [r7, #4]
 81022c6:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 81022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81022ca:	681b      	ldr	r3, [r3, #0]
 81022cc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 81022d0:	687b      	ldr	r3, [r7, #4]
 81022d2:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 81022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81022d6:	3304      	adds	r3, #4
 81022d8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 81022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81022dc:	681b      	ldr	r3, [r3, #0]
 81022de:	b29a      	uxth	r2, r3
 81022e0:	687b      	ldr	r3, [r7, #4]
 81022e2:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 81022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81022e6:	681b      	ldr	r3, [r3, #0]
 81022e8:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 81022ec:	687b      	ldr	r3, [r7, #4]
 81022ee:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 81022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81022f2:	681b      	ldr	r3, [r3, #0]
 81022f4:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 81022f8:	687b      	ldr	r3, [r7, #4]
 81022fa:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 81022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81022fe:	681b      	ldr	r3, [r3, #0]
 8102300:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8102304:	687b      	ldr	r3, [r7, #4]
 8102306:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8102308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810230a:	681b      	ldr	r3, [r3, #0]
 810230c:	0e1b      	lsrs	r3, r3, #24
 810230e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8102312:	687b      	ldr	r3, [r7, #4]
 8102314:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8102316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102318:	681b      	ldr	r3, [r3, #0]
 810231a:	0fda      	lsrs	r2, r3, #31
 810231c:	687b      	ldr	r3, [r7, #4]
 810231e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8102320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102322:	3304      	adds	r3, #4
 8102324:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8102326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102328:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 810232a:	2300      	movs	r3, #0
 810232c:	623b      	str	r3, [r7, #32]
 810232e:	e00a      	b.n	8102346 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8102330:	697a      	ldr	r2, [r7, #20]
 8102332:	6a3b      	ldr	r3, [r7, #32]
 8102334:	441a      	add	r2, r3
 8102336:	6839      	ldr	r1, [r7, #0]
 8102338:	6a3b      	ldr	r3, [r7, #32]
 810233a:	440b      	add	r3, r1
 810233c:	7812      	ldrb	r2, [r2, #0]
 810233e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8102340:	6a3b      	ldr	r3, [r7, #32]
 8102342:	3301      	adds	r3, #1
 8102344:	623b      	str	r3, [r7, #32]
 8102346:	687b      	ldr	r3, [r7, #4]
 8102348:	68db      	ldr	r3, [r3, #12]
 810234a:	0c1b      	lsrs	r3, r3, #16
 810234c:	4a1f      	ldr	r2, [pc, #124]	; (81023cc <HAL_FDCAN_GetRxMessage+0x2d8>)
 810234e:	5cd3      	ldrb	r3, [r2, r3]
 8102350:	461a      	mov	r2, r3
 8102352:	6a3b      	ldr	r3, [r7, #32]
 8102354:	4293      	cmp	r3, r2
 8102356:	d3eb      	bcc.n	8102330 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8102358:	68bb      	ldr	r3, [r7, #8]
 810235a:	2b40      	cmp	r3, #64	; 0x40
 810235c:	d105      	bne.n	810236a <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 810235e:	68fb      	ldr	r3, [r7, #12]
 8102360:	681b      	ldr	r3, [r3, #0]
 8102362:	69fa      	ldr	r2, [r7, #28]
 8102364:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8102368:	e01e      	b.n	81023a8 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 810236a:	68bb      	ldr	r3, [r7, #8]
 810236c:	2b41      	cmp	r3, #65	; 0x41
 810236e:	d105      	bne.n	810237c <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8102370:	68fb      	ldr	r3, [r7, #12]
 8102372:	681b      	ldr	r3, [r3, #0]
 8102374:	69fa      	ldr	r2, [r7, #28]
 8102376:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 810237a:	e015      	b.n	81023a8 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 810237c:	68bb      	ldr	r3, [r7, #8]
 810237e:	2b1f      	cmp	r3, #31
 8102380:	d808      	bhi.n	8102394 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8102382:	68fb      	ldr	r3, [r7, #12]
 8102384:	681b      	ldr	r3, [r3, #0]
 8102386:	2101      	movs	r1, #1
 8102388:	68ba      	ldr	r2, [r7, #8]
 810238a:	fa01 f202 	lsl.w	r2, r1, r2
 810238e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8102392:	e009      	b.n	81023a8 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8102394:	68bb      	ldr	r3, [r7, #8]
 8102396:	f003 021f 	and.w	r2, r3, #31
 810239a:	68fb      	ldr	r3, [r7, #12]
 810239c:	681b      	ldr	r3, [r3, #0]
 810239e:	2101      	movs	r1, #1
 81023a0:	fa01 f202 	lsl.w	r2, r1, r2
 81023a4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 81023a8:	2300      	movs	r3, #0
 81023aa:	e008      	b.n	81023be <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 81023ac:	68fb      	ldr	r3, [r7, #12]
 81023ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81023b2:	f043 0208 	orr.w	r2, r3, #8
 81023b6:	68fb      	ldr	r3, [r7, #12]
 81023b8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 81023bc:	2301      	movs	r3, #1
  }
}
 81023be:	4618      	mov	r0, r3
 81023c0:	372c      	adds	r7, #44	; 0x2c
 81023c2:	46bd      	mov	sp, r7
 81023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023c8:	4770      	bx	lr
 81023ca:	bf00      	nop
 81023cc:	081078c0 	.word	0x081078c0

081023d0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 81023d0:	b480      	push	{r7}
 81023d2:	b087      	sub	sp, #28
 81023d4:	af00      	add	r7, sp, #0
 81023d6:	60f8      	str	r0, [r7, #12]
 81023d8:	60b9      	str	r1, [r7, #8]
 81023da:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 81023dc:	68fb      	ldr	r3, [r7, #12]
 81023de:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 81023e2:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 81023e4:	7dfb      	ldrb	r3, [r7, #23]
 81023e6:	2b01      	cmp	r3, #1
 81023e8:	d002      	beq.n	81023f0 <HAL_FDCAN_ActivateNotification+0x20>
 81023ea:	7dfb      	ldrb	r3, [r7, #23]
 81023ec:	2b02      	cmp	r3, #2
 81023ee:	d157      	bne.n	81024a0 <HAL_FDCAN_ActivateNotification+0xd0>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 81023f0:	68fb      	ldr	r3, [r7, #12]
 81023f2:	681b      	ldr	r3, [r3, #0]
 81023f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 81023f6:	68bb      	ldr	r3, [r7, #8]
 81023f8:	4013      	ands	r3, r2
 81023fa:	2b00      	cmp	r3, #0
 81023fc:	d108      	bne.n	8102410 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 81023fe:	68fb      	ldr	r3, [r7, #12]
 8102400:	681b      	ldr	r3, [r3, #0]
 8102402:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8102404:	68fb      	ldr	r3, [r7, #12]
 8102406:	681b      	ldr	r3, [r3, #0]
 8102408:	f042 0201 	orr.w	r2, r2, #1
 810240c:	65da      	str	r2, [r3, #92]	; 0x5c
 810240e:	e014      	b.n	810243a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8102410:	68fb      	ldr	r3, [r7, #12]
 8102412:	681b      	ldr	r3, [r3, #0]
 8102414:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8102416:	68bb      	ldr	r3, [r7, #8]
 8102418:	4013      	ands	r3, r2
 810241a:	68ba      	ldr	r2, [r7, #8]
 810241c:	429a      	cmp	r2, r3
 810241e:	d108      	bne.n	8102432 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8102420:	68fb      	ldr	r3, [r7, #12]
 8102422:	681b      	ldr	r3, [r3, #0]
 8102424:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8102426:	68fb      	ldr	r3, [r7, #12]
 8102428:	681b      	ldr	r3, [r3, #0]
 810242a:	f042 0202 	orr.w	r2, r2, #2
 810242e:	65da      	str	r2, [r3, #92]	; 0x5c
 8102430:	e003      	b.n	810243a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8102432:	68fb      	ldr	r3, [r7, #12]
 8102434:	681b      	ldr	r3, [r3, #0]
 8102436:	2203      	movs	r2, #3
 8102438:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 810243a:	68bb      	ldr	r3, [r7, #8]
 810243c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8102440:	2b00      	cmp	r3, #0
 8102442:	d009      	beq.n	8102458 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8102444:	68fb      	ldr	r3, [r7, #12]
 8102446:	681b      	ldr	r3, [r3, #0]
 8102448:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 810244c:	68fb      	ldr	r3, [r7, #12]
 810244e:	681b      	ldr	r3, [r3, #0]
 8102450:	687a      	ldr	r2, [r7, #4]
 8102452:	430a      	orrs	r2, r1
 8102454:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8102458:	68bb      	ldr	r3, [r7, #8]
 810245a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 810245e:	2b00      	cmp	r3, #0
 8102460:	d009      	beq.n	8102476 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8102462:	68fb      	ldr	r3, [r7, #12]
 8102464:	681b      	ldr	r3, [r3, #0]
 8102466:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 810246a:	68fb      	ldr	r3, [r7, #12]
 810246c:	681b      	ldr	r3, [r3, #0]
 810246e:	687a      	ldr	r2, [r7, #4]
 8102470:	430a      	orrs	r2, r1
 8102472:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8102476:	68fb      	ldr	r3, [r7, #12]
 8102478:	681b      	ldr	r3, [r3, #0]
 810247a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 810247c:	68bb      	ldr	r3, [r7, #8]
 810247e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8102482:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8102486:	68fa      	ldr	r2, [r7, #12]
 8102488:	6812      	ldr	r2, [r2, #0]
 810248a:	430b      	orrs	r3, r1
 810248c:	6553      	str	r3, [r2, #84]	; 0x54
 810248e:	4b0c      	ldr	r3, [pc, #48]	; (81024c0 <HAL_FDCAN_ActivateNotification+0xf0>)
 8102490:	695a      	ldr	r2, [r3, #20]
 8102492:	68bb      	ldr	r3, [r7, #8]
 8102494:	0f9b      	lsrs	r3, r3, #30
 8102496:	490a      	ldr	r1, [pc, #40]	; (81024c0 <HAL_FDCAN_ActivateNotification+0xf0>)
 8102498:	4313      	orrs	r3, r2
 810249a:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 810249c:	2300      	movs	r3, #0
 810249e:	e008      	b.n	81024b2 <HAL_FDCAN_ActivateNotification+0xe2>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 81024a0:	68fb      	ldr	r3, [r7, #12]
 81024a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81024a6:	f043 0202 	orr.w	r2, r3, #2
 81024aa:	68fb      	ldr	r3, [r7, #12]
 81024ac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 81024b0:	2301      	movs	r3, #1
  }
}
 81024b2:	4618      	mov	r0, r3
 81024b4:	371c      	adds	r7, #28
 81024b6:	46bd      	mov	sp, r7
 81024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024bc:	4770      	bx	lr
 81024be:	bf00      	nop
 81024c0:	4000a800 	.word	0x4000a800

081024c4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 81024c4:	b580      	push	{r7, lr}
 81024c6:	b096      	sub	sp, #88	; 0x58
 81024c8:	af00      	add	r7, sp, #0
 81024ca:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 81024cc:	4b99      	ldr	r3, [pc, #612]	; (8102734 <HAL_FDCAN_IRQHandler+0x270>)
 81024ce:	691b      	ldr	r3, [r3, #16]
 81024d0:	079b      	lsls	r3, r3, #30
 81024d2:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 81024d4:	4b97      	ldr	r3, [pc, #604]	; (8102734 <HAL_FDCAN_IRQHandler+0x270>)
 81024d6:	695b      	ldr	r3, [r3, #20]
 81024d8:	079b      	lsls	r3, r3, #30
 81024da:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 81024dc:	4013      	ands	r3, r2
 81024de:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 81024e0:	687b      	ldr	r3, [r7, #4]
 81024e2:	681b      	ldr	r3, [r3, #0]
 81024e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81024e6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 81024ea:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 81024ec:	687b      	ldr	r3, [r7, #4]
 81024ee:	681b      	ldr	r3, [r3, #0]
 81024f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81024f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 81024f4:	4013      	ands	r3, r2
 81024f6:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 81024f8:	687b      	ldr	r3, [r7, #4]
 81024fa:	681b      	ldr	r3, [r3, #0]
 81024fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81024fe:	f003 030f 	and.w	r3, r3, #15
 8102502:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8102504:	687b      	ldr	r3, [r7, #4]
 8102506:	681b      	ldr	r3, [r3, #0]
 8102508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810250a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 810250c:	4013      	ands	r3, r2
 810250e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8102510:	687b      	ldr	r3, [r7, #4]
 8102512:	681b      	ldr	r3, [r3, #0]
 8102514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102516:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 810251a:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 810251c:	687b      	ldr	r3, [r7, #4]
 810251e:	681b      	ldr	r3, [r3, #0]
 8102520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102522:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8102524:	4013      	ands	r3, r2
 8102526:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8102528:	687b      	ldr	r3, [r7, #4]
 810252a:	681b      	ldr	r3, [r3, #0]
 810252c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810252e:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8102532:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 8102534:	687b      	ldr	r3, [r7, #4]
 8102536:	681b      	ldr	r3, [r3, #0]
 8102538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810253a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 810253c:	4013      	ands	r3, r2
 810253e:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8102540:	687b      	ldr	r3, [r7, #4]
 8102542:	681b      	ldr	r3, [r3, #0]
 8102544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102546:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 810254a:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 810254c:	687b      	ldr	r3, [r7, #4]
 810254e:	681b      	ldr	r3, [r3, #0]
 8102550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102552:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8102554:	4013      	ands	r3, r2
 8102556:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 8102558:	687b      	ldr	r3, [r7, #4]
 810255a:	681b      	ldr	r3, [r3, #0]
 810255c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810255e:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 8102560:	687b      	ldr	r3, [r7, #4]
 8102562:	681b      	ldr	r3, [r3, #0]
 8102564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102566:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8102568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810256a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810256e:	2b00      	cmp	r3, #0
 8102570:	d00f      	beq.n	8102592 <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8102572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102578:	2b00      	cmp	r3, #0
 810257a:	d00a      	beq.n	8102592 <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 810257c:	687b      	ldr	r3, [r7, #4]
 810257e:	681b      	ldr	r3, [r3, #0]
 8102580:	f44f 7280 	mov.w	r2, #256	; 0x100
 8102584:	651a      	str	r2, [r3, #80]	; 0x50
 8102586:	4b6b      	ldr	r3, [pc, #428]	; (8102734 <HAL_FDCAN_IRQHandler+0x270>)
 8102588:	2200      	movs	r2, #0
 810258a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 810258c:	6878      	ldr	r0, [r7, #4]
 810258e:	f000 fa4c 	bl	8102a2a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8102592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8102594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8102598:	2b00      	cmp	r3, #0
 810259a:	d01c      	beq.n	81025d6 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 810259c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810259e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 81025a2:	2b00      	cmp	r3, #0
 81025a4:	d017      	beq.n	81025d6 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 81025a6:	687b      	ldr	r3, [r7, #4]
 81025a8:	681b      	ldr	r3, [r3, #0]
 81025aa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 81025ae:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 81025b0:	687b      	ldr	r3, [r7, #4]
 81025b2:	681b      	ldr	r3, [r3, #0]
 81025b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 81025b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81025ba:	4013      	ands	r3, r2
 81025bc:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 81025be:	687b      	ldr	r3, [r7, #4]
 81025c0:	681b      	ldr	r3, [r3, #0]
 81025c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81025c6:	651a      	str	r2, [r3, #80]	; 0x50
 81025c8:	4b5a      	ldr	r3, [pc, #360]	; (8102734 <HAL_FDCAN_IRQHandler+0x270>)
 81025ca:	2200      	movs	r2, #0
 81025cc:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 81025ce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 81025d0:	6878      	ldr	r0, [r7, #4]
 81025d2:	f000 fa01 	bl	81029d8 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 81025d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81025d8:	2b00      	cmp	r3, #0
 81025da:	d00f      	beq.n	81025fc <HAL_FDCAN_IRQHandler+0x138>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 81025dc:	687b      	ldr	r3, [r7, #4]
 81025de:	681a      	ldr	r2, [r3, #0]
 81025e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81025e2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 81025e6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 81025ea:	6513      	str	r3, [r2, #80]	; 0x50
 81025ec:	4a51      	ldr	r2, [pc, #324]	; (8102734 <HAL_FDCAN_IRQHandler+0x270>)
 81025ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81025f0:	0f9b      	lsrs	r3, r3, #30
 81025f2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 81025f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 81025f6:	6878      	ldr	r0, [r7, #4]
 81025f8:	f000 f9b8 	bl	810296c <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 81025fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 81025fe:	2b00      	cmp	r3, #0
 8102600:	d00f      	beq.n	8102622 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8102602:	687b      	ldr	r3, [r7, #4]
 8102604:	681a      	ldr	r2, [r3, #0]
 8102606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8102608:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 810260c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8102610:	6513      	str	r3, [r2, #80]	; 0x50
 8102612:	4a48      	ldr	r2, [pc, #288]	; (8102734 <HAL_FDCAN_IRQHandler+0x270>)
 8102614:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8102616:	0f9b      	lsrs	r3, r3, #30
 8102618:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 810261a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 810261c:	6878      	ldr	r0, [r7, #4]
 810261e:	f000 f9b0 	bl	8102982 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8102622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8102624:	2b00      	cmp	r3, #0
 8102626:	d00f      	beq.n	8102648 <HAL_FDCAN_IRQHandler+0x184>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8102628:	687b      	ldr	r3, [r7, #4]
 810262a:	681a      	ldr	r2, [r3, #0]
 810262c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810262e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8102632:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8102636:	6513      	str	r3, [r2, #80]	; 0x50
 8102638:	4a3e      	ldr	r2, [pc, #248]	; (8102734 <HAL_FDCAN_IRQHandler+0x270>)
 810263a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810263c:	0f9b      	lsrs	r3, r3, #30
 810263e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8102640:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8102642:	6878      	ldr	r0, [r7, #4]
 8102644:	f7fe fd26 	bl	8101094 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8102648:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810264a:	2b00      	cmp	r3, #0
 810264c:	d00f      	beq.n	810266e <HAL_FDCAN_IRQHandler+0x1aa>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 810264e:	687b      	ldr	r3, [r7, #4]
 8102650:	681a      	ldr	r2, [r3, #0]
 8102652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8102654:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8102658:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 810265c:	6513      	str	r3, [r2, #80]	; 0x50
 810265e:	4a35      	ldr	r2, [pc, #212]	; (8102734 <HAL_FDCAN_IRQHandler+0x270>)
 8102660:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8102662:	0f9b      	lsrs	r3, r3, #30
 8102664:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8102666:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8102668:	6878      	ldr	r0, [r7, #4]
 810266a:	f000 f995 	bl	8102998 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 810266e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8102670:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8102674:	2b00      	cmp	r3, #0
 8102676:	d00f      	beq.n	8102698 <HAL_FDCAN_IRQHandler+0x1d4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8102678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810267a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810267e:	2b00      	cmp	r3, #0
 8102680:	d00a      	beq.n	8102698 <HAL_FDCAN_IRQHandler+0x1d4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8102682:	687b      	ldr	r3, [r7, #4]
 8102684:	681b      	ldr	r3, [r3, #0]
 8102686:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810268a:	651a      	str	r2, [r3, #80]	; 0x50
 810268c:	4b29      	ldr	r3, [pc, #164]	; (8102734 <HAL_FDCAN_IRQHandler+0x270>)
 810268e:	2200      	movs	r2, #0
 8102690:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8102692:	6878      	ldr	r0, [r7, #4]
 8102694:	f000 f98b 	bl	81029ae <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8102698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810269a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810269e:	2b00      	cmp	r3, #0
 81026a0:	d01c      	beq.n	81026dc <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 81026a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81026a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81026a8:	2b00      	cmp	r3, #0
 81026aa:	d017      	beq.n	81026dc <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 81026ac:	687b      	ldr	r3, [r7, #4]
 81026ae:	681b      	ldr	r3, [r3, #0]
 81026b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81026b4:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 81026b6:	687b      	ldr	r3, [r7, #4]
 81026b8:	681b      	ldr	r3, [r3, #0]
 81026ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81026be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81026c0:	4013      	ands	r3, r2
 81026c2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 81026c4:	687b      	ldr	r3, [r7, #4]
 81026c6:	681b      	ldr	r3, [r3, #0]
 81026c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 81026cc:	651a      	str	r2, [r3, #80]	; 0x50
 81026ce:	4b19      	ldr	r3, [pc, #100]	; (8102734 <HAL_FDCAN_IRQHandler+0x270>)
 81026d0:	2200      	movs	r2, #0
 81026d2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 81026d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 81026d6:	6878      	ldr	r0, [r7, #4]
 81026d8:	f000 f973 	bl	81029c2 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 81026dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81026de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 81026e2:	2b00      	cmp	r3, #0
 81026e4:	d00f      	beq.n	8102706 <HAL_FDCAN_IRQHandler+0x242>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 81026e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81026e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 81026ec:	2b00      	cmp	r3, #0
 81026ee:	d00a      	beq.n	8102706 <HAL_FDCAN_IRQHandler+0x242>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 81026f0:	687b      	ldr	r3, [r7, #4]
 81026f2:	681b      	ldr	r3, [r3, #0]
 81026f4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 81026f8:	651a      	str	r2, [r3, #80]	; 0x50
 81026fa:	4b0e      	ldr	r3, [pc, #56]	; (8102734 <HAL_FDCAN_IRQHandler+0x270>)
 81026fc:	2200      	movs	r2, #0
 81026fe:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8102700:	6878      	ldr	r0, [r7, #4]
 8102702:	f000 f974 	bl	81029ee <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8102706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8102708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810270c:	2b00      	cmp	r3, #0
 810270e:	d013      	beq.n	8102738 <HAL_FDCAN_IRQHandler+0x274>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8102710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8102716:	2b00      	cmp	r3, #0
 8102718:	d00e      	beq.n	8102738 <HAL_FDCAN_IRQHandler+0x274>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 810271a:	687b      	ldr	r3, [r7, #4]
 810271c:	681b      	ldr	r3, [r3, #0]
 810271e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8102722:	651a      	str	r2, [r3, #80]	; 0x50
 8102724:	4b03      	ldr	r3, [pc, #12]	; (8102734 <HAL_FDCAN_IRQHandler+0x270>)
 8102726:	2200      	movs	r2, #0
 8102728:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 810272a:	6878      	ldr	r0, [r7, #4]
 810272c:	f000 f969 	bl	8102a02 <HAL_FDCAN_TimestampWraparoundCallback>
 8102730:	e002      	b.n	8102738 <HAL_FDCAN_IRQHandler+0x274>
 8102732:	bf00      	nop
 8102734:	4000a800 	.word	0x4000a800
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8102738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810273a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810273e:	2b00      	cmp	r3, #0
 8102740:	d00f      	beq.n	8102762 <HAL_FDCAN_IRQHandler+0x29e>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8102742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102744:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8102748:	2b00      	cmp	r3, #0
 810274a:	d00a      	beq.n	8102762 <HAL_FDCAN_IRQHandler+0x29e>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 810274c:	687b      	ldr	r3, [r7, #4]
 810274e:	681b      	ldr	r3, [r3, #0]
 8102750:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8102754:	651a      	str	r2, [r3, #80]	; 0x50
 8102756:	4b83      	ldr	r3, [pc, #524]	; (8102964 <HAL_FDCAN_IRQHandler+0x4a0>)
 8102758:	2200      	movs	r2, #0
 810275a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 810275c:	6878      	ldr	r0, [r7, #4]
 810275e:	f000 f95a 	bl	8102a16 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8102762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8102764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8102768:	2b00      	cmp	r3, #0
 810276a:	d014      	beq.n	8102796 <HAL_FDCAN_IRQHandler+0x2d2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 810276c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810276e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8102772:	2b00      	cmp	r3, #0
 8102774:	d00f      	beq.n	8102796 <HAL_FDCAN_IRQHandler+0x2d2>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8102776:	687b      	ldr	r3, [r7, #4]
 8102778:	681b      	ldr	r3, [r3, #0]
 810277a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 810277e:	651a      	str	r2, [r3, #80]	; 0x50
 8102780:	4b78      	ldr	r3, [pc, #480]	; (8102964 <HAL_FDCAN_IRQHandler+0x4a0>)
 8102782:	2200      	movs	r2, #0
 8102784:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8102786:	687b      	ldr	r3, [r7, #4]
 8102788:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810278c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8102790:	687b      	ldr	r3, [r7, #4]
 8102792:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8102796:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8102798:	2b00      	cmp	r3, #0
 810279a:	d00f      	beq.n	81027bc <HAL_FDCAN_IRQHandler+0x2f8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 810279c:	687b      	ldr	r3, [r7, #4]
 810279e:	681a      	ldr	r2, [r3, #0]
 81027a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81027a2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 81027a6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 81027aa:	6513      	str	r3, [r2, #80]	; 0x50
 81027ac:	4a6d      	ldr	r2, [pc, #436]	; (8102964 <HAL_FDCAN_IRQHandler+0x4a0>)
 81027ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81027b0:	0f9b      	lsrs	r3, r3, #30
 81027b2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 81027b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 81027b6:	6878      	ldr	r0, [r7, #4]
 81027b8:	f000 f94b 	bl	8102a52 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 81027bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81027be:	2b00      	cmp	r3, #0
 81027c0:	d013      	beq.n	81027ea <HAL_FDCAN_IRQHandler+0x326>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 81027c2:	687b      	ldr	r3, [r7, #4]
 81027c4:	681a      	ldr	r2, [r3, #0]
 81027c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81027c8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 81027cc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 81027d0:	6513      	str	r3, [r2, #80]	; 0x50
 81027d2:	4a64      	ldr	r2, [pc, #400]	; (8102964 <HAL_FDCAN_IRQHandler+0x4a0>)
 81027d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81027d6:	0f9b      	lsrs	r3, r3, #30
 81027d8:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 81027da:	687b      	ldr	r3, [r7, #4]
 81027dc:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 81027e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81027e2:	431a      	orrs	r2, r3
 81027e4:	687b      	ldr	r3, [r7, #4]
 81027e6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 81027ea:	687b      	ldr	r3, [r7, #4]
 81027ec:	681b      	ldr	r3, [r3, #0]
 81027ee:	4a5e      	ldr	r2, [pc, #376]	; (8102968 <HAL_FDCAN_IRQHandler+0x4a4>)
 81027f0:	4293      	cmp	r3, r2
 81027f2:	f040 80aa 	bne.w	810294a <HAL_FDCAN_IRQHandler+0x486>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 81027f6:	687b      	ldr	r3, [r7, #4]
 81027f8:	685b      	ldr	r3, [r3, #4]
 81027fa:	689b      	ldr	r3, [r3, #8]
 81027fc:	f003 0303 	and.w	r3, r3, #3
 8102800:	2b00      	cmp	r3, #0
 8102802:	f000 80a2 	beq.w	810294a <HAL_FDCAN_IRQHandler+0x486>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8102806:	687b      	ldr	r3, [r7, #4]
 8102808:	685b      	ldr	r3, [r3, #4]
 810280a:	6a1b      	ldr	r3, [r3, #32]
 810280c:	f003 030f 	and.w	r3, r3, #15
 8102810:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8102812:	687b      	ldr	r3, [r7, #4]
 8102814:	685b      	ldr	r3, [r3, #4]
 8102816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810281a:	4013      	ands	r3, r2
 810281c:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 810281e:	687b      	ldr	r3, [r7, #4]
 8102820:	685b      	ldr	r3, [r3, #4]
 8102822:	6a1b      	ldr	r3, [r3, #32]
 8102824:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8102828:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 810282a:	687b      	ldr	r3, [r7, #4]
 810282c:	685b      	ldr	r3, [r3, #4]
 810282e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102830:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8102832:	4013      	ands	r3, r2
 8102834:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8102836:	687b      	ldr	r3, [r7, #4]
 8102838:	685b      	ldr	r3, [r3, #4]
 810283a:	6a1b      	ldr	r3, [r3, #32]
 810283c:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8102840:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8102842:	687b      	ldr	r3, [r7, #4]
 8102844:	685b      	ldr	r3, [r3, #4]
 8102846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810284a:	4013      	ands	r3, r2
 810284c:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 810284e:	687b      	ldr	r3, [r7, #4]
 8102850:	685b      	ldr	r3, [r3, #4]
 8102852:	6a1b      	ldr	r3, [r3, #32]
 8102854:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8102858:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 810285a:	687b      	ldr	r3, [r7, #4]
 810285c:	685b      	ldr	r3, [r3, #4]
 810285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102860:	6a3a      	ldr	r2, [r7, #32]
 8102862:	4013      	ands	r3, r2
 8102864:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8102866:	687b      	ldr	r3, [r7, #4]
 8102868:	685b      	ldr	r3, [r3, #4]
 810286a:	6a1b      	ldr	r3, [r3, #32]
 810286c:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8102870:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8102872:	687b      	ldr	r3, [r7, #4]
 8102874:	685b      	ldr	r3, [r3, #4]
 8102876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102878:	69fa      	ldr	r2, [r7, #28]
 810287a:	4013      	ands	r3, r2
 810287c:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 810287e:	687b      	ldr	r3, [r7, #4]
 8102880:	685b      	ldr	r3, [r3, #4]
 8102882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102884:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8102886:	687b      	ldr	r3, [r7, #4]
 8102888:	685b      	ldr	r3, [r3, #4]
 810288a:	6a1b      	ldr	r3, [r3, #32]
 810288c:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 810288e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102890:	2b00      	cmp	r3, #0
 8102892:	d007      	beq.n	81028a4 <HAL_FDCAN_IRQHandler+0x3e0>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8102894:	687b      	ldr	r3, [r7, #4]
 8102896:	685b      	ldr	r3, [r3, #4]
 8102898:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810289a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 810289c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 810289e:	6878      	ldr	r0, [r7, #4]
 81028a0:	f000 f8e2 	bl	8102a68 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 81028a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81028a6:	2b00      	cmp	r3, #0
 81028a8:	d007      	beq.n	81028ba <HAL_FDCAN_IRQHandler+0x3f6>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 81028aa:	687b      	ldr	r3, [r7, #4]
 81028ac:	685b      	ldr	r3, [r3, #4]
 81028ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81028b0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 81028b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 81028b4:	6878      	ldr	r0, [r7, #4]
 81028b6:	f000 f8e2 	bl	8102a7e <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 81028ba:	69bb      	ldr	r3, [r7, #24]
 81028bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81028c0:	2b00      	cmp	r3, #0
 81028c2:	d019      	beq.n	81028f8 <HAL_FDCAN_IRQHandler+0x434>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 81028c4:	697b      	ldr	r3, [r7, #20]
 81028c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81028ca:	2b00      	cmp	r3, #0
 81028cc:	d014      	beq.n	81028f8 <HAL_FDCAN_IRQHandler+0x434>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 81028ce:	687b      	ldr	r3, [r7, #4]
 81028d0:	685b      	ldr	r3, [r3, #4]
 81028d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81028d4:	0c1b      	lsrs	r3, r3, #16
 81028d6:	b29b      	uxth	r3, r3
 81028d8:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 81028da:	687b      	ldr	r3, [r7, #4]
 81028dc:	685b      	ldr	r3, [r3, #4]
 81028de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81028e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81028e4:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 81028e6:	687b      	ldr	r3, [r7, #4]
 81028e8:	685b      	ldr	r3, [r3, #4]
 81028ea:	2240      	movs	r2, #64	; 0x40
 81028ec:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 81028ee:	68fa      	ldr	r2, [r7, #12]
 81028f0:	6939      	ldr	r1, [r7, #16]
 81028f2:	6878      	ldr	r0, [r7, #4]
 81028f4:	f000 f8ce 	bl	8102a94 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 81028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81028fa:	2b00      	cmp	r3, #0
 81028fc:	d007      	beq.n	810290e <HAL_FDCAN_IRQHandler+0x44a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 81028fe:	687b      	ldr	r3, [r7, #4]
 8102900:	685b      	ldr	r3, [r3, #4]
 8102902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8102904:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8102906:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8102908:	6878      	ldr	r0, [r7, #4]
 810290a:	f000 f8cf 	bl	8102aac <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 810290e:	6a3b      	ldr	r3, [r7, #32]
 8102910:	2b00      	cmp	r3, #0
 8102912:	d00b      	beq.n	810292c <HAL_FDCAN_IRQHandler+0x468>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8102914:	687b      	ldr	r3, [r7, #4]
 8102916:	685b      	ldr	r3, [r3, #4]
 8102918:	6a3a      	ldr	r2, [r7, #32]
 810291a:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 810291c:	687b      	ldr	r3, [r7, #4]
 810291e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8102922:	6a3b      	ldr	r3, [r7, #32]
 8102924:	431a      	orrs	r2, r3
 8102926:	687b      	ldr	r3, [r7, #4]
 8102928:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 810292c:	69fb      	ldr	r3, [r7, #28]
 810292e:	2b00      	cmp	r3, #0
 8102930:	d00b      	beq.n	810294a <HAL_FDCAN_IRQHandler+0x486>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8102932:	687b      	ldr	r3, [r7, #4]
 8102934:	685b      	ldr	r3, [r3, #4]
 8102936:	69fa      	ldr	r2, [r7, #28]
 8102938:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 810293a:	687b      	ldr	r3, [r7, #4]
 810293c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8102940:	69fb      	ldr	r3, [r7, #28]
 8102942:	431a      	orrs	r2, r3
 8102944:	687b      	ldr	r3, [r7, #4]
 8102946:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 810294a:	687b      	ldr	r3, [r7, #4]
 810294c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8102950:	2b00      	cmp	r3, #0
 8102952:	d002      	beq.n	810295a <HAL_FDCAN_IRQHandler+0x496>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8102954:	6878      	ldr	r0, [r7, #4]
 8102956:	f000 f872 	bl	8102a3e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 810295a:	bf00      	nop
 810295c:	3758      	adds	r7, #88	; 0x58
 810295e:	46bd      	mov	sp, r7
 8102960:	bd80      	pop	{r7, pc}
 8102962:	bf00      	nop
 8102964:	4000a800 	.word	0x4000a800
 8102968:	4000a000 	.word	0x4000a000

0810296c <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 810296c:	b480      	push	{r7}
 810296e:	b083      	sub	sp, #12
 8102970:	af00      	add	r7, sp, #0
 8102972:	6078      	str	r0, [r7, #4]
 8102974:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8102976:	bf00      	nop
 8102978:	370c      	adds	r7, #12
 810297a:	46bd      	mov	sp, r7
 810297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102980:	4770      	bx	lr

08102982 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8102982:	b480      	push	{r7}
 8102984:	b083      	sub	sp, #12
 8102986:	af00      	add	r7, sp, #0
 8102988:	6078      	str	r0, [r7, #4]
 810298a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 810298c:	bf00      	nop
 810298e:	370c      	adds	r7, #12
 8102990:	46bd      	mov	sp, r7
 8102992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102996:	4770      	bx	lr

08102998 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8102998:	b480      	push	{r7}
 810299a:	b083      	sub	sp, #12
 810299c:	af00      	add	r7, sp, #0
 810299e:	6078      	str	r0, [r7, #4]
 81029a0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 81029a2:	bf00      	nop
 81029a4:	370c      	adds	r7, #12
 81029a6:	46bd      	mov	sp, r7
 81029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029ac:	4770      	bx	lr

081029ae <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 81029ae:	b480      	push	{r7}
 81029b0:	b083      	sub	sp, #12
 81029b2:	af00      	add	r7, sp, #0
 81029b4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 81029b6:	bf00      	nop
 81029b8:	370c      	adds	r7, #12
 81029ba:	46bd      	mov	sp, r7
 81029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029c0:	4770      	bx	lr

081029c2 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 81029c2:	b480      	push	{r7}
 81029c4:	b083      	sub	sp, #12
 81029c6:	af00      	add	r7, sp, #0
 81029c8:	6078      	str	r0, [r7, #4]
 81029ca:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 81029cc:	bf00      	nop
 81029ce:	370c      	adds	r7, #12
 81029d0:	46bd      	mov	sp, r7
 81029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029d6:	4770      	bx	lr

081029d8 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 81029d8:	b480      	push	{r7}
 81029da:	b083      	sub	sp, #12
 81029dc:	af00      	add	r7, sp, #0
 81029de:	6078      	str	r0, [r7, #4]
 81029e0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 81029e2:	bf00      	nop
 81029e4:	370c      	adds	r7, #12
 81029e6:	46bd      	mov	sp, r7
 81029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029ec:	4770      	bx	lr

081029ee <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 81029ee:	b480      	push	{r7}
 81029f0:	b083      	sub	sp, #12
 81029f2:	af00      	add	r7, sp, #0
 81029f4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 81029f6:	bf00      	nop
 81029f8:	370c      	adds	r7, #12
 81029fa:	46bd      	mov	sp, r7
 81029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a00:	4770      	bx	lr

08102a02 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8102a02:	b480      	push	{r7}
 8102a04:	b083      	sub	sp, #12
 8102a06:	af00      	add	r7, sp, #0
 8102a08:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8102a0a:	bf00      	nop
 8102a0c:	370c      	adds	r7, #12
 8102a0e:	46bd      	mov	sp, r7
 8102a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a14:	4770      	bx	lr

08102a16 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8102a16:	b480      	push	{r7}
 8102a18:	b083      	sub	sp, #12
 8102a1a:	af00      	add	r7, sp, #0
 8102a1c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8102a1e:	bf00      	nop
 8102a20:	370c      	adds	r7, #12
 8102a22:	46bd      	mov	sp, r7
 8102a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a28:	4770      	bx	lr

08102a2a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8102a2a:	b480      	push	{r7}
 8102a2c:	b083      	sub	sp, #12
 8102a2e:	af00      	add	r7, sp, #0
 8102a30:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8102a32:	bf00      	nop
 8102a34:	370c      	adds	r7, #12
 8102a36:	46bd      	mov	sp, r7
 8102a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a3c:	4770      	bx	lr

08102a3e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8102a3e:	b480      	push	{r7}
 8102a40:	b083      	sub	sp, #12
 8102a42:	af00      	add	r7, sp, #0
 8102a44:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8102a46:	bf00      	nop
 8102a48:	370c      	adds	r7, #12
 8102a4a:	46bd      	mov	sp, r7
 8102a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a50:	4770      	bx	lr

08102a52 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8102a52:	b480      	push	{r7}
 8102a54:	b083      	sub	sp, #12
 8102a56:	af00      	add	r7, sp, #0
 8102a58:	6078      	str	r0, [r7, #4]
 8102a5a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8102a5c:	bf00      	nop
 8102a5e:	370c      	adds	r7, #12
 8102a60:	46bd      	mov	sp, r7
 8102a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a66:	4770      	bx	lr

08102a68 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8102a68:	b480      	push	{r7}
 8102a6a:	b083      	sub	sp, #12
 8102a6c:	af00      	add	r7, sp, #0
 8102a6e:	6078      	str	r0, [r7, #4]
 8102a70:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8102a72:	bf00      	nop
 8102a74:	370c      	adds	r7, #12
 8102a76:	46bd      	mov	sp, r7
 8102a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a7c:	4770      	bx	lr

08102a7e <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8102a7e:	b480      	push	{r7}
 8102a80:	b083      	sub	sp, #12
 8102a82:	af00      	add	r7, sp, #0
 8102a84:	6078      	str	r0, [r7, #4]
 8102a86:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8102a88:	bf00      	nop
 8102a8a:	370c      	adds	r7, #12
 8102a8c:	46bd      	mov	sp, r7
 8102a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a92:	4770      	bx	lr

08102a94 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8102a94:	b480      	push	{r7}
 8102a96:	b085      	sub	sp, #20
 8102a98:	af00      	add	r7, sp, #0
 8102a9a:	60f8      	str	r0, [r7, #12]
 8102a9c:	60b9      	str	r1, [r7, #8]
 8102a9e:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8102aa0:	bf00      	nop
 8102aa2:	3714      	adds	r7, #20
 8102aa4:	46bd      	mov	sp, r7
 8102aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102aaa:	4770      	bx	lr

08102aac <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8102aac:	b480      	push	{r7}
 8102aae:	b083      	sub	sp, #12
 8102ab0:	af00      	add	r7, sp, #0
 8102ab2:	6078      	str	r0, [r7, #4]
 8102ab4:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8102ab6:	bf00      	nop
 8102ab8:	370c      	adds	r7, #12
 8102aba:	46bd      	mov	sp, r7
 8102abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ac0:	4770      	bx	lr
	...

08102ac4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8102ac4:	b480      	push	{r7}
 8102ac6:	b085      	sub	sp, #20
 8102ac8:	af00      	add	r7, sp, #0
 8102aca:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8102acc:	687b      	ldr	r3, [r7, #4]
 8102ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8102ad0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8102ad2:	687b      	ldr	r3, [r7, #4]
 8102ad4:	681b      	ldr	r3, [r3, #0]
 8102ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8102ada:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8102ade:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8102ae2:	68ba      	ldr	r2, [r7, #8]
 8102ae4:	0091      	lsls	r1, r2, #2
 8102ae6:	687a      	ldr	r2, [r7, #4]
 8102ae8:	6812      	ldr	r2, [r2, #0]
 8102aea:	430b      	orrs	r3, r1
 8102aec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8102af0:	687b      	ldr	r3, [r7, #4]
 8102af2:	681b      	ldr	r3, [r3, #0]
 8102af4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8102af8:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8102afc:	687b      	ldr	r3, [r7, #4]
 8102afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102b00:	041a      	lsls	r2, r3, #16
 8102b02:	687b      	ldr	r3, [r7, #4]
 8102b04:	681b      	ldr	r3, [r3, #0]
 8102b06:	430a      	orrs	r2, r1
 8102b08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8102b0c:	687b      	ldr	r3, [r7, #4]
 8102b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102b10:	68ba      	ldr	r2, [r7, #8]
 8102b12:	4413      	add	r3, r2
 8102b14:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8102b16:	687b      	ldr	r3, [r7, #4]
 8102b18:	681b      	ldr	r3, [r3, #0]
 8102b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8102b1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8102b22:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8102b26:	68ba      	ldr	r2, [r7, #8]
 8102b28:	0091      	lsls	r1, r2, #2
 8102b2a:	687a      	ldr	r2, [r7, #4]
 8102b2c:	6812      	ldr	r2, [r2, #0]
 8102b2e:	430b      	orrs	r3, r1
 8102b30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8102b34:	687b      	ldr	r3, [r7, #4]
 8102b36:	681b      	ldr	r3, [r3, #0]
 8102b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8102b3c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8102b40:	687b      	ldr	r3, [r7, #4]
 8102b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102b44:	041a      	lsls	r2, r3, #16
 8102b46:	687b      	ldr	r3, [r7, #4]
 8102b48:	681b      	ldr	r3, [r3, #0]
 8102b4a:	430a      	orrs	r2, r1
 8102b4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8102b50:	687b      	ldr	r3, [r7, #4]
 8102b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102b54:	005b      	lsls	r3, r3, #1
 8102b56:	68ba      	ldr	r2, [r7, #8]
 8102b58:	4413      	add	r3, r2
 8102b5a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8102b5c:	687b      	ldr	r3, [r7, #4]
 8102b5e:	681b      	ldr	r3, [r3, #0]
 8102b60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8102b64:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8102b68:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8102b6c:	68ba      	ldr	r2, [r7, #8]
 8102b6e:	0091      	lsls	r1, r2, #2
 8102b70:	687a      	ldr	r2, [r7, #4]
 8102b72:	6812      	ldr	r2, [r2, #0]
 8102b74:	430b      	orrs	r3, r1
 8102b76:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8102b7a:	687b      	ldr	r3, [r7, #4]
 8102b7c:	681b      	ldr	r3, [r3, #0]
 8102b7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8102b82:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8102b86:	687b      	ldr	r3, [r7, #4]
 8102b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102b8a:	041a      	lsls	r2, r3, #16
 8102b8c:	687b      	ldr	r3, [r7, #4]
 8102b8e:	681b      	ldr	r3, [r3, #0]
 8102b90:	430a      	orrs	r2, r1
 8102b92:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8102b96:	687b      	ldr	r3, [r7, #4]
 8102b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102b9a:	687a      	ldr	r2, [r7, #4]
 8102b9c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8102b9e:	fb02 f303 	mul.w	r3, r2, r3
 8102ba2:	68ba      	ldr	r2, [r7, #8]
 8102ba4:	4413      	add	r3, r2
 8102ba6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8102ba8:	687b      	ldr	r3, [r7, #4]
 8102baa:	681b      	ldr	r3, [r3, #0]
 8102bac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8102bb0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8102bb4:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8102bb8:	68ba      	ldr	r2, [r7, #8]
 8102bba:	0091      	lsls	r1, r2, #2
 8102bbc:	687a      	ldr	r2, [r7, #4]
 8102bbe:	6812      	ldr	r2, [r2, #0]
 8102bc0:	430b      	orrs	r3, r1
 8102bc2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8102bc6:	687b      	ldr	r3, [r7, #4]
 8102bc8:	681b      	ldr	r3, [r3, #0]
 8102bca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8102bce:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8102bd2:	687b      	ldr	r3, [r7, #4]
 8102bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102bd6:	041a      	lsls	r2, r3, #16
 8102bd8:	687b      	ldr	r3, [r7, #4]
 8102bda:	681b      	ldr	r3, [r3, #0]
 8102bdc:	430a      	orrs	r2, r1
 8102bde:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8102be2:	687b      	ldr	r3, [r7, #4]
 8102be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102be6:	687a      	ldr	r2, [r7, #4]
 8102be8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8102bea:	fb02 f303 	mul.w	r3, r2, r3
 8102bee:	68ba      	ldr	r2, [r7, #8]
 8102bf0:	4413      	add	r3, r2
 8102bf2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8102bf4:	687b      	ldr	r3, [r7, #4]
 8102bf6:	681b      	ldr	r3, [r3, #0]
 8102bf8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8102bfc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8102c00:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8102c04:	68ba      	ldr	r2, [r7, #8]
 8102c06:	0091      	lsls	r1, r2, #2
 8102c08:	687a      	ldr	r2, [r7, #4]
 8102c0a:	6812      	ldr	r2, [r2, #0]
 8102c0c:	430b      	orrs	r3, r1
 8102c0e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8102c12:	687b      	ldr	r3, [r7, #4]
 8102c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102c16:	687a      	ldr	r2, [r7, #4]
 8102c18:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8102c1a:	fb02 f303 	mul.w	r3, r2, r3
 8102c1e:	68ba      	ldr	r2, [r7, #8]
 8102c20:	4413      	add	r3, r2
 8102c22:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8102c24:	687b      	ldr	r3, [r7, #4]
 8102c26:	681b      	ldr	r3, [r3, #0]
 8102c28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102c2c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8102c30:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8102c34:	68ba      	ldr	r2, [r7, #8]
 8102c36:	0091      	lsls	r1, r2, #2
 8102c38:	687a      	ldr	r2, [r7, #4]
 8102c3a:	6812      	ldr	r2, [r2, #0]
 8102c3c:	430b      	orrs	r3, r1
 8102c3e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8102c42:	687b      	ldr	r3, [r7, #4]
 8102c44:	681b      	ldr	r3, [r3, #0]
 8102c46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102c4a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8102c4e:	687b      	ldr	r3, [r7, #4]
 8102c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102c52:	041a      	lsls	r2, r3, #16
 8102c54:	687b      	ldr	r3, [r7, #4]
 8102c56:	681b      	ldr	r3, [r3, #0]
 8102c58:	430a      	orrs	r2, r1
 8102c5a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8102c5e:	687b      	ldr	r3, [r7, #4]
 8102c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102c62:	005b      	lsls	r3, r3, #1
 8102c64:	68ba      	ldr	r2, [r7, #8]
 8102c66:	4413      	add	r3, r2
 8102c68:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8102c6a:	687b      	ldr	r3, [r7, #4]
 8102c6c:	681b      	ldr	r3, [r3, #0]
 8102c6e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8102c72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8102c76:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8102c7a:	68ba      	ldr	r2, [r7, #8]
 8102c7c:	0091      	lsls	r1, r2, #2
 8102c7e:	687a      	ldr	r2, [r7, #4]
 8102c80:	6812      	ldr	r2, [r2, #0]
 8102c82:	430b      	orrs	r3, r1
 8102c84:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8102c88:	687b      	ldr	r3, [r7, #4]
 8102c8a:	681b      	ldr	r3, [r3, #0]
 8102c8c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8102c90:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8102c94:	687b      	ldr	r3, [r7, #4]
 8102c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102c98:	041a      	lsls	r2, r3, #16
 8102c9a:	687b      	ldr	r3, [r7, #4]
 8102c9c:	681b      	ldr	r3, [r3, #0]
 8102c9e:	430a      	orrs	r2, r1
 8102ca0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8102ca4:	687b      	ldr	r3, [r7, #4]
 8102ca6:	681b      	ldr	r3, [r3, #0]
 8102ca8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8102cac:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8102cb0:	687b      	ldr	r3, [r7, #4]
 8102cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102cb4:	061a      	lsls	r2, r3, #24
 8102cb6:	687b      	ldr	r3, [r7, #4]
 8102cb8:	681b      	ldr	r3, [r3, #0]
 8102cba:	430a      	orrs	r2, r1
 8102cbc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8102cc0:	687b      	ldr	r3, [r7, #4]
 8102cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8102cc4:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8102cc8:	f503 532c 	add.w	r3, r3, #11008	; 0x2b00
 8102ccc:	009a      	lsls	r2, r3, #2
 8102cce:	687b      	ldr	r3, [r7, #4]
 8102cd0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8102cd2:	687b      	ldr	r3, [r7, #4]
 8102cd4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8102cd6:	687b      	ldr	r3, [r7, #4]
 8102cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102cda:	009b      	lsls	r3, r3, #2
 8102cdc:	441a      	add	r2, r3
 8102cde:	687b      	ldr	r3, [r7, #4]
 8102ce0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8102ce2:	687b      	ldr	r3, [r7, #4]
 8102ce4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8102ce6:	687b      	ldr	r3, [r7, #4]
 8102ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102cea:	00db      	lsls	r3, r3, #3
 8102cec:	441a      	add	r2, r3
 8102cee:	687b      	ldr	r3, [r7, #4]
 8102cf0:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8102cf2:	687b      	ldr	r3, [r7, #4]
 8102cf4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8102cf6:	687b      	ldr	r3, [r7, #4]
 8102cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102cfa:	6879      	ldr	r1, [r7, #4]
 8102cfc:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8102cfe:	fb01 f303 	mul.w	r3, r1, r3
 8102d02:	009b      	lsls	r3, r3, #2
 8102d04:	441a      	add	r2, r3
 8102d06:	687b      	ldr	r3, [r7, #4]
 8102d08:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8102d0a:	687b      	ldr	r3, [r7, #4]
 8102d0c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8102d0e:	687b      	ldr	r3, [r7, #4]
 8102d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102d12:	6879      	ldr	r1, [r7, #4]
 8102d14:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8102d16:	fb01 f303 	mul.w	r3, r1, r3
 8102d1a:	009b      	lsls	r3, r3, #2
 8102d1c:	441a      	add	r2, r3
 8102d1e:	687b      	ldr	r3, [r7, #4]
 8102d20:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8102d22:	687b      	ldr	r3, [r7, #4]
 8102d24:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8102d26:	687b      	ldr	r3, [r7, #4]
 8102d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102d2a:	6879      	ldr	r1, [r7, #4]
 8102d2c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8102d2e:	fb01 f303 	mul.w	r3, r1, r3
 8102d32:	009b      	lsls	r3, r3, #2
 8102d34:	441a      	add	r2, r3
 8102d36:	687b      	ldr	r3, [r7, #4]
 8102d38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8102d3c:	687b      	ldr	r3, [r7, #4]
 8102d3e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8102d42:	687b      	ldr	r3, [r7, #4]
 8102d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102d46:	00db      	lsls	r3, r3, #3
 8102d48:	441a      	add	r2, r3
 8102d4a:	687b      	ldr	r3, [r7, #4]
 8102d4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8102d50:	687b      	ldr	r3, [r7, #4]
 8102d52:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8102d56:	687b      	ldr	r3, [r7, #4]
 8102d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102d5a:	6879      	ldr	r1, [r7, #4]
 8102d5c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8102d5e:	fb01 f303 	mul.w	r3, r1, r3
 8102d62:	009b      	lsls	r3, r3, #2
 8102d64:	441a      	add	r2, r3
 8102d66:	687b      	ldr	r3, [r7, #4]
 8102d68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8102d6c:	687b      	ldr	r3, [r7, #4]
 8102d6e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8102d72:	687b      	ldr	r3, [r7, #4]
 8102d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102d76:	6879      	ldr	r1, [r7, #4]
 8102d78:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8102d7a:	fb01 f303 	mul.w	r3, r1, r3
 8102d7e:	009b      	lsls	r3, r3, #2
 8102d80:	441a      	add	r2, r3
 8102d82:	687b      	ldr	r3, [r7, #4]
 8102d84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8102d88:	687b      	ldr	r3, [r7, #4]
 8102d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8102d8e:	4a14      	ldr	r2, [pc, #80]	; (8102de0 <FDCAN_CalcultateRamBlockAddresses+0x31c>)
 8102d90:	4293      	cmp	r3, r2
 8102d92:	d90d      	bls.n	8102db0 <FDCAN_CalcultateRamBlockAddresses+0x2ec>
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8102d94:	687b      	ldr	r3, [r7, #4]
 8102d96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8102d9a:	f043 0220 	orr.w	r2, r3, #32
 8102d9e:	687b      	ldr	r3, [r7, #4]
 8102da0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8102da4:	687b      	ldr	r3, [r7, #4]
 8102da6:	2203      	movs	r2, #3
 8102da8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8102dac:	2301      	movs	r3, #1
 8102dae:	e010      	b.n	8102dd2 <FDCAN_CalcultateRamBlockAddresses+0x30e>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8102db0:	687b      	ldr	r3, [r7, #4]
 8102db2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102db4:	60fb      	str	r3, [r7, #12]
 8102db6:	e005      	b.n	8102dc4 <FDCAN_CalcultateRamBlockAddresses+0x300>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8102db8:	68fb      	ldr	r3, [r7, #12]
 8102dba:	2200      	movs	r2, #0
 8102dbc:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8102dbe:	68fb      	ldr	r3, [r7, #12]
 8102dc0:	3304      	adds	r3, #4
 8102dc2:	60fb      	str	r3, [r7, #12]
 8102dc4:	687b      	ldr	r3, [r7, #4]
 8102dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8102dca:	68fa      	ldr	r2, [r7, #12]
 8102dcc:	429a      	cmp	r2, r3
 8102dce:	d3f3      	bcc.n	8102db8 <FDCAN_CalcultateRamBlockAddresses+0x2f4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8102dd0:	2300      	movs	r3, #0
}
 8102dd2:	4618      	mov	r0, r3
 8102dd4:	3714      	adds	r7, #20
 8102dd6:	46bd      	mov	sp, r7
 8102dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ddc:	4770      	bx	lr
 8102dde:	bf00      	nop
 8102de0:	4000d3fc 	.word	0x4000d3fc

08102de4 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8102de4:	b480      	push	{r7}
 8102de6:	b089      	sub	sp, #36	; 0x24
 8102de8:	af00      	add	r7, sp, #0
 8102dea:	60f8      	str	r0, [r7, #12]
 8102dec:	60b9      	str	r1, [r7, #8]
 8102dee:	607a      	str	r2, [r7, #4]
 8102df0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8102df2:	68bb      	ldr	r3, [r7, #8]
 8102df4:	685b      	ldr	r3, [r3, #4]
 8102df6:	2b00      	cmp	r3, #0
 8102df8:	d10a      	bne.n	8102e10 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8102dfa:	68bb      	ldr	r3, [r7, #8]
 8102dfc:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8102dfe:	68bb      	ldr	r3, [r7, #8]
 8102e00:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8102e02:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8102e04:	68bb      	ldr	r3, [r7, #8]
 8102e06:	681b      	ldr	r3, [r3, #0]
 8102e08:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8102e0a:	4313      	orrs	r3, r2
 8102e0c:	61fb      	str	r3, [r7, #28]
 8102e0e:	e00a      	b.n	8102e26 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8102e10:	68bb      	ldr	r3, [r7, #8]
 8102e12:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8102e14:	68bb      	ldr	r3, [r7, #8]
 8102e16:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8102e18:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8102e1a:	68bb      	ldr	r3, [r7, #8]
 8102e1c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8102e1e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8102e20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102e24:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8102e26:	68bb      	ldr	r3, [r7, #8]
 8102e28:	6a1b      	ldr	r3, [r3, #32]
 8102e2a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8102e2c:	68bb      	ldr	r3, [r7, #8]
 8102e2e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8102e30:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8102e32:	68bb      	ldr	r3, [r7, #8]
 8102e34:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8102e36:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8102e38:	68bb      	ldr	r3, [r7, #8]
 8102e3a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8102e3c:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8102e3e:	68bb      	ldr	r3, [r7, #8]
 8102e40:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8102e42:	4313      	orrs	r3, r2
 8102e44:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8102e46:	68fb      	ldr	r3, [r7, #12]
 8102e48:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8102e4c:	68fb      	ldr	r3, [r7, #12]
 8102e4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8102e50:	6839      	ldr	r1, [r7, #0]
 8102e52:	fb01 f303 	mul.w	r3, r1, r3
 8102e56:	009b      	lsls	r3, r3, #2
 8102e58:	4413      	add	r3, r2
 8102e5a:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8102e5c:	69bb      	ldr	r3, [r7, #24]
 8102e5e:	69fa      	ldr	r2, [r7, #28]
 8102e60:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8102e62:	69bb      	ldr	r3, [r7, #24]
 8102e64:	3304      	adds	r3, #4
 8102e66:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8102e68:	69bb      	ldr	r3, [r7, #24]
 8102e6a:	693a      	ldr	r2, [r7, #16]
 8102e6c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8102e6e:	69bb      	ldr	r3, [r7, #24]
 8102e70:	3304      	adds	r3, #4
 8102e72:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8102e74:	2300      	movs	r3, #0
 8102e76:	617b      	str	r3, [r7, #20]
 8102e78:	e020      	b.n	8102ebc <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8102e7a:	697b      	ldr	r3, [r7, #20]
 8102e7c:	3303      	adds	r3, #3
 8102e7e:	687a      	ldr	r2, [r7, #4]
 8102e80:	4413      	add	r3, r2
 8102e82:	781b      	ldrb	r3, [r3, #0]
 8102e84:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8102e86:	697b      	ldr	r3, [r7, #20]
 8102e88:	3302      	adds	r3, #2
 8102e8a:	6879      	ldr	r1, [r7, #4]
 8102e8c:	440b      	add	r3, r1
 8102e8e:	781b      	ldrb	r3, [r3, #0]
 8102e90:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8102e92:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8102e94:	697b      	ldr	r3, [r7, #20]
 8102e96:	3301      	adds	r3, #1
 8102e98:	6879      	ldr	r1, [r7, #4]
 8102e9a:	440b      	add	r3, r1
 8102e9c:	781b      	ldrb	r3, [r3, #0]
 8102e9e:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8102ea0:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8102ea2:	6879      	ldr	r1, [r7, #4]
 8102ea4:	697a      	ldr	r2, [r7, #20]
 8102ea6:	440a      	add	r2, r1
 8102ea8:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8102eaa:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8102eac:	69bb      	ldr	r3, [r7, #24]
 8102eae:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8102eb0:	69bb      	ldr	r3, [r7, #24]
 8102eb2:	3304      	adds	r3, #4
 8102eb4:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8102eb6:	697b      	ldr	r3, [r7, #20]
 8102eb8:	3304      	adds	r3, #4
 8102eba:	617b      	str	r3, [r7, #20]
 8102ebc:	68bb      	ldr	r3, [r7, #8]
 8102ebe:	68db      	ldr	r3, [r3, #12]
 8102ec0:	0c1b      	lsrs	r3, r3, #16
 8102ec2:	4a06      	ldr	r2, [pc, #24]	; (8102edc <FDCAN_CopyMessageToRAM+0xf8>)
 8102ec4:	5cd3      	ldrb	r3, [r2, r3]
 8102ec6:	461a      	mov	r2, r3
 8102ec8:	697b      	ldr	r3, [r7, #20]
 8102eca:	4293      	cmp	r3, r2
 8102ecc:	d3d5      	bcc.n	8102e7a <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8102ece:	bf00      	nop
 8102ed0:	bf00      	nop
 8102ed2:	3724      	adds	r7, #36	; 0x24
 8102ed4:	46bd      	mov	sp, r7
 8102ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102eda:	4770      	bx	lr
 8102edc:	081078c0 	.word	0x081078c0

08102ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8102ee0:	b480      	push	{r7}
 8102ee2:	b089      	sub	sp, #36	; 0x24
 8102ee4:	af00      	add	r7, sp, #0
 8102ee6:	6078      	str	r0, [r7, #4]
 8102ee8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8102eea:	2300      	movs	r3, #0
 8102eec:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8102eee:	4b89      	ldr	r3, [pc, #548]	; (8103114 <HAL_GPIO_Init+0x234>)
 8102ef0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8102ef2:	e194      	b.n	810321e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8102ef4:	683b      	ldr	r3, [r7, #0]
 8102ef6:	681a      	ldr	r2, [r3, #0]
 8102ef8:	2101      	movs	r1, #1
 8102efa:	69fb      	ldr	r3, [r7, #28]
 8102efc:	fa01 f303 	lsl.w	r3, r1, r3
 8102f00:	4013      	ands	r3, r2
 8102f02:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8102f04:	693b      	ldr	r3, [r7, #16]
 8102f06:	2b00      	cmp	r3, #0
 8102f08:	f000 8186 	beq.w	8103218 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8102f0c:	683b      	ldr	r3, [r7, #0]
 8102f0e:	685b      	ldr	r3, [r3, #4]
 8102f10:	f003 0303 	and.w	r3, r3, #3
 8102f14:	2b01      	cmp	r3, #1
 8102f16:	d005      	beq.n	8102f24 <HAL_GPIO_Init+0x44>
 8102f18:	683b      	ldr	r3, [r7, #0]
 8102f1a:	685b      	ldr	r3, [r3, #4]
 8102f1c:	f003 0303 	and.w	r3, r3, #3
 8102f20:	2b02      	cmp	r3, #2
 8102f22:	d130      	bne.n	8102f86 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8102f24:	687b      	ldr	r3, [r7, #4]
 8102f26:	689b      	ldr	r3, [r3, #8]
 8102f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8102f2a:	69fb      	ldr	r3, [r7, #28]
 8102f2c:	005b      	lsls	r3, r3, #1
 8102f2e:	2203      	movs	r2, #3
 8102f30:	fa02 f303 	lsl.w	r3, r2, r3
 8102f34:	43db      	mvns	r3, r3
 8102f36:	69ba      	ldr	r2, [r7, #24]
 8102f38:	4013      	ands	r3, r2
 8102f3a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8102f3c:	683b      	ldr	r3, [r7, #0]
 8102f3e:	68da      	ldr	r2, [r3, #12]
 8102f40:	69fb      	ldr	r3, [r7, #28]
 8102f42:	005b      	lsls	r3, r3, #1
 8102f44:	fa02 f303 	lsl.w	r3, r2, r3
 8102f48:	69ba      	ldr	r2, [r7, #24]
 8102f4a:	4313      	orrs	r3, r2
 8102f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8102f4e:	687b      	ldr	r3, [r7, #4]
 8102f50:	69ba      	ldr	r2, [r7, #24]
 8102f52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8102f54:	687b      	ldr	r3, [r7, #4]
 8102f56:	685b      	ldr	r3, [r3, #4]
 8102f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8102f5a:	2201      	movs	r2, #1
 8102f5c:	69fb      	ldr	r3, [r7, #28]
 8102f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8102f62:	43db      	mvns	r3, r3
 8102f64:	69ba      	ldr	r2, [r7, #24]
 8102f66:	4013      	ands	r3, r2
 8102f68:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8102f6a:	683b      	ldr	r3, [r7, #0]
 8102f6c:	685b      	ldr	r3, [r3, #4]
 8102f6e:	091b      	lsrs	r3, r3, #4
 8102f70:	f003 0201 	and.w	r2, r3, #1
 8102f74:	69fb      	ldr	r3, [r7, #28]
 8102f76:	fa02 f303 	lsl.w	r3, r2, r3
 8102f7a:	69ba      	ldr	r2, [r7, #24]
 8102f7c:	4313      	orrs	r3, r2
 8102f7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8102f80:	687b      	ldr	r3, [r7, #4]
 8102f82:	69ba      	ldr	r2, [r7, #24]
 8102f84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8102f86:	683b      	ldr	r3, [r7, #0]
 8102f88:	685b      	ldr	r3, [r3, #4]
 8102f8a:	f003 0303 	and.w	r3, r3, #3
 8102f8e:	2b03      	cmp	r3, #3
 8102f90:	d017      	beq.n	8102fc2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8102f92:	687b      	ldr	r3, [r7, #4]
 8102f94:	68db      	ldr	r3, [r3, #12]
 8102f96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8102f98:	69fb      	ldr	r3, [r7, #28]
 8102f9a:	005b      	lsls	r3, r3, #1
 8102f9c:	2203      	movs	r2, #3
 8102f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8102fa2:	43db      	mvns	r3, r3
 8102fa4:	69ba      	ldr	r2, [r7, #24]
 8102fa6:	4013      	ands	r3, r2
 8102fa8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8102faa:	683b      	ldr	r3, [r7, #0]
 8102fac:	689a      	ldr	r2, [r3, #8]
 8102fae:	69fb      	ldr	r3, [r7, #28]
 8102fb0:	005b      	lsls	r3, r3, #1
 8102fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8102fb6:	69ba      	ldr	r2, [r7, #24]
 8102fb8:	4313      	orrs	r3, r2
 8102fba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8102fbc:	687b      	ldr	r3, [r7, #4]
 8102fbe:	69ba      	ldr	r2, [r7, #24]
 8102fc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8102fc2:	683b      	ldr	r3, [r7, #0]
 8102fc4:	685b      	ldr	r3, [r3, #4]
 8102fc6:	f003 0303 	and.w	r3, r3, #3
 8102fca:	2b02      	cmp	r3, #2
 8102fcc:	d123      	bne.n	8103016 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8102fce:	69fb      	ldr	r3, [r7, #28]
 8102fd0:	08da      	lsrs	r2, r3, #3
 8102fd2:	687b      	ldr	r3, [r7, #4]
 8102fd4:	3208      	adds	r2, #8
 8102fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8102fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8102fdc:	69fb      	ldr	r3, [r7, #28]
 8102fde:	f003 0307 	and.w	r3, r3, #7
 8102fe2:	009b      	lsls	r3, r3, #2
 8102fe4:	220f      	movs	r2, #15
 8102fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8102fea:	43db      	mvns	r3, r3
 8102fec:	69ba      	ldr	r2, [r7, #24]
 8102fee:	4013      	ands	r3, r2
 8102ff0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8102ff2:	683b      	ldr	r3, [r7, #0]
 8102ff4:	691a      	ldr	r2, [r3, #16]
 8102ff6:	69fb      	ldr	r3, [r7, #28]
 8102ff8:	f003 0307 	and.w	r3, r3, #7
 8102ffc:	009b      	lsls	r3, r3, #2
 8102ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8103002:	69ba      	ldr	r2, [r7, #24]
 8103004:	4313      	orrs	r3, r2
 8103006:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8103008:	69fb      	ldr	r3, [r7, #28]
 810300a:	08da      	lsrs	r2, r3, #3
 810300c:	687b      	ldr	r3, [r7, #4]
 810300e:	3208      	adds	r2, #8
 8103010:	69b9      	ldr	r1, [r7, #24]
 8103012:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8103016:	687b      	ldr	r3, [r7, #4]
 8103018:	681b      	ldr	r3, [r3, #0]
 810301a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 810301c:	69fb      	ldr	r3, [r7, #28]
 810301e:	005b      	lsls	r3, r3, #1
 8103020:	2203      	movs	r2, #3
 8103022:	fa02 f303 	lsl.w	r3, r2, r3
 8103026:	43db      	mvns	r3, r3
 8103028:	69ba      	ldr	r2, [r7, #24]
 810302a:	4013      	ands	r3, r2
 810302c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810302e:	683b      	ldr	r3, [r7, #0]
 8103030:	685b      	ldr	r3, [r3, #4]
 8103032:	f003 0203 	and.w	r2, r3, #3
 8103036:	69fb      	ldr	r3, [r7, #28]
 8103038:	005b      	lsls	r3, r3, #1
 810303a:	fa02 f303 	lsl.w	r3, r2, r3
 810303e:	69ba      	ldr	r2, [r7, #24]
 8103040:	4313      	orrs	r3, r2
 8103042:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8103044:	687b      	ldr	r3, [r7, #4]
 8103046:	69ba      	ldr	r2, [r7, #24]
 8103048:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 810304a:	683b      	ldr	r3, [r7, #0]
 810304c:	685b      	ldr	r3, [r3, #4]
 810304e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8103052:	2b00      	cmp	r3, #0
 8103054:	f000 80e0 	beq.w	8103218 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8103058:	4b2f      	ldr	r3, [pc, #188]	; (8103118 <HAL_GPIO_Init+0x238>)
 810305a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810305e:	4a2e      	ldr	r2, [pc, #184]	; (8103118 <HAL_GPIO_Init+0x238>)
 8103060:	f043 0302 	orr.w	r3, r3, #2
 8103064:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8103068:	4b2b      	ldr	r3, [pc, #172]	; (8103118 <HAL_GPIO_Init+0x238>)
 810306a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810306e:	f003 0302 	and.w	r3, r3, #2
 8103072:	60fb      	str	r3, [r7, #12]
 8103074:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8103076:	4a29      	ldr	r2, [pc, #164]	; (810311c <HAL_GPIO_Init+0x23c>)
 8103078:	69fb      	ldr	r3, [r7, #28]
 810307a:	089b      	lsrs	r3, r3, #2
 810307c:	3302      	adds	r3, #2
 810307e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8103082:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8103084:	69fb      	ldr	r3, [r7, #28]
 8103086:	f003 0303 	and.w	r3, r3, #3
 810308a:	009b      	lsls	r3, r3, #2
 810308c:	220f      	movs	r2, #15
 810308e:	fa02 f303 	lsl.w	r3, r2, r3
 8103092:	43db      	mvns	r3, r3
 8103094:	69ba      	ldr	r2, [r7, #24]
 8103096:	4013      	ands	r3, r2
 8103098:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 810309a:	687b      	ldr	r3, [r7, #4]
 810309c:	4a20      	ldr	r2, [pc, #128]	; (8103120 <HAL_GPIO_Init+0x240>)
 810309e:	4293      	cmp	r3, r2
 81030a0:	d052      	beq.n	8103148 <HAL_GPIO_Init+0x268>
 81030a2:	687b      	ldr	r3, [r7, #4]
 81030a4:	4a1f      	ldr	r2, [pc, #124]	; (8103124 <HAL_GPIO_Init+0x244>)
 81030a6:	4293      	cmp	r3, r2
 81030a8:	d031      	beq.n	810310e <HAL_GPIO_Init+0x22e>
 81030aa:	687b      	ldr	r3, [r7, #4]
 81030ac:	4a1e      	ldr	r2, [pc, #120]	; (8103128 <HAL_GPIO_Init+0x248>)
 81030ae:	4293      	cmp	r3, r2
 81030b0:	d02b      	beq.n	810310a <HAL_GPIO_Init+0x22a>
 81030b2:	687b      	ldr	r3, [r7, #4]
 81030b4:	4a1d      	ldr	r2, [pc, #116]	; (810312c <HAL_GPIO_Init+0x24c>)
 81030b6:	4293      	cmp	r3, r2
 81030b8:	d025      	beq.n	8103106 <HAL_GPIO_Init+0x226>
 81030ba:	687b      	ldr	r3, [r7, #4]
 81030bc:	4a1c      	ldr	r2, [pc, #112]	; (8103130 <HAL_GPIO_Init+0x250>)
 81030be:	4293      	cmp	r3, r2
 81030c0:	d01f      	beq.n	8103102 <HAL_GPIO_Init+0x222>
 81030c2:	687b      	ldr	r3, [r7, #4]
 81030c4:	4a1b      	ldr	r2, [pc, #108]	; (8103134 <HAL_GPIO_Init+0x254>)
 81030c6:	4293      	cmp	r3, r2
 81030c8:	d019      	beq.n	81030fe <HAL_GPIO_Init+0x21e>
 81030ca:	687b      	ldr	r3, [r7, #4]
 81030cc:	4a1a      	ldr	r2, [pc, #104]	; (8103138 <HAL_GPIO_Init+0x258>)
 81030ce:	4293      	cmp	r3, r2
 81030d0:	d013      	beq.n	81030fa <HAL_GPIO_Init+0x21a>
 81030d2:	687b      	ldr	r3, [r7, #4]
 81030d4:	4a19      	ldr	r2, [pc, #100]	; (810313c <HAL_GPIO_Init+0x25c>)
 81030d6:	4293      	cmp	r3, r2
 81030d8:	d00d      	beq.n	81030f6 <HAL_GPIO_Init+0x216>
 81030da:	687b      	ldr	r3, [r7, #4]
 81030dc:	4a18      	ldr	r2, [pc, #96]	; (8103140 <HAL_GPIO_Init+0x260>)
 81030de:	4293      	cmp	r3, r2
 81030e0:	d007      	beq.n	81030f2 <HAL_GPIO_Init+0x212>
 81030e2:	687b      	ldr	r3, [r7, #4]
 81030e4:	4a17      	ldr	r2, [pc, #92]	; (8103144 <HAL_GPIO_Init+0x264>)
 81030e6:	4293      	cmp	r3, r2
 81030e8:	d101      	bne.n	81030ee <HAL_GPIO_Init+0x20e>
 81030ea:	2309      	movs	r3, #9
 81030ec:	e02d      	b.n	810314a <HAL_GPIO_Init+0x26a>
 81030ee:	230a      	movs	r3, #10
 81030f0:	e02b      	b.n	810314a <HAL_GPIO_Init+0x26a>
 81030f2:	2308      	movs	r3, #8
 81030f4:	e029      	b.n	810314a <HAL_GPIO_Init+0x26a>
 81030f6:	2307      	movs	r3, #7
 81030f8:	e027      	b.n	810314a <HAL_GPIO_Init+0x26a>
 81030fa:	2306      	movs	r3, #6
 81030fc:	e025      	b.n	810314a <HAL_GPIO_Init+0x26a>
 81030fe:	2305      	movs	r3, #5
 8103100:	e023      	b.n	810314a <HAL_GPIO_Init+0x26a>
 8103102:	2304      	movs	r3, #4
 8103104:	e021      	b.n	810314a <HAL_GPIO_Init+0x26a>
 8103106:	2303      	movs	r3, #3
 8103108:	e01f      	b.n	810314a <HAL_GPIO_Init+0x26a>
 810310a:	2302      	movs	r3, #2
 810310c:	e01d      	b.n	810314a <HAL_GPIO_Init+0x26a>
 810310e:	2301      	movs	r3, #1
 8103110:	e01b      	b.n	810314a <HAL_GPIO_Init+0x26a>
 8103112:	bf00      	nop
 8103114:	580000c0 	.word	0x580000c0
 8103118:	58024400 	.word	0x58024400
 810311c:	58000400 	.word	0x58000400
 8103120:	58020000 	.word	0x58020000
 8103124:	58020400 	.word	0x58020400
 8103128:	58020800 	.word	0x58020800
 810312c:	58020c00 	.word	0x58020c00
 8103130:	58021000 	.word	0x58021000
 8103134:	58021400 	.word	0x58021400
 8103138:	58021800 	.word	0x58021800
 810313c:	58021c00 	.word	0x58021c00
 8103140:	58022000 	.word	0x58022000
 8103144:	58022400 	.word	0x58022400
 8103148:	2300      	movs	r3, #0
 810314a:	69fa      	ldr	r2, [r7, #28]
 810314c:	f002 0203 	and.w	r2, r2, #3
 8103150:	0092      	lsls	r2, r2, #2
 8103152:	4093      	lsls	r3, r2
 8103154:	69ba      	ldr	r2, [r7, #24]
 8103156:	4313      	orrs	r3, r2
 8103158:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810315a:	4938      	ldr	r1, [pc, #224]	; (810323c <HAL_GPIO_Init+0x35c>)
 810315c:	69fb      	ldr	r3, [r7, #28]
 810315e:	089b      	lsrs	r3, r3, #2
 8103160:	3302      	adds	r3, #2
 8103162:	69ba      	ldr	r2, [r7, #24]
 8103164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8103168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810316c:	681b      	ldr	r3, [r3, #0]
 810316e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103170:	693b      	ldr	r3, [r7, #16]
 8103172:	43db      	mvns	r3, r3
 8103174:	69ba      	ldr	r2, [r7, #24]
 8103176:	4013      	ands	r3, r2
 8103178:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 810317a:	683b      	ldr	r3, [r7, #0]
 810317c:	685b      	ldr	r3, [r3, #4]
 810317e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8103182:	2b00      	cmp	r3, #0
 8103184:	d003      	beq.n	810318e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8103186:	69ba      	ldr	r2, [r7, #24]
 8103188:	693b      	ldr	r3, [r7, #16]
 810318a:	4313      	orrs	r3, r2
 810318c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810318e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103192:	69bb      	ldr	r3, [r7, #24]
 8103194:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8103196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810319a:	685b      	ldr	r3, [r3, #4]
 810319c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810319e:	693b      	ldr	r3, [r7, #16]
 81031a0:	43db      	mvns	r3, r3
 81031a2:	69ba      	ldr	r2, [r7, #24]
 81031a4:	4013      	ands	r3, r2
 81031a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 81031a8:	683b      	ldr	r3, [r7, #0]
 81031aa:	685b      	ldr	r3, [r3, #4]
 81031ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81031b0:	2b00      	cmp	r3, #0
 81031b2:	d003      	beq.n	81031bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 81031b4:	69ba      	ldr	r2, [r7, #24]
 81031b6:	693b      	ldr	r3, [r7, #16]
 81031b8:	4313      	orrs	r3, r2
 81031ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 81031bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81031c0:	69bb      	ldr	r3, [r7, #24]
 81031c2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 81031c4:	697b      	ldr	r3, [r7, #20]
 81031c6:	685b      	ldr	r3, [r3, #4]
 81031c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81031ca:	693b      	ldr	r3, [r7, #16]
 81031cc:	43db      	mvns	r3, r3
 81031ce:	69ba      	ldr	r2, [r7, #24]
 81031d0:	4013      	ands	r3, r2
 81031d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 81031d4:	683b      	ldr	r3, [r7, #0]
 81031d6:	685b      	ldr	r3, [r3, #4]
 81031d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81031dc:	2b00      	cmp	r3, #0
 81031de:	d003      	beq.n	81031e8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 81031e0:	69ba      	ldr	r2, [r7, #24]
 81031e2:	693b      	ldr	r3, [r7, #16]
 81031e4:	4313      	orrs	r3, r2
 81031e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 81031e8:	697b      	ldr	r3, [r7, #20]
 81031ea:	69ba      	ldr	r2, [r7, #24]
 81031ec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 81031ee:	697b      	ldr	r3, [r7, #20]
 81031f0:	681b      	ldr	r3, [r3, #0]
 81031f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81031f4:	693b      	ldr	r3, [r7, #16]
 81031f6:	43db      	mvns	r3, r3
 81031f8:	69ba      	ldr	r2, [r7, #24]
 81031fa:	4013      	ands	r3, r2
 81031fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 81031fe:	683b      	ldr	r3, [r7, #0]
 8103200:	685b      	ldr	r3, [r3, #4]
 8103202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103206:	2b00      	cmp	r3, #0
 8103208:	d003      	beq.n	8103212 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 810320a:	69ba      	ldr	r2, [r7, #24]
 810320c:	693b      	ldr	r3, [r7, #16]
 810320e:	4313      	orrs	r3, r2
 8103210:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8103212:	697b      	ldr	r3, [r7, #20]
 8103214:	69ba      	ldr	r2, [r7, #24]
 8103216:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8103218:	69fb      	ldr	r3, [r7, #28]
 810321a:	3301      	adds	r3, #1
 810321c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810321e:	683b      	ldr	r3, [r7, #0]
 8103220:	681a      	ldr	r2, [r3, #0]
 8103222:	69fb      	ldr	r3, [r7, #28]
 8103224:	fa22 f303 	lsr.w	r3, r2, r3
 8103228:	2b00      	cmp	r3, #0
 810322a:	f47f ae63 	bne.w	8102ef4 <HAL_GPIO_Init+0x14>
  }
}
 810322e:	bf00      	nop
 8103230:	bf00      	nop
 8103232:	3724      	adds	r7, #36	; 0x24
 8103234:	46bd      	mov	sp, r7
 8103236:	f85d 7b04 	ldr.w	r7, [sp], #4
 810323a:	4770      	bx	lr
 810323c:	58000400 	.word	0x58000400

08103240 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8103240:	b480      	push	{r7}
 8103242:	b083      	sub	sp, #12
 8103244:	af00      	add	r7, sp, #0
 8103246:	6078      	str	r0, [r7, #4]
 8103248:	460b      	mov	r3, r1
 810324a:	807b      	strh	r3, [r7, #2]
 810324c:	4613      	mov	r3, r2
 810324e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8103250:	787b      	ldrb	r3, [r7, #1]
 8103252:	2b00      	cmp	r3, #0
 8103254:	d003      	beq.n	810325e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8103256:	887a      	ldrh	r2, [r7, #2]
 8103258:	687b      	ldr	r3, [r7, #4]
 810325a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 810325c:	e003      	b.n	8103266 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 810325e:	887b      	ldrh	r3, [r7, #2]
 8103260:	041a      	lsls	r2, r3, #16
 8103262:	687b      	ldr	r3, [r7, #4]
 8103264:	619a      	str	r2, [r3, #24]
}
 8103266:	bf00      	nop
 8103268:	370c      	adds	r7, #12
 810326a:	46bd      	mov	sp, r7
 810326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103270:	4770      	bx	lr

08103272 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8103272:	b480      	push	{r7}
 8103274:	b085      	sub	sp, #20
 8103276:	af00      	add	r7, sp, #0
 8103278:	6078      	str	r0, [r7, #4]
 810327a:	460b      	mov	r3, r1
 810327c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 810327e:	687b      	ldr	r3, [r7, #4]
 8103280:	695b      	ldr	r3, [r3, #20]
 8103282:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8103284:	887a      	ldrh	r2, [r7, #2]
 8103286:	68fb      	ldr	r3, [r7, #12]
 8103288:	4013      	ands	r3, r2
 810328a:	041a      	lsls	r2, r3, #16
 810328c:	68fb      	ldr	r3, [r7, #12]
 810328e:	43d9      	mvns	r1, r3
 8103290:	887b      	ldrh	r3, [r7, #2]
 8103292:	400b      	ands	r3, r1
 8103294:	431a      	orrs	r2, r3
 8103296:	687b      	ldr	r3, [r7, #4]
 8103298:	619a      	str	r2, [r3, #24]
}
 810329a:	bf00      	nop
 810329c:	3714      	adds	r7, #20
 810329e:	46bd      	mov	sp, r7
 81032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81032a4:	4770      	bx	lr

081032a6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 81032a6:	b580      	push	{r7, lr}
 81032a8:	b082      	sub	sp, #8
 81032aa:	af00      	add	r7, sp, #0
 81032ac:	4603      	mov	r3, r0
 81032ae:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 81032b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81032b4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 81032b8:	88fb      	ldrh	r3, [r7, #6]
 81032ba:	4013      	ands	r3, r2
 81032bc:	2b00      	cmp	r3, #0
 81032be:	d008      	beq.n	81032d2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 81032c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81032c4:	88fb      	ldrh	r3, [r7, #6]
 81032c6:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 81032ca:	88fb      	ldrh	r3, [r7, #6]
 81032cc:	4618      	mov	r0, r3
 81032ce:	f7fd fe81 	bl	8100fd4 <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 81032d2:	bf00      	nop
 81032d4:	3708      	adds	r7, #8
 81032d6:	46bd      	mov	sp, r7
 81032d8:	bd80      	pop	{r7, pc}
	...

081032dc <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81032dc:	b480      	push	{r7}
 81032de:	b083      	sub	sp, #12
 81032e0:	af00      	add	r7, sp, #0
 81032e2:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81032e4:	4b05      	ldr	r3, [pc, #20]	; (81032fc <HAL_HSEM_ActivateNotification+0x20>)
 81032e6:	681a      	ldr	r2, [r3, #0]
 81032e8:	4904      	ldr	r1, [pc, #16]	; (81032fc <HAL_HSEM_ActivateNotification+0x20>)
 81032ea:	687b      	ldr	r3, [r7, #4]
 81032ec:	4313      	orrs	r3, r2
 81032ee:	600b      	str	r3, [r1, #0]
#endif
}
 81032f0:	bf00      	nop
 81032f2:	370c      	adds	r7, #12
 81032f4:	46bd      	mov	sp, r7
 81032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81032fa:	4770      	bx	lr
 81032fc:	58026510 	.word	0x58026510

08103300 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8103300:	b580      	push	{r7, lr}
 8103302:	b082      	sub	sp, #8
 8103304:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8103306:	4b0a      	ldr	r3, [pc, #40]	; (8103330 <HAL_HSEM_IRQHandler+0x30>)
 8103308:	68db      	ldr	r3, [r3, #12]
 810330a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 810330c:	4b08      	ldr	r3, [pc, #32]	; (8103330 <HAL_HSEM_IRQHandler+0x30>)
 810330e:	681a      	ldr	r2, [r3, #0]
 8103310:	687b      	ldr	r3, [r7, #4]
 8103312:	43db      	mvns	r3, r3
 8103314:	4906      	ldr	r1, [pc, #24]	; (8103330 <HAL_HSEM_IRQHandler+0x30>)
 8103316:	4013      	ands	r3, r2
 8103318:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 810331a:	4a05      	ldr	r2, [pc, #20]	; (8103330 <HAL_HSEM_IRQHandler+0x30>)
 810331c:	687b      	ldr	r3, [r7, #4]
 810331e:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8103320:	6878      	ldr	r0, [r7, #4]
 8103322:	f7fd ff57 	bl	81011d4 <HAL_HSEM_FreeCallback>
}
 8103326:	bf00      	nop
 8103328:	3708      	adds	r7, #8
 810332a:	46bd      	mov	sp, r7
 810332c:	bd80      	pop	{r7, pc}
 810332e:	bf00      	nop
 8103330:	58026510 	.word	0x58026510

08103334 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8103334:	b580      	push	{r7, lr}
 8103336:	b082      	sub	sp, #8
 8103338:	af00      	add	r7, sp, #0
 810333a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 810333c:	687b      	ldr	r3, [r7, #4]
 810333e:	2b00      	cmp	r3, #0
 8103340:	d101      	bne.n	8103346 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8103342:	2301      	movs	r3, #1
 8103344:	e081      	b.n	810344a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8103346:	687b      	ldr	r3, [r7, #4]
 8103348:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810334c:	b2db      	uxtb	r3, r3
 810334e:	2b00      	cmp	r3, #0
 8103350:	d106      	bne.n	8103360 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8103352:	687b      	ldr	r3, [r7, #4]
 8103354:	2200      	movs	r2, #0
 8103356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 810335a:	6878      	ldr	r0, [r7, #4]
 810335c:	f7fe f816 	bl	810138c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8103360:	687b      	ldr	r3, [r7, #4]
 8103362:	2224      	movs	r2, #36	; 0x24
 8103364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8103368:	687b      	ldr	r3, [r7, #4]
 810336a:	681b      	ldr	r3, [r3, #0]
 810336c:	681a      	ldr	r2, [r3, #0]
 810336e:	687b      	ldr	r3, [r7, #4]
 8103370:	681b      	ldr	r3, [r3, #0]
 8103372:	f022 0201 	bic.w	r2, r2, #1
 8103376:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8103378:	687b      	ldr	r3, [r7, #4]
 810337a:	685a      	ldr	r2, [r3, #4]
 810337c:	687b      	ldr	r3, [r7, #4]
 810337e:	681b      	ldr	r3, [r3, #0]
 8103380:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8103384:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8103386:	687b      	ldr	r3, [r7, #4]
 8103388:	681b      	ldr	r3, [r3, #0]
 810338a:	689a      	ldr	r2, [r3, #8]
 810338c:	687b      	ldr	r3, [r7, #4]
 810338e:	681b      	ldr	r3, [r3, #0]
 8103390:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8103394:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8103396:	687b      	ldr	r3, [r7, #4]
 8103398:	68db      	ldr	r3, [r3, #12]
 810339a:	2b01      	cmp	r3, #1
 810339c:	d107      	bne.n	81033ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 810339e:	687b      	ldr	r3, [r7, #4]
 81033a0:	689a      	ldr	r2, [r3, #8]
 81033a2:	687b      	ldr	r3, [r7, #4]
 81033a4:	681b      	ldr	r3, [r3, #0]
 81033a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 81033aa:	609a      	str	r2, [r3, #8]
 81033ac:	e006      	b.n	81033bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 81033ae:	687b      	ldr	r3, [r7, #4]
 81033b0:	689a      	ldr	r2, [r3, #8]
 81033b2:	687b      	ldr	r3, [r7, #4]
 81033b4:	681b      	ldr	r3, [r3, #0]
 81033b6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 81033ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 81033bc:	687b      	ldr	r3, [r7, #4]
 81033be:	68db      	ldr	r3, [r3, #12]
 81033c0:	2b02      	cmp	r3, #2
 81033c2:	d104      	bne.n	81033ce <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 81033c4:	687b      	ldr	r3, [r7, #4]
 81033c6:	681b      	ldr	r3, [r3, #0]
 81033c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81033cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 81033ce:	687b      	ldr	r3, [r7, #4]
 81033d0:	681b      	ldr	r3, [r3, #0]
 81033d2:	685b      	ldr	r3, [r3, #4]
 81033d4:	687a      	ldr	r2, [r7, #4]
 81033d6:	6812      	ldr	r2, [r2, #0]
 81033d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81033dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 81033e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 81033e2:	687b      	ldr	r3, [r7, #4]
 81033e4:	681b      	ldr	r3, [r3, #0]
 81033e6:	68da      	ldr	r2, [r3, #12]
 81033e8:	687b      	ldr	r3, [r7, #4]
 81033ea:	681b      	ldr	r3, [r3, #0]
 81033ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81033f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 81033f2:	687b      	ldr	r3, [r7, #4]
 81033f4:	691a      	ldr	r2, [r3, #16]
 81033f6:	687b      	ldr	r3, [r7, #4]
 81033f8:	695b      	ldr	r3, [r3, #20]
 81033fa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 81033fe:	687b      	ldr	r3, [r7, #4]
 8103400:	699b      	ldr	r3, [r3, #24]
 8103402:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8103404:	687b      	ldr	r3, [r7, #4]
 8103406:	681b      	ldr	r3, [r3, #0]
 8103408:	430a      	orrs	r2, r1
 810340a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 810340c:	687b      	ldr	r3, [r7, #4]
 810340e:	69d9      	ldr	r1, [r3, #28]
 8103410:	687b      	ldr	r3, [r7, #4]
 8103412:	6a1a      	ldr	r2, [r3, #32]
 8103414:	687b      	ldr	r3, [r7, #4]
 8103416:	681b      	ldr	r3, [r3, #0]
 8103418:	430a      	orrs	r2, r1
 810341a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 810341c:	687b      	ldr	r3, [r7, #4]
 810341e:	681b      	ldr	r3, [r3, #0]
 8103420:	681a      	ldr	r2, [r3, #0]
 8103422:	687b      	ldr	r3, [r7, #4]
 8103424:	681b      	ldr	r3, [r3, #0]
 8103426:	f042 0201 	orr.w	r2, r2, #1
 810342a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810342c:	687b      	ldr	r3, [r7, #4]
 810342e:	2200      	movs	r2, #0
 8103430:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8103432:	687b      	ldr	r3, [r7, #4]
 8103434:	2220      	movs	r2, #32
 8103436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 810343a:	687b      	ldr	r3, [r7, #4]
 810343c:	2200      	movs	r2, #0
 810343e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8103440:	687b      	ldr	r3, [r7, #4]
 8103442:	2200      	movs	r2, #0
 8103444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8103448:	2300      	movs	r3, #0
}
 810344a:	4618      	mov	r0, r3
 810344c:	3708      	adds	r7, #8
 810344e:	46bd      	mov	sp, r7
 8103450:	bd80      	pop	{r7, pc}
	...

08103454 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8103454:	b580      	push	{r7, lr}
 8103456:	b088      	sub	sp, #32
 8103458:	af02      	add	r7, sp, #8
 810345a:	60f8      	str	r0, [r7, #12]
 810345c:	4608      	mov	r0, r1
 810345e:	4611      	mov	r1, r2
 8103460:	461a      	mov	r2, r3
 8103462:	4603      	mov	r3, r0
 8103464:	817b      	strh	r3, [r7, #10]
 8103466:	460b      	mov	r3, r1
 8103468:	813b      	strh	r3, [r7, #8]
 810346a:	4613      	mov	r3, r2
 810346c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810346e:	68fb      	ldr	r3, [r7, #12]
 8103470:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8103474:	b2db      	uxtb	r3, r3
 8103476:	2b20      	cmp	r3, #32
 8103478:	f040 80f9 	bne.w	810366e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 810347c:	6a3b      	ldr	r3, [r7, #32]
 810347e:	2b00      	cmp	r3, #0
 8103480:	d002      	beq.n	8103488 <HAL_I2C_Mem_Write+0x34>
 8103482:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8103484:	2b00      	cmp	r3, #0
 8103486:	d105      	bne.n	8103494 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8103488:	68fb      	ldr	r3, [r7, #12]
 810348a:	f44f 7200 	mov.w	r2, #512	; 0x200
 810348e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8103490:	2301      	movs	r3, #1
 8103492:	e0ed      	b.n	8103670 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8103494:	68fb      	ldr	r3, [r7, #12]
 8103496:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810349a:	2b01      	cmp	r3, #1
 810349c:	d101      	bne.n	81034a2 <HAL_I2C_Mem_Write+0x4e>
 810349e:	2302      	movs	r3, #2
 81034a0:	e0e6      	b.n	8103670 <HAL_I2C_Mem_Write+0x21c>
 81034a2:	68fb      	ldr	r3, [r7, #12]
 81034a4:	2201      	movs	r2, #1
 81034a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81034aa:	f7fe f9f5 	bl	8101898 <HAL_GetTick>
 81034ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81034b0:	697b      	ldr	r3, [r7, #20]
 81034b2:	9300      	str	r3, [sp, #0]
 81034b4:	2319      	movs	r3, #25
 81034b6:	2201      	movs	r2, #1
 81034b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81034bc:	68f8      	ldr	r0, [r7, #12]
 81034be:	f000 fac3 	bl	8103a48 <I2C_WaitOnFlagUntilTimeout>
 81034c2:	4603      	mov	r3, r0
 81034c4:	2b00      	cmp	r3, #0
 81034c6:	d001      	beq.n	81034cc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 81034c8:	2301      	movs	r3, #1
 81034ca:	e0d1      	b.n	8103670 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 81034cc:	68fb      	ldr	r3, [r7, #12]
 81034ce:	2221      	movs	r2, #33	; 0x21
 81034d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 81034d4:	68fb      	ldr	r3, [r7, #12]
 81034d6:	2240      	movs	r2, #64	; 0x40
 81034d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81034dc:	68fb      	ldr	r3, [r7, #12]
 81034de:	2200      	movs	r2, #0
 81034e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81034e2:	68fb      	ldr	r3, [r7, #12]
 81034e4:	6a3a      	ldr	r2, [r7, #32]
 81034e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 81034e8:	68fb      	ldr	r3, [r7, #12]
 81034ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 81034ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 81034ee:	68fb      	ldr	r3, [r7, #12]
 81034f0:	2200      	movs	r2, #0
 81034f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 81034f4:	88f8      	ldrh	r0, [r7, #6]
 81034f6:	893a      	ldrh	r2, [r7, #8]
 81034f8:	8979      	ldrh	r1, [r7, #10]
 81034fa:	697b      	ldr	r3, [r7, #20]
 81034fc:	9301      	str	r3, [sp, #4]
 81034fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103500:	9300      	str	r3, [sp, #0]
 8103502:	4603      	mov	r3, r0
 8103504:	68f8      	ldr	r0, [r7, #12]
 8103506:	f000 f9d3 	bl	81038b0 <I2C_RequestMemoryWrite>
 810350a:	4603      	mov	r3, r0
 810350c:	2b00      	cmp	r3, #0
 810350e:	d005      	beq.n	810351c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8103510:	68fb      	ldr	r3, [r7, #12]
 8103512:	2200      	movs	r2, #0
 8103514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8103518:	2301      	movs	r3, #1
 810351a:	e0a9      	b.n	8103670 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810351c:	68fb      	ldr	r3, [r7, #12]
 810351e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103520:	b29b      	uxth	r3, r3
 8103522:	2bff      	cmp	r3, #255	; 0xff
 8103524:	d90e      	bls.n	8103544 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8103526:	68fb      	ldr	r3, [r7, #12]
 8103528:	22ff      	movs	r2, #255	; 0xff
 810352a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 810352c:	68fb      	ldr	r3, [r7, #12]
 810352e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103530:	b2da      	uxtb	r2, r3
 8103532:	8979      	ldrh	r1, [r7, #10]
 8103534:	2300      	movs	r3, #0
 8103536:	9300      	str	r3, [sp, #0]
 8103538:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 810353c:	68f8      	ldr	r0, [r7, #12]
 810353e:	f000 fc3d 	bl	8103dbc <I2C_TransferConfig>
 8103542:	e00f      	b.n	8103564 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8103544:	68fb      	ldr	r3, [r7, #12]
 8103546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103548:	b29a      	uxth	r2, r3
 810354a:	68fb      	ldr	r3, [r7, #12]
 810354c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 810354e:	68fb      	ldr	r3, [r7, #12]
 8103550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103552:	b2da      	uxtb	r2, r3
 8103554:	8979      	ldrh	r1, [r7, #10]
 8103556:	2300      	movs	r3, #0
 8103558:	9300      	str	r3, [sp, #0]
 810355a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810355e:	68f8      	ldr	r0, [r7, #12]
 8103560:	f000 fc2c 	bl	8103dbc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8103564:	697a      	ldr	r2, [r7, #20]
 8103566:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8103568:	68f8      	ldr	r0, [r7, #12]
 810356a:	f000 fabc 	bl	8103ae6 <I2C_WaitOnTXISFlagUntilTimeout>
 810356e:	4603      	mov	r3, r0
 8103570:	2b00      	cmp	r3, #0
 8103572:	d001      	beq.n	8103578 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8103574:	2301      	movs	r3, #1
 8103576:	e07b      	b.n	8103670 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8103578:	68fb      	ldr	r3, [r7, #12]
 810357a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810357c:	781a      	ldrb	r2, [r3, #0]
 810357e:	68fb      	ldr	r3, [r7, #12]
 8103580:	681b      	ldr	r3, [r3, #0]
 8103582:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8103584:	68fb      	ldr	r3, [r7, #12]
 8103586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103588:	1c5a      	adds	r2, r3, #1
 810358a:	68fb      	ldr	r3, [r7, #12]
 810358c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 810358e:	68fb      	ldr	r3, [r7, #12]
 8103590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103592:	b29b      	uxth	r3, r3
 8103594:	3b01      	subs	r3, #1
 8103596:	b29a      	uxth	r2, r3
 8103598:	68fb      	ldr	r3, [r7, #12]
 810359a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 810359c:	68fb      	ldr	r3, [r7, #12]
 810359e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81035a0:	3b01      	subs	r3, #1
 81035a2:	b29a      	uxth	r2, r3
 81035a4:	68fb      	ldr	r3, [r7, #12]
 81035a6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 81035a8:	68fb      	ldr	r3, [r7, #12]
 81035aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81035ac:	b29b      	uxth	r3, r3
 81035ae:	2b00      	cmp	r3, #0
 81035b0:	d034      	beq.n	810361c <HAL_I2C_Mem_Write+0x1c8>
 81035b2:	68fb      	ldr	r3, [r7, #12]
 81035b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81035b6:	2b00      	cmp	r3, #0
 81035b8:	d130      	bne.n	810361c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81035ba:	697b      	ldr	r3, [r7, #20]
 81035bc:	9300      	str	r3, [sp, #0]
 81035be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81035c0:	2200      	movs	r2, #0
 81035c2:	2180      	movs	r1, #128	; 0x80
 81035c4:	68f8      	ldr	r0, [r7, #12]
 81035c6:	f000 fa3f 	bl	8103a48 <I2C_WaitOnFlagUntilTimeout>
 81035ca:	4603      	mov	r3, r0
 81035cc:	2b00      	cmp	r3, #0
 81035ce:	d001      	beq.n	81035d4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 81035d0:	2301      	movs	r3, #1
 81035d2:	e04d      	b.n	8103670 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81035d4:	68fb      	ldr	r3, [r7, #12]
 81035d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81035d8:	b29b      	uxth	r3, r3
 81035da:	2bff      	cmp	r3, #255	; 0xff
 81035dc:	d90e      	bls.n	81035fc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 81035de:	68fb      	ldr	r3, [r7, #12]
 81035e0:	22ff      	movs	r2, #255	; 0xff
 81035e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 81035e4:	68fb      	ldr	r3, [r7, #12]
 81035e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81035e8:	b2da      	uxtb	r2, r3
 81035ea:	8979      	ldrh	r1, [r7, #10]
 81035ec:	2300      	movs	r3, #0
 81035ee:	9300      	str	r3, [sp, #0]
 81035f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81035f4:	68f8      	ldr	r0, [r7, #12]
 81035f6:	f000 fbe1 	bl	8103dbc <I2C_TransferConfig>
 81035fa:	e00f      	b.n	810361c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81035fc:	68fb      	ldr	r3, [r7, #12]
 81035fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103600:	b29a      	uxth	r2, r3
 8103602:	68fb      	ldr	r3, [r7, #12]
 8103604:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8103606:	68fb      	ldr	r3, [r7, #12]
 8103608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810360a:	b2da      	uxtb	r2, r3
 810360c:	8979      	ldrh	r1, [r7, #10]
 810360e:	2300      	movs	r3, #0
 8103610:	9300      	str	r3, [sp, #0]
 8103612:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8103616:	68f8      	ldr	r0, [r7, #12]
 8103618:	f000 fbd0 	bl	8103dbc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 810361c:	68fb      	ldr	r3, [r7, #12]
 810361e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103620:	b29b      	uxth	r3, r3
 8103622:	2b00      	cmp	r3, #0
 8103624:	d19e      	bne.n	8103564 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8103626:	697a      	ldr	r2, [r7, #20]
 8103628:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810362a:	68f8      	ldr	r0, [r7, #12]
 810362c:	f000 faa2 	bl	8103b74 <I2C_WaitOnSTOPFlagUntilTimeout>
 8103630:	4603      	mov	r3, r0
 8103632:	2b00      	cmp	r3, #0
 8103634:	d001      	beq.n	810363a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8103636:	2301      	movs	r3, #1
 8103638:	e01a      	b.n	8103670 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810363a:	68fb      	ldr	r3, [r7, #12]
 810363c:	681b      	ldr	r3, [r3, #0]
 810363e:	2220      	movs	r2, #32
 8103640:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8103642:	68fb      	ldr	r3, [r7, #12]
 8103644:	681b      	ldr	r3, [r3, #0]
 8103646:	6859      	ldr	r1, [r3, #4]
 8103648:	68fb      	ldr	r3, [r7, #12]
 810364a:	681a      	ldr	r2, [r3, #0]
 810364c:	4b0a      	ldr	r3, [pc, #40]	; (8103678 <HAL_I2C_Mem_Write+0x224>)
 810364e:	400b      	ands	r3, r1
 8103650:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8103652:	68fb      	ldr	r3, [r7, #12]
 8103654:	2220      	movs	r2, #32
 8103656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 810365a:	68fb      	ldr	r3, [r7, #12]
 810365c:	2200      	movs	r2, #0
 810365e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8103662:	68fb      	ldr	r3, [r7, #12]
 8103664:	2200      	movs	r2, #0
 8103666:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810366a:	2300      	movs	r3, #0
 810366c:	e000      	b.n	8103670 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 810366e:	2302      	movs	r3, #2
  }
}
 8103670:	4618      	mov	r0, r3
 8103672:	3718      	adds	r7, #24
 8103674:	46bd      	mov	sp, r7
 8103676:	bd80      	pop	{r7, pc}
 8103678:	fe00e800 	.word	0xfe00e800

0810367c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810367c:	b580      	push	{r7, lr}
 810367e:	b088      	sub	sp, #32
 8103680:	af02      	add	r7, sp, #8
 8103682:	60f8      	str	r0, [r7, #12]
 8103684:	4608      	mov	r0, r1
 8103686:	4611      	mov	r1, r2
 8103688:	461a      	mov	r2, r3
 810368a:	4603      	mov	r3, r0
 810368c:	817b      	strh	r3, [r7, #10]
 810368e:	460b      	mov	r3, r1
 8103690:	813b      	strh	r3, [r7, #8]
 8103692:	4613      	mov	r3, r2
 8103694:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8103696:	68fb      	ldr	r3, [r7, #12]
 8103698:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810369c:	b2db      	uxtb	r3, r3
 810369e:	2b20      	cmp	r3, #32
 81036a0:	f040 80fd 	bne.w	810389e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 81036a4:	6a3b      	ldr	r3, [r7, #32]
 81036a6:	2b00      	cmp	r3, #0
 81036a8:	d002      	beq.n	81036b0 <HAL_I2C_Mem_Read+0x34>
 81036aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 81036ac:	2b00      	cmp	r3, #0
 81036ae:	d105      	bne.n	81036bc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 81036b0:	68fb      	ldr	r3, [r7, #12]
 81036b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 81036b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 81036b8:	2301      	movs	r3, #1
 81036ba:	e0f1      	b.n	81038a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 81036bc:	68fb      	ldr	r3, [r7, #12]
 81036be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81036c2:	2b01      	cmp	r3, #1
 81036c4:	d101      	bne.n	81036ca <HAL_I2C_Mem_Read+0x4e>
 81036c6:	2302      	movs	r3, #2
 81036c8:	e0ea      	b.n	81038a0 <HAL_I2C_Mem_Read+0x224>
 81036ca:	68fb      	ldr	r3, [r7, #12]
 81036cc:	2201      	movs	r2, #1
 81036ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81036d2:	f7fe f8e1 	bl	8101898 <HAL_GetTick>
 81036d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81036d8:	697b      	ldr	r3, [r7, #20]
 81036da:	9300      	str	r3, [sp, #0]
 81036dc:	2319      	movs	r3, #25
 81036de:	2201      	movs	r2, #1
 81036e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81036e4:	68f8      	ldr	r0, [r7, #12]
 81036e6:	f000 f9af 	bl	8103a48 <I2C_WaitOnFlagUntilTimeout>
 81036ea:	4603      	mov	r3, r0
 81036ec:	2b00      	cmp	r3, #0
 81036ee:	d001      	beq.n	81036f4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 81036f0:	2301      	movs	r3, #1
 81036f2:	e0d5      	b.n	81038a0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 81036f4:	68fb      	ldr	r3, [r7, #12]
 81036f6:	2222      	movs	r2, #34	; 0x22
 81036f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 81036fc:	68fb      	ldr	r3, [r7, #12]
 81036fe:	2240      	movs	r2, #64	; 0x40
 8103700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8103704:	68fb      	ldr	r3, [r7, #12]
 8103706:	2200      	movs	r2, #0
 8103708:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 810370a:	68fb      	ldr	r3, [r7, #12]
 810370c:	6a3a      	ldr	r2, [r7, #32]
 810370e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8103710:	68fb      	ldr	r3, [r7, #12]
 8103712:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8103714:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8103716:	68fb      	ldr	r3, [r7, #12]
 8103718:	2200      	movs	r2, #0
 810371a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 810371c:	88f8      	ldrh	r0, [r7, #6]
 810371e:	893a      	ldrh	r2, [r7, #8]
 8103720:	8979      	ldrh	r1, [r7, #10]
 8103722:	697b      	ldr	r3, [r7, #20]
 8103724:	9301      	str	r3, [sp, #4]
 8103726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103728:	9300      	str	r3, [sp, #0]
 810372a:	4603      	mov	r3, r0
 810372c:	68f8      	ldr	r0, [r7, #12]
 810372e:	f000 f913 	bl	8103958 <I2C_RequestMemoryRead>
 8103732:	4603      	mov	r3, r0
 8103734:	2b00      	cmp	r3, #0
 8103736:	d005      	beq.n	8103744 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8103738:	68fb      	ldr	r3, [r7, #12]
 810373a:	2200      	movs	r2, #0
 810373c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8103740:	2301      	movs	r3, #1
 8103742:	e0ad      	b.n	81038a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8103744:	68fb      	ldr	r3, [r7, #12]
 8103746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103748:	b29b      	uxth	r3, r3
 810374a:	2bff      	cmp	r3, #255	; 0xff
 810374c:	d90e      	bls.n	810376c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 810374e:	68fb      	ldr	r3, [r7, #12]
 8103750:	22ff      	movs	r2, #255	; 0xff
 8103752:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8103754:	68fb      	ldr	r3, [r7, #12]
 8103756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103758:	b2da      	uxtb	r2, r3
 810375a:	8979      	ldrh	r1, [r7, #10]
 810375c:	4b52      	ldr	r3, [pc, #328]	; (81038a8 <HAL_I2C_Mem_Read+0x22c>)
 810375e:	9300      	str	r3, [sp, #0]
 8103760:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8103764:	68f8      	ldr	r0, [r7, #12]
 8103766:	f000 fb29 	bl	8103dbc <I2C_TransferConfig>
 810376a:	e00f      	b.n	810378c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 810376c:	68fb      	ldr	r3, [r7, #12]
 810376e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103770:	b29a      	uxth	r2, r3
 8103772:	68fb      	ldr	r3, [r7, #12]
 8103774:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8103776:	68fb      	ldr	r3, [r7, #12]
 8103778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810377a:	b2da      	uxtb	r2, r3
 810377c:	8979      	ldrh	r1, [r7, #10]
 810377e:	4b4a      	ldr	r3, [pc, #296]	; (81038a8 <HAL_I2C_Mem_Read+0x22c>)
 8103780:	9300      	str	r3, [sp, #0]
 8103782:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8103786:	68f8      	ldr	r0, [r7, #12]
 8103788:	f000 fb18 	bl	8103dbc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 810378c:	697b      	ldr	r3, [r7, #20]
 810378e:	9300      	str	r3, [sp, #0]
 8103790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103792:	2200      	movs	r2, #0
 8103794:	2104      	movs	r1, #4
 8103796:	68f8      	ldr	r0, [r7, #12]
 8103798:	f000 f956 	bl	8103a48 <I2C_WaitOnFlagUntilTimeout>
 810379c:	4603      	mov	r3, r0
 810379e:	2b00      	cmp	r3, #0
 81037a0:	d001      	beq.n	81037a6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 81037a2:	2301      	movs	r3, #1
 81037a4:	e07c      	b.n	81038a0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 81037a6:	68fb      	ldr	r3, [r7, #12]
 81037a8:	681b      	ldr	r3, [r3, #0]
 81037aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 81037ac:	68fb      	ldr	r3, [r7, #12]
 81037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81037b0:	b2d2      	uxtb	r2, r2
 81037b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81037b4:	68fb      	ldr	r3, [r7, #12]
 81037b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81037b8:	1c5a      	adds	r2, r3, #1
 81037ba:	68fb      	ldr	r3, [r7, #12]
 81037bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 81037be:	68fb      	ldr	r3, [r7, #12]
 81037c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81037c2:	3b01      	subs	r3, #1
 81037c4:	b29a      	uxth	r2, r3
 81037c6:	68fb      	ldr	r3, [r7, #12]
 81037c8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 81037ca:	68fb      	ldr	r3, [r7, #12]
 81037cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81037ce:	b29b      	uxth	r3, r3
 81037d0:	3b01      	subs	r3, #1
 81037d2:	b29a      	uxth	r2, r3
 81037d4:	68fb      	ldr	r3, [r7, #12]
 81037d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 81037d8:	68fb      	ldr	r3, [r7, #12]
 81037da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81037dc:	b29b      	uxth	r3, r3
 81037de:	2b00      	cmp	r3, #0
 81037e0:	d034      	beq.n	810384c <HAL_I2C_Mem_Read+0x1d0>
 81037e2:	68fb      	ldr	r3, [r7, #12]
 81037e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81037e6:	2b00      	cmp	r3, #0
 81037e8:	d130      	bne.n	810384c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81037ea:	697b      	ldr	r3, [r7, #20]
 81037ec:	9300      	str	r3, [sp, #0]
 81037ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81037f0:	2200      	movs	r2, #0
 81037f2:	2180      	movs	r1, #128	; 0x80
 81037f4:	68f8      	ldr	r0, [r7, #12]
 81037f6:	f000 f927 	bl	8103a48 <I2C_WaitOnFlagUntilTimeout>
 81037fa:	4603      	mov	r3, r0
 81037fc:	2b00      	cmp	r3, #0
 81037fe:	d001      	beq.n	8103804 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8103800:	2301      	movs	r3, #1
 8103802:	e04d      	b.n	81038a0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8103804:	68fb      	ldr	r3, [r7, #12]
 8103806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103808:	b29b      	uxth	r3, r3
 810380a:	2bff      	cmp	r3, #255	; 0xff
 810380c:	d90e      	bls.n	810382c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 810380e:	68fb      	ldr	r3, [r7, #12]
 8103810:	22ff      	movs	r2, #255	; 0xff
 8103812:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8103814:	68fb      	ldr	r3, [r7, #12]
 8103816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103818:	b2da      	uxtb	r2, r3
 810381a:	8979      	ldrh	r1, [r7, #10]
 810381c:	2300      	movs	r3, #0
 810381e:	9300      	str	r3, [sp, #0]
 8103820:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8103824:	68f8      	ldr	r0, [r7, #12]
 8103826:	f000 fac9 	bl	8103dbc <I2C_TransferConfig>
 810382a:	e00f      	b.n	810384c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 810382c:	68fb      	ldr	r3, [r7, #12]
 810382e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103830:	b29a      	uxth	r2, r3
 8103832:	68fb      	ldr	r3, [r7, #12]
 8103834:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8103836:	68fb      	ldr	r3, [r7, #12]
 8103838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810383a:	b2da      	uxtb	r2, r3
 810383c:	8979      	ldrh	r1, [r7, #10]
 810383e:	2300      	movs	r3, #0
 8103840:	9300      	str	r3, [sp, #0]
 8103842:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8103846:	68f8      	ldr	r0, [r7, #12]
 8103848:	f000 fab8 	bl	8103dbc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 810384c:	68fb      	ldr	r3, [r7, #12]
 810384e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103850:	b29b      	uxth	r3, r3
 8103852:	2b00      	cmp	r3, #0
 8103854:	d19a      	bne.n	810378c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8103856:	697a      	ldr	r2, [r7, #20]
 8103858:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810385a:	68f8      	ldr	r0, [r7, #12]
 810385c:	f000 f98a 	bl	8103b74 <I2C_WaitOnSTOPFlagUntilTimeout>
 8103860:	4603      	mov	r3, r0
 8103862:	2b00      	cmp	r3, #0
 8103864:	d001      	beq.n	810386a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8103866:	2301      	movs	r3, #1
 8103868:	e01a      	b.n	81038a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810386a:	68fb      	ldr	r3, [r7, #12]
 810386c:	681b      	ldr	r3, [r3, #0]
 810386e:	2220      	movs	r2, #32
 8103870:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8103872:	68fb      	ldr	r3, [r7, #12]
 8103874:	681b      	ldr	r3, [r3, #0]
 8103876:	6859      	ldr	r1, [r3, #4]
 8103878:	68fb      	ldr	r3, [r7, #12]
 810387a:	681a      	ldr	r2, [r3, #0]
 810387c:	4b0b      	ldr	r3, [pc, #44]	; (81038ac <HAL_I2C_Mem_Read+0x230>)
 810387e:	400b      	ands	r3, r1
 8103880:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8103882:	68fb      	ldr	r3, [r7, #12]
 8103884:	2220      	movs	r2, #32
 8103886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 810388a:	68fb      	ldr	r3, [r7, #12]
 810388c:	2200      	movs	r2, #0
 810388e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8103892:	68fb      	ldr	r3, [r7, #12]
 8103894:	2200      	movs	r2, #0
 8103896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810389a:	2300      	movs	r3, #0
 810389c:	e000      	b.n	81038a0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 810389e:	2302      	movs	r3, #2
  }
}
 81038a0:	4618      	mov	r0, r3
 81038a2:	3718      	adds	r7, #24
 81038a4:	46bd      	mov	sp, r7
 81038a6:	bd80      	pop	{r7, pc}
 81038a8:	80002400 	.word	0x80002400
 81038ac:	fe00e800 	.word	0xfe00e800

081038b0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 81038b0:	b580      	push	{r7, lr}
 81038b2:	b086      	sub	sp, #24
 81038b4:	af02      	add	r7, sp, #8
 81038b6:	60f8      	str	r0, [r7, #12]
 81038b8:	4608      	mov	r0, r1
 81038ba:	4611      	mov	r1, r2
 81038bc:	461a      	mov	r2, r3
 81038be:	4603      	mov	r3, r0
 81038c0:	817b      	strh	r3, [r7, #10]
 81038c2:	460b      	mov	r3, r1
 81038c4:	813b      	strh	r3, [r7, #8]
 81038c6:	4613      	mov	r3, r2
 81038c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 81038ca:	88fb      	ldrh	r3, [r7, #6]
 81038cc:	b2da      	uxtb	r2, r3
 81038ce:	8979      	ldrh	r1, [r7, #10]
 81038d0:	4b20      	ldr	r3, [pc, #128]	; (8103954 <I2C_RequestMemoryWrite+0xa4>)
 81038d2:	9300      	str	r3, [sp, #0]
 81038d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81038d8:	68f8      	ldr	r0, [r7, #12]
 81038da:	f000 fa6f 	bl	8103dbc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81038de:	69fa      	ldr	r2, [r7, #28]
 81038e0:	69b9      	ldr	r1, [r7, #24]
 81038e2:	68f8      	ldr	r0, [r7, #12]
 81038e4:	f000 f8ff 	bl	8103ae6 <I2C_WaitOnTXISFlagUntilTimeout>
 81038e8:	4603      	mov	r3, r0
 81038ea:	2b00      	cmp	r3, #0
 81038ec:	d001      	beq.n	81038f2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 81038ee:	2301      	movs	r3, #1
 81038f0:	e02c      	b.n	810394c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 81038f2:	88fb      	ldrh	r3, [r7, #6]
 81038f4:	2b01      	cmp	r3, #1
 81038f6:	d105      	bne.n	8103904 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81038f8:	893b      	ldrh	r3, [r7, #8]
 81038fa:	b2da      	uxtb	r2, r3
 81038fc:	68fb      	ldr	r3, [r7, #12]
 81038fe:	681b      	ldr	r3, [r3, #0]
 8103900:	629a      	str	r2, [r3, #40]	; 0x28
 8103902:	e015      	b.n	8103930 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8103904:	893b      	ldrh	r3, [r7, #8]
 8103906:	0a1b      	lsrs	r3, r3, #8
 8103908:	b29b      	uxth	r3, r3
 810390a:	b2da      	uxtb	r2, r3
 810390c:	68fb      	ldr	r3, [r7, #12]
 810390e:	681b      	ldr	r3, [r3, #0]
 8103910:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8103912:	69fa      	ldr	r2, [r7, #28]
 8103914:	69b9      	ldr	r1, [r7, #24]
 8103916:	68f8      	ldr	r0, [r7, #12]
 8103918:	f000 f8e5 	bl	8103ae6 <I2C_WaitOnTXISFlagUntilTimeout>
 810391c:	4603      	mov	r3, r0
 810391e:	2b00      	cmp	r3, #0
 8103920:	d001      	beq.n	8103926 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8103922:	2301      	movs	r3, #1
 8103924:	e012      	b.n	810394c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8103926:	893b      	ldrh	r3, [r7, #8]
 8103928:	b2da      	uxtb	r2, r3
 810392a:	68fb      	ldr	r3, [r7, #12]
 810392c:	681b      	ldr	r3, [r3, #0]
 810392e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8103930:	69fb      	ldr	r3, [r7, #28]
 8103932:	9300      	str	r3, [sp, #0]
 8103934:	69bb      	ldr	r3, [r7, #24]
 8103936:	2200      	movs	r2, #0
 8103938:	2180      	movs	r1, #128	; 0x80
 810393a:	68f8      	ldr	r0, [r7, #12]
 810393c:	f000 f884 	bl	8103a48 <I2C_WaitOnFlagUntilTimeout>
 8103940:	4603      	mov	r3, r0
 8103942:	2b00      	cmp	r3, #0
 8103944:	d001      	beq.n	810394a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8103946:	2301      	movs	r3, #1
 8103948:	e000      	b.n	810394c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 810394a:	2300      	movs	r3, #0
}
 810394c:	4618      	mov	r0, r3
 810394e:	3710      	adds	r7, #16
 8103950:	46bd      	mov	sp, r7
 8103952:	bd80      	pop	{r7, pc}
 8103954:	80002000 	.word	0x80002000

08103958 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8103958:	b580      	push	{r7, lr}
 810395a:	b086      	sub	sp, #24
 810395c:	af02      	add	r7, sp, #8
 810395e:	60f8      	str	r0, [r7, #12]
 8103960:	4608      	mov	r0, r1
 8103962:	4611      	mov	r1, r2
 8103964:	461a      	mov	r2, r3
 8103966:	4603      	mov	r3, r0
 8103968:	817b      	strh	r3, [r7, #10]
 810396a:	460b      	mov	r3, r1
 810396c:	813b      	strh	r3, [r7, #8]
 810396e:	4613      	mov	r3, r2
 8103970:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8103972:	88fb      	ldrh	r3, [r7, #6]
 8103974:	b2da      	uxtb	r2, r3
 8103976:	8979      	ldrh	r1, [r7, #10]
 8103978:	4b20      	ldr	r3, [pc, #128]	; (81039fc <I2C_RequestMemoryRead+0xa4>)
 810397a:	9300      	str	r3, [sp, #0]
 810397c:	2300      	movs	r3, #0
 810397e:	68f8      	ldr	r0, [r7, #12]
 8103980:	f000 fa1c 	bl	8103dbc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8103984:	69fa      	ldr	r2, [r7, #28]
 8103986:	69b9      	ldr	r1, [r7, #24]
 8103988:	68f8      	ldr	r0, [r7, #12]
 810398a:	f000 f8ac 	bl	8103ae6 <I2C_WaitOnTXISFlagUntilTimeout>
 810398e:	4603      	mov	r3, r0
 8103990:	2b00      	cmp	r3, #0
 8103992:	d001      	beq.n	8103998 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8103994:	2301      	movs	r3, #1
 8103996:	e02c      	b.n	81039f2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8103998:	88fb      	ldrh	r3, [r7, #6]
 810399a:	2b01      	cmp	r3, #1
 810399c:	d105      	bne.n	81039aa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810399e:	893b      	ldrh	r3, [r7, #8]
 81039a0:	b2da      	uxtb	r2, r3
 81039a2:	68fb      	ldr	r3, [r7, #12]
 81039a4:	681b      	ldr	r3, [r3, #0]
 81039a6:	629a      	str	r2, [r3, #40]	; 0x28
 81039a8:	e015      	b.n	81039d6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 81039aa:	893b      	ldrh	r3, [r7, #8]
 81039ac:	0a1b      	lsrs	r3, r3, #8
 81039ae:	b29b      	uxth	r3, r3
 81039b0:	b2da      	uxtb	r2, r3
 81039b2:	68fb      	ldr	r3, [r7, #12]
 81039b4:	681b      	ldr	r3, [r3, #0]
 81039b6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81039b8:	69fa      	ldr	r2, [r7, #28]
 81039ba:	69b9      	ldr	r1, [r7, #24]
 81039bc:	68f8      	ldr	r0, [r7, #12]
 81039be:	f000 f892 	bl	8103ae6 <I2C_WaitOnTXISFlagUntilTimeout>
 81039c2:	4603      	mov	r3, r0
 81039c4:	2b00      	cmp	r3, #0
 81039c6:	d001      	beq.n	81039cc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 81039c8:	2301      	movs	r3, #1
 81039ca:	e012      	b.n	81039f2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81039cc:	893b      	ldrh	r3, [r7, #8]
 81039ce:	b2da      	uxtb	r2, r3
 81039d0:	68fb      	ldr	r3, [r7, #12]
 81039d2:	681b      	ldr	r3, [r3, #0]
 81039d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 81039d6:	69fb      	ldr	r3, [r7, #28]
 81039d8:	9300      	str	r3, [sp, #0]
 81039da:	69bb      	ldr	r3, [r7, #24]
 81039dc:	2200      	movs	r2, #0
 81039de:	2140      	movs	r1, #64	; 0x40
 81039e0:	68f8      	ldr	r0, [r7, #12]
 81039e2:	f000 f831 	bl	8103a48 <I2C_WaitOnFlagUntilTimeout>
 81039e6:	4603      	mov	r3, r0
 81039e8:	2b00      	cmp	r3, #0
 81039ea:	d001      	beq.n	81039f0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 81039ec:	2301      	movs	r3, #1
 81039ee:	e000      	b.n	81039f2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 81039f0:	2300      	movs	r3, #0
}
 81039f2:	4618      	mov	r0, r3
 81039f4:	3710      	adds	r7, #16
 81039f6:	46bd      	mov	sp, r7
 81039f8:	bd80      	pop	{r7, pc}
 81039fa:	bf00      	nop
 81039fc:	80002000 	.word	0x80002000

08103a00 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8103a00:	b480      	push	{r7}
 8103a02:	b083      	sub	sp, #12
 8103a04:	af00      	add	r7, sp, #0
 8103a06:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8103a08:	687b      	ldr	r3, [r7, #4]
 8103a0a:	681b      	ldr	r3, [r3, #0]
 8103a0c:	699b      	ldr	r3, [r3, #24]
 8103a0e:	f003 0302 	and.w	r3, r3, #2
 8103a12:	2b02      	cmp	r3, #2
 8103a14:	d103      	bne.n	8103a1e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8103a16:	687b      	ldr	r3, [r7, #4]
 8103a18:	681b      	ldr	r3, [r3, #0]
 8103a1a:	2200      	movs	r2, #0
 8103a1c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8103a1e:	687b      	ldr	r3, [r7, #4]
 8103a20:	681b      	ldr	r3, [r3, #0]
 8103a22:	699b      	ldr	r3, [r3, #24]
 8103a24:	f003 0301 	and.w	r3, r3, #1
 8103a28:	2b01      	cmp	r3, #1
 8103a2a:	d007      	beq.n	8103a3c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8103a2c:	687b      	ldr	r3, [r7, #4]
 8103a2e:	681b      	ldr	r3, [r3, #0]
 8103a30:	699a      	ldr	r2, [r3, #24]
 8103a32:	687b      	ldr	r3, [r7, #4]
 8103a34:	681b      	ldr	r3, [r3, #0]
 8103a36:	f042 0201 	orr.w	r2, r2, #1
 8103a3a:	619a      	str	r2, [r3, #24]
  }
}
 8103a3c:	bf00      	nop
 8103a3e:	370c      	adds	r7, #12
 8103a40:	46bd      	mov	sp, r7
 8103a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a46:	4770      	bx	lr

08103a48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8103a48:	b580      	push	{r7, lr}
 8103a4a:	b084      	sub	sp, #16
 8103a4c:	af00      	add	r7, sp, #0
 8103a4e:	60f8      	str	r0, [r7, #12]
 8103a50:	60b9      	str	r1, [r7, #8]
 8103a52:	603b      	str	r3, [r7, #0]
 8103a54:	4613      	mov	r3, r2
 8103a56:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8103a58:	e031      	b.n	8103abe <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8103a5a:	683b      	ldr	r3, [r7, #0]
 8103a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103a60:	d02d      	beq.n	8103abe <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8103a62:	f7fd ff19 	bl	8101898 <HAL_GetTick>
 8103a66:	4602      	mov	r2, r0
 8103a68:	69bb      	ldr	r3, [r7, #24]
 8103a6a:	1ad3      	subs	r3, r2, r3
 8103a6c:	683a      	ldr	r2, [r7, #0]
 8103a6e:	429a      	cmp	r2, r3
 8103a70:	d302      	bcc.n	8103a78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8103a72:	683b      	ldr	r3, [r7, #0]
 8103a74:	2b00      	cmp	r3, #0
 8103a76:	d122      	bne.n	8103abe <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8103a78:	68fb      	ldr	r3, [r7, #12]
 8103a7a:	681b      	ldr	r3, [r3, #0]
 8103a7c:	699a      	ldr	r2, [r3, #24]
 8103a7e:	68bb      	ldr	r3, [r7, #8]
 8103a80:	4013      	ands	r3, r2
 8103a82:	68ba      	ldr	r2, [r7, #8]
 8103a84:	429a      	cmp	r2, r3
 8103a86:	bf0c      	ite	eq
 8103a88:	2301      	moveq	r3, #1
 8103a8a:	2300      	movne	r3, #0
 8103a8c:	b2db      	uxtb	r3, r3
 8103a8e:	461a      	mov	r2, r3
 8103a90:	79fb      	ldrb	r3, [r7, #7]
 8103a92:	429a      	cmp	r2, r3
 8103a94:	d113      	bne.n	8103abe <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8103a96:	68fb      	ldr	r3, [r7, #12]
 8103a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103a9a:	f043 0220 	orr.w	r2, r3, #32
 8103a9e:	68fb      	ldr	r3, [r7, #12]
 8103aa0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8103aa2:	68fb      	ldr	r3, [r7, #12]
 8103aa4:	2220      	movs	r2, #32
 8103aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8103aaa:	68fb      	ldr	r3, [r7, #12]
 8103aac:	2200      	movs	r2, #0
 8103aae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8103ab2:	68fb      	ldr	r3, [r7, #12]
 8103ab4:	2200      	movs	r2, #0
 8103ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8103aba:	2301      	movs	r3, #1
 8103abc:	e00f      	b.n	8103ade <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8103abe:	68fb      	ldr	r3, [r7, #12]
 8103ac0:	681b      	ldr	r3, [r3, #0]
 8103ac2:	699a      	ldr	r2, [r3, #24]
 8103ac4:	68bb      	ldr	r3, [r7, #8]
 8103ac6:	4013      	ands	r3, r2
 8103ac8:	68ba      	ldr	r2, [r7, #8]
 8103aca:	429a      	cmp	r2, r3
 8103acc:	bf0c      	ite	eq
 8103ace:	2301      	moveq	r3, #1
 8103ad0:	2300      	movne	r3, #0
 8103ad2:	b2db      	uxtb	r3, r3
 8103ad4:	461a      	mov	r2, r3
 8103ad6:	79fb      	ldrb	r3, [r7, #7]
 8103ad8:	429a      	cmp	r2, r3
 8103ada:	d0be      	beq.n	8103a5a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8103adc:	2300      	movs	r3, #0
}
 8103ade:	4618      	mov	r0, r3
 8103ae0:	3710      	adds	r7, #16
 8103ae2:	46bd      	mov	sp, r7
 8103ae4:	bd80      	pop	{r7, pc}

08103ae6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8103ae6:	b580      	push	{r7, lr}
 8103ae8:	b084      	sub	sp, #16
 8103aea:	af00      	add	r7, sp, #0
 8103aec:	60f8      	str	r0, [r7, #12]
 8103aee:	60b9      	str	r1, [r7, #8]
 8103af0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8103af2:	e033      	b.n	8103b5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8103af4:	687a      	ldr	r2, [r7, #4]
 8103af6:	68b9      	ldr	r1, [r7, #8]
 8103af8:	68f8      	ldr	r0, [r7, #12]
 8103afa:	f000 f87f 	bl	8103bfc <I2C_IsErrorOccurred>
 8103afe:	4603      	mov	r3, r0
 8103b00:	2b00      	cmp	r3, #0
 8103b02:	d001      	beq.n	8103b08 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8103b04:	2301      	movs	r3, #1
 8103b06:	e031      	b.n	8103b6c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8103b08:	68bb      	ldr	r3, [r7, #8]
 8103b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103b0e:	d025      	beq.n	8103b5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8103b10:	f7fd fec2 	bl	8101898 <HAL_GetTick>
 8103b14:	4602      	mov	r2, r0
 8103b16:	687b      	ldr	r3, [r7, #4]
 8103b18:	1ad3      	subs	r3, r2, r3
 8103b1a:	68ba      	ldr	r2, [r7, #8]
 8103b1c:	429a      	cmp	r2, r3
 8103b1e:	d302      	bcc.n	8103b26 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8103b20:	68bb      	ldr	r3, [r7, #8]
 8103b22:	2b00      	cmp	r3, #0
 8103b24:	d11a      	bne.n	8103b5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8103b26:	68fb      	ldr	r3, [r7, #12]
 8103b28:	681b      	ldr	r3, [r3, #0]
 8103b2a:	699b      	ldr	r3, [r3, #24]
 8103b2c:	f003 0302 	and.w	r3, r3, #2
 8103b30:	2b02      	cmp	r3, #2
 8103b32:	d013      	beq.n	8103b5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8103b34:	68fb      	ldr	r3, [r7, #12]
 8103b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103b38:	f043 0220 	orr.w	r2, r3, #32
 8103b3c:	68fb      	ldr	r3, [r7, #12]
 8103b3e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8103b40:	68fb      	ldr	r3, [r7, #12]
 8103b42:	2220      	movs	r2, #32
 8103b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8103b48:	68fb      	ldr	r3, [r7, #12]
 8103b4a:	2200      	movs	r2, #0
 8103b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8103b50:	68fb      	ldr	r3, [r7, #12]
 8103b52:	2200      	movs	r2, #0
 8103b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8103b58:	2301      	movs	r3, #1
 8103b5a:	e007      	b.n	8103b6c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8103b5c:	68fb      	ldr	r3, [r7, #12]
 8103b5e:	681b      	ldr	r3, [r3, #0]
 8103b60:	699b      	ldr	r3, [r3, #24]
 8103b62:	f003 0302 	and.w	r3, r3, #2
 8103b66:	2b02      	cmp	r3, #2
 8103b68:	d1c4      	bne.n	8103af4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8103b6a:	2300      	movs	r3, #0
}
 8103b6c:	4618      	mov	r0, r3
 8103b6e:	3710      	adds	r7, #16
 8103b70:	46bd      	mov	sp, r7
 8103b72:	bd80      	pop	{r7, pc}

08103b74 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8103b74:	b580      	push	{r7, lr}
 8103b76:	b084      	sub	sp, #16
 8103b78:	af00      	add	r7, sp, #0
 8103b7a:	60f8      	str	r0, [r7, #12]
 8103b7c:	60b9      	str	r1, [r7, #8]
 8103b7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8103b80:	e02f      	b.n	8103be2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8103b82:	687a      	ldr	r2, [r7, #4]
 8103b84:	68b9      	ldr	r1, [r7, #8]
 8103b86:	68f8      	ldr	r0, [r7, #12]
 8103b88:	f000 f838 	bl	8103bfc <I2C_IsErrorOccurred>
 8103b8c:	4603      	mov	r3, r0
 8103b8e:	2b00      	cmp	r3, #0
 8103b90:	d001      	beq.n	8103b96 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8103b92:	2301      	movs	r3, #1
 8103b94:	e02d      	b.n	8103bf2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8103b96:	f7fd fe7f 	bl	8101898 <HAL_GetTick>
 8103b9a:	4602      	mov	r2, r0
 8103b9c:	687b      	ldr	r3, [r7, #4]
 8103b9e:	1ad3      	subs	r3, r2, r3
 8103ba0:	68ba      	ldr	r2, [r7, #8]
 8103ba2:	429a      	cmp	r2, r3
 8103ba4:	d302      	bcc.n	8103bac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8103ba6:	68bb      	ldr	r3, [r7, #8]
 8103ba8:	2b00      	cmp	r3, #0
 8103baa:	d11a      	bne.n	8103be2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8103bac:	68fb      	ldr	r3, [r7, #12]
 8103bae:	681b      	ldr	r3, [r3, #0]
 8103bb0:	699b      	ldr	r3, [r3, #24]
 8103bb2:	f003 0320 	and.w	r3, r3, #32
 8103bb6:	2b20      	cmp	r3, #32
 8103bb8:	d013      	beq.n	8103be2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8103bba:	68fb      	ldr	r3, [r7, #12]
 8103bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103bbe:	f043 0220 	orr.w	r2, r3, #32
 8103bc2:	68fb      	ldr	r3, [r7, #12]
 8103bc4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8103bc6:	68fb      	ldr	r3, [r7, #12]
 8103bc8:	2220      	movs	r2, #32
 8103bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8103bce:	68fb      	ldr	r3, [r7, #12]
 8103bd0:	2200      	movs	r2, #0
 8103bd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8103bd6:	68fb      	ldr	r3, [r7, #12]
 8103bd8:	2200      	movs	r2, #0
 8103bda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8103bde:	2301      	movs	r3, #1
 8103be0:	e007      	b.n	8103bf2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8103be2:	68fb      	ldr	r3, [r7, #12]
 8103be4:	681b      	ldr	r3, [r3, #0]
 8103be6:	699b      	ldr	r3, [r3, #24]
 8103be8:	f003 0320 	and.w	r3, r3, #32
 8103bec:	2b20      	cmp	r3, #32
 8103bee:	d1c8      	bne.n	8103b82 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8103bf0:	2300      	movs	r3, #0
}
 8103bf2:	4618      	mov	r0, r3
 8103bf4:	3710      	adds	r7, #16
 8103bf6:	46bd      	mov	sp, r7
 8103bf8:	bd80      	pop	{r7, pc}
	...

08103bfc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8103bfc:	b580      	push	{r7, lr}
 8103bfe:	b08a      	sub	sp, #40	; 0x28
 8103c00:	af00      	add	r7, sp, #0
 8103c02:	60f8      	str	r0, [r7, #12]
 8103c04:	60b9      	str	r1, [r7, #8]
 8103c06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8103c08:	2300      	movs	r3, #0
 8103c0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8103c0e:	68fb      	ldr	r3, [r7, #12]
 8103c10:	681b      	ldr	r3, [r3, #0]
 8103c12:	699b      	ldr	r3, [r3, #24]
 8103c14:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8103c16:	2300      	movs	r3, #0
 8103c18:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8103c1a:	687b      	ldr	r3, [r7, #4]
 8103c1c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8103c1e:	69bb      	ldr	r3, [r7, #24]
 8103c20:	f003 0310 	and.w	r3, r3, #16
 8103c24:	2b00      	cmp	r3, #0
 8103c26:	d068      	beq.n	8103cfa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8103c28:	68fb      	ldr	r3, [r7, #12]
 8103c2a:	681b      	ldr	r3, [r3, #0]
 8103c2c:	2210      	movs	r2, #16
 8103c2e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8103c30:	e049      	b.n	8103cc6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8103c32:	68bb      	ldr	r3, [r7, #8]
 8103c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103c38:	d045      	beq.n	8103cc6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8103c3a:	f7fd fe2d 	bl	8101898 <HAL_GetTick>
 8103c3e:	4602      	mov	r2, r0
 8103c40:	69fb      	ldr	r3, [r7, #28]
 8103c42:	1ad3      	subs	r3, r2, r3
 8103c44:	68ba      	ldr	r2, [r7, #8]
 8103c46:	429a      	cmp	r2, r3
 8103c48:	d302      	bcc.n	8103c50 <I2C_IsErrorOccurred+0x54>
 8103c4a:	68bb      	ldr	r3, [r7, #8]
 8103c4c:	2b00      	cmp	r3, #0
 8103c4e:	d13a      	bne.n	8103cc6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8103c50:	68fb      	ldr	r3, [r7, #12]
 8103c52:	681b      	ldr	r3, [r3, #0]
 8103c54:	685b      	ldr	r3, [r3, #4]
 8103c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8103c5a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8103c5c:	68fb      	ldr	r3, [r7, #12]
 8103c5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8103c62:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8103c64:	68fb      	ldr	r3, [r7, #12]
 8103c66:	681b      	ldr	r3, [r3, #0]
 8103c68:	699b      	ldr	r3, [r3, #24]
 8103c6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103c6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8103c72:	d121      	bne.n	8103cb8 <I2C_IsErrorOccurred+0xbc>
 8103c74:	697b      	ldr	r3, [r7, #20]
 8103c76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103c7a:	d01d      	beq.n	8103cb8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8103c7c:	7cfb      	ldrb	r3, [r7, #19]
 8103c7e:	2b20      	cmp	r3, #32
 8103c80:	d01a      	beq.n	8103cb8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8103c82:	68fb      	ldr	r3, [r7, #12]
 8103c84:	681b      	ldr	r3, [r3, #0]
 8103c86:	685a      	ldr	r2, [r3, #4]
 8103c88:	68fb      	ldr	r3, [r7, #12]
 8103c8a:	681b      	ldr	r3, [r3, #0]
 8103c8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8103c90:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8103c92:	f7fd fe01 	bl	8101898 <HAL_GetTick>
 8103c96:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8103c98:	e00e      	b.n	8103cb8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8103c9a:	f7fd fdfd 	bl	8101898 <HAL_GetTick>
 8103c9e:	4602      	mov	r2, r0
 8103ca0:	69fb      	ldr	r3, [r7, #28]
 8103ca2:	1ad3      	subs	r3, r2, r3
 8103ca4:	2b19      	cmp	r3, #25
 8103ca6:	d907      	bls.n	8103cb8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8103ca8:	6a3b      	ldr	r3, [r7, #32]
 8103caa:	f043 0320 	orr.w	r3, r3, #32
 8103cae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8103cb0:	2301      	movs	r3, #1
 8103cb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8103cb6:	e006      	b.n	8103cc6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8103cb8:	68fb      	ldr	r3, [r7, #12]
 8103cba:	681b      	ldr	r3, [r3, #0]
 8103cbc:	699b      	ldr	r3, [r3, #24]
 8103cbe:	f003 0320 	and.w	r3, r3, #32
 8103cc2:	2b20      	cmp	r3, #32
 8103cc4:	d1e9      	bne.n	8103c9a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8103cc6:	68fb      	ldr	r3, [r7, #12]
 8103cc8:	681b      	ldr	r3, [r3, #0]
 8103cca:	699b      	ldr	r3, [r3, #24]
 8103ccc:	f003 0320 	and.w	r3, r3, #32
 8103cd0:	2b20      	cmp	r3, #32
 8103cd2:	d003      	beq.n	8103cdc <I2C_IsErrorOccurred+0xe0>
 8103cd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8103cd8:	2b00      	cmp	r3, #0
 8103cda:	d0aa      	beq.n	8103c32 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8103cdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8103ce0:	2b00      	cmp	r3, #0
 8103ce2:	d103      	bne.n	8103cec <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8103ce4:	68fb      	ldr	r3, [r7, #12]
 8103ce6:	681b      	ldr	r3, [r3, #0]
 8103ce8:	2220      	movs	r2, #32
 8103cea:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8103cec:	6a3b      	ldr	r3, [r7, #32]
 8103cee:	f043 0304 	orr.w	r3, r3, #4
 8103cf2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8103cf4:	2301      	movs	r3, #1
 8103cf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8103cfa:	68fb      	ldr	r3, [r7, #12]
 8103cfc:	681b      	ldr	r3, [r3, #0]
 8103cfe:	699b      	ldr	r3, [r3, #24]
 8103d00:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8103d02:	69bb      	ldr	r3, [r7, #24]
 8103d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103d08:	2b00      	cmp	r3, #0
 8103d0a:	d00b      	beq.n	8103d24 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8103d0c:	6a3b      	ldr	r3, [r7, #32]
 8103d0e:	f043 0301 	orr.w	r3, r3, #1
 8103d12:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8103d14:	68fb      	ldr	r3, [r7, #12]
 8103d16:	681b      	ldr	r3, [r3, #0]
 8103d18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8103d1c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8103d1e:	2301      	movs	r3, #1
 8103d20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8103d24:	69bb      	ldr	r3, [r7, #24]
 8103d26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8103d2a:	2b00      	cmp	r3, #0
 8103d2c:	d00b      	beq.n	8103d46 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8103d2e:	6a3b      	ldr	r3, [r7, #32]
 8103d30:	f043 0308 	orr.w	r3, r3, #8
 8103d34:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8103d36:	68fb      	ldr	r3, [r7, #12]
 8103d38:	681b      	ldr	r3, [r3, #0]
 8103d3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8103d3e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8103d40:	2301      	movs	r3, #1
 8103d42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8103d46:	69bb      	ldr	r3, [r7, #24]
 8103d48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8103d4c:	2b00      	cmp	r3, #0
 8103d4e:	d00b      	beq.n	8103d68 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8103d50:	6a3b      	ldr	r3, [r7, #32]
 8103d52:	f043 0302 	orr.w	r3, r3, #2
 8103d56:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8103d58:	68fb      	ldr	r3, [r7, #12]
 8103d5a:	681b      	ldr	r3, [r3, #0]
 8103d5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8103d60:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8103d62:	2301      	movs	r3, #1
 8103d64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8103d68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8103d6c:	2b00      	cmp	r3, #0
 8103d6e:	d01c      	beq.n	8103daa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8103d70:	68f8      	ldr	r0, [r7, #12]
 8103d72:	f7ff fe45 	bl	8103a00 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8103d76:	68fb      	ldr	r3, [r7, #12]
 8103d78:	681b      	ldr	r3, [r3, #0]
 8103d7a:	6859      	ldr	r1, [r3, #4]
 8103d7c:	68fb      	ldr	r3, [r7, #12]
 8103d7e:	681a      	ldr	r2, [r3, #0]
 8103d80:	4b0d      	ldr	r3, [pc, #52]	; (8103db8 <I2C_IsErrorOccurred+0x1bc>)
 8103d82:	400b      	ands	r3, r1
 8103d84:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8103d86:	68fb      	ldr	r3, [r7, #12]
 8103d88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8103d8a:	6a3b      	ldr	r3, [r7, #32]
 8103d8c:	431a      	orrs	r2, r3
 8103d8e:	68fb      	ldr	r3, [r7, #12]
 8103d90:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8103d92:	68fb      	ldr	r3, [r7, #12]
 8103d94:	2220      	movs	r2, #32
 8103d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8103d9a:	68fb      	ldr	r3, [r7, #12]
 8103d9c:	2200      	movs	r2, #0
 8103d9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8103da2:	68fb      	ldr	r3, [r7, #12]
 8103da4:	2200      	movs	r2, #0
 8103da6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8103daa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8103dae:	4618      	mov	r0, r3
 8103db0:	3728      	adds	r7, #40	; 0x28
 8103db2:	46bd      	mov	sp, r7
 8103db4:	bd80      	pop	{r7, pc}
 8103db6:	bf00      	nop
 8103db8:	fe00e800 	.word	0xfe00e800

08103dbc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8103dbc:	b480      	push	{r7}
 8103dbe:	b087      	sub	sp, #28
 8103dc0:	af00      	add	r7, sp, #0
 8103dc2:	60f8      	str	r0, [r7, #12]
 8103dc4:	607b      	str	r3, [r7, #4]
 8103dc6:	460b      	mov	r3, r1
 8103dc8:	817b      	strh	r3, [r7, #10]
 8103dca:	4613      	mov	r3, r2
 8103dcc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8103dce:	897b      	ldrh	r3, [r7, #10]
 8103dd0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8103dd4:	7a7b      	ldrb	r3, [r7, #9]
 8103dd6:	041b      	lsls	r3, r3, #16
 8103dd8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8103ddc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8103dde:	687b      	ldr	r3, [r7, #4]
 8103de0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8103de2:	6a3b      	ldr	r3, [r7, #32]
 8103de4:	4313      	orrs	r3, r2
 8103de6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8103dea:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8103dec:	68fb      	ldr	r3, [r7, #12]
 8103dee:	681b      	ldr	r3, [r3, #0]
 8103df0:	685a      	ldr	r2, [r3, #4]
 8103df2:	6a3b      	ldr	r3, [r7, #32]
 8103df4:	0d5b      	lsrs	r3, r3, #21
 8103df6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8103dfa:	4b08      	ldr	r3, [pc, #32]	; (8103e1c <I2C_TransferConfig+0x60>)
 8103dfc:	430b      	orrs	r3, r1
 8103dfe:	43db      	mvns	r3, r3
 8103e00:	ea02 0103 	and.w	r1, r2, r3
 8103e04:	68fb      	ldr	r3, [r7, #12]
 8103e06:	681b      	ldr	r3, [r3, #0]
 8103e08:	697a      	ldr	r2, [r7, #20]
 8103e0a:	430a      	orrs	r2, r1
 8103e0c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8103e0e:	bf00      	nop
 8103e10:	371c      	adds	r7, #28
 8103e12:	46bd      	mov	sp, r7
 8103e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e18:	4770      	bx	lr
 8103e1a:	bf00      	nop
 8103e1c:	03ff63ff 	.word	0x03ff63ff

08103e20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8103e20:	b480      	push	{r7}
 8103e22:	b083      	sub	sp, #12
 8103e24:	af00      	add	r7, sp, #0
 8103e26:	6078      	str	r0, [r7, #4]
 8103e28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8103e2a:	687b      	ldr	r3, [r7, #4]
 8103e2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8103e30:	b2db      	uxtb	r3, r3
 8103e32:	2b20      	cmp	r3, #32
 8103e34:	d138      	bne.n	8103ea8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8103e36:	687b      	ldr	r3, [r7, #4]
 8103e38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8103e3c:	2b01      	cmp	r3, #1
 8103e3e:	d101      	bne.n	8103e44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8103e40:	2302      	movs	r3, #2
 8103e42:	e032      	b.n	8103eaa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8103e44:	687b      	ldr	r3, [r7, #4]
 8103e46:	2201      	movs	r2, #1
 8103e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8103e4c:	687b      	ldr	r3, [r7, #4]
 8103e4e:	2224      	movs	r2, #36	; 0x24
 8103e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8103e54:	687b      	ldr	r3, [r7, #4]
 8103e56:	681b      	ldr	r3, [r3, #0]
 8103e58:	681a      	ldr	r2, [r3, #0]
 8103e5a:	687b      	ldr	r3, [r7, #4]
 8103e5c:	681b      	ldr	r3, [r3, #0]
 8103e5e:	f022 0201 	bic.w	r2, r2, #1
 8103e62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8103e64:	687b      	ldr	r3, [r7, #4]
 8103e66:	681b      	ldr	r3, [r3, #0]
 8103e68:	681a      	ldr	r2, [r3, #0]
 8103e6a:	687b      	ldr	r3, [r7, #4]
 8103e6c:	681b      	ldr	r3, [r3, #0]
 8103e6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8103e72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8103e74:	687b      	ldr	r3, [r7, #4]
 8103e76:	681b      	ldr	r3, [r3, #0]
 8103e78:	6819      	ldr	r1, [r3, #0]
 8103e7a:	687b      	ldr	r3, [r7, #4]
 8103e7c:	681b      	ldr	r3, [r3, #0]
 8103e7e:	683a      	ldr	r2, [r7, #0]
 8103e80:	430a      	orrs	r2, r1
 8103e82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8103e84:	687b      	ldr	r3, [r7, #4]
 8103e86:	681b      	ldr	r3, [r3, #0]
 8103e88:	681a      	ldr	r2, [r3, #0]
 8103e8a:	687b      	ldr	r3, [r7, #4]
 8103e8c:	681b      	ldr	r3, [r3, #0]
 8103e8e:	f042 0201 	orr.w	r2, r2, #1
 8103e92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8103e94:	687b      	ldr	r3, [r7, #4]
 8103e96:	2220      	movs	r2, #32
 8103e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8103e9c:	687b      	ldr	r3, [r7, #4]
 8103e9e:	2200      	movs	r2, #0
 8103ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8103ea4:	2300      	movs	r3, #0
 8103ea6:	e000      	b.n	8103eaa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8103ea8:	2302      	movs	r3, #2
  }
}
 8103eaa:	4618      	mov	r0, r3
 8103eac:	370c      	adds	r7, #12
 8103eae:	46bd      	mov	sp, r7
 8103eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103eb4:	4770      	bx	lr

08103eb6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8103eb6:	b480      	push	{r7}
 8103eb8:	b085      	sub	sp, #20
 8103eba:	af00      	add	r7, sp, #0
 8103ebc:	6078      	str	r0, [r7, #4]
 8103ebe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8103ec0:	687b      	ldr	r3, [r7, #4]
 8103ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8103ec6:	b2db      	uxtb	r3, r3
 8103ec8:	2b20      	cmp	r3, #32
 8103eca:	d139      	bne.n	8103f40 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8103ecc:	687b      	ldr	r3, [r7, #4]
 8103ece:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8103ed2:	2b01      	cmp	r3, #1
 8103ed4:	d101      	bne.n	8103eda <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8103ed6:	2302      	movs	r3, #2
 8103ed8:	e033      	b.n	8103f42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8103eda:	687b      	ldr	r3, [r7, #4]
 8103edc:	2201      	movs	r2, #1
 8103ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8103ee2:	687b      	ldr	r3, [r7, #4]
 8103ee4:	2224      	movs	r2, #36	; 0x24
 8103ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8103eea:	687b      	ldr	r3, [r7, #4]
 8103eec:	681b      	ldr	r3, [r3, #0]
 8103eee:	681a      	ldr	r2, [r3, #0]
 8103ef0:	687b      	ldr	r3, [r7, #4]
 8103ef2:	681b      	ldr	r3, [r3, #0]
 8103ef4:	f022 0201 	bic.w	r2, r2, #1
 8103ef8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8103efa:	687b      	ldr	r3, [r7, #4]
 8103efc:	681b      	ldr	r3, [r3, #0]
 8103efe:	681b      	ldr	r3, [r3, #0]
 8103f00:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8103f02:	68fb      	ldr	r3, [r7, #12]
 8103f04:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8103f08:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8103f0a:	683b      	ldr	r3, [r7, #0]
 8103f0c:	021b      	lsls	r3, r3, #8
 8103f0e:	68fa      	ldr	r2, [r7, #12]
 8103f10:	4313      	orrs	r3, r2
 8103f12:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8103f14:	687b      	ldr	r3, [r7, #4]
 8103f16:	681b      	ldr	r3, [r3, #0]
 8103f18:	68fa      	ldr	r2, [r7, #12]
 8103f1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8103f1c:	687b      	ldr	r3, [r7, #4]
 8103f1e:	681b      	ldr	r3, [r3, #0]
 8103f20:	681a      	ldr	r2, [r3, #0]
 8103f22:	687b      	ldr	r3, [r7, #4]
 8103f24:	681b      	ldr	r3, [r3, #0]
 8103f26:	f042 0201 	orr.w	r2, r2, #1
 8103f2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8103f2c:	687b      	ldr	r3, [r7, #4]
 8103f2e:	2220      	movs	r2, #32
 8103f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8103f34:	687b      	ldr	r3, [r7, #4]
 8103f36:	2200      	movs	r2, #0
 8103f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8103f3c:	2300      	movs	r3, #0
 8103f3e:	e000      	b.n	8103f42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8103f40:	2302      	movs	r3, #2
  }
}
 8103f42:	4618      	mov	r0, r3
 8103f44:	3714      	adds	r7, #20
 8103f46:	46bd      	mov	sp, r7
 8103f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f4c:	4770      	bx	lr
	...

08103f50 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8103f50:	b580      	push	{r7, lr}
 8103f52:	b084      	sub	sp, #16
 8103f54:	af00      	add	r7, sp, #0
 8103f56:	60f8      	str	r0, [r7, #12]
 8103f58:	460b      	mov	r3, r1
 8103f5a:	607a      	str	r2, [r7, #4]
 8103f5c:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8103f5e:	4b37      	ldr	r3, [pc, #220]	; (810403c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103f60:	681b      	ldr	r3, [r3, #0]
 8103f62:	f023 0201 	bic.w	r2, r3, #1
 8103f66:	4935      	ldr	r1, [pc, #212]	; (810403c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103f68:	68fb      	ldr	r3, [r7, #12]
 8103f6a:	4313      	orrs	r3, r2
 8103f6c:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8103f6e:	687b      	ldr	r3, [r7, #4]
 8103f70:	2b00      	cmp	r3, #0
 8103f72:	d123      	bne.n	8103fbc <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8103f74:	f7fd fdd0 	bl	8101b18 <HAL_GetCurrentCPUID>
 8103f78:	4603      	mov	r3, r0
 8103f7a:	2b03      	cmp	r3, #3
 8103f7c:	d158      	bne.n	8104030 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8103f7e:	4b2f      	ldr	r3, [pc, #188]	; (810403c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103f80:	691b      	ldr	r3, [r3, #16]
 8103f82:	4a2e      	ldr	r2, [pc, #184]	; (810403c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103f84:	f023 0301 	bic.w	r3, r3, #1
 8103f88:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103f8a:	4b2d      	ldr	r3, [pc, #180]	; (8104040 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103f8c:	691b      	ldr	r3, [r3, #16]
 8103f8e:	4a2c      	ldr	r2, [pc, #176]	; (8104040 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103f90:	f043 0304 	orr.w	r3, r3, #4
 8103f94:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8103f96:	f3bf 8f4f 	dsb	sy
}
 8103f9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8103f9c:	f3bf 8f6f 	isb	sy
}
 8103fa0:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8103fa2:	7afb      	ldrb	r3, [r7, #11]
 8103fa4:	2b01      	cmp	r3, #1
 8103fa6:	d101      	bne.n	8103fac <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8103fa8:	bf30      	wfi
 8103faa:	e000      	b.n	8103fae <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8103fac:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103fae:	4b24      	ldr	r3, [pc, #144]	; (8104040 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103fb0:	691b      	ldr	r3, [r3, #16]
 8103fb2:	4a23      	ldr	r2, [pc, #140]	; (8104040 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103fb4:	f023 0304 	bic.w	r3, r3, #4
 8103fb8:	6113      	str	r3, [r2, #16]
 8103fba:	e03c      	b.n	8104036 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8103fbc:	687b      	ldr	r3, [r7, #4]
 8103fbe:	2b01      	cmp	r3, #1
 8103fc0:	d123      	bne.n	810400a <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8103fc2:	f7fd fda9 	bl	8101b18 <HAL_GetCurrentCPUID>
 8103fc6:	4603      	mov	r3, r0
 8103fc8:	2b01      	cmp	r3, #1
 8103fca:	d133      	bne.n	8104034 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8103fcc:	4b1b      	ldr	r3, [pc, #108]	; (810403c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103fce:	695b      	ldr	r3, [r3, #20]
 8103fd0:	4a1a      	ldr	r2, [pc, #104]	; (810403c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103fd2:	f023 0302 	bic.w	r3, r3, #2
 8103fd6:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103fd8:	4b19      	ldr	r3, [pc, #100]	; (8104040 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103fda:	691b      	ldr	r3, [r3, #16]
 8103fdc:	4a18      	ldr	r2, [pc, #96]	; (8104040 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103fde:	f043 0304 	orr.w	r3, r3, #4
 8103fe2:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8103fe4:	f3bf 8f4f 	dsb	sy
}
 8103fe8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8103fea:	f3bf 8f6f 	isb	sy
}
 8103fee:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8103ff0:	7afb      	ldrb	r3, [r7, #11]
 8103ff2:	2b01      	cmp	r3, #1
 8103ff4:	d101      	bne.n	8103ffa <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8103ff6:	bf30      	wfi
 8103ff8:	e000      	b.n	8103ffc <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8103ffa:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103ffc:	4b10      	ldr	r3, [pc, #64]	; (8104040 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103ffe:	691b      	ldr	r3, [r3, #16]
 8104000:	4a0f      	ldr	r2, [pc, #60]	; (8104040 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104002:	f023 0304 	bic.w	r3, r3, #4
 8104006:	6113      	str	r3, [r2, #16]
 8104008:	e015      	b.n	8104036 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810400a:	f7fd fd85 	bl	8101b18 <HAL_GetCurrentCPUID>
 810400e:	4603      	mov	r3, r0
 8104010:	2b03      	cmp	r3, #3
 8104012:	d106      	bne.n	8104022 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8104014:	4b09      	ldr	r3, [pc, #36]	; (810403c <HAL_PWREx_EnterSTOPMode+0xec>)
 8104016:	691b      	ldr	r3, [r3, #16]
 8104018:	4a08      	ldr	r2, [pc, #32]	; (810403c <HAL_PWREx_EnterSTOPMode+0xec>)
 810401a:	f023 0304 	bic.w	r3, r3, #4
 810401e:	6113      	str	r3, [r2, #16]
 8104020:	e009      	b.n	8104036 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8104022:	4b06      	ldr	r3, [pc, #24]	; (810403c <HAL_PWREx_EnterSTOPMode+0xec>)
 8104024:	695b      	ldr	r3, [r3, #20]
 8104026:	4a05      	ldr	r2, [pc, #20]	; (810403c <HAL_PWREx_EnterSTOPMode+0xec>)
 8104028:	f023 0304 	bic.w	r3, r3, #4
 810402c:	6153      	str	r3, [r2, #20]
 810402e:	e002      	b.n	8104036 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8104030:	bf00      	nop
 8104032:	e000      	b.n	8104036 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8104034:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8104036:	3710      	adds	r7, #16
 8104038:	46bd      	mov	sp, r7
 810403a:	bd80      	pop	{r7, pc}
 810403c:	58024800 	.word	0x58024800
 8104040:	e000ed00 	.word	0xe000ed00

08104044 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8104044:	b580      	push	{r7, lr}
 8104046:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8104048:	f7fd fd66 	bl	8101b18 <HAL_GetCurrentCPUID>
 810404c:	4603      	mov	r3, r0
 810404e:	2b03      	cmp	r3, #3
 8104050:	d101      	bne.n	8104056 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8104052:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8104054:	e001      	b.n	810405a <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8104056:	bf40      	sev
    __WFE ();
 8104058:	bf20      	wfe
}
 810405a:	bf00      	nop
 810405c:	bd80      	pop	{r7, pc}
	...

08104060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8104060:	b480      	push	{r7}
 8104062:	b089      	sub	sp, #36	; 0x24
 8104064:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8104066:	4bb3      	ldr	r3, [pc, #716]	; (8104334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104068:	691b      	ldr	r3, [r3, #16]
 810406a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810406e:	2b18      	cmp	r3, #24
 8104070:	f200 8155 	bhi.w	810431e <HAL_RCC_GetSysClockFreq+0x2be>
 8104074:	a201      	add	r2, pc, #4	; (adr r2, 810407c <HAL_RCC_GetSysClockFreq+0x1c>)
 8104076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810407a:	bf00      	nop
 810407c:	081040e1 	.word	0x081040e1
 8104080:	0810431f 	.word	0x0810431f
 8104084:	0810431f 	.word	0x0810431f
 8104088:	0810431f 	.word	0x0810431f
 810408c:	0810431f 	.word	0x0810431f
 8104090:	0810431f 	.word	0x0810431f
 8104094:	0810431f 	.word	0x0810431f
 8104098:	0810431f 	.word	0x0810431f
 810409c:	08104107 	.word	0x08104107
 81040a0:	0810431f 	.word	0x0810431f
 81040a4:	0810431f 	.word	0x0810431f
 81040a8:	0810431f 	.word	0x0810431f
 81040ac:	0810431f 	.word	0x0810431f
 81040b0:	0810431f 	.word	0x0810431f
 81040b4:	0810431f 	.word	0x0810431f
 81040b8:	0810431f 	.word	0x0810431f
 81040bc:	0810410d 	.word	0x0810410d
 81040c0:	0810431f 	.word	0x0810431f
 81040c4:	0810431f 	.word	0x0810431f
 81040c8:	0810431f 	.word	0x0810431f
 81040cc:	0810431f 	.word	0x0810431f
 81040d0:	0810431f 	.word	0x0810431f
 81040d4:	0810431f 	.word	0x0810431f
 81040d8:	0810431f 	.word	0x0810431f
 81040dc:	08104113 	.word	0x08104113
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81040e0:	4b94      	ldr	r3, [pc, #592]	; (8104334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81040e2:	681b      	ldr	r3, [r3, #0]
 81040e4:	f003 0320 	and.w	r3, r3, #32
 81040e8:	2b00      	cmp	r3, #0
 81040ea:	d009      	beq.n	8104100 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81040ec:	4b91      	ldr	r3, [pc, #580]	; (8104334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81040ee:	681b      	ldr	r3, [r3, #0]
 81040f0:	08db      	lsrs	r3, r3, #3
 81040f2:	f003 0303 	and.w	r3, r3, #3
 81040f6:	4a90      	ldr	r2, [pc, #576]	; (8104338 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81040f8:	fa22 f303 	lsr.w	r3, r2, r3
 81040fc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 81040fe:	e111      	b.n	8104324 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8104100:	4b8d      	ldr	r3, [pc, #564]	; (8104338 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8104102:	61bb      	str	r3, [r7, #24]
      break;
 8104104:	e10e      	b.n	8104324 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8104106:	4b8d      	ldr	r3, [pc, #564]	; (810433c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8104108:	61bb      	str	r3, [r7, #24]
      break;
 810410a:	e10b      	b.n	8104324 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 810410c:	4b8c      	ldr	r3, [pc, #560]	; (8104340 <HAL_RCC_GetSysClockFreq+0x2e0>)
 810410e:	61bb      	str	r3, [r7, #24]
      break;
 8104110:	e108      	b.n	8104324 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104112:	4b88      	ldr	r3, [pc, #544]	; (8104334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104116:	f003 0303 	and.w	r3, r3, #3
 810411a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 810411c:	4b85      	ldr	r3, [pc, #532]	; (8104334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810411e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104120:	091b      	lsrs	r3, r3, #4
 8104122:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8104126:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8104128:	4b82      	ldr	r3, [pc, #520]	; (8104334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810412a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810412c:	f003 0301 	and.w	r3, r3, #1
 8104130:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8104132:	4b80      	ldr	r3, [pc, #512]	; (8104334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8104136:	08db      	lsrs	r3, r3, #3
 8104138:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810413c:	68fa      	ldr	r2, [r7, #12]
 810413e:	fb02 f303 	mul.w	r3, r2, r3
 8104142:	ee07 3a90 	vmov	s15, r3
 8104146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810414a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 810414e:	693b      	ldr	r3, [r7, #16]
 8104150:	2b00      	cmp	r3, #0
 8104152:	f000 80e1 	beq.w	8104318 <HAL_RCC_GetSysClockFreq+0x2b8>
 8104156:	697b      	ldr	r3, [r7, #20]
 8104158:	2b02      	cmp	r3, #2
 810415a:	f000 8083 	beq.w	8104264 <HAL_RCC_GetSysClockFreq+0x204>
 810415e:	697b      	ldr	r3, [r7, #20]
 8104160:	2b02      	cmp	r3, #2
 8104162:	f200 80a1 	bhi.w	81042a8 <HAL_RCC_GetSysClockFreq+0x248>
 8104166:	697b      	ldr	r3, [r7, #20]
 8104168:	2b00      	cmp	r3, #0
 810416a:	d003      	beq.n	8104174 <HAL_RCC_GetSysClockFreq+0x114>
 810416c:	697b      	ldr	r3, [r7, #20]
 810416e:	2b01      	cmp	r3, #1
 8104170:	d056      	beq.n	8104220 <HAL_RCC_GetSysClockFreq+0x1c0>
 8104172:	e099      	b.n	81042a8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104174:	4b6f      	ldr	r3, [pc, #444]	; (8104334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104176:	681b      	ldr	r3, [r3, #0]
 8104178:	f003 0320 	and.w	r3, r3, #32
 810417c:	2b00      	cmp	r3, #0
 810417e:	d02d      	beq.n	81041dc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104180:	4b6c      	ldr	r3, [pc, #432]	; (8104334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104182:	681b      	ldr	r3, [r3, #0]
 8104184:	08db      	lsrs	r3, r3, #3
 8104186:	f003 0303 	and.w	r3, r3, #3
 810418a:	4a6b      	ldr	r2, [pc, #428]	; (8104338 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810418c:	fa22 f303 	lsr.w	r3, r2, r3
 8104190:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104192:	687b      	ldr	r3, [r7, #4]
 8104194:	ee07 3a90 	vmov	s15, r3
 8104198:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810419c:	693b      	ldr	r3, [r7, #16]
 810419e:	ee07 3a90 	vmov	s15, r3
 81041a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81041a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81041aa:	4b62      	ldr	r3, [pc, #392]	; (8104334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81041ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81041ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81041b2:	ee07 3a90 	vmov	s15, r3
 81041b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81041ba:	ed97 6a02 	vldr	s12, [r7, #8]
 81041be:	eddf 5a61 	vldr	s11, [pc, #388]	; 8104344 <HAL_RCC_GetSysClockFreq+0x2e4>
 81041c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81041c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81041ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81041ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81041d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81041d6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 81041da:	e087      	b.n	81042ec <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81041dc:	693b      	ldr	r3, [r7, #16]
 81041de:	ee07 3a90 	vmov	s15, r3
 81041e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81041e6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8104348 <HAL_RCC_GetSysClockFreq+0x2e8>
 81041ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81041ee:	4b51      	ldr	r3, [pc, #324]	; (8104334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81041f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81041f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81041f6:	ee07 3a90 	vmov	s15, r3
 81041fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81041fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8104202:	eddf 5a50 	vldr	s11, [pc, #320]	; 8104344 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810420a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810420e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104216:	ee67 7a27 	vmul.f32	s15, s14, s15
 810421a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810421e:	e065      	b.n	81042ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104220:	693b      	ldr	r3, [r7, #16]
 8104222:	ee07 3a90 	vmov	s15, r3
 8104226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810422a:	eddf 6a48 	vldr	s13, [pc, #288]	; 810434c <HAL_RCC_GetSysClockFreq+0x2ec>
 810422e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104232:	4b40      	ldr	r3, [pc, #256]	; (8104334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810423a:	ee07 3a90 	vmov	s15, r3
 810423e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104242:	ed97 6a02 	vldr	s12, [r7, #8]
 8104246:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8104344 <HAL_RCC_GetSysClockFreq+0x2e4>
 810424a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810424e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104252:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810425a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810425e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8104262:	e043      	b.n	81042ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104264:	693b      	ldr	r3, [r7, #16]
 8104266:	ee07 3a90 	vmov	s15, r3
 810426a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810426e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8104350 <HAL_RCC_GetSysClockFreq+0x2f0>
 8104272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104276:	4b2f      	ldr	r3, [pc, #188]	; (8104334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810427a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810427e:	ee07 3a90 	vmov	s15, r3
 8104282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104286:	ed97 6a02 	vldr	s12, [r7, #8]
 810428a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8104344 <HAL_RCC_GetSysClockFreq+0x2e4>
 810428e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810429a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810429e:	ee67 7a27 	vmul.f32	s15, s14, s15
 81042a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81042a6:	e021      	b.n	81042ec <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81042a8:	693b      	ldr	r3, [r7, #16]
 81042aa:	ee07 3a90 	vmov	s15, r3
 81042ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81042b2:	eddf 6a26 	vldr	s13, [pc, #152]	; 810434c <HAL_RCC_GetSysClockFreq+0x2ec>
 81042b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81042ba:	4b1e      	ldr	r3, [pc, #120]	; (8104334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81042bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81042be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81042c2:	ee07 3a90 	vmov	s15, r3
 81042c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81042ca:	ed97 6a02 	vldr	s12, [r7, #8]
 81042ce:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8104344 <HAL_RCC_GetSysClockFreq+0x2e4>
 81042d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81042d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81042da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81042de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81042e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81042e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81042ea:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 81042ec:	4b11      	ldr	r3, [pc, #68]	; (8104334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81042ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81042f0:	0a5b      	lsrs	r3, r3, #9
 81042f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81042f6:	3301      	adds	r3, #1
 81042f8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 81042fa:	683b      	ldr	r3, [r7, #0]
 81042fc:	ee07 3a90 	vmov	s15, r3
 8104300:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8104304:	edd7 6a07 	vldr	s13, [r7, #28]
 8104308:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810430c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104310:	ee17 3a90 	vmov	r3, s15
 8104314:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8104316:	e005      	b.n	8104324 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8104318:	2300      	movs	r3, #0
 810431a:	61bb      	str	r3, [r7, #24]
      break;
 810431c:	e002      	b.n	8104324 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 810431e:	4b07      	ldr	r3, [pc, #28]	; (810433c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8104320:	61bb      	str	r3, [r7, #24]
      break;
 8104322:	bf00      	nop
  }

  return sysclockfreq;
 8104324:	69bb      	ldr	r3, [r7, #24]
}
 8104326:	4618      	mov	r0, r3
 8104328:	3724      	adds	r7, #36	; 0x24
 810432a:	46bd      	mov	sp, r7
 810432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104330:	4770      	bx	lr
 8104332:	bf00      	nop
 8104334:	58024400 	.word	0x58024400
 8104338:	03d09000 	.word	0x03d09000
 810433c:	003d0900 	.word	0x003d0900
 8104340:	007a1200 	.word	0x007a1200
 8104344:	46000000 	.word	0x46000000
 8104348:	4c742400 	.word	0x4c742400
 810434c:	4a742400 	.word	0x4a742400
 8104350:	4af42400 	.word	0x4af42400

08104354 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8104354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8104358:	b0ca      	sub	sp, #296	; 0x128
 810435a:	af00      	add	r7, sp, #0
 810435c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8104360:	2300      	movs	r3, #0
 8104362:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8104366:	2300      	movs	r3, #0
 8104368:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 810436c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104374:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8104378:	2500      	movs	r5, #0
 810437a:	ea54 0305 	orrs.w	r3, r4, r5
 810437e:	d049      	beq.n	8104414 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8104380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104384:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8104386:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810438a:	d02f      	beq.n	81043ec <HAL_RCCEx_PeriphCLKConfig+0x98>
 810438c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104390:	d828      	bhi.n	81043e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8104392:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104396:	d01a      	beq.n	81043ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8104398:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810439c:	d822      	bhi.n	81043e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 810439e:	2b00      	cmp	r3, #0
 81043a0:	d003      	beq.n	81043aa <HAL_RCCEx_PeriphCLKConfig+0x56>
 81043a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81043a6:	d007      	beq.n	81043b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 81043a8:	e01c      	b.n	81043e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81043aa:	4bb8      	ldr	r3, [pc, #736]	; (810468c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81043ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81043ae:	4ab7      	ldr	r2, [pc, #732]	; (810468c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81043b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81043b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81043b6:	e01a      	b.n	81043ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81043b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81043bc:	3308      	adds	r3, #8
 81043be:	2102      	movs	r1, #2
 81043c0:	4618      	mov	r0, r3
 81043c2:	f001 f9d1 	bl	8105768 <RCCEx_PLL2_Config>
 81043c6:	4603      	mov	r3, r0
 81043c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81043cc:	e00f      	b.n	81043ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81043ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81043d2:	3328      	adds	r3, #40	; 0x28
 81043d4:	2102      	movs	r1, #2
 81043d6:	4618      	mov	r0, r3
 81043d8:	f001 fa78 	bl	81058cc <RCCEx_PLL3_Config>
 81043dc:	4603      	mov	r3, r0
 81043de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81043e2:	e004      	b.n	81043ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81043e4:	2301      	movs	r3, #1
 81043e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81043ea:	e000      	b.n	81043ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 81043ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 81043ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81043f2:	2b00      	cmp	r3, #0
 81043f4:	d10a      	bne.n	810440c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81043f6:	4ba5      	ldr	r3, [pc, #660]	; (810468c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81043f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81043fa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 81043fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104402:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8104404:	4aa1      	ldr	r2, [pc, #644]	; (810468c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104406:	430b      	orrs	r3, r1
 8104408:	6513      	str	r3, [r2, #80]	; 0x50
 810440a:	e003      	b.n	8104414 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810440c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104410:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8104414:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104418:	e9d3 2300 	ldrd	r2, r3, [r3]
 810441c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8104420:	f04f 0900 	mov.w	r9, #0
 8104424:	ea58 0309 	orrs.w	r3, r8, r9
 8104428:	d047      	beq.n	81044ba <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 810442a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810442e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104430:	2b04      	cmp	r3, #4
 8104432:	d82a      	bhi.n	810448a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8104434:	a201      	add	r2, pc, #4	; (adr r2, 810443c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8104436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810443a:	bf00      	nop
 810443c:	08104451 	.word	0x08104451
 8104440:	0810445f 	.word	0x0810445f
 8104444:	08104475 	.word	0x08104475
 8104448:	08104493 	.word	0x08104493
 810444c:	08104493 	.word	0x08104493
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104450:	4b8e      	ldr	r3, [pc, #568]	; (810468c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104454:	4a8d      	ldr	r2, [pc, #564]	; (810468c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104456:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810445a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810445c:	e01a      	b.n	8104494 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810445e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104462:	3308      	adds	r3, #8
 8104464:	2100      	movs	r1, #0
 8104466:	4618      	mov	r0, r3
 8104468:	f001 f97e 	bl	8105768 <RCCEx_PLL2_Config>
 810446c:	4603      	mov	r3, r0
 810446e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104472:	e00f      	b.n	8104494 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104474:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104478:	3328      	adds	r3, #40	; 0x28
 810447a:	2100      	movs	r1, #0
 810447c:	4618      	mov	r0, r3
 810447e:	f001 fa25 	bl	81058cc <RCCEx_PLL3_Config>
 8104482:	4603      	mov	r3, r0
 8104484:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104488:	e004      	b.n	8104494 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810448a:	2301      	movs	r3, #1
 810448c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104490:	e000      	b.n	8104494 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8104492:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104494:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104498:	2b00      	cmp	r3, #0
 810449a:	d10a      	bne.n	81044b2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 810449c:	4b7b      	ldr	r3, [pc, #492]	; (810468c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810449e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81044a0:	f023 0107 	bic.w	r1, r3, #7
 81044a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81044a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81044aa:	4a78      	ldr	r2, [pc, #480]	; (810468c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81044ac:	430b      	orrs	r3, r1
 81044ae:	6513      	str	r3, [r2, #80]	; 0x50
 81044b0:	e003      	b.n	81044ba <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81044b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81044b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 81044ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81044be:	e9d3 2300 	ldrd	r2, r3, [r3]
 81044c2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 81044c6:	f04f 0b00 	mov.w	fp, #0
 81044ca:	ea5a 030b 	orrs.w	r3, sl, fp
 81044ce:	d04c      	beq.n	810456a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 81044d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81044d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81044d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81044da:	d030      	beq.n	810453e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 81044dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81044e0:	d829      	bhi.n	8104536 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81044e2:	2bc0      	cmp	r3, #192	; 0xc0
 81044e4:	d02d      	beq.n	8104542 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 81044e6:	2bc0      	cmp	r3, #192	; 0xc0
 81044e8:	d825      	bhi.n	8104536 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81044ea:	2b80      	cmp	r3, #128	; 0x80
 81044ec:	d018      	beq.n	8104520 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 81044ee:	2b80      	cmp	r3, #128	; 0x80
 81044f0:	d821      	bhi.n	8104536 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81044f2:	2b00      	cmp	r3, #0
 81044f4:	d002      	beq.n	81044fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 81044f6:	2b40      	cmp	r3, #64	; 0x40
 81044f8:	d007      	beq.n	810450a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 81044fa:	e01c      	b.n	8104536 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81044fc:	4b63      	ldr	r3, [pc, #396]	; (810468c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81044fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104500:	4a62      	ldr	r2, [pc, #392]	; (810468c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104502:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104506:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8104508:	e01c      	b.n	8104544 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810450a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810450e:	3308      	adds	r3, #8
 8104510:	2100      	movs	r1, #0
 8104512:	4618      	mov	r0, r3
 8104514:	f001 f928 	bl	8105768 <RCCEx_PLL2_Config>
 8104518:	4603      	mov	r3, r0
 810451a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810451e:	e011      	b.n	8104544 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104520:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104524:	3328      	adds	r3, #40	; 0x28
 8104526:	2100      	movs	r1, #0
 8104528:	4618      	mov	r0, r3
 810452a:	f001 f9cf 	bl	81058cc <RCCEx_PLL3_Config>
 810452e:	4603      	mov	r3, r0
 8104530:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8104534:	e006      	b.n	8104544 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104536:	2301      	movs	r3, #1
 8104538:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810453c:	e002      	b.n	8104544 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810453e:	bf00      	nop
 8104540:	e000      	b.n	8104544 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8104542:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104544:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104548:	2b00      	cmp	r3, #0
 810454a:	d10a      	bne.n	8104562 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 810454c:	4b4f      	ldr	r3, [pc, #316]	; (810468c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810454e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104550:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8104554:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810455a:	4a4c      	ldr	r2, [pc, #304]	; (810468c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810455c:	430b      	orrs	r3, r1
 810455e:	6513      	str	r3, [r2, #80]	; 0x50
 8104560:	e003      	b.n	810456a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104562:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104566:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 810456a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810456e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104572:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8104576:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 810457a:	2300      	movs	r3, #0
 810457c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8104580:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8104584:	460b      	mov	r3, r1
 8104586:	4313      	orrs	r3, r2
 8104588:	d053      	beq.n	8104632 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 810458a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810458e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8104592:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8104596:	d035      	beq.n	8104604 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8104598:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810459c:	d82e      	bhi.n	81045fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810459e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 81045a2:	d031      	beq.n	8104608 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 81045a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 81045a8:	d828      	bhi.n	81045fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81045aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81045ae:	d01a      	beq.n	81045e6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 81045b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81045b4:	d822      	bhi.n	81045fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81045b6:	2b00      	cmp	r3, #0
 81045b8:	d003      	beq.n	81045c2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 81045ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81045be:	d007      	beq.n	81045d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 81045c0:	e01c      	b.n	81045fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81045c2:	4b32      	ldr	r3, [pc, #200]	; (810468c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81045c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81045c6:	4a31      	ldr	r2, [pc, #196]	; (810468c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81045c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81045cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81045ce:	e01c      	b.n	810460a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81045d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81045d4:	3308      	adds	r3, #8
 81045d6:	2100      	movs	r1, #0
 81045d8:	4618      	mov	r0, r3
 81045da:	f001 f8c5 	bl	8105768 <RCCEx_PLL2_Config>
 81045de:	4603      	mov	r3, r0
 81045e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81045e4:	e011      	b.n	810460a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81045e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81045ea:	3328      	adds	r3, #40	; 0x28
 81045ec:	2100      	movs	r1, #0
 81045ee:	4618      	mov	r0, r3
 81045f0:	f001 f96c 	bl	81058cc <RCCEx_PLL3_Config>
 81045f4:	4603      	mov	r3, r0
 81045f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81045fa:	e006      	b.n	810460a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 81045fc:	2301      	movs	r3, #1
 81045fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104602:	e002      	b.n	810460a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8104604:	bf00      	nop
 8104606:	e000      	b.n	810460a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8104608:	bf00      	nop
    }

    if (ret == HAL_OK)
 810460a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810460e:	2b00      	cmp	r3, #0
 8104610:	d10b      	bne.n	810462a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8104612:	4b1e      	ldr	r3, [pc, #120]	; (810468c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104616:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 810461a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810461e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8104622:	4a1a      	ldr	r2, [pc, #104]	; (810468c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104624:	430b      	orrs	r3, r1
 8104626:	6593      	str	r3, [r2, #88]	; 0x58
 8104628:	e003      	b.n	8104632 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810462a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810462e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8104632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104636:	e9d3 2300 	ldrd	r2, r3, [r3]
 810463a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 810463e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8104642:	2300      	movs	r3, #0
 8104644:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8104648:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 810464c:	460b      	mov	r3, r1
 810464e:	4313      	orrs	r3, r2
 8104650:	d056      	beq.n	8104700 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8104652:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104656:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 810465a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810465e:	d038      	beq.n	81046d2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8104660:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104664:	d831      	bhi.n	81046ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8104666:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810466a:	d034      	beq.n	81046d6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 810466c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8104670:	d82b      	bhi.n	81046ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8104672:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104676:	d01d      	beq.n	81046b4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8104678:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810467c:	d825      	bhi.n	81046ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 810467e:	2b00      	cmp	r3, #0
 8104680:	d006      	beq.n	8104690 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8104682:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8104686:	d00a      	beq.n	810469e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8104688:	e01f      	b.n	81046ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 810468a:	bf00      	nop
 810468c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104690:	4ba2      	ldr	r3, [pc, #648]	; (810491c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104694:	4aa1      	ldr	r2, [pc, #644]	; (810491c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104696:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810469a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810469c:	e01c      	b.n	81046d8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810469e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81046a2:	3308      	adds	r3, #8
 81046a4:	2100      	movs	r1, #0
 81046a6:	4618      	mov	r0, r3
 81046a8:	f001 f85e 	bl	8105768 <RCCEx_PLL2_Config>
 81046ac:	4603      	mov	r3, r0
 81046ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81046b2:	e011      	b.n	81046d8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81046b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81046b8:	3328      	adds	r3, #40	; 0x28
 81046ba:	2100      	movs	r1, #0
 81046bc:	4618      	mov	r0, r3
 81046be:	f001 f905 	bl	81058cc <RCCEx_PLL3_Config>
 81046c2:	4603      	mov	r3, r0
 81046c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81046c8:	e006      	b.n	81046d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 81046ca:	2301      	movs	r3, #1
 81046cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81046d0:	e002      	b.n	81046d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81046d2:	bf00      	nop
 81046d4:	e000      	b.n	81046d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81046d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 81046d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81046dc:	2b00      	cmp	r3, #0
 81046de:	d10b      	bne.n	81046f8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 81046e0:	4b8e      	ldr	r3, [pc, #568]	; (810491c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81046e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81046e4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 81046e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81046ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81046f0:	4a8a      	ldr	r2, [pc, #552]	; (810491c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81046f2:	430b      	orrs	r3, r1
 81046f4:	6593      	str	r3, [r2, #88]	; 0x58
 81046f6:	e003      	b.n	8104700 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81046f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81046fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8104700:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104708:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 810470c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8104710:	2300      	movs	r3, #0
 8104712:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8104716:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 810471a:	460b      	mov	r3, r1
 810471c:	4313      	orrs	r3, r2
 810471e:	d03a      	beq.n	8104796 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8104720:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104726:	2b30      	cmp	r3, #48	; 0x30
 8104728:	d01f      	beq.n	810476a <HAL_RCCEx_PeriphCLKConfig+0x416>
 810472a:	2b30      	cmp	r3, #48	; 0x30
 810472c:	d819      	bhi.n	8104762 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810472e:	2b20      	cmp	r3, #32
 8104730:	d00c      	beq.n	810474c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8104732:	2b20      	cmp	r3, #32
 8104734:	d815      	bhi.n	8104762 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8104736:	2b00      	cmp	r3, #0
 8104738:	d019      	beq.n	810476e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 810473a:	2b10      	cmp	r3, #16
 810473c:	d111      	bne.n	8104762 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810473e:	4b77      	ldr	r3, [pc, #476]	; (810491c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104742:	4a76      	ldr	r2, [pc, #472]	; (810491c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104748:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 810474a:	e011      	b.n	8104770 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810474c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104750:	3308      	adds	r3, #8
 8104752:	2102      	movs	r1, #2
 8104754:	4618      	mov	r0, r3
 8104756:	f001 f807 	bl	8105768 <RCCEx_PLL2_Config>
 810475a:	4603      	mov	r3, r0
 810475c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8104760:	e006      	b.n	8104770 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8104762:	2301      	movs	r3, #1
 8104764:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104768:	e002      	b.n	8104770 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810476a:	bf00      	nop
 810476c:	e000      	b.n	8104770 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810476e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104770:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104774:	2b00      	cmp	r3, #0
 8104776:	d10a      	bne.n	810478e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8104778:	4b68      	ldr	r3, [pc, #416]	; (810491c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810477a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810477c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8104780:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104786:	4a65      	ldr	r2, [pc, #404]	; (810491c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104788:	430b      	orrs	r3, r1
 810478a:	64d3      	str	r3, [r2, #76]	; 0x4c
 810478c:	e003      	b.n	8104796 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810478e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104792:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8104796:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810479a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810479e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 81047a2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 81047a6:	2300      	movs	r3, #0
 81047a8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 81047ac:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 81047b0:	460b      	mov	r3, r1
 81047b2:	4313      	orrs	r3, r2
 81047b4:	d051      	beq.n	810485a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 81047b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81047ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81047bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81047c0:	d035      	beq.n	810482e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 81047c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81047c6:	d82e      	bhi.n	8104826 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81047c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81047cc:	d031      	beq.n	8104832 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 81047ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81047d2:	d828      	bhi.n	8104826 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81047d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81047d8:	d01a      	beq.n	8104810 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 81047da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81047de:	d822      	bhi.n	8104826 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81047e0:	2b00      	cmp	r3, #0
 81047e2:	d003      	beq.n	81047ec <HAL_RCCEx_PeriphCLKConfig+0x498>
 81047e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81047e8:	d007      	beq.n	81047fa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 81047ea:	e01c      	b.n	8104826 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81047ec:	4b4b      	ldr	r3, [pc, #300]	; (810491c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81047ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81047f0:	4a4a      	ldr	r2, [pc, #296]	; (810491c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81047f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81047f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81047f8:	e01c      	b.n	8104834 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81047fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81047fe:	3308      	adds	r3, #8
 8104800:	2100      	movs	r1, #0
 8104802:	4618      	mov	r0, r3
 8104804:	f000 ffb0 	bl	8105768 <RCCEx_PLL2_Config>
 8104808:	4603      	mov	r3, r0
 810480a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810480e:	e011      	b.n	8104834 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104810:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104814:	3328      	adds	r3, #40	; 0x28
 8104816:	2100      	movs	r1, #0
 8104818:	4618      	mov	r0, r3
 810481a:	f001 f857 	bl	81058cc <RCCEx_PLL3_Config>
 810481e:	4603      	mov	r3, r0
 8104820:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8104824:	e006      	b.n	8104834 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104826:	2301      	movs	r3, #1
 8104828:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810482c:	e002      	b.n	8104834 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810482e:	bf00      	nop
 8104830:	e000      	b.n	8104834 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8104832:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104834:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104838:	2b00      	cmp	r3, #0
 810483a:	d10a      	bne.n	8104852 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 810483c:	4b37      	ldr	r3, [pc, #220]	; (810491c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810483e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104840:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8104844:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810484a:	4a34      	ldr	r2, [pc, #208]	; (810491c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810484c:	430b      	orrs	r3, r1
 810484e:	6513      	str	r3, [r2, #80]	; 0x50
 8104850:	e003      	b.n	810485a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104852:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104856:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 810485a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810485e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104862:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8104866:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 810486a:	2300      	movs	r3, #0
 810486c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8104870:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8104874:	460b      	mov	r3, r1
 8104876:	4313      	orrs	r3, r2
 8104878:	d056      	beq.n	8104928 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 810487a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810487e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104880:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8104884:	d033      	beq.n	81048ee <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8104886:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 810488a:	d82c      	bhi.n	81048e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 810488c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8104890:	d02f      	beq.n	81048f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8104892:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8104896:	d826      	bhi.n	81048e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8104898:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810489c:	d02b      	beq.n	81048f6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 810489e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81048a2:	d820      	bhi.n	81048e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 81048a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81048a8:	d012      	beq.n	81048d0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 81048aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81048ae:	d81a      	bhi.n	81048e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 81048b0:	2b00      	cmp	r3, #0
 81048b2:	d022      	beq.n	81048fa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 81048b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81048b8:	d115      	bne.n	81048e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81048ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81048be:	3308      	adds	r3, #8
 81048c0:	2101      	movs	r1, #1
 81048c2:	4618      	mov	r0, r3
 81048c4:	f000 ff50 	bl	8105768 <RCCEx_PLL2_Config>
 81048c8:	4603      	mov	r3, r0
 81048ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81048ce:	e015      	b.n	81048fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81048d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81048d4:	3328      	adds	r3, #40	; 0x28
 81048d6:	2101      	movs	r1, #1
 81048d8:	4618      	mov	r0, r3
 81048da:	f000 fff7 	bl	81058cc <RCCEx_PLL3_Config>
 81048de:	4603      	mov	r3, r0
 81048e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81048e4:	e00a      	b.n	81048fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81048e6:	2301      	movs	r3, #1
 81048e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81048ec:	e006      	b.n	81048fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81048ee:	bf00      	nop
 81048f0:	e004      	b.n	81048fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81048f2:	bf00      	nop
 81048f4:	e002      	b.n	81048fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81048f6:	bf00      	nop
 81048f8:	e000      	b.n	81048fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81048fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 81048fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104900:	2b00      	cmp	r3, #0
 8104902:	d10d      	bne.n	8104920 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8104904:	4b05      	ldr	r3, [pc, #20]	; (810491c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104908:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 810490c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104910:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104912:	4a02      	ldr	r2, [pc, #8]	; (810491c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104914:	430b      	orrs	r3, r1
 8104916:	6513      	str	r3, [r2, #80]	; 0x50
 8104918:	e006      	b.n	8104928 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 810491a:	bf00      	nop
 810491c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104920:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104924:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8104928:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810492c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104930:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8104934:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8104938:	2300      	movs	r3, #0
 810493a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 810493e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8104942:	460b      	mov	r3, r1
 8104944:	4313      	orrs	r3, r2
 8104946:	d055      	beq.n	81049f4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8104948:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810494c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8104950:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104954:	d033      	beq.n	81049be <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8104956:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810495a:	d82c      	bhi.n	81049b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 810495c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104960:	d02f      	beq.n	81049c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8104962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104966:	d826      	bhi.n	81049b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8104968:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810496c:	d02b      	beq.n	81049c6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 810496e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104972:	d820      	bhi.n	81049b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8104974:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104978:	d012      	beq.n	81049a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 810497a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810497e:	d81a      	bhi.n	81049b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8104980:	2b00      	cmp	r3, #0
 8104982:	d022      	beq.n	81049ca <HAL_RCCEx_PeriphCLKConfig+0x676>
 8104984:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104988:	d115      	bne.n	81049b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810498a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810498e:	3308      	adds	r3, #8
 8104990:	2101      	movs	r1, #1
 8104992:	4618      	mov	r0, r3
 8104994:	f000 fee8 	bl	8105768 <RCCEx_PLL2_Config>
 8104998:	4603      	mov	r3, r0
 810499a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810499e:	e015      	b.n	81049cc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81049a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81049a4:	3328      	adds	r3, #40	; 0x28
 81049a6:	2101      	movs	r1, #1
 81049a8:	4618      	mov	r0, r3
 81049aa:	f000 ff8f 	bl	81058cc <RCCEx_PLL3_Config>
 81049ae:	4603      	mov	r3, r0
 81049b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 81049b4:	e00a      	b.n	81049cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 81049b6:	2301      	movs	r3, #1
 81049b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81049bc:	e006      	b.n	81049cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81049be:	bf00      	nop
 81049c0:	e004      	b.n	81049cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81049c2:	bf00      	nop
 81049c4:	e002      	b.n	81049cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81049c6:	bf00      	nop
 81049c8:	e000      	b.n	81049cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81049ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 81049cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81049d0:	2b00      	cmp	r3, #0
 81049d2:	d10b      	bne.n	81049ec <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81049d4:	4ba4      	ldr	r3, [pc, #656]	; (8104c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81049d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81049d8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 81049dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81049e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81049e4:	4aa0      	ldr	r2, [pc, #640]	; (8104c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81049e6:	430b      	orrs	r3, r1
 81049e8:	6593      	str	r3, [r2, #88]	; 0x58
 81049ea:	e003      	b.n	81049f4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81049ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81049f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 81049f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81049f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81049fc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8104a00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8104a04:	2300      	movs	r3, #0
 8104a06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8104a0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8104a0e:	460b      	mov	r3, r1
 8104a10:	4313      	orrs	r3, r2
 8104a12:	d037      	beq.n	8104a84 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8104a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104a1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104a1e:	d00e      	beq.n	8104a3e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8104a20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104a24:	d816      	bhi.n	8104a54 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8104a26:	2b00      	cmp	r3, #0
 8104a28:	d018      	beq.n	8104a5c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8104a2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104a2e:	d111      	bne.n	8104a54 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104a30:	4b8d      	ldr	r3, [pc, #564]	; (8104c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104a34:	4a8c      	ldr	r2, [pc, #560]	; (8104c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104a36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104a3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8104a3c:	e00f      	b.n	8104a5e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104a42:	3308      	adds	r3, #8
 8104a44:	2101      	movs	r1, #1
 8104a46:	4618      	mov	r0, r3
 8104a48:	f000 fe8e 	bl	8105768 <RCCEx_PLL2_Config>
 8104a4c:	4603      	mov	r3, r0
 8104a4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8104a52:	e004      	b.n	8104a5e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104a54:	2301      	movs	r3, #1
 8104a56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104a5a:	e000      	b.n	8104a5e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8104a5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104a5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104a62:	2b00      	cmp	r3, #0
 8104a64:	d10a      	bne.n	8104a7c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8104a66:	4b80      	ldr	r3, [pc, #512]	; (8104c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104a6a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8104a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104a74:	4a7c      	ldr	r2, [pc, #496]	; (8104c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104a76:	430b      	orrs	r3, r1
 8104a78:	6513      	str	r3, [r2, #80]	; 0x50
 8104a7a:	e003      	b.n	8104a84 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104a7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104a80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8104a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104a8c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8104a90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8104a94:	2300      	movs	r3, #0
 8104a96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8104a9a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8104a9e:	460b      	mov	r3, r1
 8104aa0:	4313      	orrs	r3, r2
 8104aa2:	d039      	beq.n	8104b18 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8104aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104aaa:	2b03      	cmp	r3, #3
 8104aac:	d81c      	bhi.n	8104ae8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8104aae:	a201      	add	r2, pc, #4	; (adr r2, 8104ab4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8104ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104ab4:	08104af1 	.word	0x08104af1
 8104ab8:	08104ac5 	.word	0x08104ac5
 8104abc:	08104ad3 	.word	0x08104ad3
 8104ac0:	08104af1 	.word	0x08104af1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104ac4:	4b68      	ldr	r3, [pc, #416]	; (8104c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104ac8:	4a67      	ldr	r2, [pc, #412]	; (8104c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104aca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104ace:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8104ad0:	e00f      	b.n	8104af2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104ad6:	3308      	adds	r3, #8
 8104ad8:	2102      	movs	r1, #2
 8104ada:	4618      	mov	r0, r3
 8104adc:	f000 fe44 	bl	8105768 <RCCEx_PLL2_Config>
 8104ae0:	4603      	mov	r3, r0
 8104ae2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8104ae6:	e004      	b.n	8104af2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8104ae8:	2301      	movs	r3, #1
 8104aea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104aee:	e000      	b.n	8104af2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8104af0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104af2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104af6:	2b00      	cmp	r3, #0
 8104af8:	d10a      	bne.n	8104b10 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8104afa:	4b5b      	ldr	r3, [pc, #364]	; (8104c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104afe:	f023 0103 	bic.w	r1, r3, #3
 8104b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104b08:	4a57      	ldr	r2, [pc, #348]	; (8104c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104b0a:	430b      	orrs	r3, r1
 8104b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8104b0e:	e003      	b.n	8104b18 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104b10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104b14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8104b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104b20:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8104b24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8104b28:	2300      	movs	r3, #0
 8104b2a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8104b2e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8104b32:	460b      	mov	r3, r1
 8104b34:	4313      	orrs	r3, r2
 8104b36:	f000 809f 	beq.w	8104c78 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8104b3a:	4b4c      	ldr	r3, [pc, #304]	; (8104c6c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8104b3c:	681b      	ldr	r3, [r3, #0]
 8104b3e:	4a4b      	ldr	r2, [pc, #300]	; (8104c6c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8104b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8104b44:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8104b46:	f7fc fea7 	bl	8101898 <HAL_GetTick>
 8104b4a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8104b4e:	e00b      	b.n	8104b68 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8104b50:	f7fc fea2 	bl	8101898 <HAL_GetTick>
 8104b54:	4602      	mov	r2, r0
 8104b56:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8104b5a:	1ad3      	subs	r3, r2, r3
 8104b5c:	2b64      	cmp	r3, #100	; 0x64
 8104b5e:	d903      	bls.n	8104b68 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8104b60:	2303      	movs	r3, #3
 8104b62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104b66:	e005      	b.n	8104b74 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8104b68:	4b40      	ldr	r3, [pc, #256]	; (8104c6c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8104b6a:	681b      	ldr	r3, [r3, #0]
 8104b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104b70:	2b00      	cmp	r3, #0
 8104b72:	d0ed      	beq.n	8104b50 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8104b74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104b78:	2b00      	cmp	r3, #0
 8104b7a:	d179      	bne.n	8104c70 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8104b7c:	4b3a      	ldr	r3, [pc, #232]	; (8104c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104b7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8104b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104b84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8104b88:	4053      	eors	r3, r2
 8104b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8104b8e:	2b00      	cmp	r3, #0
 8104b90:	d015      	beq.n	8104bbe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8104b92:	4b35      	ldr	r3, [pc, #212]	; (8104c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8104b9a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8104b9e:	4b32      	ldr	r3, [pc, #200]	; (8104c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104ba2:	4a31      	ldr	r2, [pc, #196]	; (8104c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8104ba8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8104baa:	4b2f      	ldr	r3, [pc, #188]	; (8104c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104bae:	4a2e      	ldr	r2, [pc, #184]	; (8104c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104bb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8104bb4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8104bb6:	4a2c      	ldr	r2, [pc, #176]	; (8104c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104bb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104bbc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8104bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104bc2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8104bc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104bca:	d118      	bne.n	8104bfe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8104bcc:	f7fc fe64 	bl	8101898 <HAL_GetTick>
 8104bd0:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8104bd4:	e00d      	b.n	8104bf2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8104bd6:	f7fc fe5f 	bl	8101898 <HAL_GetTick>
 8104bda:	4602      	mov	r2, r0
 8104bdc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8104be0:	1ad2      	subs	r2, r2, r3
 8104be2:	f241 3388 	movw	r3, #5000	; 0x1388
 8104be6:	429a      	cmp	r2, r3
 8104be8:	d903      	bls.n	8104bf2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8104bea:	2303      	movs	r3, #3
 8104bec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8104bf0:	e005      	b.n	8104bfe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8104bf2:	4b1d      	ldr	r3, [pc, #116]	; (8104c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104bf6:	f003 0302 	and.w	r3, r3, #2
 8104bfa:	2b00      	cmp	r3, #0
 8104bfc:	d0eb      	beq.n	8104bd6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8104bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104c02:	2b00      	cmp	r3, #0
 8104c04:	d12b      	bne.n	8104c5e <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8104c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104c0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8104c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8104c12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104c16:	d110      	bne.n	8104c3a <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8104c18:	4b13      	ldr	r3, [pc, #76]	; (8104c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104c1a:	691b      	ldr	r3, [r3, #16]
 8104c1c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8104c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104c24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8104c28:	091b      	lsrs	r3, r3, #4
 8104c2a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8104c2e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8104c32:	4a0d      	ldr	r2, [pc, #52]	; (8104c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104c34:	430b      	orrs	r3, r1
 8104c36:	6113      	str	r3, [r2, #16]
 8104c38:	e005      	b.n	8104c46 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8104c3a:	4b0b      	ldr	r3, [pc, #44]	; (8104c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104c3c:	691b      	ldr	r3, [r3, #16]
 8104c3e:	4a0a      	ldr	r2, [pc, #40]	; (8104c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104c40:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8104c44:	6113      	str	r3, [r2, #16]
 8104c46:	4b08      	ldr	r3, [pc, #32]	; (8104c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104c48:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8104c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104c4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8104c52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8104c56:	4a04      	ldr	r2, [pc, #16]	; (8104c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104c58:	430b      	orrs	r3, r1
 8104c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8104c5c:	e00c      	b.n	8104c78 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8104c5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104c62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8104c66:	e007      	b.n	8104c78 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8104c68:	58024400 	.word	0x58024400
 8104c6c:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104c70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104c74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8104c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104c80:	f002 0301 	and.w	r3, r2, #1
 8104c84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8104c88:	2300      	movs	r3, #0
 8104c8a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8104c8e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8104c92:	460b      	mov	r3, r1
 8104c94:	4313      	orrs	r3, r2
 8104c96:	f000 8089 	beq.w	8104dac <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8104c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104c9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104ca0:	2b28      	cmp	r3, #40	; 0x28
 8104ca2:	d86b      	bhi.n	8104d7c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8104ca4:	a201      	add	r2, pc, #4	; (adr r2, 8104cac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8104ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104caa:	bf00      	nop
 8104cac:	08104d85 	.word	0x08104d85
 8104cb0:	08104d7d 	.word	0x08104d7d
 8104cb4:	08104d7d 	.word	0x08104d7d
 8104cb8:	08104d7d 	.word	0x08104d7d
 8104cbc:	08104d7d 	.word	0x08104d7d
 8104cc0:	08104d7d 	.word	0x08104d7d
 8104cc4:	08104d7d 	.word	0x08104d7d
 8104cc8:	08104d7d 	.word	0x08104d7d
 8104ccc:	08104d51 	.word	0x08104d51
 8104cd0:	08104d7d 	.word	0x08104d7d
 8104cd4:	08104d7d 	.word	0x08104d7d
 8104cd8:	08104d7d 	.word	0x08104d7d
 8104cdc:	08104d7d 	.word	0x08104d7d
 8104ce0:	08104d7d 	.word	0x08104d7d
 8104ce4:	08104d7d 	.word	0x08104d7d
 8104ce8:	08104d7d 	.word	0x08104d7d
 8104cec:	08104d67 	.word	0x08104d67
 8104cf0:	08104d7d 	.word	0x08104d7d
 8104cf4:	08104d7d 	.word	0x08104d7d
 8104cf8:	08104d7d 	.word	0x08104d7d
 8104cfc:	08104d7d 	.word	0x08104d7d
 8104d00:	08104d7d 	.word	0x08104d7d
 8104d04:	08104d7d 	.word	0x08104d7d
 8104d08:	08104d7d 	.word	0x08104d7d
 8104d0c:	08104d85 	.word	0x08104d85
 8104d10:	08104d7d 	.word	0x08104d7d
 8104d14:	08104d7d 	.word	0x08104d7d
 8104d18:	08104d7d 	.word	0x08104d7d
 8104d1c:	08104d7d 	.word	0x08104d7d
 8104d20:	08104d7d 	.word	0x08104d7d
 8104d24:	08104d7d 	.word	0x08104d7d
 8104d28:	08104d7d 	.word	0x08104d7d
 8104d2c:	08104d85 	.word	0x08104d85
 8104d30:	08104d7d 	.word	0x08104d7d
 8104d34:	08104d7d 	.word	0x08104d7d
 8104d38:	08104d7d 	.word	0x08104d7d
 8104d3c:	08104d7d 	.word	0x08104d7d
 8104d40:	08104d7d 	.word	0x08104d7d
 8104d44:	08104d7d 	.word	0x08104d7d
 8104d48:	08104d7d 	.word	0x08104d7d
 8104d4c:	08104d85 	.word	0x08104d85
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104d54:	3308      	adds	r3, #8
 8104d56:	2101      	movs	r1, #1
 8104d58:	4618      	mov	r0, r3
 8104d5a:	f000 fd05 	bl	8105768 <RCCEx_PLL2_Config>
 8104d5e:	4603      	mov	r3, r0
 8104d60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8104d64:	e00f      	b.n	8104d86 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104d6a:	3328      	adds	r3, #40	; 0x28
 8104d6c:	2101      	movs	r1, #1
 8104d6e:	4618      	mov	r0, r3
 8104d70:	f000 fdac 	bl	81058cc <RCCEx_PLL3_Config>
 8104d74:	4603      	mov	r3, r0
 8104d76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8104d7a:	e004      	b.n	8104d86 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104d7c:	2301      	movs	r3, #1
 8104d7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104d82:	e000      	b.n	8104d86 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8104d84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104d86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104d8a:	2b00      	cmp	r3, #0
 8104d8c:	d10a      	bne.n	8104da4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8104d8e:	4bbf      	ldr	r3, [pc, #764]	; (810508c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104d92:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8104d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104d9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104d9c:	4abb      	ldr	r2, [pc, #748]	; (810508c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104d9e:	430b      	orrs	r3, r1
 8104da0:	6553      	str	r3, [r2, #84]	; 0x54
 8104da2:	e003      	b.n	8104dac <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104da4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104da8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8104dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104db4:	f002 0302 	and.w	r3, r2, #2
 8104db8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8104dbc:	2300      	movs	r3, #0
 8104dbe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8104dc2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8104dc6:	460b      	mov	r3, r1
 8104dc8:	4313      	orrs	r3, r2
 8104dca:	d041      	beq.n	8104e50 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8104dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104dd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8104dd2:	2b05      	cmp	r3, #5
 8104dd4:	d824      	bhi.n	8104e20 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8104dd6:	a201      	add	r2, pc, #4	; (adr r2, 8104ddc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8104dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104ddc:	08104e29 	.word	0x08104e29
 8104de0:	08104df5 	.word	0x08104df5
 8104de4:	08104e0b 	.word	0x08104e0b
 8104de8:	08104e29 	.word	0x08104e29
 8104dec:	08104e29 	.word	0x08104e29
 8104df0:	08104e29 	.word	0x08104e29
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104df8:	3308      	adds	r3, #8
 8104dfa:	2101      	movs	r1, #1
 8104dfc:	4618      	mov	r0, r3
 8104dfe:	f000 fcb3 	bl	8105768 <RCCEx_PLL2_Config>
 8104e02:	4603      	mov	r3, r0
 8104e04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8104e08:	e00f      	b.n	8104e2a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104e0e:	3328      	adds	r3, #40	; 0x28
 8104e10:	2101      	movs	r1, #1
 8104e12:	4618      	mov	r0, r3
 8104e14:	f000 fd5a 	bl	81058cc <RCCEx_PLL3_Config>
 8104e18:	4603      	mov	r3, r0
 8104e1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8104e1e:	e004      	b.n	8104e2a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104e20:	2301      	movs	r3, #1
 8104e22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104e26:	e000      	b.n	8104e2a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8104e28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104e2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104e2e:	2b00      	cmp	r3, #0
 8104e30:	d10a      	bne.n	8104e48 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8104e32:	4b96      	ldr	r3, [pc, #600]	; (810508c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104e36:	f023 0107 	bic.w	r1, r3, #7
 8104e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104e3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8104e40:	4a92      	ldr	r2, [pc, #584]	; (810508c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104e42:	430b      	orrs	r3, r1
 8104e44:	6553      	str	r3, [r2, #84]	; 0x54
 8104e46:	e003      	b.n	8104e50 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104e48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104e4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8104e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104e58:	f002 0304 	and.w	r3, r2, #4
 8104e5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8104e60:	2300      	movs	r3, #0
 8104e62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8104e66:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8104e6a:	460b      	mov	r3, r1
 8104e6c:	4313      	orrs	r3, r2
 8104e6e:	d044      	beq.n	8104efa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8104e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104e74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8104e78:	2b05      	cmp	r3, #5
 8104e7a:	d825      	bhi.n	8104ec8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8104e7c:	a201      	add	r2, pc, #4	; (adr r2, 8104e84 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8104e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104e82:	bf00      	nop
 8104e84:	08104ed1 	.word	0x08104ed1
 8104e88:	08104e9d 	.word	0x08104e9d
 8104e8c:	08104eb3 	.word	0x08104eb3
 8104e90:	08104ed1 	.word	0x08104ed1
 8104e94:	08104ed1 	.word	0x08104ed1
 8104e98:	08104ed1 	.word	0x08104ed1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104ea0:	3308      	adds	r3, #8
 8104ea2:	2101      	movs	r1, #1
 8104ea4:	4618      	mov	r0, r3
 8104ea6:	f000 fc5f 	bl	8105768 <RCCEx_PLL2_Config>
 8104eaa:	4603      	mov	r3, r0
 8104eac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8104eb0:	e00f      	b.n	8104ed2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104eb6:	3328      	adds	r3, #40	; 0x28
 8104eb8:	2101      	movs	r1, #1
 8104eba:	4618      	mov	r0, r3
 8104ebc:	f000 fd06 	bl	81058cc <RCCEx_PLL3_Config>
 8104ec0:	4603      	mov	r3, r0
 8104ec2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8104ec6:	e004      	b.n	8104ed2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104ec8:	2301      	movs	r3, #1
 8104eca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104ece:	e000      	b.n	8104ed2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8104ed0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104ed6:	2b00      	cmp	r3, #0
 8104ed8:	d10b      	bne.n	8104ef2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8104eda:	4b6c      	ldr	r3, [pc, #432]	; (810508c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104ede:	f023 0107 	bic.w	r1, r3, #7
 8104ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104ee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8104eea:	4a68      	ldr	r2, [pc, #416]	; (810508c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104eec:	430b      	orrs	r3, r1
 8104eee:	6593      	str	r3, [r2, #88]	; 0x58
 8104ef0:	e003      	b.n	8104efa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104ef2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104ef6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8104efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104f02:	f002 0320 	and.w	r3, r2, #32
 8104f06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8104f0a:	2300      	movs	r3, #0
 8104f0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8104f10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8104f14:	460b      	mov	r3, r1
 8104f16:	4313      	orrs	r3, r2
 8104f18:	d055      	beq.n	8104fc6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8104f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8104f22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104f26:	d033      	beq.n	8104f90 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8104f28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104f2c:	d82c      	bhi.n	8104f88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8104f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104f32:	d02f      	beq.n	8104f94 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8104f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104f38:	d826      	bhi.n	8104f88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8104f3a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104f3e:	d02b      	beq.n	8104f98 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8104f40:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104f44:	d820      	bhi.n	8104f88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8104f46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104f4a:	d012      	beq.n	8104f72 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8104f4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104f50:	d81a      	bhi.n	8104f88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8104f52:	2b00      	cmp	r3, #0
 8104f54:	d022      	beq.n	8104f9c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8104f56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104f5a:	d115      	bne.n	8104f88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104f60:	3308      	adds	r3, #8
 8104f62:	2100      	movs	r1, #0
 8104f64:	4618      	mov	r0, r3
 8104f66:	f000 fbff 	bl	8105768 <RCCEx_PLL2_Config>
 8104f6a:	4603      	mov	r3, r0
 8104f6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8104f70:	e015      	b.n	8104f9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104f76:	3328      	adds	r3, #40	; 0x28
 8104f78:	2102      	movs	r1, #2
 8104f7a:	4618      	mov	r0, r3
 8104f7c:	f000 fca6 	bl	81058cc <RCCEx_PLL3_Config>
 8104f80:	4603      	mov	r3, r0
 8104f82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8104f86:	e00a      	b.n	8104f9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104f88:	2301      	movs	r3, #1
 8104f8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104f8e:	e006      	b.n	8104f9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8104f90:	bf00      	nop
 8104f92:	e004      	b.n	8104f9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8104f94:	bf00      	nop
 8104f96:	e002      	b.n	8104f9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8104f98:	bf00      	nop
 8104f9a:	e000      	b.n	8104f9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8104f9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104f9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104fa2:	2b00      	cmp	r3, #0
 8104fa4:	d10b      	bne.n	8104fbe <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8104fa6:	4b39      	ldr	r3, [pc, #228]	; (810508c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104faa:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8104fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8104fb6:	4a35      	ldr	r2, [pc, #212]	; (810508c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104fb8:	430b      	orrs	r3, r1
 8104fba:	6553      	str	r3, [r2, #84]	; 0x54
 8104fbc:	e003      	b.n	8104fc6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104fbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104fc2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8104fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104fce:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8104fd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8104fd6:	2300      	movs	r3, #0
 8104fd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8104fdc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8104fe0:	460b      	mov	r3, r1
 8104fe2:	4313      	orrs	r3, r2
 8104fe4:	d058      	beq.n	8105098 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8104fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104fea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8104fee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8104ff2:	d033      	beq.n	810505c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8104ff4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8104ff8:	d82c      	bhi.n	8105054 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8104ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104ffe:	d02f      	beq.n	8105060 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8105000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105004:	d826      	bhi.n	8105054 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8105006:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810500a:	d02b      	beq.n	8105064 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 810500c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8105010:	d820      	bhi.n	8105054 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8105012:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8105016:	d012      	beq.n	810503e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8105018:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810501c:	d81a      	bhi.n	8105054 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810501e:	2b00      	cmp	r3, #0
 8105020:	d022      	beq.n	8105068 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8105022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8105026:	d115      	bne.n	8105054 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105028:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810502c:	3308      	adds	r3, #8
 810502e:	2100      	movs	r1, #0
 8105030:	4618      	mov	r0, r3
 8105032:	f000 fb99 	bl	8105768 <RCCEx_PLL2_Config>
 8105036:	4603      	mov	r3, r0
 8105038:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810503c:	e015      	b.n	810506a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810503e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105042:	3328      	adds	r3, #40	; 0x28
 8105044:	2102      	movs	r1, #2
 8105046:	4618      	mov	r0, r3
 8105048:	f000 fc40 	bl	81058cc <RCCEx_PLL3_Config>
 810504c:	4603      	mov	r3, r0
 810504e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8105052:	e00a      	b.n	810506a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105054:	2301      	movs	r3, #1
 8105056:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810505a:	e006      	b.n	810506a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 810505c:	bf00      	nop
 810505e:	e004      	b.n	810506a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8105060:	bf00      	nop
 8105062:	e002      	b.n	810506a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8105064:	bf00      	nop
 8105066:	e000      	b.n	810506a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8105068:	bf00      	nop
    }

    if (ret == HAL_OK)
 810506a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810506e:	2b00      	cmp	r3, #0
 8105070:	d10e      	bne.n	8105090 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8105072:	4b06      	ldr	r3, [pc, #24]	; (810508c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105076:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 810507a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810507e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8105082:	4a02      	ldr	r2, [pc, #8]	; (810508c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105084:	430b      	orrs	r3, r1
 8105086:	6593      	str	r3, [r2, #88]	; 0x58
 8105088:	e006      	b.n	8105098 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 810508a:	bf00      	nop
 810508c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105090:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105094:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8105098:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810509c:	e9d3 2300 	ldrd	r2, r3, [r3]
 81050a0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 81050a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 81050a8:	2300      	movs	r3, #0
 81050aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 81050ae:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 81050b2:	460b      	mov	r3, r1
 81050b4:	4313      	orrs	r3, r2
 81050b6:	d055      	beq.n	8105164 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 81050b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81050bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81050c0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81050c4:	d033      	beq.n	810512e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 81050c6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81050ca:	d82c      	bhi.n	8105126 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81050cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81050d0:	d02f      	beq.n	8105132 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 81050d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81050d6:	d826      	bhi.n	8105126 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81050d8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81050dc:	d02b      	beq.n	8105136 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 81050de:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81050e2:	d820      	bhi.n	8105126 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81050e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81050e8:	d012      	beq.n	8105110 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 81050ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81050ee:	d81a      	bhi.n	8105126 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81050f0:	2b00      	cmp	r3, #0
 81050f2:	d022      	beq.n	810513a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 81050f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81050f8:	d115      	bne.n	8105126 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81050fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81050fe:	3308      	adds	r3, #8
 8105100:	2100      	movs	r1, #0
 8105102:	4618      	mov	r0, r3
 8105104:	f000 fb30 	bl	8105768 <RCCEx_PLL2_Config>
 8105108:	4603      	mov	r3, r0
 810510a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810510e:	e015      	b.n	810513c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105110:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105114:	3328      	adds	r3, #40	; 0x28
 8105116:	2102      	movs	r1, #2
 8105118:	4618      	mov	r0, r3
 810511a:	f000 fbd7 	bl	81058cc <RCCEx_PLL3_Config>
 810511e:	4603      	mov	r3, r0
 8105120:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8105124:	e00a      	b.n	810513c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105126:	2301      	movs	r3, #1
 8105128:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810512c:	e006      	b.n	810513c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810512e:	bf00      	nop
 8105130:	e004      	b.n	810513c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8105132:	bf00      	nop
 8105134:	e002      	b.n	810513c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8105136:	bf00      	nop
 8105138:	e000      	b.n	810513c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810513a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810513c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105140:	2b00      	cmp	r3, #0
 8105142:	d10b      	bne.n	810515c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8105144:	4ba1      	ldr	r3, [pc, #644]	; (81053cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105148:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 810514c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105150:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8105154:	4a9d      	ldr	r2, [pc, #628]	; (81053cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105156:	430b      	orrs	r3, r1
 8105158:	6593      	str	r3, [r2, #88]	; 0x58
 810515a:	e003      	b.n	8105164 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810515c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105160:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8105164:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105168:	e9d3 2300 	ldrd	r2, r3, [r3]
 810516c:	f002 0308 	and.w	r3, r2, #8
 8105170:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8105174:	2300      	movs	r3, #0
 8105176:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 810517a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 810517e:	460b      	mov	r3, r1
 8105180:	4313      	orrs	r3, r2
 8105182:	d01e      	beq.n	81051c2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8105184:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105188:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810518c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105190:	d10c      	bne.n	81051ac <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8105192:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105196:	3328      	adds	r3, #40	; 0x28
 8105198:	2102      	movs	r1, #2
 810519a:	4618      	mov	r0, r3
 810519c:	f000 fb96 	bl	81058cc <RCCEx_PLL3_Config>
 81051a0:	4603      	mov	r3, r0
 81051a2:	2b00      	cmp	r3, #0
 81051a4:	d002      	beq.n	81051ac <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 81051a6:	2301      	movs	r3, #1
 81051a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81051ac:	4b87      	ldr	r3, [pc, #540]	; (81053cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81051ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81051b0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 81051b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81051b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81051bc:	4a83      	ldr	r2, [pc, #524]	; (81053cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81051be:	430b      	orrs	r3, r1
 81051c0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81051c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81051c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81051ca:	f002 0310 	and.w	r3, r2, #16
 81051ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 81051d2:	2300      	movs	r3, #0
 81051d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 81051d8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 81051dc:	460b      	mov	r3, r1
 81051de:	4313      	orrs	r3, r2
 81051e0:	d01e      	beq.n	8105220 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 81051e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81051e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81051ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81051ee:	d10c      	bne.n	810520a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81051f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81051f4:	3328      	adds	r3, #40	; 0x28
 81051f6:	2102      	movs	r1, #2
 81051f8:	4618      	mov	r0, r3
 81051fa:	f000 fb67 	bl	81058cc <RCCEx_PLL3_Config>
 81051fe:	4603      	mov	r3, r0
 8105200:	2b00      	cmp	r3, #0
 8105202:	d002      	beq.n	810520a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8105204:	2301      	movs	r3, #1
 8105206:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 810520a:	4b70      	ldr	r3, [pc, #448]	; (81053cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810520c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810520e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8105212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105216:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810521a:	4a6c      	ldr	r2, [pc, #432]	; (81053cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810521c:	430b      	orrs	r3, r1
 810521e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8105220:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105228:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 810522c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8105230:	2300      	movs	r3, #0
 8105232:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8105236:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 810523a:	460b      	mov	r3, r1
 810523c:	4313      	orrs	r3, r2
 810523e:	d03e      	beq.n	81052be <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8105240:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105244:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8105248:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810524c:	d022      	beq.n	8105294 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 810524e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105252:	d81b      	bhi.n	810528c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8105254:	2b00      	cmp	r3, #0
 8105256:	d003      	beq.n	8105260 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8105258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810525c:	d00b      	beq.n	8105276 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 810525e:	e015      	b.n	810528c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105260:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105264:	3308      	adds	r3, #8
 8105266:	2100      	movs	r1, #0
 8105268:	4618      	mov	r0, r3
 810526a:	f000 fa7d 	bl	8105768 <RCCEx_PLL2_Config>
 810526e:	4603      	mov	r3, r0
 8105270:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8105274:	e00f      	b.n	8105296 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810527a:	3328      	adds	r3, #40	; 0x28
 810527c:	2102      	movs	r1, #2
 810527e:	4618      	mov	r0, r3
 8105280:	f000 fb24 	bl	81058cc <RCCEx_PLL3_Config>
 8105284:	4603      	mov	r3, r0
 8105286:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 810528a:	e004      	b.n	8105296 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810528c:	2301      	movs	r3, #1
 810528e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105292:	e000      	b.n	8105296 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8105294:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105296:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810529a:	2b00      	cmp	r3, #0
 810529c:	d10b      	bne.n	81052b6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 810529e:	4b4b      	ldr	r3, [pc, #300]	; (81053cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81052a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81052a2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 81052a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81052aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 81052ae:	4a47      	ldr	r2, [pc, #284]	; (81053cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81052b0:	430b      	orrs	r3, r1
 81052b2:	6593      	str	r3, [r2, #88]	; 0x58
 81052b4:	e003      	b.n	81052be <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81052b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81052ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 81052be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81052c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81052c6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 81052ca:	67bb      	str	r3, [r7, #120]	; 0x78
 81052cc:	2300      	movs	r3, #0
 81052ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 81052d0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 81052d4:	460b      	mov	r3, r1
 81052d6:	4313      	orrs	r3, r2
 81052d8:	d03b      	beq.n	8105352 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 81052da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81052de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81052e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81052e6:	d01f      	beq.n	8105328 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 81052e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81052ec:	d818      	bhi.n	8105320 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 81052ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81052f2:	d003      	beq.n	81052fc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 81052f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81052f8:	d007      	beq.n	810530a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 81052fa:	e011      	b.n	8105320 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81052fc:	4b33      	ldr	r3, [pc, #204]	; (81053cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81052fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105300:	4a32      	ldr	r2, [pc, #200]	; (81053cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105302:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105306:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8105308:	e00f      	b.n	810532a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810530a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810530e:	3328      	adds	r3, #40	; 0x28
 8105310:	2101      	movs	r1, #1
 8105312:	4618      	mov	r0, r3
 8105314:	f000 fada 	bl	81058cc <RCCEx_PLL3_Config>
 8105318:	4603      	mov	r3, r0
 810531a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 810531e:	e004      	b.n	810532a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105320:	2301      	movs	r3, #1
 8105322:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105326:	e000      	b.n	810532a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8105328:	bf00      	nop
    }

    if (ret == HAL_OK)
 810532a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810532e:	2b00      	cmp	r3, #0
 8105330:	d10b      	bne.n	810534a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8105332:	4b26      	ldr	r3, [pc, #152]	; (81053cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105336:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 810533a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810533e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8105342:	4a22      	ldr	r2, [pc, #136]	; (81053cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105344:	430b      	orrs	r3, r1
 8105346:	6553      	str	r3, [r2, #84]	; 0x54
 8105348:	e003      	b.n	8105352 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810534a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810534e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8105352:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105356:	e9d3 2300 	ldrd	r2, r3, [r3]
 810535a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 810535e:	673b      	str	r3, [r7, #112]	; 0x70
 8105360:	2300      	movs	r3, #0
 8105362:	677b      	str	r3, [r7, #116]	; 0x74
 8105364:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8105368:	460b      	mov	r3, r1
 810536a:	4313      	orrs	r3, r2
 810536c:	d034      	beq.n	81053d8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 810536e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105374:	2b00      	cmp	r3, #0
 8105376:	d003      	beq.n	8105380 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8105378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810537c:	d007      	beq.n	810538e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 810537e:	e011      	b.n	81053a4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105380:	4b12      	ldr	r3, [pc, #72]	; (81053cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105384:	4a11      	ldr	r2, [pc, #68]	; (81053cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105386:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810538a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 810538c:	e00e      	b.n	81053ac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810538e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105392:	3308      	adds	r3, #8
 8105394:	2102      	movs	r1, #2
 8105396:	4618      	mov	r0, r3
 8105398:	f000 f9e6 	bl	8105768 <RCCEx_PLL2_Config>
 810539c:	4603      	mov	r3, r0
 810539e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81053a2:	e003      	b.n	81053ac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 81053a4:	2301      	movs	r3, #1
 81053a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81053aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 81053ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81053b0:	2b00      	cmp	r3, #0
 81053b2:	d10d      	bne.n	81053d0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 81053b4:	4b05      	ldr	r3, [pc, #20]	; (81053cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81053b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81053b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 81053bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81053c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81053c2:	4a02      	ldr	r2, [pc, #8]	; (81053cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81053c4:	430b      	orrs	r3, r1
 81053c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 81053c8:	e006      	b.n	81053d8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 81053ca:	bf00      	nop
 81053cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81053d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81053d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81053d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81053dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81053e0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 81053e4:	66bb      	str	r3, [r7, #104]	; 0x68
 81053e6:	2300      	movs	r3, #0
 81053e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 81053ea:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 81053ee:	460b      	mov	r3, r1
 81053f0:	4313      	orrs	r3, r2
 81053f2:	d00c      	beq.n	810540e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81053f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81053f8:	3328      	adds	r3, #40	; 0x28
 81053fa:	2102      	movs	r1, #2
 81053fc:	4618      	mov	r0, r3
 81053fe:	f000 fa65 	bl	81058cc <RCCEx_PLL3_Config>
 8105402:	4603      	mov	r3, r0
 8105404:	2b00      	cmp	r3, #0
 8105406:	d002      	beq.n	810540e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8105408:	2301      	movs	r3, #1
 810540a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 810540e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105416:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 810541a:	663b      	str	r3, [r7, #96]	; 0x60
 810541c:	2300      	movs	r3, #0
 810541e:	667b      	str	r3, [r7, #100]	; 0x64
 8105420:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8105424:	460b      	mov	r3, r1
 8105426:	4313      	orrs	r3, r2
 8105428:	d038      	beq.n	810549c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 810542a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810542e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8105432:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8105436:	d018      	beq.n	810546a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8105438:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810543c:	d811      	bhi.n	8105462 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 810543e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8105442:	d014      	beq.n	810546e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8105444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8105448:	d80b      	bhi.n	8105462 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 810544a:	2b00      	cmp	r3, #0
 810544c:	d011      	beq.n	8105472 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 810544e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105452:	d106      	bne.n	8105462 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105454:	4bc3      	ldr	r3, [pc, #780]	; (8105764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105458:	4ac2      	ldr	r2, [pc, #776]	; (8105764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810545a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810545e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8105460:	e008      	b.n	8105474 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105462:	2301      	movs	r3, #1
 8105464:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105468:	e004      	b.n	8105474 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 810546a:	bf00      	nop
 810546c:	e002      	b.n	8105474 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 810546e:	bf00      	nop
 8105470:	e000      	b.n	8105474 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8105472:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105474:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105478:	2b00      	cmp	r3, #0
 810547a:	d10b      	bne.n	8105494 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 810547c:	4bb9      	ldr	r3, [pc, #740]	; (8105764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810547e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105480:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8105484:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105488:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810548c:	4ab5      	ldr	r2, [pc, #724]	; (8105764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810548e:	430b      	orrs	r3, r1
 8105490:	6553      	str	r3, [r2, #84]	; 0x54
 8105492:	e003      	b.n	810549c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105494:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105498:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 810549c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81054a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81054a4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 81054a8:	65bb      	str	r3, [r7, #88]	; 0x58
 81054aa:	2300      	movs	r3, #0
 81054ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 81054ae:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 81054b2:	460b      	mov	r3, r1
 81054b4:	4313      	orrs	r3, r2
 81054b6:	d009      	beq.n	81054cc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 81054b8:	4baa      	ldr	r3, [pc, #680]	; (8105764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81054ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81054bc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 81054c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81054c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81054c6:	4aa7      	ldr	r2, [pc, #668]	; (8105764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81054c8:	430b      	orrs	r3, r1
 81054ca:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 81054cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81054d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81054d4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 81054d8:	653b      	str	r3, [r7, #80]	; 0x50
 81054da:	2300      	movs	r3, #0
 81054dc:	657b      	str	r3, [r7, #84]	; 0x54
 81054de:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 81054e2:	460b      	mov	r3, r1
 81054e4:	4313      	orrs	r3, r2
 81054e6:	d00a      	beq.n	81054fe <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 81054e8:	4b9e      	ldr	r3, [pc, #632]	; (8105764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81054ea:	691b      	ldr	r3, [r3, #16]
 81054ec:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 81054f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81054f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 81054f8:	4a9a      	ldr	r2, [pc, #616]	; (8105764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81054fa:	430b      	orrs	r3, r1
 81054fc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 81054fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105506:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 810550a:	64bb      	str	r3, [r7, #72]	; 0x48
 810550c:	2300      	movs	r3, #0
 810550e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8105510:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8105514:	460b      	mov	r3, r1
 8105516:	4313      	orrs	r3, r2
 8105518:	d009      	beq.n	810552e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810551a:	4b92      	ldr	r3, [pc, #584]	; (8105764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810551c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810551e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8105522:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105528:	4a8e      	ldr	r2, [pc, #568]	; (8105764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810552a:	430b      	orrs	r3, r1
 810552c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810552e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105536:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 810553a:	643b      	str	r3, [r7, #64]	; 0x40
 810553c:	2300      	movs	r3, #0
 810553e:	647b      	str	r3, [r7, #68]	; 0x44
 8105540:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8105544:	460b      	mov	r3, r1
 8105546:	4313      	orrs	r3, r2
 8105548:	d00e      	beq.n	8105568 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810554a:	4b86      	ldr	r3, [pc, #536]	; (8105764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810554c:	691b      	ldr	r3, [r3, #16]
 810554e:	4a85      	ldr	r2, [pc, #532]	; (8105764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105550:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8105554:	6113      	str	r3, [r2, #16]
 8105556:	4b83      	ldr	r3, [pc, #524]	; (8105764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105558:	6919      	ldr	r1, [r3, #16]
 810555a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810555e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8105562:	4a80      	ldr	r2, [pc, #512]	; (8105764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105564:	430b      	orrs	r3, r1
 8105566:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8105568:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810556c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105570:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8105574:	63bb      	str	r3, [r7, #56]	; 0x38
 8105576:	2300      	movs	r3, #0
 8105578:	63fb      	str	r3, [r7, #60]	; 0x3c
 810557a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 810557e:	460b      	mov	r3, r1
 8105580:	4313      	orrs	r3, r2
 8105582:	d009      	beq.n	8105598 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8105584:	4b77      	ldr	r3, [pc, #476]	; (8105764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105588:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 810558c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105592:	4a74      	ldr	r2, [pc, #464]	; (8105764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105594:	430b      	orrs	r3, r1
 8105596:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8105598:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810559c:	e9d3 2300 	ldrd	r2, r3, [r3]
 81055a0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 81055a4:	633b      	str	r3, [r7, #48]	; 0x30
 81055a6:	2300      	movs	r3, #0
 81055a8:	637b      	str	r3, [r7, #52]	; 0x34
 81055aa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 81055ae:	460b      	mov	r3, r1
 81055b0:	4313      	orrs	r3, r2
 81055b2:	d00a      	beq.n	81055ca <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 81055b4:	4b6b      	ldr	r3, [pc, #428]	; (8105764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81055b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81055b8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 81055bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81055c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81055c4:	4a67      	ldr	r2, [pc, #412]	; (8105764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81055c6:	430b      	orrs	r3, r1
 81055c8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 81055ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81055ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 81055d2:	2100      	movs	r1, #0
 81055d4:	62b9      	str	r1, [r7, #40]	; 0x28
 81055d6:	f003 0301 	and.w	r3, r3, #1
 81055da:	62fb      	str	r3, [r7, #44]	; 0x2c
 81055dc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 81055e0:	460b      	mov	r3, r1
 81055e2:	4313      	orrs	r3, r2
 81055e4:	d011      	beq.n	810560a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81055e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81055ea:	3308      	adds	r3, #8
 81055ec:	2100      	movs	r1, #0
 81055ee:	4618      	mov	r0, r3
 81055f0:	f000 f8ba 	bl	8105768 <RCCEx_PLL2_Config>
 81055f4:	4603      	mov	r3, r0
 81055f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 81055fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81055fe:	2b00      	cmp	r3, #0
 8105600:	d003      	beq.n	810560a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105602:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105606:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 810560a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810560e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105612:	2100      	movs	r1, #0
 8105614:	6239      	str	r1, [r7, #32]
 8105616:	f003 0302 	and.w	r3, r3, #2
 810561a:	627b      	str	r3, [r7, #36]	; 0x24
 810561c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8105620:	460b      	mov	r3, r1
 8105622:	4313      	orrs	r3, r2
 8105624:	d011      	beq.n	810564a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105626:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810562a:	3308      	adds	r3, #8
 810562c:	2101      	movs	r1, #1
 810562e:	4618      	mov	r0, r3
 8105630:	f000 f89a 	bl	8105768 <RCCEx_PLL2_Config>
 8105634:	4603      	mov	r3, r0
 8105636:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 810563a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810563e:	2b00      	cmp	r3, #0
 8105640:	d003      	beq.n	810564a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105642:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105646:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 810564a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810564e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105652:	2100      	movs	r1, #0
 8105654:	61b9      	str	r1, [r7, #24]
 8105656:	f003 0304 	and.w	r3, r3, #4
 810565a:	61fb      	str	r3, [r7, #28]
 810565c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8105660:	460b      	mov	r3, r1
 8105662:	4313      	orrs	r3, r2
 8105664:	d011      	beq.n	810568a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105666:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810566a:	3308      	adds	r3, #8
 810566c:	2102      	movs	r1, #2
 810566e:	4618      	mov	r0, r3
 8105670:	f000 f87a 	bl	8105768 <RCCEx_PLL2_Config>
 8105674:	4603      	mov	r3, r0
 8105676:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 810567a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810567e:	2b00      	cmp	r3, #0
 8105680:	d003      	beq.n	810568a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105682:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105686:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 810568a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810568e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105692:	2100      	movs	r1, #0
 8105694:	6139      	str	r1, [r7, #16]
 8105696:	f003 0308 	and.w	r3, r3, #8
 810569a:	617b      	str	r3, [r7, #20]
 810569c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 81056a0:	460b      	mov	r3, r1
 81056a2:	4313      	orrs	r3, r2
 81056a4:	d011      	beq.n	81056ca <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81056a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81056aa:	3328      	adds	r3, #40	; 0x28
 81056ac:	2100      	movs	r1, #0
 81056ae:	4618      	mov	r0, r3
 81056b0:	f000 f90c 	bl	81058cc <RCCEx_PLL3_Config>
 81056b4:	4603      	mov	r3, r0
 81056b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 81056ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81056be:	2b00      	cmp	r3, #0
 81056c0:	d003      	beq.n	81056ca <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81056c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81056c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 81056ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81056ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 81056d2:	2100      	movs	r1, #0
 81056d4:	60b9      	str	r1, [r7, #8]
 81056d6:	f003 0310 	and.w	r3, r3, #16
 81056da:	60fb      	str	r3, [r7, #12]
 81056dc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 81056e0:	460b      	mov	r3, r1
 81056e2:	4313      	orrs	r3, r2
 81056e4:	d011      	beq.n	810570a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81056e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81056ea:	3328      	adds	r3, #40	; 0x28
 81056ec:	2101      	movs	r1, #1
 81056ee:	4618      	mov	r0, r3
 81056f0:	f000 f8ec 	bl	81058cc <RCCEx_PLL3_Config>
 81056f4:	4603      	mov	r3, r0
 81056f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 81056fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81056fe:	2b00      	cmp	r3, #0
 8105700:	d003      	beq.n	810570a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105702:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105706:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 810570a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810570e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105712:	2100      	movs	r1, #0
 8105714:	6039      	str	r1, [r7, #0]
 8105716:	f003 0320 	and.w	r3, r3, #32
 810571a:	607b      	str	r3, [r7, #4]
 810571c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8105720:	460b      	mov	r3, r1
 8105722:	4313      	orrs	r3, r2
 8105724:	d011      	beq.n	810574a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105726:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810572a:	3328      	adds	r3, #40	; 0x28
 810572c:	2102      	movs	r1, #2
 810572e:	4618      	mov	r0, r3
 8105730:	f000 f8cc 	bl	81058cc <RCCEx_PLL3_Config>
 8105734:	4603      	mov	r3, r0
 8105736:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 810573a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810573e:	2b00      	cmp	r3, #0
 8105740:	d003      	beq.n	810574a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105742:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105746:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 810574a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 810574e:	2b00      	cmp	r3, #0
 8105750:	d101      	bne.n	8105756 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8105752:	2300      	movs	r3, #0
 8105754:	e000      	b.n	8105758 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8105756:	2301      	movs	r3, #1
}
 8105758:	4618      	mov	r0, r3
 810575a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 810575e:	46bd      	mov	sp, r7
 8105760:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8105764:	58024400 	.word	0x58024400

08105768 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8105768:	b580      	push	{r7, lr}
 810576a:	b084      	sub	sp, #16
 810576c:	af00      	add	r7, sp, #0
 810576e:	6078      	str	r0, [r7, #4]
 8105770:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8105772:	2300      	movs	r3, #0
 8105774:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8105776:	4b54      	ldr	r3, [pc, #336]	; (81058c8 <RCCEx_PLL2_Config+0x160>)
 8105778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810577a:	f003 0303 	and.w	r3, r3, #3
 810577e:	2b03      	cmp	r3, #3
 8105780:	d101      	bne.n	8105786 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8105782:	2301      	movs	r3, #1
 8105784:	e09b      	b.n	81058be <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8105786:	4b50      	ldr	r3, [pc, #320]	; (81058c8 <RCCEx_PLL2_Config+0x160>)
 8105788:	681b      	ldr	r3, [r3, #0]
 810578a:	4a4f      	ldr	r2, [pc, #316]	; (81058c8 <RCCEx_PLL2_Config+0x160>)
 810578c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8105790:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105792:	f7fc f881 	bl	8101898 <HAL_GetTick>
 8105796:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8105798:	e008      	b.n	81057ac <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810579a:	f7fc f87d 	bl	8101898 <HAL_GetTick>
 810579e:	4602      	mov	r2, r0
 81057a0:	68bb      	ldr	r3, [r7, #8]
 81057a2:	1ad3      	subs	r3, r2, r3
 81057a4:	2b02      	cmp	r3, #2
 81057a6:	d901      	bls.n	81057ac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 81057a8:	2303      	movs	r3, #3
 81057aa:	e088      	b.n	81058be <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81057ac:	4b46      	ldr	r3, [pc, #280]	; (81058c8 <RCCEx_PLL2_Config+0x160>)
 81057ae:	681b      	ldr	r3, [r3, #0]
 81057b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81057b4:	2b00      	cmp	r3, #0
 81057b6:	d1f0      	bne.n	810579a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 81057b8:	4b43      	ldr	r3, [pc, #268]	; (81058c8 <RCCEx_PLL2_Config+0x160>)
 81057ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81057bc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 81057c0:	687b      	ldr	r3, [r7, #4]
 81057c2:	681b      	ldr	r3, [r3, #0]
 81057c4:	031b      	lsls	r3, r3, #12
 81057c6:	4940      	ldr	r1, [pc, #256]	; (81058c8 <RCCEx_PLL2_Config+0x160>)
 81057c8:	4313      	orrs	r3, r2
 81057ca:	628b      	str	r3, [r1, #40]	; 0x28
 81057cc:	687b      	ldr	r3, [r7, #4]
 81057ce:	685b      	ldr	r3, [r3, #4]
 81057d0:	3b01      	subs	r3, #1
 81057d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81057d6:	687b      	ldr	r3, [r7, #4]
 81057d8:	689b      	ldr	r3, [r3, #8]
 81057da:	3b01      	subs	r3, #1
 81057dc:	025b      	lsls	r3, r3, #9
 81057de:	b29b      	uxth	r3, r3
 81057e0:	431a      	orrs	r2, r3
 81057e2:	687b      	ldr	r3, [r7, #4]
 81057e4:	68db      	ldr	r3, [r3, #12]
 81057e6:	3b01      	subs	r3, #1
 81057e8:	041b      	lsls	r3, r3, #16
 81057ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 81057ee:	431a      	orrs	r2, r3
 81057f0:	687b      	ldr	r3, [r7, #4]
 81057f2:	691b      	ldr	r3, [r3, #16]
 81057f4:	3b01      	subs	r3, #1
 81057f6:	061b      	lsls	r3, r3, #24
 81057f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 81057fc:	4932      	ldr	r1, [pc, #200]	; (81058c8 <RCCEx_PLL2_Config+0x160>)
 81057fe:	4313      	orrs	r3, r2
 8105800:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8105802:	4b31      	ldr	r3, [pc, #196]	; (81058c8 <RCCEx_PLL2_Config+0x160>)
 8105804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105806:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 810580a:	687b      	ldr	r3, [r7, #4]
 810580c:	695b      	ldr	r3, [r3, #20]
 810580e:	492e      	ldr	r1, [pc, #184]	; (81058c8 <RCCEx_PLL2_Config+0x160>)
 8105810:	4313      	orrs	r3, r2
 8105812:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8105814:	4b2c      	ldr	r3, [pc, #176]	; (81058c8 <RCCEx_PLL2_Config+0x160>)
 8105816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105818:	f023 0220 	bic.w	r2, r3, #32
 810581c:	687b      	ldr	r3, [r7, #4]
 810581e:	699b      	ldr	r3, [r3, #24]
 8105820:	4929      	ldr	r1, [pc, #164]	; (81058c8 <RCCEx_PLL2_Config+0x160>)
 8105822:	4313      	orrs	r3, r2
 8105824:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8105826:	4b28      	ldr	r3, [pc, #160]	; (81058c8 <RCCEx_PLL2_Config+0x160>)
 8105828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810582a:	4a27      	ldr	r2, [pc, #156]	; (81058c8 <RCCEx_PLL2_Config+0x160>)
 810582c:	f023 0310 	bic.w	r3, r3, #16
 8105830:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8105832:	4b25      	ldr	r3, [pc, #148]	; (81058c8 <RCCEx_PLL2_Config+0x160>)
 8105834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105836:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810583a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810583e:	687a      	ldr	r2, [r7, #4]
 8105840:	69d2      	ldr	r2, [r2, #28]
 8105842:	00d2      	lsls	r2, r2, #3
 8105844:	4920      	ldr	r1, [pc, #128]	; (81058c8 <RCCEx_PLL2_Config+0x160>)
 8105846:	4313      	orrs	r3, r2
 8105848:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810584a:	4b1f      	ldr	r3, [pc, #124]	; (81058c8 <RCCEx_PLL2_Config+0x160>)
 810584c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810584e:	4a1e      	ldr	r2, [pc, #120]	; (81058c8 <RCCEx_PLL2_Config+0x160>)
 8105850:	f043 0310 	orr.w	r3, r3, #16
 8105854:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8105856:	683b      	ldr	r3, [r7, #0]
 8105858:	2b00      	cmp	r3, #0
 810585a:	d106      	bne.n	810586a <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 810585c:	4b1a      	ldr	r3, [pc, #104]	; (81058c8 <RCCEx_PLL2_Config+0x160>)
 810585e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105860:	4a19      	ldr	r2, [pc, #100]	; (81058c8 <RCCEx_PLL2_Config+0x160>)
 8105862:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8105866:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105868:	e00f      	b.n	810588a <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810586a:	683b      	ldr	r3, [r7, #0]
 810586c:	2b01      	cmp	r3, #1
 810586e:	d106      	bne.n	810587e <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8105870:	4b15      	ldr	r3, [pc, #84]	; (81058c8 <RCCEx_PLL2_Config+0x160>)
 8105872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105874:	4a14      	ldr	r2, [pc, #80]	; (81058c8 <RCCEx_PLL2_Config+0x160>)
 8105876:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810587a:	62d3      	str	r3, [r2, #44]	; 0x2c
 810587c:	e005      	b.n	810588a <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810587e:	4b12      	ldr	r3, [pc, #72]	; (81058c8 <RCCEx_PLL2_Config+0x160>)
 8105880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105882:	4a11      	ldr	r2, [pc, #68]	; (81058c8 <RCCEx_PLL2_Config+0x160>)
 8105884:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8105888:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810588a:	4b0f      	ldr	r3, [pc, #60]	; (81058c8 <RCCEx_PLL2_Config+0x160>)
 810588c:	681b      	ldr	r3, [r3, #0]
 810588e:	4a0e      	ldr	r2, [pc, #56]	; (81058c8 <RCCEx_PLL2_Config+0x160>)
 8105890:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8105894:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105896:	f7fb ffff 	bl	8101898 <HAL_GetTick>
 810589a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810589c:	e008      	b.n	81058b0 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810589e:	f7fb fffb 	bl	8101898 <HAL_GetTick>
 81058a2:	4602      	mov	r2, r0
 81058a4:	68bb      	ldr	r3, [r7, #8]
 81058a6:	1ad3      	subs	r3, r2, r3
 81058a8:	2b02      	cmp	r3, #2
 81058aa:	d901      	bls.n	81058b0 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 81058ac:	2303      	movs	r3, #3
 81058ae:	e006      	b.n	81058be <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81058b0:	4b05      	ldr	r3, [pc, #20]	; (81058c8 <RCCEx_PLL2_Config+0x160>)
 81058b2:	681b      	ldr	r3, [r3, #0]
 81058b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81058b8:	2b00      	cmp	r3, #0
 81058ba:	d0f0      	beq.n	810589e <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 81058bc:	7bfb      	ldrb	r3, [r7, #15]
}
 81058be:	4618      	mov	r0, r3
 81058c0:	3710      	adds	r7, #16
 81058c2:	46bd      	mov	sp, r7
 81058c4:	bd80      	pop	{r7, pc}
 81058c6:	bf00      	nop
 81058c8:	58024400 	.word	0x58024400

081058cc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 81058cc:	b580      	push	{r7, lr}
 81058ce:	b084      	sub	sp, #16
 81058d0:	af00      	add	r7, sp, #0
 81058d2:	6078      	str	r0, [r7, #4]
 81058d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81058d6:	2300      	movs	r3, #0
 81058d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81058da:	4b54      	ldr	r3, [pc, #336]	; (8105a2c <RCCEx_PLL3_Config+0x160>)
 81058dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81058de:	f003 0303 	and.w	r3, r3, #3
 81058e2:	2b03      	cmp	r3, #3
 81058e4:	d101      	bne.n	81058ea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 81058e6:	2301      	movs	r3, #1
 81058e8:	e09b      	b.n	8105a22 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 81058ea:	4b50      	ldr	r3, [pc, #320]	; (8105a2c <RCCEx_PLL3_Config+0x160>)
 81058ec:	681b      	ldr	r3, [r3, #0]
 81058ee:	4a4f      	ldr	r2, [pc, #316]	; (8105a2c <RCCEx_PLL3_Config+0x160>)
 81058f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 81058f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81058f6:	f7fb ffcf 	bl	8101898 <HAL_GetTick>
 81058fa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81058fc:	e008      	b.n	8105910 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 81058fe:	f7fb ffcb 	bl	8101898 <HAL_GetTick>
 8105902:	4602      	mov	r2, r0
 8105904:	68bb      	ldr	r3, [r7, #8]
 8105906:	1ad3      	subs	r3, r2, r3
 8105908:	2b02      	cmp	r3, #2
 810590a:	d901      	bls.n	8105910 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 810590c:	2303      	movs	r3, #3
 810590e:	e088      	b.n	8105a22 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8105910:	4b46      	ldr	r3, [pc, #280]	; (8105a2c <RCCEx_PLL3_Config+0x160>)
 8105912:	681b      	ldr	r3, [r3, #0]
 8105914:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105918:	2b00      	cmp	r3, #0
 810591a:	d1f0      	bne.n	81058fe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 810591c:	4b43      	ldr	r3, [pc, #268]	; (8105a2c <RCCEx_PLL3_Config+0x160>)
 810591e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105920:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8105924:	687b      	ldr	r3, [r7, #4]
 8105926:	681b      	ldr	r3, [r3, #0]
 8105928:	051b      	lsls	r3, r3, #20
 810592a:	4940      	ldr	r1, [pc, #256]	; (8105a2c <RCCEx_PLL3_Config+0x160>)
 810592c:	4313      	orrs	r3, r2
 810592e:	628b      	str	r3, [r1, #40]	; 0x28
 8105930:	687b      	ldr	r3, [r7, #4]
 8105932:	685b      	ldr	r3, [r3, #4]
 8105934:	3b01      	subs	r3, #1
 8105936:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810593a:	687b      	ldr	r3, [r7, #4]
 810593c:	689b      	ldr	r3, [r3, #8]
 810593e:	3b01      	subs	r3, #1
 8105940:	025b      	lsls	r3, r3, #9
 8105942:	b29b      	uxth	r3, r3
 8105944:	431a      	orrs	r2, r3
 8105946:	687b      	ldr	r3, [r7, #4]
 8105948:	68db      	ldr	r3, [r3, #12]
 810594a:	3b01      	subs	r3, #1
 810594c:	041b      	lsls	r3, r3, #16
 810594e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8105952:	431a      	orrs	r2, r3
 8105954:	687b      	ldr	r3, [r7, #4]
 8105956:	691b      	ldr	r3, [r3, #16]
 8105958:	3b01      	subs	r3, #1
 810595a:	061b      	lsls	r3, r3, #24
 810595c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8105960:	4932      	ldr	r1, [pc, #200]	; (8105a2c <RCCEx_PLL3_Config+0x160>)
 8105962:	4313      	orrs	r3, r2
 8105964:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8105966:	4b31      	ldr	r3, [pc, #196]	; (8105a2c <RCCEx_PLL3_Config+0x160>)
 8105968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810596a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 810596e:	687b      	ldr	r3, [r7, #4]
 8105970:	695b      	ldr	r3, [r3, #20]
 8105972:	492e      	ldr	r1, [pc, #184]	; (8105a2c <RCCEx_PLL3_Config+0x160>)
 8105974:	4313      	orrs	r3, r2
 8105976:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8105978:	4b2c      	ldr	r3, [pc, #176]	; (8105a2c <RCCEx_PLL3_Config+0x160>)
 810597a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810597c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8105980:	687b      	ldr	r3, [r7, #4]
 8105982:	699b      	ldr	r3, [r3, #24]
 8105984:	4929      	ldr	r1, [pc, #164]	; (8105a2c <RCCEx_PLL3_Config+0x160>)
 8105986:	4313      	orrs	r3, r2
 8105988:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810598a:	4b28      	ldr	r3, [pc, #160]	; (8105a2c <RCCEx_PLL3_Config+0x160>)
 810598c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810598e:	4a27      	ldr	r2, [pc, #156]	; (8105a2c <RCCEx_PLL3_Config+0x160>)
 8105990:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8105994:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8105996:	4b25      	ldr	r3, [pc, #148]	; (8105a2c <RCCEx_PLL3_Config+0x160>)
 8105998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810599a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810599e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 81059a2:	687a      	ldr	r2, [r7, #4]
 81059a4:	69d2      	ldr	r2, [r2, #28]
 81059a6:	00d2      	lsls	r2, r2, #3
 81059a8:	4920      	ldr	r1, [pc, #128]	; (8105a2c <RCCEx_PLL3_Config+0x160>)
 81059aa:	4313      	orrs	r3, r2
 81059ac:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 81059ae:	4b1f      	ldr	r3, [pc, #124]	; (8105a2c <RCCEx_PLL3_Config+0x160>)
 81059b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81059b2:	4a1e      	ldr	r2, [pc, #120]	; (8105a2c <RCCEx_PLL3_Config+0x160>)
 81059b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81059b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 81059ba:	683b      	ldr	r3, [r7, #0]
 81059bc:	2b00      	cmp	r3, #0
 81059be:	d106      	bne.n	81059ce <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 81059c0:	4b1a      	ldr	r3, [pc, #104]	; (8105a2c <RCCEx_PLL3_Config+0x160>)
 81059c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81059c4:	4a19      	ldr	r2, [pc, #100]	; (8105a2c <RCCEx_PLL3_Config+0x160>)
 81059c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 81059ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 81059cc:	e00f      	b.n	81059ee <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81059ce:	683b      	ldr	r3, [r7, #0]
 81059d0:	2b01      	cmp	r3, #1
 81059d2:	d106      	bne.n	81059e2 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 81059d4:	4b15      	ldr	r3, [pc, #84]	; (8105a2c <RCCEx_PLL3_Config+0x160>)
 81059d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81059d8:	4a14      	ldr	r2, [pc, #80]	; (8105a2c <RCCEx_PLL3_Config+0x160>)
 81059da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 81059de:	62d3      	str	r3, [r2, #44]	; 0x2c
 81059e0:	e005      	b.n	81059ee <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 81059e2:	4b12      	ldr	r3, [pc, #72]	; (8105a2c <RCCEx_PLL3_Config+0x160>)
 81059e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81059e6:	4a11      	ldr	r2, [pc, #68]	; (8105a2c <RCCEx_PLL3_Config+0x160>)
 81059e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 81059ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 81059ee:	4b0f      	ldr	r3, [pc, #60]	; (8105a2c <RCCEx_PLL3_Config+0x160>)
 81059f0:	681b      	ldr	r3, [r3, #0]
 81059f2:	4a0e      	ldr	r2, [pc, #56]	; (8105a2c <RCCEx_PLL3_Config+0x160>)
 81059f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81059f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81059fa:	f7fb ff4d 	bl	8101898 <HAL_GetTick>
 81059fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8105a00:	e008      	b.n	8105a14 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8105a02:	f7fb ff49 	bl	8101898 <HAL_GetTick>
 8105a06:	4602      	mov	r2, r0
 8105a08:	68bb      	ldr	r3, [r7, #8]
 8105a0a:	1ad3      	subs	r3, r2, r3
 8105a0c:	2b02      	cmp	r3, #2
 8105a0e:	d901      	bls.n	8105a14 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8105a10:	2303      	movs	r3, #3
 8105a12:	e006      	b.n	8105a22 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8105a14:	4b05      	ldr	r3, [pc, #20]	; (8105a2c <RCCEx_PLL3_Config+0x160>)
 8105a16:	681b      	ldr	r3, [r3, #0]
 8105a18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105a1c:	2b00      	cmp	r3, #0
 8105a1e:	d0f0      	beq.n	8105a02 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8105a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8105a22:	4618      	mov	r0, r3
 8105a24:	3710      	adds	r7, #16
 8105a26:	46bd      	mov	sp, r7
 8105a28:	bd80      	pop	{r7, pc}
 8105a2a:	bf00      	nop
 8105a2c:	58024400 	.word	0x58024400

08105a30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8105a30:	b580      	push	{r7, lr}
 8105a32:	b082      	sub	sp, #8
 8105a34:	af00      	add	r7, sp, #0
 8105a36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8105a38:	687b      	ldr	r3, [r7, #4]
 8105a3a:	2b00      	cmp	r3, #0
 8105a3c:	d101      	bne.n	8105a42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8105a3e:	2301      	movs	r3, #1
 8105a40:	e049      	b.n	8105ad6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8105a42:	687b      	ldr	r3, [r7, #4]
 8105a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8105a48:	b2db      	uxtb	r3, r3
 8105a4a:	2b00      	cmp	r3, #0
 8105a4c:	d106      	bne.n	8105a5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8105a4e:	687b      	ldr	r3, [r7, #4]
 8105a50:	2200      	movs	r2, #0
 8105a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8105a56:	6878      	ldr	r0, [r7, #4]
 8105a58:	f7fb fd74 	bl	8101544 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8105a5c:	687b      	ldr	r3, [r7, #4]
 8105a5e:	2202      	movs	r2, #2
 8105a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8105a64:	687b      	ldr	r3, [r7, #4]
 8105a66:	681a      	ldr	r2, [r3, #0]
 8105a68:	687b      	ldr	r3, [r7, #4]
 8105a6a:	3304      	adds	r3, #4
 8105a6c:	4619      	mov	r1, r3
 8105a6e:	4610      	mov	r0, r2
 8105a70:	f000 fc70 	bl	8106354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8105a74:	687b      	ldr	r3, [r7, #4]
 8105a76:	2201      	movs	r2, #1
 8105a78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8105a7c:	687b      	ldr	r3, [r7, #4]
 8105a7e:	2201      	movs	r2, #1
 8105a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8105a84:	687b      	ldr	r3, [r7, #4]
 8105a86:	2201      	movs	r2, #1
 8105a88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8105a8c:	687b      	ldr	r3, [r7, #4]
 8105a8e:	2201      	movs	r2, #1
 8105a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8105a94:	687b      	ldr	r3, [r7, #4]
 8105a96:	2201      	movs	r2, #1
 8105a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8105a9c:	687b      	ldr	r3, [r7, #4]
 8105a9e:	2201      	movs	r2, #1
 8105aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8105aa4:	687b      	ldr	r3, [r7, #4]
 8105aa6:	2201      	movs	r2, #1
 8105aa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8105aac:	687b      	ldr	r3, [r7, #4]
 8105aae:	2201      	movs	r2, #1
 8105ab0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8105ab4:	687b      	ldr	r3, [r7, #4]
 8105ab6:	2201      	movs	r2, #1
 8105ab8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8105abc:	687b      	ldr	r3, [r7, #4]
 8105abe:	2201      	movs	r2, #1
 8105ac0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8105ac4:	687b      	ldr	r3, [r7, #4]
 8105ac6:	2201      	movs	r2, #1
 8105ac8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8105acc:	687b      	ldr	r3, [r7, #4]
 8105ace:	2201      	movs	r2, #1
 8105ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8105ad4:	2300      	movs	r3, #0
}
 8105ad6:	4618      	mov	r0, r3
 8105ad8:	3708      	adds	r7, #8
 8105ada:	46bd      	mov	sp, r7
 8105adc:	bd80      	pop	{r7, pc}
	...

08105ae0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8105ae0:	b480      	push	{r7}
 8105ae2:	b085      	sub	sp, #20
 8105ae4:	af00      	add	r7, sp, #0
 8105ae6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8105ae8:	687b      	ldr	r3, [r7, #4]
 8105aea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8105aee:	b2db      	uxtb	r3, r3
 8105af0:	2b01      	cmp	r3, #1
 8105af2:	d001      	beq.n	8105af8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8105af4:	2301      	movs	r3, #1
 8105af6:	e054      	b.n	8105ba2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8105af8:	687b      	ldr	r3, [r7, #4]
 8105afa:	2202      	movs	r2, #2
 8105afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8105b00:	687b      	ldr	r3, [r7, #4]
 8105b02:	681b      	ldr	r3, [r3, #0]
 8105b04:	68da      	ldr	r2, [r3, #12]
 8105b06:	687b      	ldr	r3, [r7, #4]
 8105b08:	681b      	ldr	r3, [r3, #0]
 8105b0a:	f042 0201 	orr.w	r2, r2, #1
 8105b0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8105b10:	687b      	ldr	r3, [r7, #4]
 8105b12:	681b      	ldr	r3, [r3, #0]
 8105b14:	4a26      	ldr	r2, [pc, #152]	; (8105bb0 <HAL_TIM_Base_Start_IT+0xd0>)
 8105b16:	4293      	cmp	r3, r2
 8105b18:	d022      	beq.n	8105b60 <HAL_TIM_Base_Start_IT+0x80>
 8105b1a:	687b      	ldr	r3, [r7, #4]
 8105b1c:	681b      	ldr	r3, [r3, #0]
 8105b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105b22:	d01d      	beq.n	8105b60 <HAL_TIM_Base_Start_IT+0x80>
 8105b24:	687b      	ldr	r3, [r7, #4]
 8105b26:	681b      	ldr	r3, [r3, #0]
 8105b28:	4a22      	ldr	r2, [pc, #136]	; (8105bb4 <HAL_TIM_Base_Start_IT+0xd4>)
 8105b2a:	4293      	cmp	r3, r2
 8105b2c:	d018      	beq.n	8105b60 <HAL_TIM_Base_Start_IT+0x80>
 8105b2e:	687b      	ldr	r3, [r7, #4]
 8105b30:	681b      	ldr	r3, [r3, #0]
 8105b32:	4a21      	ldr	r2, [pc, #132]	; (8105bb8 <HAL_TIM_Base_Start_IT+0xd8>)
 8105b34:	4293      	cmp	r3, r2
 8105b36:	d013      	beq.n	8105b60 <HAL_TIM_Base_Start_IT+0x80>
 8105b38:	687b      	ldr	r3, [r7, #4]
 8105b3a:	681b      	ldr	r3, [r3, #0]
 8105b3c:	4a1f      	ldr	r2, [pc, #124]	; (8105bbc <HAL_TIM_Base_Start_IT+0xdc>)
 8105b3e:	4293      	cmp	r3, r2
 8105b40:	d00e      	beq.n	8105b60 <HAL_TIM_Base_Start_IT+0x80>
 8105b42:	687b      	ldr	r3, [r7, #4]
 8105b44:	681b      	ldr	r3, [r3, #0]
 8105b46:	4a1e      	ldr	r2, [pc, #120]	; (8105bc0 <HAL_TIM_Base_Start_IT+0xe0>)
 8105b48:	4293      	cmp	r3, r2
 8105b4a:	d009      	beq.n	8105b60 <HAL_TIM_Base_Start_IT+0x80>
 8105b4c:	687b      	ldr	r3, [r7, #4]
 8105b4e:	681b      	ldr	r3, [r3, #0]
 8105b50:	4a1c      	ldr	r2, [pc, #112]	; (8105bc4 <HAL_TIM_Base_Start_IT+0xe4>)
 8105b52:	4293      	cmp	r3, r2
 8105b54:	d004      	beq.n	8105b60 <HAL_TIM_Base_Start_IT+0x80>
 8105b56:	687b      	ldr	r3, [r7, #4]
 8105b58:	681b      	ldr	r3, [r3, #0]
 8105b5a:	4a1b      	ldr	r2, [pc, #108]	; (8105bc8 <HAL_TIM_Base_Start_IT+0xe8>)
 8105b5c:	4293      	cmp	r3, r2
 8105b5e:	d115      	bne.n	8105b8c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8105b60:	687b      	ldr	r3, [r7, #4]
 8105b62:	681b      	ldr	r3, [r3, #0]
 8105b64:	689a      	ldr	r2, [r3, #8]
 8105b66:	4b19      	ldr	r3, [pc, #100]	; (8105bcc <HAL_TIM_Base_Start_IT+0xec>)
 8105b68:	4013      	ands	r3, r2
 8105b6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8105b6c:	68fb      	ldr	r3, [r7, #12]
 8105b6e:	2b06      	cmp	r3, #6
 8105b70:	d015      	beq.n	8105b9e <HAL_TIM_Base_Start_IT+0xbe>
 8105b72:	68fb      	ldr	r3, [r7, #12]
 8105b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105b78:	d011      	beq.n	8105b9e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8105b7a:	687b      	ldr	r3, [r7, #4]
 8105b7c:	681b      	ldr	r3, [r3, #0]
 8105b7e:	681a      	ldr	r2, [r3, #0]
 8105b80:	687b      	ldr	r3, [r7, #4]
 8105b82:	681b      	ldr	r3, [r3, #0]
 8105b84:	f042 0201 	orr.w	r2, r2, #1
 8105b88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8105b8a:	e008      	b.n	8105b9e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8105b8c:	687b      	ldr	r3, [r7, #4]
 8105b8e:	681b      	ldr	r3, [r3, #0]
 8105b90:	681a      	ldr	r2, [r3, #0]
 8105b92:	687b      	ldr	r3, [r7, #4]
 8105b94:	681b      	ldr	r3, [r3, #0]
 8105b96:	f042 0201 	orr.w	r2, r2, #1
 8105b9a:	601a      	str	r2, [r3, #0]
 8105b9c:	e000      	b.n	8105ba0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8105b9e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8105ba0:	2300      	movs	r3, #0
}
 8105ba2:	4618      	mov	r0, r3
 8105ba4:	3714      	adds	r7, #20
 8105ba6:	46bd      	mov	sp, r7
 8105ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105bac:	4770      	bx	lr
 8105bae:	bf00      	nop
 8105bb0:	40010000 	.word	0x40010000
 8105bb4:	40000400 	.word	0x40000400
 8105bb8:	40000800 	.word	0x40000800
 8105bbc:	40000c00 	.word	0x40000c00
 8105bc0:	40010400 	.word	0x40010400
 8105bc4:	40001800 	.word	0x40001800
 8105bc8:	40014000 	.word	0x40014000
 8105bcc:	00010007 	.word	0x00010007

08105bd0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8105bd0:	b580      	push	{r7, lr}
 8105bd2:	b082      	sub	sp, #8
 8105bd4:	af00      	add	r7, sp, #0
 8105bd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8105bd8:	687b      	ldr	r3, [r7, #4]
 8105bda:	2b00      	cmp	r3, #0
 8105bdc:	d101      	bne.n	8105be2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8105bde:	2301      	movs	r3, #1
 8105be0:	e049      	b.n	8105c76 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8105be2:	687b      	ldr	r3, [r7, #4]
 8105be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8105be8:	b2db      	uxtb	r3, r3
 8105bea:	2b00      	cmp	r3, #0
 8105bec:	d106      	bne.n	8105bfc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8105bee:	687b      	ldr	r3, [r7, #4]
 8105bf0:	2200      	movs	r2, #0
 8105bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8105bf6:	6878      	ldr	r0, [r7, #4]
 8105bf8:	f7fb fc82 	bl	8101500 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8105bfc:	687b      	ldr	r3, [r7, #4]
 8105bfe:	2202      	movs	r2, #2
 8105c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8105c04:	687b      	ldr	r3, [r7, #4]
 8105c06:	681a      	ldr	r2, [r3, #0]
 8105c08:	687b      	ldr	r3, [r7, #4]
 8105c0a:	3304      	adds	r3, #4
 8105c0c:	4619      	mov	r1, r3
 8105c0e:	4610      	mov	r0, r2
 8105c10:	f000 fba0 	bl	8106354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8105c14:	687b      	ldr	r3, [r7, #4]
 8105c16:	2201      	movs	r2, #1
 8105c18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8105c1c:	687b      	ldr	r3, [r7, #4]
 8105c1e:	2201      	movs	r2, #1
 8105c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8105c24:	687b      	ldr	r3, [r7, #4]
 8105c26:	2201      	movs	r2, #1
 8105c28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8105c2c:	687b      	ldr	r3, [r7, #4]
 8105c2e:	2201      	movs	r2, #1
 8105c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8105c34:	687b      	ldr	r3, [r7, #4]
 8105c36:	2201      	movs	r2, #1
 8105c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8105c3c:	687b      	ldr	r3, [r7, #4]
 8105c3e:	2201      	movs	r2, #1
 8105c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8105c44:	687b      	ldr	r3, [r7, #4]
 8105c46:	2201      	movs	r2, #1
 8105c48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8105c4c:	687b      	ldr	r3, [r7, #4]
 8105c4e:	2201      	movs	r2, #1
 8105c50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8105c54:	687b      	ldr	r3, [r7, #4]
 8105c56:	2201      	movs	r2, #1
 8105c58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8105c5c:	687b      	ldr	r3, [r7, #4]
 8105c5e:	2201      	movs	r2, #1
 8105c60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8105c64:	687b      	ldr	r3, [r7, #4]
 8105c66:	2201      	movs	r2, #1
 8105c68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8105c6c:	687b      	ldr	r3, [r7, #4]
 8105c6e:	2201      	movs	r2, #1
 8105c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8105c74:	2300      	movs	r3, #0
}
 8105c76:	4618      	mov	r0, r3
 8105c78:	3708      	adds	r7, #8
 8105c7a:	46bd      	mov	sp, r7
 8105c7c:	bd80      	pop	{r7, pc}
	...

08105c80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8105c80:	b580      	push	{r7, lr}
 8105c82:	b084      	sub	sp, #16
 8105c84:	af00      	add	r7, sp, #0
 8105c86:	6078      	str	r0, [r7, #4]
 8105c88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8105c8a:	683b      	ldr	r3, [r7, #0]
 8105c8c:	2b00      	cmp	r3, #0
 8105c8e:	d109      	bne.n	8105ca4 <HAL_TIM_PWM_Start+0x24>
 8105c90:	687b      	ldr	r3, [r7, #4]
 8105c92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8105c96:	b2db      	uxtb	r3, r3
 8105c98:	2b01      	cmp	r3, #1
 8105c9a:	bf14      	ite	ne
 8105c9c:	2301      	movne	r3, #1
 8105c9e:	2300      	moveq	r3, #0
 8105ca0:	b2db      	uxtb	r3, r3
 8105ca2:	e03c      	b.n	8105d1e <HAL_TIM_PWM_Start+0x9e>
 8105ca4:	683b      	ldr	r3, [r7, #0]
 8105ca6:	2b04      	cmp	r3, #4
 8105ca8:	d109      	bne.n	8105cbe <HAL_TIM_PWM_Start+0x3e>
 8105caa:	687b      	ldr	r3, [r7, #4]
 8105cac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8105cb0:	b2db      	uxtb	r3, r3
 8105cb2:	2b01      	cmp	r3, #1
 8105cb4:	bf14      	ite	ne
 8105cb6:	2301      	movne	r3, #1
 8105cb8:	2300      	moveq	r3, #0
 8105cba:	b2db      	uxtb	r3, r3
 8105cbc:	e02f      	b.n	8105d1e <HAL_TIM_PWM_Start+0x9e>
 8105cbe:	683b      	ldr	r3, [r7, #0]
 8105cc0:	2b08      	cmp	r3, #8
 8105cc2:	d109      	bne.n	8105cd8 <HAL_TIM_PWM_Start+0x58>
 8105cc4:	687b      	ldr	r3, [r7, #4]
 8105cc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8105cca:	b2db      	uxtb	r3, r3
 8105ccc:	2b01      	cmp	r3, #1
 8105cce:	bf14      	ite	ne
 8105cd0:	2301      	movne	r3, #1
 8105cd2:	2300      	moveq	r3, #0
 8105cd4:	b2db      	uxtb	r3, r3
 8105cd6:	e022      	b.n	8105d1e <HAL_TIM_PWM_Start+0x9e>
 8105cd8:	683b      	ldr	r3, [r7, #0]
 8105cda:	2b0c      	cmp	r3, #12
 8105cdc:	d109      	bne.n	8105cf2 <HAL_TIM_PWM_Start+0x72>
 8105cde:	687b      	ldr	r3, [r7, #4]
 8105ce0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105ce4:	b2db      	uxtb	r3, r3
 8105ce6:	2b01      	cmp	r3, #1
 8105ce8:	bf14      	ite	ne
 8105cea:	2301      	movne	r3, #1
 8105cec:	2300      	moveq	r3, #0
 8105cee:	b2db      	uxtb	r3, r3
 8105cf0:	e015      	b.n	8105d1e <HAL_TIM_PWM_Start+0x9e>
 8105cf2:	683b      	ldr	r3, [r7, #0]
 8105cf4:	2b10      	cmp	r3, #16
 8105cf6:	d109      	bne.n	8105d0c <HAL_TIM_PWM_Start+0x8c>
 8105cf8:	687b      	ldr	r3, [r7, #4]
 8105cfa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8105cfe:	b2db      	uxtb	r3, r3
 8105d00:	2b01      	cmp	r3, #1
 8105d02:	bf14      	ite	ne
 8105d04:	2301      	movne	r3, #1
 8105d06:	2300      	moveq	r3, #0
 8105d08:	b2db      	uxtb	r3, r3
 8105d0a:	e008      	b.n	8105d1e <HAL_TIM_PWM_Start+0x9e>
 8105d0c:	687b      	ldr	r3, [r7, #4]
 8105d0e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8105d12:	b2db      	uxtb	r3, r3
 8105d14:	2b01      	cmp	r3, #1
 8105d16:	bf14      	ite	ne
 8105d18:	2301      	movne	r3, #1
 8105d1a:	2300      	moveq	r3, #0
 8105d1c:	b2db      	uxtb	r3, r3
 8105d1e:	2b00      	cmp	r3, #0
 8105d20:	d001      	beq.n	8105d26 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8105d22:	2301      	movs	r3, #1
 8105d24:	e0a1      	b.n	8105e6a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8105d26:	683b      	ldr	r3, [r7, #0]
 8105d28:	2b00      	cmp	r3, #0
 8105d2a:	d104      	bne.n	8105d36 <HAL_TIM_PWM_Start+0xb6>
 8105d2c:	687b      	ldr	r3, [r7, #4]
 8105d2e:	2202      	movs	r2, #2
 8105d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8105d34:	e023      	b.n	8105d7e <HAL_TIM_PWM_Start+0xfe>
 8105d36:	683b      	ldr	r3, [r7, #0]
 8105d38:	2b04      	cmp	r3, #4
 8105d3a:	d104      	bne.n	8105d46 <HAL_TIM_PWM_Start+0xc6>
 8105d3c:	687b      	ldr	r3, [r7, #4]
 8105d3e:	2202      	movs	r2, #2
 8105d40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8105d44:	e01b      	b.n	8105d7e <HAL_TIM_PWM_Start+0xfe>
 8105d46:	683b      	ldr	r3, [r7, #0]
 8105d48:	2b08      	cmp	r3, #8
 8105d4a:	d104      	bne.n	8105d56 <HAL_TIM_PWM_Start+0xd6>
 8105d4c:	687b      	ldr	r3, [r7, #4]
 8105d4e:	2202      	movs	r2, #2
 8105d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8105d54:	e013      	b.n	8105d7e <HAL_TIM_PWM_Start+0xfe>
 8105d56:	683b      	ldr	r3, [r7, #0]
 8105d58:	2b0c      	cmp	r3, #12
 8105d5a:	d104      	bne.n	8105d66 <HAL_TIM_PWM_Start+0xe6>
 8105d5c:	687b      	ldr	r3, [r7, #4]
 8105d5e:	2202      	movs	r2, #2
 8105d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8105d64:	e00b      	b.n	8105d7e <HAL_TIM_PWM_Start+0xfe>
 8105d66:	683b      	ldr	r3, [r7, #0]
 8105d68:	2b10      	cmp	r3, #16
 8105d6a:	d104      	bne.n	8105d76 <HAL_TIM_PWM_Start+0xf6>
 8105d6c:	687b      	ldr	r3, [r7, #4]
 8105d6e:	2202      	movs	r2, #2
 8105d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8105d74:	e003      	b.n	8105d7e <HAL_TIM_PWM_Start+0xfe>
 8105d76:	687b      	ldr	r3, [r7, #4]
 8105d78:	2202      	movs	r2, #2
 8105d7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8105d7e:	687b      	ldr	r3, [r7, #4]
 8105d80:	681b      	ldr	r3, [r3, #0]
 8105d82:	2201      	movs	r2, #1
 8105d84:	6839      	ldr	r1, [r7, #0]
 8105d86:	4618      	mov	r0, r3
 8105d88:	f000 fe54 	bl	8106a34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8105d8c:	687b      	ldr	r3, [r7, #4]
 8105d8e:	681b      	ldr	r3, [r3, #0]
 8105d90:	4a38      	ldr	r2, [pc, #224]	; (8105e74 <HAL_TIM_PWM_Start+0x1f4>)
 8105d92:	4293      	cmp	r3, r2
 8105d94:	d013      	beq.n	8105dbe <HAL_TIM_PWM_Start+0x13e>
 8105d96:	687b      	ldr	r3, [r7, #4]
 8105d98:	681b      	ldr	r3, [r3, #0]
 8105d9a:	4a37      	ldr	r2, [pc, #220]	; (8105e78 <HAL_TIM_PWM_Start+0x1f8>)
 8105d9c:	4293      	cmp	r3, r2
 8105d9e:	d00e      	beq.n	8105dbe <HAL_TIM_PWM_Start+0x13e>
 8105da0:	687b      	ldr	r3, [r7, #4]
 8105da2:	681b      	ldr	r3, [r3, #0]
 8105da4:	4a35      	ldr	r2, [pc, #212]	; (8105e7c <HAL_TIM_PWM_Start+0x1fc>)
 8105da6:	4293      	cmp	r3, r2
 8105da8:	d009      	beq.n	8105dbe <HAL_TIM_PWM_Start+0x13e>
 8105daa:	687b      	ldr	r3, [r7, #4]
 8105dac:	681b      	ldr	r3, [r3, #0]
 8105dae:	4a34      	ldr	r2, [pc, #208]	; (8105e80 <HAL_TIM_PWM_Start+0x200>)
 8105db0:	4293      	cmp	r3, r2
 8105db2:	d004      	beq.n	8105dbe <HAL_TIM_PWM_Start+0x13e>
 8105db4:	687b      	ldr	r3, [r7, #4]
 8105db6:	681b      	ldr	r3, [r3, #0]
 8105db8:	4a32      	ldr	r2, [pc, #200]	; (8105e84 <HAL_TIM_PWM_Start+0x204>)
 8105dba:	4293      	cmp	r3, r2
 8105dbc:	d101      	bne.n	8105dc2 <HAL_TIM_PWM_Start+0x142>
 8105dbe:	2301      	movs	r3, #1
 8105dc0:	e000      	b.n	8105dc4 <HAL_TIM_PWM_Start+0x144>
 8105dc2:	2300      	movs	r3, #0
 8105dc4:	2b00      	cmp	r3, #0
 8105dc6:	d007      	beq.n	8105dd8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8105dc8:	687b      	ldr	r3, [r7, #4]
 8105dca:	681b      	ldr	r3, [r3, #0]
 8105dcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8105dce:	687b      	ldr	r3, [r7, #4]
 8105dd0:	681b      	ldr	r3, [r3, #0]
 8105dd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8105dd6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8105dd8:	687b      	ldr	r3, [r7, #4]
 8105dda:	681b      	ldr	r3, [r3, #0]
 8105ddc:	4a25      	ldr	r2, [pc, #148]	; (8105e74 <HAL_TIM_PWM_Start+0x1f4>)
 8105dde:	4293      	cmp	r3, r2
 8105de0:	d022      	beq.n	8105e28 <HAL_TIM_PWM_Start+0x1a8>
 8105de2:	687b      	ldr	r3, [r7, #4]
 8105de4:	681b      	ldr	r3, [r3, #0]
 8105de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105dea:	d01d      	beq.n	8105e28 <HAL_TIM_PWM_Start+0x1a8>
 8105dec:	687b      	ldr	r3, [r7, #4]
 8105dee:	681b      	ldr	r3, [r3, #0]
 8105df0:	4a25      	ldr	r2, [pc, #148]	; (8105e88 <HAL_TIM_PWM_Start+0x208>)
 8105df2:	4293      	cmp	r3, r2
 8105df4:	d018      	beq.n	8105e28 <HAL_TIM_PWM_Start+0x1a8>
 8105df6:	687b      	ldr	r3, [r7, #4]
 8105df8:	681b      	ldr	r3, [r3, #0]
 8105dfa:	4a24      	ldr	r2, [pc, #144]	; (8105e8c <HAL_TIM_PWM_Start+0x20c>)
 8105dfc:	4293      	cmp	r3, r2
 8105dfe:	d013      	beq.n	8105e28 <HAL_TIM_PWM_Start+0x1a8>
 8105e00:	687b      	ldr	r3, [r7, #4]
 8105e02:	681b      	ldr	r3, [r3, #0]
 8105e04:	4a22      	ldr	r2, [pc, #136]	; (8105e90 <HAL_TIM_PWM_Start+0x210>)
 8105e06:	4293      	cmp	r3, r2
 8105e08:	d00e      	beq.n	8105e28 <HAL_TIM_PWM_Start+0x1a8>
 8105e0a:	687b      	ldr	r3, [r7, #4]
 8105e0c:	681b      	ldr	r3, [r3, #0]
 8105e0e:	4a1a      	ldr	r2, [pc, #104]	; (8105e78 <HAL_TIM_PWM_Start+0x1f8>)
 8105e10:	4293      	cmp	r3, r2
 8105e12:	d009      	beq.n	8105e28 <HAL_TIM_PWM_Start+0x1a8>
 8105e14:	687b      	ldr	r3, [r7, #4]
 8105e16:	681b      	ldr	r3, [r3, #0]
 8105e18:	4a1e      	ldr	r2, [pc, #120]	; (8105e94 <HAL_TIM_PWM_Start+0x214>)
 8105e1a:	4293      	cmp	r3, r2
 8105e1c:	d004      	beq.n	8105e28 <HAL_TIM_PWM_Start+0x1a8>
 8105e1e:	687b      	ldr	r3, [r7, #4]
 8105e20:	681b      	ldr	r3, [r3, #0]
 8105e22:	4a16      	ldr	r2, [pc, #88]	; (8105e7c <HAL_TIM_PWM_Start+0x1fc>)
 8105e24:	4293      	cmp	r3, r2
 8105e26:	d115      	bne.n	8105e54 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8105e28:	687b      	ldr	r3, [r7, #4]
 8105e2a:	681b      	ldr	r3, [r3, #0]
 8105e2c:	689a      	ldr	r2, [r3, #8]
 8105e2e:	4b1a      	ldr	r3, [pc, #104]	; (8105e98 <HAL_TIM_PWM_Start+0x218>)
 8105e30:	4013      	ands	r3, r2
 8105e32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8105e34:	68fb      	ldr	r3, [r7, #12]
 8105e36:	2b06      	cmp	r3, #6
 8105e38:	d015      	beq.n	8105e66 <HAL_TIM_PWM_Start+0x1e6>
 8105e3a:	68fb      	ldr	r3, [r7, #12]
 8105e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105e40:	d011      	beq.n	8105e66 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8105e42:	687b      	ldr	r3, [r7, #4]
 8105e44:	681b      	ldr	r3, [r3, #0]
 8105e46:	681a      	ldr	r2, [r3, #0]
 8105e48:	687b      	ldr	r3, [r7, #4]
 8105e4a:	681b      	ldr	r3, [r3, #0]
 8105e4c:	f042 0201 	orr.w	r2, r2, #1
 8105e50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8105e52:	e008      	b.n	8105e66 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8105e54:	687b      	ldr	r3, [r7, #4]
 8105e56:	681b      	ldr	r3, [r3, #0]
 8105e58:	681a      	ldr	r2, [r3, #0]
 8105e5a:	687b      	ldr	r3, [r7, #4]
 8105e5c:	681b      	ldr	r3, [r3, #0]
 8105e5e:	f042 0201 	orr.w	r2, r2, #1
 8105e62:	601a      	str	r2, [r3, #0]
 8105e64:	e000      	b.n	8105e68 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8105e66:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8105e68:	2300      	movs	r3, #0
}
 8105e6a:	4618      	mov	r0, r3
 8105e6c:	3710      	adds	r7, #16
 8105e6e:	46bd      	mov	sp, r7
 8105e70:	bd80      	pop	{r7, pc}
 8105e72:	bf00      	nop
 8105e74:	40010000 	.word	0x40010000
 8105e78:	40010400 	.word	0x40010400
 8105e7c:	40014000 	.word	0x40014000
 8105e80:	40014400 	.word	0x40014400
 8105e84:	40014800 	.word	0x40014800
 8105e88:	40000400 	.word	0x40000400
 8105e8c:	40000800 	.word	0x40000800
 8105e90:	40000c00 	.word	0x40000c00
 8105e94:	40001800 	.word	0x40001800
 8105e98:	00010007 	.word	0x00010007

08105e9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8105e9c:	b580      	push	{r7, lr}
 8105e9e:	b082      	sub	sp, #8
 8105ea0:	af00      	add	r7, sp, #0
 8105ea2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8105ea4:	687b      	ldr	r3, [r7, #4]
 8105ea6:	681b      	ldr	r3, [r3, #0]
 8105ea8:	691b      	ldr	r3, [r3, #16]
 8105eaa:	f003 0302 	and.w	r3, r3, #2
 8105eae:	2b02      	cmp	r3, #2
 8105eb0:	d122      	bne.n	8105ef8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8105eb2:	687b      	ldr	r3, [r7, #4]
 8105eb4:	681b      	ldr	r3, [r3, #0]
 8105eb6:	68db      	ldr	r3, [r3, #12]
 8105eb8:	f003 0302 	and.w	r3, r3, #2
 8105ebc:	2b02      	cmp	r3, #2
 8105ebe:	d11b      	bne.n	8105ef8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8105ec0:	687b      	ldr	r3, [r7, #4]
 8105ec2:	681b      	ldr	r3, [r3, #0]
 8105ec4:	f06f 0202 	mvn.w	r2, #2
 8105ec8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8105eca:	687b      	ldr	r3, [r7, #4]
 8105ecc:	2201      	movs	r2, #1
 8105ece:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8105ed0:	687b      	ldr	r3, [r7, #4]
 8105ed2:	681b      	ldr	r3, [r3, #0]
 8105ed4:	699b      	ldr	r3, [r3, #24]
 8105ed6:	f003 0303 	and.w	r3, r3, #3
 8105eda:	2b00      	cmp	r3, #0
 8105edc:	d003      	beq.n	8105ee6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8105ede:	6878      	ldr	r0, [r7, #4]
 8105ee0:	f000 fa1a 	bl	8106318 <HAL_TIM_IC_CaptureCallback>
 8105ee4:	e005      	b.n	8105ef2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8105ee6:	6878      	ldr	r0, [r7, #4]
 8105ee8:	f000 fa0c 	bl	8106304 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8105eec:	6878      	ldr	r0, [r7, #4]
 8105eee:	f000 fa1d 	bl	810632c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8105ef2:	687b      	ldr	r3, [r7, #4]
 8105ef4:	2200      	movs	r2, #0
 8105ef6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8105ef8:	687b      	ldr	r3, [r7, #4]
 8105efa:	681b      	ldr	r3, [r3, #0]
 8105efc:	691b      	ldr	r3, [r3, #16]
 8105efe:	f003 0304 	and.w	r3, r3, #4
 8105f02:	2b04      	cmp	r3, #4
 8105f04:	d122      	bne.n	8105f4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8105f06:	687b      	ldr	r3, [r7, #4]
 8105f08:	681b      	ldr	r3, [r3, #0]
 8105f0a:	68db      	ldr	r3, [r3, #12]
 8105f0c:	f003 0304 	and.w	r3, r3, #4
 8105f10:	2b04      	cmp	r3, #4
 8105f12:	d11b      	bne.n	8105f4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8105f14:	687b      	ldr	r3, [r7, #4]
 8105f16:	681b      	ldr	r3, [r3, #0]
 8105f18:	f06f 0204 	mvn.w	r2, #4
 8105f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8105f1e:	687b      	ldr	r3, [r7, #4]
 8105f20:	2202      	movs	r2, #2
 8105f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8105f24:	687b      	ldr	r3, [r7, #4]
 8105f26:	681b      	ldr	r3, [r3, #0]
 8105f28:	699b      	ldr	r3, [r3, #24]
 8105f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8105f2e:	2b00      	cmp	r3, #0
 8105f30:	d003      	beq.n	8105f3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8105f32:	6878      	ldr	r0, [r7, #4]
 8105f34:	f000 f9f0 	bl	8106318 <HAL_TIM_IC_CaptureCallback>
 8105f38:	e005      	b.n	8105f46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8105f3a:	6878      	ldr	r0, [r7, #4]
 8105f3c:	f000 f9e2 	bl	8106304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8105f40:	6878      	ldr	r0, [r7, #4]
 8105f42:	f000 f9f3 	bl	810632c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8105f46:	687b      	ldr	r3, [r7, #4]
 8105f48:	2200      	movs	r2, #0
 8105f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8105f4c:	687b      	ldr	r3, [r7, #4]
 8105f4e:	681b      	ldr	r3, [r3, #0]
 8105f50:	691b      	ldr	r3, [r3, #16]
 8105f52:	f003 0308 	and.w	r3, r3, #8
 8105f56:	2b08      	cmp	r3, #8
 8105f58:	d122      	bne.n	8105fa0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8105f5a:	687b      	ldr	r3, [r7, #4]
 8105f5c:	681b      	ldr	r3, [r3, #0]
 8105f5e:	68db      	ldr	r3, [r3, #12]
 8105f60:	f003 0308 	and.w	r3, r3, #8
 8105f64:	2b08      	cmp	r3, #8
 8105f66:	d11b      	bne.n	8105fa0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8105f68:	687b      	ldr	r3, [r7, #4]
 8105f6a:	681b      	ldr	r3, [r3, #0]
 8105f6c:	f06f 0208 	mvn.w	r2, #8
 8105f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8105f72:	687b      	ldr	r3, [r7, #4]
 8105f74:	2204      	movs	r2, #4
 8105f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8105f78:	687b      	ldr	r3, [r7, #4]
 8105f7a:	681b      	ldr	r3, [r3, #0]
 8105f7c:	69db      	ldr	r3, [r3, #28]
 8105f7e:	f003 0303 	and.w	r3, r3, #3
 8105f82:	2b00      	cmp	r3, #0
 8105f84:	d003      	beq.n	8105f8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8105f86:	6878      	ldr	r0, [r7, #4]
 8105f88:	f000 f9c6 	bl	8106318 <HAL_TIM_IC_CaptureCallback>
 8105f8c:	e005      	b.n	8105f9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8105f8e:	6878      	ldr	r0, [r7, #4]
 8105f90:	f000 f9b8 	bl	8106304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8105f94:	6878      	ldr	r0, [r7, #4]
 8105f96:	f000 f9c9 	bl	810632c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8105f9a:	687b      	ldr	r3, [r7, #4]
 8105f9c:	2200      	movs	r2, #0
 8105f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8105fa0:	687b      	ldr	r3, [r7, #4]
 8105fa2:	681b      	ldr	r3, [r3, #0]
 8105fa4:	691b      	ldr	r3, [r3, #16]
 8105fa6:	f003 0310 	and.w	r3, r3, #16
 8105faa:	2b10      	cmp	r3, #16
 8105fac:	d122      	bne.n	8105ff4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8105fae:	687b      	ldr	r3, [r7, #4]
 8105fb0:	681b      	ldr	r3, [r3, #0]
 8105fb2:	68db      	ldr	r3, [r3, #12]
 8105fb4:	f003 0310 	and.w	r3, r3, #16
 8105fb8:	2b10      	cmp	r3, #16
 8105fba:	d11b      	bne.n	8105ff4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8105fbc:	687b      	ldr	r3, [r7, #4]
 8105fbe:	681b      	ldr	r3, [r3, #0]
 8105fc0:	f06f 0210 	mvn.w	r2, #16
 8105fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8105fc6:	687b      	ldr	r3, [r7, #4]
 8105fc8:	2208      	movs	r2, #8
 8105fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8105fcc:	687b      	ldr	r3, [r7, #4]
 8105fce:	681b      	ldr	r3, [r3, #0]
 8105fd0:	69db      	ldr	r3, [r3, #28]
 8105fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8105fd6:	2b00      	cmp	r3, #0
 8105fd8:	d003      	beq.n	8105fe2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8105fda:	6878      	ldr	r0, [r7, #4]
 8105fdc:	f000 f99c 	bl	8106318 <HAL_TIM_IC_CaptureCallback>
 8105fe0:	e005      	b.n	8105fee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8105fe2:	6878      	ldr	r0, [r7, #4]
 8105fe4:	f000 f98e 	bl	8106304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8105fe8:	6878      	ldr	r0, [r7, #4]
 8105fea:	f000 f99f 	bl	810632c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8105fee:	687b      	ldr	r3, [r7, #4]
 8105ff0:	2200      	movs	r2, #0
 8105ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8105ff4:	687b      	ldr	r3, [r7, #4]
 8105ff6:	681b      	ldr	r3, [r3, #0]
 8105ff8:	691b      	ldr	r3, [r3, #16]
 8105ffa:	f003 0301 	and.w	r3, r3, #1
 8105ffe:	2b01      	cmp	r3, #1
 8106000:	d10e      	bne.n	8106020 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8106002:	687b      	ldr	r3, [r7, #4]
 8106004:	681b      	ldr	r3, [r3, #0]
 8106006:	68db      	ldr	r3, [r3, #12]
 8106008:	f003 0301 	and.w	r3, r3, #1
 810600c:	2b01      	cmp	r3, #1
 810600e:	d107      	bne.n	8106020 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8106010:	687b      	ldr	r3, [r7, #4]
 8106012:	681b      	ldr	r3, [r3, #0]
 8106014:	f06f 0201 	mvn.w	r2, #1
 8106018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 810601a:	6878      	ldr	r0, [r7, #4]
 810601c:	f7fa fe80 	bl	8100d20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8106020:	687b      	ldr	r3, [r7, #4]
 8106022:	681b      	ldr	r3, [r3, #0]
 8106024:	691b      	ldr	r3, [r3, #16]
 8106026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810602a:	2b80      	cmp	r3, #128	; 0x80
 810602c:	d10e      	bne.n	810604c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 810602e:	687b      	ldr	r3, [r7, #4]
 8106030:	681b      	ldr	r3, [r3, #0]
 8106032:	68db      	ldr	r3, [r3, #12]
 8106034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8106038:	2b80      	cmp	r3, #128	; 0x80
 810603a:	d107      	bne.n	810604c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 810603c:	687b      	ldr	r3, [r7, #4]
 810603e:	681b      	ldr	r3, [r3, #0]
 8106040:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8106044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8106046:	6878      	ldr	r0, [r7, #4]
 8106048:	f000 fdb2 	bl	8106bb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 810604c:	687b      	ldr	r3, [r7, #4]
 810604e:	681b      	ldr	r3, [r3, #0]
 8106050:	691b      	ldr	r3, [r3, #16]
 8106052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106056:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810605a:	d10e      	bne.n	810607a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 810605c:	687b      	ldr	r3, [r7, #4]
 810605e:	681b      	ldr	r3, [r3, #0]
 8106060:	68db      	ldr	r3, [r3, #12]
 8106062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8106066:	2b80      	cmp	r3, #128	; 0x80
 8106068:	d107      	bne.n	810607a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 810606a:	687b      	ldr	r3, [r7, #4]
 810606c:	681b      	ldr	r3, [r3, #0]
 810606e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8106072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8106074:	6878      	ldr	r0, [r7, #4]
 8106076:	f000 fda5 	bl	8106bc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 810607a:	687b      	ldr	r3, [r7, #4]
 810607c:	681b      	ldr	r3, [r3, #0]
 810607e:	691b      	ldr	r3, [r3, #16]
 8106080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106084:	2b40      	cmp	r3, #64	; 0x40
 8106086:	d10e      	bne.n	81060a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8106088:	687b      	ldr	r3, [r7, #4]
 810608a:	681b      	ldr	r3, [r3, #0]
 810608c:	68db      	ldr	r3, [r3, #12]
 810608e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106092:	2b40      	cmp	r3, #64	; 0x40
 8106094:	d107      	bne.n	81060a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8106096:	687b      	ldr	r3, [r7, #4]
 8106098:	681b      	ldr	r3, [r3, #0]
 810609a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 810609e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 81060a0:	6878      	ldr	r0, [r7, #4]
 81060a2:	f000 f94d 	bl	8106340 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 81060a6:	687b      	ldr	r3, [r7, #4]
 81060a8:	681b      	ldr	r3, [r3, #0]
 81060aa:	691b      	ldr	r3, [r3, #16]
 81060ac:	f003 0320 	and.w	r3, r3, #32
 81060b0:	2b20      	cmp	r3, #32
 81060b2:	d10e      	bne.n	81060d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 81060b4:	687b      	ldr	r3, [r7, #4]
 81060b6:	681b      	ldr	r3, [r3, #0]
 81060b8:	68db      	ldr	r3, [r3, #12]
 81060ba:	f003 0320 	and.w	r3, r3, #32
 81060be:	2b20      	cmp	r3, #32
 81060c0:	d107      	bne.n	81060d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 81060c2:	687b      	ldr	r3, [r7, #4]
 81060c4:	681b      	ldr	r3, [r3, #0]
 81060c6:	f06f 0220 	mvn.w	r2, #32
 81060ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 81060cc:	6878      	ldr	r0, [r7, #4]
 81060ce:	f000 fd65 	bl	8106b9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 81060d2:	bf00      	nop
 81060d4:	3708      	adds	r7, #8
 81060d6:	46bd      	mov	sp, r7
 81060d8:	bd80      	pop	{r7, pc}
	...

081060dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 81060dc:	b580      	push	{r7, lr}
 81060de:	b086      	sub	sp, #24
 81060e0:	af00      	add	r7, sp, #0
 81060e2:	60f8      	str	r0, [r7, #12]
 81060e4:	60b9      	str	r1, [r7, #8]
 81060e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81060e8:	2300      	movs	r3, #0
 81060ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 81060ec:	68fb      	ldr	r3, [r7, #12]
 81060ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81060f2:	2b01      	cmp	r3, #1
 81060f4:	d101      	bne.n	81060fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 81060f6:	2302      	movs	r3, #2
 81060f8:	e0ff      	b.n	81062fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 81060fa:	68fb      	ldr	r3, [r7, #12]
 81060fc:	2201      	movs	r2, #1
 81060fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8106102:	687b      	ldr	r3, [r7, #4]
 8106104:	2b14      	cmp	r3, #20
 8106106:	f200 80f0 	bhi.w	81062ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 810610a:	a201      	add	r2, pc, #4	; (adr r2, 8106110 <HAL_TIM_PWM_ConfigChannel+0x34>)
 810610c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106110:	08106165 	.word	0x08106165
 8106114:	081062eb 	.word	0x081062eb
 8106118:	081062eb 	.word	0x081062eb
 810611c:	081062eb 	.word	0x081062eb
 8106120:	081061a5 	.word	0x081061a5
 8106124:	081062eb 	.word	0x081062eb
 8106128:	081062eb 	.word	0x081062eb
 810612c:	081062eb 	.word	0x081062eb
 8106130:	081061e7 	.word	0x081061e7
 8106134:	081062eb 	.word	0x081062eb
 8106138:	081062eb 	.word	0x081062eb
 810613c:	081062eb 	.word	0x081062eb
 8106140:	08106227 	.word	0x08106227
 8106144:	081062eb 	.word	0x081062eb
 8106148:	081062eb 	.word	0x081062eb
 810614c:	081062eb 	.word	0x081062eb
 8106150:	08106269 	.word	0x08106269
 8106154:	081062eb 	.word	0x081062eb
 8106158:	081062eb 	.word	0x081062eb
 810615c:	081062eb 	.word	0x081062eb
 8106160:	081062a9 	.word	0x081062a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8106164:	68fb      	ldr	r3, [r7, #12]
 8106166:	681b      	ldr	r3, [r3, #0]
 8106168:	68b9      	ldr	r1, [r7, #8]
 810616a:	4618      	mov	r0, r3
 810616c:	f000 f98c 	bl	8106488 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8106170:	68fb      	ldr	r3, [r7, #12]
 8106172:	681b      	ldr	r3, [r3, #0]
 8106174:	699a      	ldr	r2, [r3, #24]
 8106176:	68fb      	ldr	r3, [r7, #12]
 8106178:	681b      	ldr	r3, [r3, #0]
 810617a:	f042 0208 	orr.w	r2, r2, #8
 810617e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8106180:	68fb      	ldr	r3, [r7, #12]
 8106182:	681b      	ldr	r3, [r3, #0]
 8106184:	699a      	ldr	r2, [r3, #24]
 8106186:	68fb      	ldr	r3, [r7, #12]
 8106188:	681b      	ldr	r3, [r3, #0]
 810618a:	f022 0204 	bic.w	r2, r2, #4
 810618e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8106190:	68fb      	ldr	r3, [r7, #12]
 8106192:	681b      	ldr	r3, [r3, #0]
 8106194:	6999      	ldr	r1, [r3, #24]
 8106196:	68bb      	ldr	r3, [r7, #8]
 8106198:	691a      	ldr	r2, [r3, #16]
 810619a:	68fb      	ldr	r3, [r7, #12]
 810619c:	681b      	ldr	r3, [r3, #0]
 810619e:	430a      	orrs	r2, r1
 81061a0:	619a      	str	r2, [r3, #24]
      break;
 81061a2:	e0a5      	b.n	81062f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 81061a4:	68fb      	ldr	r3, [r7, #12]
 81061a6:	681b      	ldr	r3, [r3, #0]
 81061a8:	68b9      	ldr	r1, [r7, #8]
 81061aa:	4618      	mov	r0, r3
 81061ac:	f000 f9fc 	bl	81065a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 81061b0:	68fb      	ldr	r3, [r7, #12]
 81061b2:	681b      	ldr	r3, [r3, #0]
 81061b4:	699a      	ldr	r2, [r3, #24]
 81061b6:	68fb      	ldr	r3, [r7, #12]
 81061b8:	681b      	ldr	r3, [r3, #0]
 81061ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81061be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 81061c0:	68fb      	ldr	r3, [r7, #12]
 81061c2:	681b      	ldr	r3, [r3, #0]
 81061c4:	699a      	ldr	r2, [r3, #24]
 81061c6:	68fb      	ldr	r3, [r7, #12]
 81061c8:	681b      	ldr	r3, [r3, #0]
 81061ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 81061ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 81061d0:	68fb      	ldr	r3, [r7, #12]
 81061d2:	681b      	ldr	r3, [r3, #0]
 81061d4:	6999      	ldr	r1, [r3, #24]
 81061d6:	68bb      	ldr	r3, [r7, #8]
 81061d8:	691b      	ldr	r3, [r3, #16]
 81061da:	021a      	lsls	r2, r3, #8
 81061dc:	68fb      	ldr	r3, [r7, #12]
 81061de:	681b      	ldr	r3, [r3, #0]
 81061e0:	430a      	orrs	r2, r1
 81061e2:	619a      	str	r2, [r3, #24]
      break;
 81061e4:	e084      	b.n	81062f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 81061e6:	68fb      	ldr	r3, [r7, #12]
 81061e8:	681b      	ldr	r3, [r3, #0]
 81061ea:	68b9      	ldr	r1, [r7, #8]
 81061ec:	4618      	mov	r0, r3
 81061ee:	f000 fa65 	bl	81066bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 81061f2:	68fb      	ldr	r3, [r7, #12]
 81061f4:	681b      	ldr	r3, [r3, #0]
 81061f6:	69da      	ldr	r2, [r3, #28]
 81061f8:	68fb      	ldr	r3, [r7, #12]
 81061fa:	681b      	ldr	r3, [r3, #0]
 81061fc:	f042 0208 	orr.w	r2, r2, #8
 8106200:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8106202:	68fb      	ldr	r3, [r7, #12]
 8106204:	681b      	ldr	r3, [r3, #0]
 8106206:	69da      	ldr	r2, [r3, #28]
 8106208:	68fb      	ldr	r3, [r7, #12]
 810620a:	681b      	ldr	r3, [r3, #0]
 810620c:	f022 0204 	bic.w	r2, r2, #4
 8106210:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8106212:	68fb      	ldr	r3, [r7, #12]
 8106214:	681b      	ldr	r3, [r3, #0]
 8106216:	69d9      	ldr	r1, [r3, #28]
 8106218:	68bb      	ldr	r3, [r7, #8]
 810621a:	691a      	ldr	r2, [r3, #16]
 810621c:	68fb      	ldr	r3, [r7, #12]
 810621e:	681b      	ldr	r3, [r3, #0]
 8106220:	430a      	orrs	r2, r1
 8106222:	61da      	str	r2, [r3, #28]
      break;
 8106224:	e064      	b.n	81062f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8106226:	68fb      	ldr	r3, [r7, #12]
 8106228:	681b      	ldr	r3, [r3, #0]
 810622a:	68b9      	ldr	r1, [r7, #8]
 810622c:	4618      	mov	r0, r3
 810622e:	f000 facd 	bl	81067cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8106232:	68fb      	ldr	r3, [r7, #12]
 8106234:	681b      	ldr	r3, [r3, #0]
 8106236:	69da      	ldr	r2, [r3, #28]
 8106238:	68fb      	ldr	r3, [r7, #12]
 810623a:	681b      	ldr	r3, [r3, #0]
 810623c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8106240:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8106242:	68fb      	ldr	r3, [r7, #12]
 8106244:	681b      	ldr	r3, [r3, #0]
 8106246:	69da      	ldr	r2, [r3, #28]
 8106248:	68fb      	ldr	r3, [r7, #12]
 810624a:	681b      	ldr	r3, [r3, #0]
 810624c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8106250:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8106252:	68fb      	ldr	r3, [r7, #12]
 8106254:	681b      	ldr	r3, [r3, #0]
 8106256:	69d9      	ldr	r1, [r3, #28]
 8106258:	68bb      	ldr	r3, [r7, #8]
 810625a:	691b      	ldr	r3, [r3, #16]
 810625c:	021a      	lsls	r2, r3, #8
 810625e:	68fb      	ldr	r3, [r7, #12]
 8106260:	681b      	ldr	r3, [r3, #0]
 8106262:	430a      	orrs	r2, r1
 8106264:	61da      	str	r2, [r3, #28]
      break;
 8106266:	e043      	b.n	81062f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8106268:	68fb      	ldr	r3, [r7, #12]
 810626a:	681b      	ldr	r3, [r3, #0]
 810626c:	68b9      	ldr	r1, [r7, #8]
 810626e:	4618      	mov	r0, r3
 8106270:	f000 fb16 	bl	81068a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8106274:	68fb      	ldr	r3, [r7, #12]
 8106276:	681b      	ldr	r3, [r3, #0]
 8106278:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810627a:	68fb      	ldr	r3, [r7, #12]
 810627c:	681b      	ldr	r3, [r3, #0]
 810627e:	f042 0208 	orr.w	r2, r2, #8
 8106282:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8106284:	68fb      	ldr	r3, [r7, #12]
 8106286:	681b      	ldr	r3, [r3, #0]
 8106288:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810628a:	68fb      	ldr	r3, [r7, #12]
 810628c:	681b      	ldr	r3, [r3, #0]
 810628e:	f022 0204 	bic.w	r2, r2, #4
 8106292:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8106294:	68fb      	ldr	r3, [r7, #12]
 8106296:	681b      	ldr	r3, [r3, #0]
 8106298:	6d59      	ldr	r1, [r3, #84]	; 0x54
 810629a:	68bb      	ldr	r3, [r7, #8]
 810629c:	691a      	ldr	r2, [r3, #16]
 810629e:	68fb      	ldr	r3, [r7, #12]
 81062a0:	681b      	ldr	r3, [r3, #0]
 81062a2:	430a      	orrs	r2, r1
 81062a4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 81062a6:	e023      	b.n	81062f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 81062a8:	68fb      	ldr	r3, [r7, #12]
 81062aa:	681b      	ldr	r3, [r3, #0]
 81062ac:	68b9      	ldr	r1, [r7, #8]
 81062ae:	4618      	mov	r0, r3
 81062b0:	f000 fb5a 	bl	8106968 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 81062b4:	68fb      	ldr	r3, [r7, #12]
 81062b6:	681b      	ldr	r3, [r3, #0]
 81062b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 81062ba:	68fb      	ldr	r3, [r7, #12]
 81062bc:	681b      	ldr	r3, [r3, #0]
 81062be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81062c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 81062c4:	68fb      	ldr	r3, [r7, #12]
 81062c6:	681b      	ldr	r3, [r3, #0]
 81062c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 81062ca:	68fb      	ldr	r3, [r7, #12]
 81062cc:	681b      	ldr	r3, [r3, #0]
 81062ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 81062d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 81062d4:	68fb      	ldr	r3, [r7, #12]
 81062d6:	681b      	ldr	r3, [r3, #0]
 81062d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 81062da:	68bb      	ldr	r3, [r7, #8]
 81062dc:	691b      	ldr	r3, [r3, #16]
 81062de:	021a      	lsls	r2, r3, #8
 81062e0:	68fb      	ldr	r3, [r7, #12]
 81062e2:	681b      	ldr	r3, [r3, #0]
 81062e4:	430a      	orrs	r2, r1
 81062e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 81062e8:	e002      	b.n	81062f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 81062ea:	2301      	movs	r3, #1
 81062ec:	75fb      	strb	r3, [r7, #23]
      break;
 81062ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 81062f0:	68fb      	ldr	r3, [r7, #12]
 81062f2:	2200      	movs	r2, #0
 81062f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 81062f8:	7dfb      	ldrb	r3, [r7, #23]
}
 81062fa:	4618      	mov	r0, r3
 81062fc:	3718      	adds	r7, #24
 81062fe:	46bd      	mov	sp, r7
 8106300:	bd80      	pop	{r7, pc}
 8106302:	bf00      	nop

08106304 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8106304:	b480      	push	{r7}
 8106306:	b083      	sub	sp, #12
 8106308:	af00      	add	r7, sp, #0
 810630a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 810630c:	bf00      	nop
 810630e:	370c      	adds	r7, #12
 8106310:	46bd      	mov	sp, r7
 8106312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106316:	4770      	bx	lr

08106318 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8106318:	b480      	push	{r7}
 810631a:	b083      	sub	sp, #12
 810631c:	af00      	add	r7, sp, #0
 810631e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8106320:	bf00      	nop
 8106322:	370c      	adds	r7, #12
 8106324:	46bd      	mov	sp, r7
 8106326:	f85d 7b04 	ldr.w	r7, [sp], #4
 810632a:	4770      	bx	lr

0810632c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 810632c:	b480      	push	{r7}
 810632e:	b083      	sub	sp, #12
 8106330:	af00      	add	r7, sp, #0
 8106332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8106334:	bf00      	nop
 8106336:	370c      	adds	r7, #12
 8106338:	46bd      	mov	sp, r7
 810633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810633e:	4770      	bx	lr

08106340 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8106340:	b480      	push	{r7}
 8106342:	b083      	sub	sp, #12
 8106344:	af00      	add	r7, sp, #0
 8106346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8106348:	bf00      	nop
 810634a:	370c      	adds	r7, #12
 810634c:	46bd      	mov	sp, r7
 810634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106352:	4770      	bx	lr

08106354 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8106354:	b480      	push	{r7}
 8106356:	b085      	sub	sp, #20
 8106358:	af00      	add	r7, sp, #0
 810635a:	6078      	str	r0, [r7, #4]
 810635c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810635e:	687b      	ldr	r3, [r7, #4]
 8106360:	681b      	ldr	r3, [r3, #0]
 8106362:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8106364:	687b      	ldr	r3, [r7, #4]
 8106366:	4a40      	ldr	r2, [pc, #256]	; (8106468 <TIM_Base_SetConfig+0x114>)
 8106368:	4293      	cmp	r3, r2
 810636a:	d013      	beq.n	8106394 <TIM_Base_SetConfig+0x40>
 810636c:	687b      	ldr	r3, [r7, #4]
 810636e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106372:	d00f      	beq.n	8106394 <TIM_Base_SetConfig+0x40>
 8106374:	687b      	ldr	r3, [r7, #4]
 8106376:	4a3d      	ldr	r2, [pc, #244]	; (810646c <TIM_Base_SetConfig+0x118>)
 8106378:	4293      	cmp	r3, r2
 810637a:	d00b      	beq.n	8106394 <TIM_Base_SetConfig+0x40>
 810637c:	687b      	ldr	r3, [r7, #4]
 810637e:	4a3c      	ldr	r2, [pc, #240]	; (8106470 <TIM_Base_SetConfig+0x11c>)
 8106380:	4293      	cmp	r3, r2
 8106382:	d007      	beq.n	8106394 <TIM_Base_SetConfig+0x40>
 8106384:	687b      	ldr	r3, [r7, #4]
 8106386:	4a3b      	ldr	r2, [pc, #236]	; (8106474 <TIM_Base_SetConfig+0x120>)
 8106388:	4293      	cmp	r3, r2
 810638a:	d003      	beq.n	8106394 <TIM_Base_SetConfig+0x40>
 810638c:	687b      	ldr	r3, [r7, #4]
 810638e:	4a3a      	ldr	r2, [pc, #232]	; (8106478 <TIM_Base_SetConfig+0x124>)
 8106390:	4293      	cmp	r3, r2
 8106392:	d108      	bne.n	81063a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8106394:	68fb      	ldr	r3, [r7, #12]
 8106396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810639a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 810639c:	683b      	ldr	r3, [r7, #0]
 810639e:	685b      	ldr	r3, [r3, #4]
 81063a0:	68fa      	ldr	r2, [r7, #12]
 81063a2:	4313      	orrs	r3, r2
 81063a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 81063a6:	687b      	ldr	r3, [r7, #4]
 81063a8:	4a2f      	ldr	r2, [pc, #188]	; (8106468 <TIM_Base_SetConfig+0x114>)
 81063aa:	4293      	cmp	r3, r2
 81063ac:	d01f      	beq.n	81063ee <TIM_Base_SetConfig+0x9a>
 81063ae:	687b      	ldr	r3, [r7, #4]
 81063b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81063b4:	d01b      	beq.n	81063ee <TIM_Base_SetConfig+0x9a>
 81063b6:	687b      	ldr	r3, [r7, #4]
 81063b8:	4a2c      	ldr	r2, [pc, #176]	; (810646c <TIM_Base_SetConfig+0x118>)
 81063ba:	4293      	cmp	r3, r2
 81063bc:	d017      	beq.n	81063ee <TIM_Base_SetConfig+0x9a>
 81063be:	687b      	ldr	r3, [r7, #4]
 81063c0:	4a2b      	ldr	r2, [pc, #172]	; (8106470 <TIM_Base_SetConfig+0x11c>)
 81063c2:	4293      	cmp	r3, r2
 81063c4:	d013      	beq.n	81063ee <TIM_Base_SetConfig+0x9a>
 81063c6:	687b      	ldr	r3, [r7, #4]
 81063c8:	4a2a      	ldr	r2, [pc, #168]	; (8106474 <TIM_Base_SetConfig+0x120>)
 81063ca:	4293      	cmp	r3, r2
 81063cc:	d00f      	beq.n	81063ee <TIM_Base_SetConfig+0x9a>
 81063ce:	687b      	ldr	r3, [r7, #4]
 81063d0:	4a29      	ldr	r2, [pc, #164]	; (8106478 <TIM_Base_SetConfig+0x124>)
 81063d2:	4293      	cmp	r3, r2
 81063d4:	d00b      	beq.n	81063ee <TIM_Base_SetConfig+0x9a>
 81063d6:	687b      	ldr	r3, [r7, #4]
 81063d8:	4a28      	ldr	r2, [pc, #160]	; (810647c <TIM_Base_SetConfig+0x128>)
 81063da:	4293      	cmp	r3, r2
 81063dc:	d007      	beq.n	81063ee <TIM_Base_SetConfig+0x9a>
 81063de:	687b      	ldr	r3, [r7, #4]
 81063e0:	4a27      	ldr	r2, [pc, #156]	; (8106480 <TIM_Base_SetConfig+0x12c>)
 81063e2:	4293      	cmp	r3, r2
 81063e4:	d003      	beq.n	81063ee <TIM_Base_SetConfig+0x9a>
 81063e6:	687b      	ldr	r3, [r7, #4]
 81063e8:	4a26      	ldr	r2, [pc, #152]	; (8106484 <TIM_Base_SetConfig+0x130>)
 81063ea:	4293      	cmp	r3, r2
 81063ec:	d108      	bne.n	8106400 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 81063ee:	68fb      	ldr	r3, [r7, #12]
 81063f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81063f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 81063f6:	683b      	ldr	r3, [r7, #0]
 81063f8:	68db      	ldr	r3, [r3, #12]
 81063fa:	68fa      	ldr	r2, [r7, #12]
 81063fc:	4313      	orrs	r3, r2
 81063fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8106400:	68fb      	ldr	r3, [r7, #12]
 8106402:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8106406:	683b      	ldr	r3, [r7, #0]
 8106408:	695b      	ldr	r3, [r3, #20]
 810640a:	4313      	orrs	r3, r2
 810640c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 810640e:	687b      	ldr	r3, [r7, #4]
 8106410:	68fa      	ldr	r2, [r7, #12]
 8106412:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8106414:	683b      	ldr	r3, [r7, #0]
 8106416:	689a      	ldr	r2, [r3, #8]
 8106418:	687b      	ldr	r3, [r7, #4]
 810641a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 810641c:	683b      	ldr	r3, [r7, #0]
 810641e:	681a      	ldr	r2, [r3, #0]
 8106420:	687b      	ldr	r3, [r7, #4]
 8106422:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8106424:	687b      	ldr	r3, [r7, #4]
 8106426:	4a10      	ldr	r2, [pc, #64]	; (8106468 <TIM_Base_SetConfig+0x114>)
 8106428:	4293      	cmp	r3, r2
 810642a:	d00f      	beq.n	810644c <TIM_Base_SetConfig+0xf8>
 810642c:	687b      	ldr	r3, [r7, #4]
 810642e:	4a12      	ldr	r2, [pc, #72]	; (8106478 <TIM_Base_SetConfig+0x124>)
 8106430:	4293      	cmp	r3, r2
 8106432:	d00b      	beq.n	810644c <TIM_Base_SetConfig+0xf8>
 8106434:	687b      	ldr	r3, [r7, #4]
 8106436:	4a11      	ldr	r2, [pc, #68]	; (810647c <TIM_Base_SetConfig+0x128>)
 8106438:	4293      	cmp	r3, r2
 810643a:	d007      	beq.n	810644c <TIM_Base_SetConfig+0xf8>
 810643c:	687b      	ldr	r3, [r7, #4]
 810643e:	4a10      	ldr	r2, [pc, #64]	; (8106480 <TIM_Base_SetConfig+0x12c>)
 8106440:	4293      	cmp	r3, r2
 8106442:	d003      	beq.n	810644c <TIM_Base_SetConfig+0xf8>
 8106444:	687b      	ldr	r3, [r7, #4]
 8106446:	4a0f      	ldr	r2, [pc, #60]	; (8106484 <TIM_Base_SetConfig+0x130>)
 8106448:	4293      	cmp	r3, r2
 810644a:	d103      	bne.n	8106454 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 810644c:	683b      	ldr	r3, [r7, #0]
 810644e:	691a      	ldr	r2, [r3, #16]
 8106450:	687b      	ldr	r3, [r7, #4]
 8106452:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8106454:	687b      	ldr	r3, [r7, #4]
 8106456:	2201      	movs	r2, #1
 8106458:	615a      	str	r2, [r3, #20]
}
 810645a:	bf00      	nop
 810645c:	3714      	adds	r7, #20
 810645e:	46bd      	mov	sp, r7
 8106460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106464:	4770      	bx	lr
 8106466:	bf00      	nop
 8106468:	40010000 	.word	0x40010000
 810646c:	40000400 	.word	0x40000400
 8106470:	40000800 	.word	0x40000800
 8106474:	40000c00 	.word	0x40000c00
 8106478:	40010400 	.word	0x40010400
 810647c:	40014000 	.word	0x40014000
 8106480:	40014400 	.word	0x40014400
 8106484:	40014800 	.word	0x40014800

08106488 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8106488:	b480      	push	{r7}
 810648a:	b087      	sub	sp, #28
 810648c:	af00      	add	r7, sp, #0
 810648e:	6078      	str	r0, [r7, #4]
 8106490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8106492:	687b      	ldr	r3, [r7, #4]
 8106494:	6a1b      	ldr	r3, [r3, #32]
 8106496:	f023 0201 	bic.w	r2, r3, #1
 810649a:	687b      	ldr	r3, [r7, #4]
 810649c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810649e:	687b      	ldr	r3, [r7, #4]
 81064a0:	6a1b      	ldr	r3, [r3, #32]
 81064a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81064a4:	687b      	ldr	r3, [r7, #4]
 81064a6:	685b      	ldr	r3, [r3, #4]
 81064a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 81064aa:	687b      	ldr	r3, [r7, #4]
 81064ac:	699b      	ldr	r3, [r3, #24]
 81064ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 81064b0:	68fb      	ldr	r3, [r7, #12]
 81064b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81064b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81064ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 81064bc:	68fb      	ldr	r3, [r7, #12]
 81064be:	f023 0303 	bic.w	r3, r3, #3
 81064c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 81064c4:	683b      	ldr	r3, [r7, #0]
 81064c6:	681b      	ldr	r3, [r3, #0]
 81064c8:	68fa      	ldr	r2, [r7, #12]
 81064ca:	4313      	orrs	r3, r2
 81064cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 81064ce:	697b      	ldr	r3, [r7, #20]
 81064d0:	f023 0302 	bic.w	r3, r3, #2
 81064d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 81064d6:	683b      	ldr	r3, [r7, #0]
 81064d8:	689b      	ldr	r3, [r3, #8]
 81064da:	697a      	ldr	r2, [r7, #20]
 81064dc:	4313      	orrs	r3, r2
 81064de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 81064e0:	687b      	ldr	r3, [r7, #4]
 81064e2:	4a2c      	ldr	r2, [pc, #176]	; (8106594 <TIM_OC1_SetConfig+0x10c>)
 81064e4:	4293      	cmp	r3, r2
 81064e6:	d00f      	beq.n	8106508 <TIM_OC1_SetConfig+0x80>
 81064e8:	687b      	ldr	r3, [r7, #4]
 81064ea:	4a2b      	ldr	r2, [pc, #172]	; (8106598 <TIM_OC1_SetConfig+0x110>)
 81064ec:	4293      	cmp	r3, r2
 81064ee:	d00b      	beq.n	8106508 <TIM_OC1_SetConfig+0x80>
 81064f0:	687b      	ldr	r3, [r7, #4]
 81064f2:	4a2a      	ldr	r2, [pc, #168]	; (810659c <TIM_OC1_SetConfig+0x114>)
 81064f4:	4293      	cmp	r3, r2
 81064f6:	d007      	beq.n	8106508 <TIM_OC1_SetConfig+0x80>
 81064f8:	687b      	ldr	r3, [r7, #4]
 81064fa:	4a29      	ldr	r2, [pc, #164]	; (81065a0 <TIM_OC1_SetConfig+0x118>)
 81064fc:	4293      	cmp	r3, r2
 81064fe:	d003      	beq.n	8106508 <TIM_OC1_SetConfig+0x80>
 8106500:	687b      	ldr	r3, [r7, #4]
 8106502:	4a28      	ldr	r2, [pc, #160]	; (81065a4 <TIM_OC1_SetConfig+0x11c>)
 8106504:	4293      	cmp	r3, r2
 8106506:	d10c      	bne.n	8106522 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8106508:	697b      	ldr	r3, [r7, #20]
 810650a:	f023 0308 	bic.w	r3, r3, #8
 810650e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8106510:	683b      	ldr	r3, [r7, #0]
 8106512:	68db      	ldr	r3, [r3, #12]
 8106514:	697a      	ldr	r2, [r7, #20]
 8106516:	4313      	orrs	r3, r2
 8106518:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 810651a:	697b      	ldr	r3, [r7, #20]
 810651c:	f023 0304 	bic.w	r3, r3, #4
 8106520:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106522:	687b      	ldr	r3, [r7, #4]
 8106524:	4a1b      	ldr	r2, [pc, #108]	; (8106594 <TIM_OC1_SetConfig+0x10c>)
 8106526:	4293      	cmp	r3, r2
 8106528:	d00f      	beq.n	810654a <TIM_OC1_SetConfig+0xc2>
 810652a:	687b      	ldr	r3, [r7, #4]
 810652c:	4a1a      	ldr	r2, [pc, #104]	; (8106598 <TIM_OC1_SetConfig+0x110>)
 810652e:	4293      	cmp	r3, r2
 8106530:	d00b      	beq.n	810654a <TIM_OC1_SetConfig+0xc2>
 8106532:	687b      	ldr	r3, [r7, #4]
 8106534:	4a19      	ldr	r2, [pc, #100]	; (810659c <TIM_OC1_SetConfig+0x114>)
 8106536:	4293      	cmp	r3, r2
 8106538:	d007      	beq.n	810654a <TIM_OC1_SetConfig+0xc2>
 810653a:	687b      	ldr	r3, [r7, #4]
 810653c:	4a18      	ldr	r2, [pc, #96]	; (81065a0 <TIM_OC1_SetConfig+0x118>)
 810653e:	4293      	cmp	r3, r2
 8106540:	d003      	beq.n	810654a <TIM_OC1_SetConfig+0xc2>
 8106542:	687b      	ldr	r3, [r7, #4]
 8106544:	4a17      	ldr	r2, [pc, #92]	; (81065a4 <TIM_OC1_SetConfig+0x11c>)
 8106546:	4293      	cmp	r3, r2
 8106548:	d111      	bne.n	810656e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 810654a:	693b      	ldr	r3, [r7, #16]
 810654c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8106550:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8106552:	693b      	ldr	r3, [r7, #16]
 8106554:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8106558:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 810655a:	683b      	ldr	r3, [r7, #0]
 810655c:	695b      	ldr	r3, [r3, #20]
 810655e:	693a      	ldr	r2, [r7, #16]
 8106560:	4313      	orrs	r3, r2
 8106562:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8106564:	683b      	ldr	r3, [r7, #0]
 8106566:	699b      	ldr	r3, [r3, #24]
 8106568:	693a      	ldr	r2, [r7, #16]
 810656a:	4313      	orrs	r3, r2
 810656c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810656e:	687b      	ldr	r3, [r7, #4]
 8106570:	693a      	ldr	r2, [r7, #16]
 8106572:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8106574:	687b      	ldr	r3, [r7, #4]
 8106576:	68fa      	ldr	r2, [r7, #12]
 8106578:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 810657a:	683b      	ldr	r3, [r7, #0]
 810657c:	685a      	ldr	r2, [r3, #4]
 810657e:	687b      	ldr	r3, [r7, #4]
 8106580:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106582:	687b      	ldr	r3, [r7, #4]
 8106584:	697a      	ldr	r2, [r7, #20]
 8106586:	621a      	str	r2, [r3, #32]
}
 8106588:	bf00      	nop
 810658a:	371c      	adds	r7, #28
 810658c:	46bd      	mov	sp, r7
 810658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106592:	4770      	bx	lr
 8106594:	40010000 	.word	0x40010000
 8106598:	40010400 	.word	0x40010400
 810659c:	40014000 	.word	0x40014000
 81065a0:	40014400 	.word	0x40014400
 81065a4:	40014800 	.word	0x40014800

081065a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 81065a8:	b480      	push	{r7}
 81065aa:	b087      	sub	sp, #28
 81065ac:	af00      	add	r7, sp, #0
 81065ae:	6078      	str	r0, [r7, #4]
 81065b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 81065b2:	687b      	ldr	r3, [r7, #4]
 81065b4:	6a1b      	ldr	r3, [r3, #32]
 81065b6:	f023 0210 	bic.w	r2, r3, #16
 81065ba:	687b      	ldr	r3, [r7, #4]
 81065bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81065be:	687b      	ldr	r3, [r7, #4]
 81065c0:	6a1b      	ldr	r3, [r3, #32]
 81065c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81065c4:	687b      	ldr	r3, [r7, #4]
 81065c6:	685b      	ldr	r3, [r3, #4]
 81065c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 81065ca:	687b      	ldr	r3, [r7, #4]
 81065cc:	699b      	ldr	r3, [r3, #24]
 81065ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 81065d0:	68fb      	ldr	r3, [r7, #12]
 81065d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 81065d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 81065da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 81065dc:	68fb      	ldr	r3, [r7, #12]
 81065de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81065e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 81065e4:	683b      	ldr	r3, [r7, #0]
 81065e6:	681b      	ldr	r3, [r3, #0]
 81065e8:	021b      	lsls	r3, r3, #8
 81065ea:	68fa      	ldr	r2, [r7, #12]
 81065ec:	4313      	orrs	r3, r2
 81065ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 81065f0:	697b      	ldr	r3, [r7, #20]
 81065f2:	f023 0320 	bic.w	r3, r3, #32
 81065f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 81065f8:	683b      	ldr	r3, [r7, #0]
 81065fa:	689b      	ldr	r3, [r3, #8]
 81065fc:	011b      	lsls	r3, r3, #4
 81065fe:	697a      	ldr	r2, [r7, #20]
 8106600:	4313      	orrs	r3, r2
 8106602:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8106604:	687b      	ldr	r3, [r7, #4]
 8106606:	4a28      	ldr	r2, [pc, #160]	; (81066a8 <TIM_OC2_SetConfig+0x100>)
 8106608:	4293      	cmp	r3, r2
 810660a:	d003      	beq.n	8106614 <TIM_OC2_SetConfig+0x6c>
 810660c:	687b      	ldr	r3, [r7, #4]
 810660e:	4a27      	ldr	r2, [pc, #156]	; (81066ac <TIM_OC2_SetConfig+0x104>)
 8106610:	4293      	cmp	r3, r2
 8106612:	d10d      	bne.n	8106630 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8106614:	697b      	ldr	r3, [r7, #20]
 8106616:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810661a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 810661c:	683b      	ldr	r3, [r7, #0]
 810661e:	68db      	ldr	r3, [r3, #12]
 8106620:	011b      	lsls	r3, r3, #4
 8106622:	697a      	ldr	r2, [r7, #20]
 8106624:	4313      	orrs	r3, r2
 8106626:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8106628:	697b      	ldr	r3, [r7, #20]
 810662a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810662e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106630:	687b      	ldr	r3, [r7, #4]
 8106632:	4a1d      	ldr	r2, [pc, #116]	; (81066a8 <TIM_OC2_SetConfig+0x100>)
 8106634:	4293      	cmp	r3, r2
 8106636:	d00f      	beq.n	8106658 <TIM_OC2_SetConfig+0xb0>
 8106638:	687b      	ldr	r3, [r7, #4]
 810663a:	4a1c      	ldr	r2, [pc, #112]	; (81066ac <TIM_OC2_SetConfig+0x104>)
 810663c:	4293      	cmp	r3, r2
 810663e:	d00b      	beq.n	8106658 <TIM_OC2_SetConfig+0xb0>
 8106640:	687b      	ldr	r3, [r7, #4]
 8106642:	4a1b      	ldr	r2, [pc, #108]	; (81066b0 <TIM_OC2_SetConfig+0x108>)
 8106644:	4293      	cmp	r3, r2
 8106646:	d007      	beq.n	8106658 <TIM_OC2_SetConfig+0xb0>
 8106648:	687b      	ldr	r3, [r7, #4]
 810664a:	4a1a      	ldr	r2, [pc, #104]	; (81066b4 <TIM_OC2_SetConfig+0x10c>)
 810664c:	4293      	cmp	r3, r2
 810664e:	d003      	beq.n	8106658 <TIM_OC2_SetConfig+0xb0>
 8106650:	687b      	ldr	r3, [r7, #4]
 8106652:	4a19      	ldr	r2, [pc, #100]	; (81066b8 <TIM_OC2_SetConfig+0x110>)
 8106654:	4293      	cmp	r3, r2
 8106656:	d113      	bne.n	8106680 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8106658:	693b      	ldr	r3, [r7, #16]
 810665a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 810665e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8106660:	693b      	ldr	r3, [r7, #16]
 8106662:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8106666:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8106668:	683b      	ldr	r3, [r7, #0]
 810666a:	695b      	ldr	r3, [r3, #20]
 810666c:	009b      	lsls	r3, r3, #2
 810666e:	693a      	ldr	r2, [r7, #16]
 8106670:	4313      	orrs	r3, r2
 8106672:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8106674:	683b      	ldr	r3, [r7, #0]
 8106676:	699b      	ldr	r3, [r3, #24]
 8106678:	009b      	lsls	r3, r3, #2
 810667a:	693a      	ldr	r2, [r7, #16]
 810667c:	4313      	orrs	r3, r2
 810667e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8106680:	687b      	ldr	r3, [r7, #4]
 8106682:	693a      	ldr	r2, [r7, #16]
 8106684:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8106686:	687b      	ldr	r3, [r7, #4]
 8106688:	68fa      	ldr	r2, [r7, #12]
 810668a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 810668c:	683b      	ldr	r3, [r7, #0]
 810668e:	685a      	ldr	r2, [r3, #4]
 8106690:	687b      	ldr	r3, [r7, #4]
 8106692:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106694:	687b      	ldr	r3, [r7, #4]
 8106696:	697a      	ldr	r2, [r7, #20]
 8106698:	621a      	str	r2, [r3, #32]
}
 810669a:	bf00      	nop
 810669c:	371c      	adds	r7, #28
 810669e:	46bd      	mov	sp, r7
 81066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81066a4:	4770      	bx	lr
 81066a6:	bf00      	nop
 81066a8:	40010000 	.word	0x40010000
 81066ac:	40010400 	.word	0x40010400
 81066b0:	40014000 	.word	0x40014000
 81066b4:	40014400 	.word	0x40014400
 81066b8:	40014800 	.word	0x40014800

081066bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 81066bc:	b480      	push	{r7}
 81066be:	b087      	sub	sp, #28
 81066c0:	af00      	add	r7, sp, #0
 81066c2:	6078      	str	r0, [r7, #4]
 81066c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 81066c6:	687b      	ldr	r3, [r7, #4]
 81066c8:	6a1b      	ldr	r3, [r3, #32]
 81066ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 81066ce:	687b      	ldr	r3, [r7, #4]
 81066d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81066d2:	687b      	ldr	r3, [r7, #4]
 81066d4:	6a1b      	ldr	r3, [r3, #32]
 81066d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81066d8:	687b      	ldr	r3, [r7, #4]
 81066da:	685b      	ldr	r3, [r3, #4]
 81066dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 81066de:	687b      	ldr	r3, [r7, #4]
 81066e0:	69db      	ldr	r3, [r3, #28]
 81066e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 81066e4:	68fb      	ldr	r3, [r7, #12]
 81066e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81066ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81066ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 81066f0:	68fb      	ldr	r3, [r7, #12]
 81066f2:	f023 0303 	bic.w	r3, r3, #3
 81066f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 81066f8:	683b      	ldr	r3, [r7, #0]
 81066fa:	681b      	ldr	r3, [r3, #0]
 81066fc:	68fa      	ldr	r2, [r7, #12]
 81066fe:	4313      	orrs	r3, r2
 8106700:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8106702:	697b      	ldr	r3, [r7, #20]
 8106704:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8106708:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 810670a:	683b      	ldr	r3, [r7, #0]
 810670c:	689b      	ldr	r3, [r3, #8]
 810670e:	021b      	lsls	r3, r3, #8
 8106710:	697a      	ldr	r2, [r7, #20]
 8106712:	4313      	orrs	r3, r2
 8106714:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8106716:	687b      	ldr	r3, [r7, #4]
 8106718:	4a27      	ldr	r2, [pc, #156]	; (81067b8 <TIM_OC3_SetConfig+0xfc>)
 810671a:	4293      	cmp	r3, r2
 810671c:	d003      	beq.n	8106726 <TIM_OC3_SetConfig+0x6a>
 810671e:	687b      	ldr	r3, [r7, #4]
 8106720:	4a26      	ldr	r2, [pc, #152]	; (81067bc <TIM_OC3_SetConfig+0x100>)
 8106722:	4293      	cmp	r3, r2
 8106724:	d10d      	bne.n	8106742 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8106726:	697b      	ldr	r3, [r7, #20]
 8106728:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 810672c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 810672e:	683b      	ldr	r3, [r7, #0]
 8106730:	68db      	ldr	r3, [r3, #12]
 8106732:	021b      	lsls	r3, r3, #8
 8106734:	697a      	ldr	r2, [r7, #20]
 8106736:	4313      	orrs	r3, r2
 8106738:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 810673a:	697b      	ldr	r3, [r7, #20]
 810673c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8106740:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106742:	687b      	ldr	r3, [r7, #4]
 8106744:	4a1c      	ldr	r2, [pc, #112]	; (81067b8 <TIM_OC3_SetConfig+0xfc>)
 8106746:	4293      	cmp	r3, r2
 8106748:	d00f      	beq.n	810676a <TIM_OC3_SetConfig+0xae>
 810674a:	687b      	ldr	r3, [r7, #4]
 810674c:	4a1b      	ldr	r2, [pc, #108]	; (81067bc <TIM_OC3_SetConfig+0x100>)
 810674e:	4293      	cmp	r3, r2
 8106750:	d00b      	beq.n	810676a <TIM_OC3_SetConfig+0xae>
 8106752:	687b      	ldr	r3, [r7, #4]
 8106754:	4a1a      	ldr	r2, [pc, #104]	; (81067c0 <TIM_OC3_SetConfig+0x104>)
 8106756:	4293      	cmp	r3, r2
 8106758:	d007      	beq.n	810676a <TIM_OC3_SetConfig+0xae>
 810675a:	687b      	ldr	r3, [r7, #4]
 810675c:	4a19      	ldr	r2, [pc, #100]	; (81067c4 <TIM_OC3_SetConfig+0x108>)
 810675e:	4293      	cmp	r3, r2
 8106760:	d003      	beq.n	810676a <TIM_OC3_SetConfig+0xae>
 8106762:	687b      	ldr	r3, [r7, #4]
 8106764:	4a18      	ldr	r2, [pc, #96]	; (81067c8 <TIM_OC3_SetConfig+0x10c>)
 8106766:	4293      	cmp	r3, r2
 8106768:	d113      	bne.n	8106792 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 810676a:	693b      	ldr	r3, [r7, #16]
 810676c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8106770:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8106772:	693b      	ldr	r3, [r7, #16]
 8106774:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8106778:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 810677a:	683b      	ldr	r3, [r7, #0]
 810677c:	695b      	ldr	r3, [r3, #20]
 810677e:	011b      	lsls	r3, r3, #4
 8106780:	693a      	ldr	r2, [r7, #16]
 8106782:	4313      	orrs	r3, r2
 8106784:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8106786:	683b      	ldr	r3, [r7, #0]
 8106788:	699b      	ldr	r3, [r3, #24]
 810678a:	011b      	lsls	r3, r3, #4
 810678c:	693a      	ldr	r2, [r7, #16]
 810678e:	4313      	orrs	r3, r2
 8106790:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8106792:	687b      	ldr	r3, [r7, #4]
 8106794:	693a      	ldr	r2, [r7, #16]
 8106796:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8106798:	687b      	ldr	r3, [r7, #4]
 810679a:	68fa      	ldr	r2, [r7, #12]
 810679c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 810679e:	683b      	ldr	r3, [r7, #0]
 81067a0:	685a      	ldr	r2, [r3, #4]
 81067a2:	687b      	ldr	r3, [r7, #4]
 81067a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81067a6:	687b      	ldr	r3, [r7, #4]
 81067a8:	697a      	ldr	r2, [r7, #20]
 81067aa:	621a      	str	r2, [r3, #32]
}
 81067ac:	bf00      	nop
 81067ae:	371c      	adds	r7, #28
 81067b0:	46bd      	mov	sp, r7
 81067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81067b6:	4770      	bx	lr
 81067b8:	40010000 	.word	0x40010000
 81067bc:	40010400 	.word	0x40010400
 81067c0:	40014000 	.word	0x40014000
 81067c4:	40014400 	.word	0x40014400
 81067c8:	40014800 	.word	0x40014800

081067cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 81067cc:	b480      	push	{r7}
 81067ce:	b087      	sub	sp, #28
 81067d0:	af00      	add	r7, sp, #0
 81067d2:	6078      	str	r0, [r7, #4]
 81067d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 81067d6:	687b      	ldr	r3, [r7, #4]
 81067d8:	6a1b      	ldr	r3, [r3, #32]
 81067da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 81067de:	687b      	ldr	r3, [r7, #4]
 81067e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81067e2:	687b      	ldr	r3, [r7, #4]
 81067e4:	6a1b      	ldr	r3, [r3, #32]
 81067e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81067e8:	687b      	ldr	r3, [r7, #4]
 81067ea:	685b      	ldr	r3, [r3, #4]
 81067ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 81067ee:	687b      	ldr	r3, [r7, #4]
 81067f0:	69db      	ldr	r3, [r3, #28]
 81067f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 81067f4:	68fb      	ldr	r3, [r7, #12]
 81067f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 81067fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 81067fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8106800:	68fb      	ldr	r3, [r7, #12]
 8106802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8106806:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8106808:	683b      	ldr	r3, [r7, #0]
 810680a:	681b      	ldr	r3, [r3, #0]
 810680c:	021b      	lsls	r3, r3, #8
 810680e:	68fa      	ldr	r2, [r7, #12]
 8106810:	4313      	orrs	r3, r2
 8106812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8106814:	693b      	ldr	r3, [r7, #16]
 8106816:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 810681a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 810681c:	683b      	ldr	r3, [r7, #0]
 810681e:	689b      	ldr	r3, [r3, #8]
 8106820:	031b      	lsls	r3, r3, #12
 8106822:	693a      	ldr	r2, [r7, #16]
 8106824:	4313      	orrs	r3, r2
 8106826:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106828:	687b      	ldr	r3, [r7, #4]
 810682a:	4a18      	ldr	r2, [pc, #96]	; (810688c <TIM_OC4_SetConfig+0xc0>)
 810682c:	4293      	cmp	r3, r2
 810682e:	d00f      	beq.n	8106850 <TIM_OC4_SetConfig+0x84>
 8106830:	687b      	ldr	r3, [r7, #4]
 8106832:	4a17      	ldr	r2, [pc, #92]	; (8106890 <TIM_OC4_SetConfig+0xc4>)
 8106834:	4293      	cmp	r3, r2
 8106836:	d00b      	beq.n	8106850 <TIM_OC4_SetConfig+0x84>
 8106838:	687b      	ldr	r3, [r7, #4]
 810683a:	4a16      	ldr	r2, [pc, #88]	; (8106894 <TIM_OC4_SetConfig+0xc8>)
 810683c:	4293      	cmp	r3, r2
 810683e:	d007      	beq.n	8106850 <TIM_OC4_SetConfig+0x84>
 8106840:	687b      	ldr	r3, [r7, #4]
 8106842:	4a15      	ldr	r2, [pc, #84]	; (8106898 <TIM_OC4_SetConfig+0xcc>)
 8106844:	4293      	cmp	r3, r2
 8106846:	d003      	beq.n	8106850 <TIM_OC4_SetConfig+0x84>
 8106848:	687b      	ldr	r3, [r7, #4]
 810684a:	4a14      	ldr	r2, [pc, #80]	; (810689c <TIM_OC4_SetConfig+0xd0>)
 810684c:	4293      	cmp	r3, r2
 810684e:	d109      	bne.n	8106864 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8106850:	697b      	ldr	r3, [r7, #20]
 8106852:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8106856:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8106858:	683b      	ldr	r3, [r7, #0]
 810685a:	695b      	ldr	r3, [r3, #20]
 810685c:	019b      	lsls	r3, r3, #6
 810685e:	697a      	ldr	r2, [r7, #20]
 8106860:	4313      	orrs	r3, r2
 8106862:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8106864:	687b      	ldr	r3, [r7, #4]
 8106866:	697a      	ldr	r2, [r7, #20]
 8106868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810686a:	687b      	ldr	r3, [r7, #4]
 810686c:	68fa      	ldr	r2, [r7, #12]
 810686e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8106870:	683b      	ldr	r3, [r7, #0]
 8106872:	685a      	ldr	r2, [r3, #4]
 8106874:	687b      	ldr	r3, [r7, #4]
 8106876:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106878:	687b      	ldr	r3, [r7, #4]
 810687a:	693a      	ldr	r2, [r7, #16]
 810687c:	621a      	str	r2, [r3, #32]
}
 810687e:	bf00      	nop
 8106880:	371c      	adds	r7, #28
 8106882:	46bd      	mov	sp, r7
 8106884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106888:	4770      	bx	lr
 810688a:	bf00      	nop
 810688c:	40010000 	.word	0x40010000
 8106890:	40010400 	.word	0x40010400
 8106894:	40014000 	.word	0x40014000
 8106898:	40014400 	.word	0x40014400
 810689c:	40014800 	.word	0x40014800

081068a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 81068a0:	b480      	push	{r7}
 81068a2:	b087      	sub	sp, #28
 81068a4:	af00      	add	r7, sp, #0
 81068a6:	6078      	str	r0, [r7, #4]
 81068a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 81068aa:	687b      	ldr	r3, [r7, #4]
 81068ac:	6a1b      	ldr	r3, [r3, #32]
 81068ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81068b2:	687b      	ldr	r3, [r7, #4]
 81068b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81068b6:	687b      	ldr	r3, [r7, #4]
 81068b8:	6a1b      	ldr	r3, [r3, #32]
 81068ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81068bc:	687b      	ldr	r3, [r7, #4]
 81068be:	685b      	ldr	r3, [r3, #4]
 81068c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 81068c2:	687b      	ldr	r3, [r7, #4]
 81068c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81068c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 81068c8:	68fb      	ldr	r3, [r7, #12]
 81068ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81068ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81068d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 81068d4:	683b      	ldr	r3, [r7, #0]
 81068d6:	681b      	ldr	r3, [r3, #0]
 81068d8:	68fa      	ldr	r2, [r7, #12]
 81068da:	4313      	orrs	r3, r2
 81068dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 81068de:	693b      	ldr	r3, [r7, #16]
 81068e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 81068e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 81068e6:	683b      	ldr	r3, [r7, #0]
 81068e8:	689b      	ldr	r3, [r3, #8]
 81068ea:	041b      	lsls	r3, r3, #16
 81068ec:	693a      	ldr	r2, [r7, #16]
 81068ee:	4313      	orrs	r3, r2
 81068f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81068f2:	687b      	ldr	r3, [r7, #4]
 81068f4:	4a17      	ldr	r2, [pc, #92]	; (8106954 <TIM_OC5_SetConfig+0xb4>)
 81068f6:	4293      	cmp	r3, r2
 81068f8:	d00f      	beq.n	810691a <TIM_OC5_SetConfig+0x7a>
 81068fa:	687b      	ldr	r3, [r7, #4]
 81068fc:	4a16      	ldr	r2, [pc, #88]	; (8106958 <TIM_OC5_SetConfig+0xb8>)
 81068fe:	4293      	cmp	r3, r2
 8106900:	d00b      	beq.n	810691a <TIM_OC5_SetConfig+0x7a>
 8106902:	687b      	ldr	r3, [r7, #4]
 8106904:	4a15      	ldr	r2, [pc, #84]	; (810695c <TIM_OC5_SetConfig+0xbc>)
 8106906:	4293      	cmp	r3, r2
 8106908:	d007      	beq.n	810691a <TIM_OC5_SetConfig+0x7a>
 810690a:	687b      	ldr	r3, [r7, #4]
 810690c:	4a14      	ldr	r2, [pc, #80]	; (8106960 <TIM_OC5_SetConfig+0xc0>)
 810690e:	4293      	cmp	r3, r2
 8106910:	d003      	beq.n	810691a <TIM_OC5_SetConfig+0x7a>
 8106912:	687b      	ldr	r3, [r7, #4]
 8106914:	4a13      	ldr	r2, [pc, #76]	; (8106964 <TIM_OC5_SetConfig+0xc4>)
 8106916:	4293      	cmp	r3, r2
 8106918:	d109      	bne.n	810692e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 810691a:	697b      	ldr	r3, [r7, #20]
 810691c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8106920:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8106922:	683b      	ldr	r3, [r7, #0]
 8106924:	695b      	ldr	r3, [r3, #20]
 8106926:	021b      	lsls	r3, r3, #8
 8106928:	697a      	ldr	r2, [r7, #20]
 810692a:	4313      	orrs	r3, r2
 810692c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810692e:	687b      	ldr	r3, [r7, #4]
 8106930:	697a      	ldr	r2, [r7, #20]
 8106932:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8106934:	687b      	ldr	r3, [r7, #4]
 8106936:	68fa      	ldr	r2, [r7, #12]
 8106938:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 810693a:	683b      	ldr	r3, [r7, #0]
 810693c:	685a      	ldr	r2, [r3, #4]
 810693e:	687b      	ldr	r3, [r7, #4]
 8106940:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106942:	687b      	ldr	r3, [r7, #4]
 8106944:	693a      	ldr	r2, [r7, #16]
 8106946:	621a      	str	r2, [r3, #32]
}
 8106948:	bf00      	nop
 810694a:	371c      	adds	r7, #28
 810694c:	46bd      	mov	sp, r7
 810694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106952:	4770      	bx	lr
 8106954:	40010000 	.word	0x40010000
 8106958:	40010400 	.word	0x40010400
 810695c:	40014000 	.word	0x40014000
 8106960:	40014400 	.word	0x40014400
 8106964:	40014800 	.word	0x40014800

08106968 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8106968:	b480      	push	{r7}
 810696a:	b087      	sub	sp, #28
 810696c:	af00      	add	r7, sp, #0
 810696e:	6078      	str	r0, [r7, #4]
 8106970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8106972:	687b      	ldr	r3, [r7, #4]
 8106974:	6a1b      	ldr	r3, [r3, #32]
 8106976:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 810697a:	687b      	ldr	r3, [r7, #4]
 810697c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810697e:	687b      	ldr	r3, [r7, #4]
 8106980:	6a1b      	ldr	r3, [r3, #32]
 8106982:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106984:	687b      	ldr	r3, [r7, #4]
 8106986:	685b      	ldr	r3, [r3, #4]
 8106988:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810698a:	687b      	ldr	r3, [r7, #4]
 810698c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810698e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8106990:	68fb      	ldr	r3, [r7, #12]
 8106992:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8106996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810699a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810699c:	683b      	ldr	r3, [r7, #0]
 810699e:	681b      	ldr	r3, [r3, #0]
 81069a0:	021b      	lsls	r3, r3, #8
 81069a2:	68fa      	ldr	r2, [r7, #12]
 81069a4:	4313      	orrs	r3, r2
 81069a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 81069a8:	693b      	ldr	r3, [r7, #16]
 81069aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 81069ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 81069b0:	683b      	ldr	r3, [r7, #0]
 81069b2:	689b      	ldr	r3, [r3, #8]
 81069b4:	051b      	lsls	r3, r3, #20
 81069b6:	693a      	ldr	r2, [r7, #16]
 81069b8:	4313      	orrs	r3, r2
 81069ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81069bc:	687b      	ldr	r3, [r7, #4]
 81069be:	4a18      	ldr	r2, [pc, #96]	; (8106a20 <TIM_OC6_SetConfig+0xb8>)
 81069c0:	4293      	cmp	r3, r2
 81069c2:	d00f      	beq.n	81069e4 <TIM_OC6_SetConfig+0x7c>
 81069c4:	687b      	ldr	r3, [r7, #4]
 81069c6:	4a17      	ldr	r2, [pc, #92]	; (8106a24 <TIM_OC6_SetConfig+0xbc>)
 81069c8:	4293      	cmp	r3, r2
 81069ca:	d00b      	beq.n	81069e4 <TIM_OC6_SetConfig+0x7c>
 81069cc:	687b      	ldr	r3, [r7, #4]
 81069ce:	4a16      	ldr	r2, [pc, #88]	; (8106a28 <TIM_OC6_SetConfig+0xc0>)
 81069d0:	4293      	cmp	r3, r2
 81069d2:	d007      	beq.n	81069e4 <TIM_OC6_SetConfig+0x7c>
 81069d4:	687b      	ldr	r3, [r7, #4]
 81069d6:	4a15      	ldr	r2, [pc, #84]	; (8106a2c <TIM_OC6_SetConfig+0xc4>)
 81069d8:	4293      	cmp	r3, r2
 81069da:	d003      	beq.n	81069e4 <TIM_OC6_SetConfig+0x7c>
 81069dc:	687b      	ldr	r3, [r7, #4]
 81069de:	4a14      	ldr	r2, [pc, #80]	; (8106a30 <TIM_OC6_SetConfig+0xc8>)
 81069e0:	4293      	cmp	r3, r2
 81069e2:	d109      	bne.n	81069f8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 81069e4:	697b      	ldr	r3, [r7, #20]
 81069e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 81069ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 81069ec:	683b      	ldr	r3, [r7, #0]
 81069ee:	695b      	ldr	r3, [r3, #20]
 81069f0:	029b      	lsls	r3, r3, #10
 81069f2:	697a      	ldr	r2, [r7, #20]
 81069f4:	4313      	orrs	r3, r2
 81069f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81069f8:	687b      	ldr	r3, [r7, #4]
 81069fa:	697a      	ldr	r2, [r7, #20]
 81069fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 81069fe:	687b      	ldr	r3, [r7, #4]
 8106a00:	68fa      	ldr	r2, [r7, #12]
 8106a02:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8106a04:	683b      	ldr	r3, [r7, #0]
 8106a06:	685a      	ldr	r2, [r3, #4]
 8106a08:	687b      	ldr	r3, [r7, #4]
 8106a0a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106a0c:	687b      	ldr	r3, [r7, #4]
 8106a0e:	693a      	ldr	r2, [r7, #16]
 8106a10:	621a      	str	r2, [r3, #32]
}
 8106a12:	bf00      	nop
 8106a14:	371c      	adds	r7, #28
 8106a16:	46bd      	mov	sp, r7
 8106a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106a1c:	4770      	bx	lr
 8106a1e:	bf00      	nop
 8106a20:	40010000 	.word	0x40010000
 8106a24:	40010400 	.word	0x40010400
 8106a28:	40014000 	.word	0x40014000
 8106a2c:	40014400 	.word	0x40014400
 8106a30:	40014800 	.word	0x40014800

08106a34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8106a34:	b480      	push	{r7}
 8106a36:	b087      	sub	sp, #28
 8106a38:	af00      	add	r7, sp, #0
 8106a3a:	60f8      	str	r0, [r7, #12]
 8106a3c:	60b9      	str	r1, [r7, #8]
 8106a3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8106a40:	68bb      	ldr	r3, [r7, #8]
 8106a42:	f003 031f 	and.w	r3, r3, #31
 8106a46:	2201      	movs	r2, #1
 8106a48:	fa02 f303 	lsl.w	r3, r2, r3
 8106a4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8106a4e:	68fb      	ldr	r3, [r7, #12]
 8106a50:	6a1a      	ldr	r2, [r3, #32]
 8106a52:	697b      	ldr	r3, [r7, #20]
 8106a54:	43db      	mvns	r3, r3
 8106a56:	401a      	ands	r2, r3
 8106a58:	68fb      	ldr	r3, [r7, #12]
 8106a5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8106a5c:	68fb      	ldr	r3, [r7, #12]
 8106a5e:	6a1a      	ldr	r2, [r3, #32]
 8106a60:	68bb      	ldr	r3, [r7, #8]
 8106a62:	f003 031f 	and.w	r3, r3, #31
 8106a66:	6879      	ldr	r1, [r7, #4]
 8106a68:	fa01 f303 	lsl.w	r3, r1, r3
 8106a6c:	431a      	orrs	r2, r3
 8106a6e:	68fb      	ldr	r3, [r7, #12]
 8106a70:	621a      	str	r2, [r3, #32]
}
 8106a72:	bf00      	nop
 8106a74:	371c      	adds	r7, #28
 8106a76:	46bd      	mov	sp, r7
 8106a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106a7c:	4770      	bx	lr
	...

08106a80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8106a80:	b480      	push	{r7}
 8106a82:	b085      	sub	sp, #20
 8106a84:	af00      	add	r7, sp, #0
 8106a86:	6078      	str	r0, [r7, #4]
 8106a88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8106a8a:	687b      	ldr	r3, [r7, #4]
 8106a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8106a90:	2b01      	cmp	r3, #1
 8106a92:	d101      	bne.n	8106a98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8106a94:	2302      	movs	r3, #2
 8106a96:	e06d      	b.n	8106b74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8106a98:	687b      	ldr	r3, [r7, #4]
 8106a9a:	2201      	movs	r2, #1
 8106a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106aa0:	687b      	ldr	r3, [r7, #4]
 8106aa2:	2202      	movs	r2, #2
 8106aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8106aa8:	687b      	ldr	r3, [r7, #4]
 8106aaa:	681b      	ldr	r3, [r3, #0]
 8106aac:	685b      	ldr	r3, [r3, #4]
 8106aae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8106ab0:	687b      	ldr	r3, [r7, #4]
 8106ab2:	681b      	ldr	r3, [r3, #0]
 8106ab4:	689b      	ldr	r3, [r3, #8]
 8106ab6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8106ab8:	687b      	ldr	r3, [r7, #4]
 8106aba:	681b      	ldr	r3, [r3, #0]
 8106abc:	4a30      	ldr	r2, [pc, #192]	; (8106b80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8106abe:	4293      	cmp	r3, r2
 8106ac0:	d004      	beq.n	8106acc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8106ac2:	687b      	ldr	r3, [r7, #4]
 8106ac4:	681b      	ldr	r3, [r3, #0]
 8106ac6:	4a2f      	ldr	r2, [pc, #188]	; (8106b84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8106ac8:	4293      	cmp	r3, r2
 8106aca:	d108      	bne.n	8106ade <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8106acc:	68fb      	ldr	r3, [r7, #12]
 8106ace:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8106ad2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8106ad4:	683b      	ldr	r3, [r7, #0]
 8106ad6:	685b      	ldr	r3, [r3, #4]
 8106ad8:	68fa      	ldr	r2, [r7, #12]
 8106ada:	4313      	orrs	r3, r2
 8106adc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8106ade:	68fb      	ldr	r3, [r7, #12]
 8106ae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8106ae4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8106ae6:	683b      	ldr	r3, [r7, #0]
 8106ae8:	681b      	ldr	r3, [r3, #0]
 8106aea:	68fa      	ldr	r2, [r7, #12]
 8106aec:	4313      	orrs	r3, r2
 8106aee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8106af0:	687b      	ldr	r3, [r7, #4]
 8106af2:	681b      	ldr	r3, [r3, #0]
 8106af4:	68fa      	ldr	r2, [r7, #12]
 8106af6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8106af8:	687b      	ldr	r3, [r7, #4]
 8106afa:	681b      	ldr	r3, [r3, #0]
 8106afc:	4a20      	ldr	r2, [pc, #128]	; (8106b80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8106afe:	4293      	cmp	r3, r2
 8106b00:	d022      	beq.n	8106b48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8106b02:	687b      	ldr	r3, [r7, #4]
 8106b04:	681b      	ldr	r3, [r3, #0]
 8106b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106b0a:	d01d      	beq.n	8106b48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8106b0c:	687b      	ldr	r3, [r7, #4]
 8106b0e:	681b      	ldr	r3, [r3, #0]
 8106b10:	4a1d      	ldr	r2, [pc, #116]	; (8106b88 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8106b12:	4293      	cmp	r3, r2
 8106b14:	d018      	beq.n	8106b48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8106b16:	687b      	ldr	r3, [r7, #4]
 8106b18:	681b      	ldr	r3, [r3, #0]
 8106b1a:	4a1c      	ldr	r2, [pc, #112]	; (8106b8c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8106b1c:	4293      	cmp	r3, r2
 8106b1e:	d013      	beq.n	8106b48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8106b20:	687b      	ldr	r3, [r7, #4]
 8106b22:	681b      	ldr	r3, [r3, #0]
 8106b24:	4a1a      	ldr	r2, [pc, #104]	; (8106b90 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8106b26:	4293      	cmp	r3, r2
 8106b28:	d00e      	beq.n	8106b48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8106b2a:	687b      	ldr	r3, [r7, #4]
 8106b2c:	681b      	ldr	r3, [r3, #0]
 8106b2e:	4a15      	ldr	r2, [pc, #84]	; (8106b84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8106b30:	4293      	cmp	r3, r2
 8106b32:	d009      	beq.n	8106b48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8106b34:	687b      	ldr	r3, [r7, #4]
 8106b36:	681b      	ldr	r3, [r3, #0]
 8106b38:	4a16      	ldr	r2, [pc, #88]	; (8106b94 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8106b3a:	4293      	cmp	r3, r2
 8106b3c:	d004      	beq.n	8106b48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8106b3e:	687b      	ldr	r3, [r7, #4]
 8106b40:	681b      	ldr	r3, [r3, #0]
 8106b42:	4a15      	ldr	r2, [pc, #84]	; (8106b98 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8106b44:	4293      	cmp	r3, r2
 8106b46:	d10c      	bne.n	8106b62 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8106b48:	68bb      	ldr	r3, [r7, #8]
 8106b4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8106b4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8106b50:	683b      	ldr	r3, [r7, #0]
 8106b52:	689b      	ldr	r3, [r3, #8]
 8106b54:	68ba      	ldr	r2, [r7, #8]
 8106b56:	4313      	orrs	r3, r2
 8106b58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8106b5a:	687b      	ldr	r3, [r7, #4]
 8106b5c:	681b      	ldr	r3, [r3, #0]
 8106b5e:	68ba      	ldr	r2, [r7, #8]
 8106b60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8106b62:	687b      	ldr	r3, [r7, #4]
 8106b64:	2201      	movs	r2, #1
 8106b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8106b6a:	687b      	ldr	r3, [r7, #4]
 8106b6c:	2200      	movs	r2, #0
 8106b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8106b72:	2300      	movs	r3, #0
}
 8106b74:	4618      	mov	r0, r3
 8106b76:	3714      	adds	r7, #20
 8106b78:	46bd      	mov	sp, r7
 8106b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b7e:	4770      	bx	lr
 8106b80:	40010000 	.word	0x40010000
 8106b84:	40010400 	.word	0x40010400
 8106b88:	40000400 	.word	0x40000400
 8106b8c:	40000800 	.word	0x40000800
 8106b90:	40000c00 	.word	0x40000c00
 8106b94:	40001800 	.word	0x40001800
 8106b98:	40014000 	.word	0x40014000

08106b9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8106b9c:	b480      	push	{r7}
 8106b9e:	b083      	sub	sp, #12
 8106ba0:	af00      	add	r7, sp, #0
 8106ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8106ba4:	bf00      	nop
 8106ba6:	370c      	adds	r7, #12
 8106ba8:	46bd      	mov	sp, r7
 8106baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106bae:	4770      	bx	lr

08106bb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8106bb0:	b480      	push	{r7}
 8106bb2:	b083      	sub	sp, #12
 8106bb4:	af00      	add	r7, sp, #0
 8106bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8106bb8:	bf00      	nop
 8106bba:	370c      	adds	r7, #12
 8106bbc:	46bd      	mov	sp, r7
 8106bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106bc2:	4770      	bx	lr

08106bc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8106bc4:	b480      	push	{r7}
 8106bc6:	b083      	sub	sp, #12
 8106bc8:	af00      	add	r7, sp, #0
 8106bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8106bcc:	bf00      	nop
 8106bce:	370c      	adds	r7, #12
 8106bd0:	46bd      	mov	sp, r7
 8106bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106bd6:	4770      	bx	lr

08106bd8 <memset>:
 8106bd8:	4402      	add	r2, r0
 8106bda:	4603      	mov	r3, r0
 8106bdc:	4293      	cmp	r3, r2
 8106bde:	d100      	bne.n	8106be2 <memset+0xa>
 8106be0:	4770      	bx	lr
 8106be2:	f803 1b01 	strb.w	r1, [r3], #1
 8106be6:	e7f9      	b.n	8106bdc <memset+0x4>

08106be8 <__libc_init_array>:
 8106be8:	b570      	push	{r4, r5, r6, lr}
 8106bea:	4d0d      	ldr	r5, [pc, #52]	; (8106c20 <__libc_init_array+0x38>)
 8106bec:	4c0d      	ldr	r4, [pc, #52]	; (8106c24 <__libc_init_array+0x3c>)
 8106bee:	1b64      	subs	r4, r4, r5
 8106bf0:	10a4      	asrs	r4, r4, #2
 8106bf2:	2600      	movs	r6, #0
 8106bf4:	42a6      	cmp	r6, r4
 8106bf6:	d109      	bne.n	8106c0c <__libc_init_array+0x24>
 8106bf8:	4d0b      	ldr	r5, [pc, #44]	; (8106c28 <__libc_init_array+0x40>)
 8106bfa:	4c0c      	ldr	r4, [pc, #48]	; (8106c2c <__libc_init_array+0x44>)
 8106bfc:	f000 f826 	bl	8106c4c <_init>
 8106c00:	1b64      	subs	r4, r4, r5
 8106c02:	10a4      	asrs	r4, r4, #2
 8106c04:	2600      	movs	r6, #0
 8106c06:	42a6      	cmp	r6, r4
 8106c08:	d105      	bne.n	8106c16 <__libc_init_array+0x2e>
 8106c0a:	bd70      	pop	{r4, r5, r6, pc}
 8106c0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8106c10:	4798      	blx	r3
 8106c12:	3601      	adds	r6, #1
 8106c14:	e7ee      	b.n	8106bf4 <__libc_init_array+0xc>
 8106c16:	f855 3b04 	ldr.w	r3, [r5], #4
 8106c1a:	4798      	blx	r3
 8106c1c:	3601      	adds	r6, #1
 8106c1e:	e7f2      	b.n	8106c06 <__libc_init_array+0x1e>
 8106c20:	081078d0 	.word	0x081078d0
 8106c24:	081078d0 	.word	0x081078d0
 8106c28:	081078d0 	.word	0x081078d0
 8106c2c:	081078d4 	.word	0x081078d4

08106c30 <memcpy>:
 8106c30:	440a      	add	r2, r1
 8106c32:	4291      	cmp	r1, r2
 8106c34:	f100 33ff 	add.w	r3, r0, #4294967295
 8106c38:	d100      	bne.n	8106c3c <memcpy+0xc>
 8106c3a:	4770      	bx	lr
 8106c3c:	b510      	push	{r4, lr}
 8106c3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8106c42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8106c46:	4291      	cmp	r1, r2
 8106c48:	d1f9      	bne.n	8106c3e <memcpy+0xe>
 8106c4a:	bd10      	pop	{r4, pc}

08106c4c <_init>:
 8106c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8106c4e:	bf00      	nop
 8106c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8106c52:	bc08      	pop	{r3}
 8106c54:	469e      	mov	lr, r3
 8106c56:	4770      	bx	lr

08106c58 <_fini>:
 8106c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8106c5a:	bf00      	nop
 8106c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8106c5e:	bc08      	pop	{r3}
 8106c60:	469e      	mov	lr, r3
 8106c62:	4770      	bx	lr
